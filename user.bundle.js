/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, callbacks = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId])
/******/ 				callbacks.push.apply(callbacks, installedChunks[chunkId]);
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			modules[moduleId] = moreModules[moduleId];
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);
/******/ 		while(callbacks.length)
/******/ 			callbacks.shift().call(null, __webpack_require__);
/******/ 		if(moreModules[0]) {
/******/ 			installedModules[0] = 0;
/******/ 			return __webpack_require__(0);
/******/ 		}
/******/ 	};

/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// object to store loaded and loading chunks
/******/ 	// "0" means "already loaded"
/******/ 	// Array means "loading", array contains callbacks
/******/ 	var installedChunks = {
/******/ 		4:0
/******/ 	};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}

/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId, callback) {
/******/ 		// "0" is the signal for "already loaded"
/******/ 		if(installedChunks[chunkId] === 0)
/******/ 			return callback.call(null, __webpack_require__);

/******/ 		// an array means "currently loading".
/******/ 		if(installedChunks[chunkId] !== undefined) {
/******/ 			installedChunks[chunkId].push(callback);
/******/ 		} else {
/******/ 			// start chunk loading
/******/ 			installedChunks[chunkId] = [callback];
/******/ 			var head = document.getElementsByTagName('head')[0];
/******/ 			var script = document.createElement('script');
/******/ 			script.type = 'text/javascript';
/******/ 			script.charset = 'utf-8';
/******/ 			script.async = true;

/******/ 			script.src = __webpack_require__.p + "" + chunkId + "." + ({"0":"app","1":"routeviews","2":"routecontrollers","3":"ffdcommon"}[chunkId]||chunkId) + ".bundle.js";
/******/ 			head.appendChild(script);
/******/ 		}
/******/ 	};

/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(339);
	__webpack_require__(341);
	__webpack_require__(349);
	__webpack_require__(365);
	__webpack_require__(367);
	__webpack_require__(370);
	__webpack_require__(371);
	__webpack_require__(373);
	__webpack_require__(375);
	__webpack_require__(377);
	__webpack_require__(379);
	__webpack_require__(381);
	__webpack_require__(383);
	__webpack_require__(384);
	__webpack_require__(386);
	__webpack_require__(388);
	__webpack_require__(390);
	__webpack_require__(396);
	__webpack_require__(399);
	__webpack_require__(400);
	__webpack_require__(402);
	__webpack_require__(403);
	__webpack_require__(405);
	__webpack_require__(407);
	__webpack_require__(409);
	__webpack_require__(410);
	__webpack_require__(412);
	__webpack_require__(413);
	__webpack_require__(414);
	__webpack_require__(415);
	module.exports = __webpack_require__(416);


/***/ },

/***/ 339:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/**
	 * @license
	 * lodash 3.10.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern -d -o ./index.js`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	;(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;

	  /** Used as the semantic version number. */
	  var VERSION = '3.10.1';

	  /** Used to compose bitmasks for wrapper metadata. */
	  var BIND_FLAG = 1,
	      BIND_KEY_FLAG = 2,
	      CURRY_BOUND_FLAG = 4,
	      CURRY_FLAG = 8,
	      CURRY_RIGHT_FLAG = 16,
	      PARTIAL_FLAG = 32,
	      PARTIAL_RIGHT_FLAG = 64,
	      ARY_FLAG = 128,
	      REARG_FLAG = 256;

	  /** Used as default options for `_.trunc`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect when a function becomes hot. */
	  var HOT_COUNT = 150,
	      HOT_SPAN = 16;

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2;

	  /** Used as the `TypeError` message for "Functions" methods. */
	  var FUNC_ERROR_TEXT = 'Expected a function';

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      objectTag = '[object Object]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      weakMapTag = '[object WeakMap]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
	      reUnescapedHtml = /[&<>"'`]/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

	  /**
	   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
	   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
	   */
	  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
	      reHasRegExpChars = RegExp(reRegExpChars.source);

	  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
	  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect hexadecimal string values. */
	  var reHasHexPrefix = /^0[xX]/;

	  /** Used to detect host constructors (Safari > 5). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^\d+$/;

	  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
	  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to match words to create compound words. */
	  var reWords = (function() {
	    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
	        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

	    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
	  }());

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
	    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',
	    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
	  cloneableTags[dateTag] = cloneableTags[float32Tag] =
	  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
	  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[stringTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[mapTag] = cloneableTags[setTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map latin-1 supplementary letters to basic latin letters. */
	  var deburredLetters = {
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;',
	    '`': '&#96;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'",
	    '&#96;': '`'
	  };

	  /** Used to determine if values are of the language type `Object`. */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };

	  /** Used to escape characters for inclusion in compiled regexes. */
	  var regexpEscapes = {
	    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
	    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
	    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
	    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
	    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Detect free variable `exports`. */
	  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

	  /** Detect free variable `module`. */
	  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

	  /** Detect free variable `self`. */
	  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

	  /** Detect free variable `window`. */
	  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

	  /**
	   * Used as a reference to the global object.
	   *
	   * The `this` value is used if it's the global object to avoid Greasemonkey's
	   * restricted `window` object, otherwise the `window` object is used.
	   */
	  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * The base implementation of `compareAscending` which compares values and
	   * sorts them in ascending order without guaranteeing a stable sort.
	   *
	   * @private
	   * @param {*} value The value to compare.
	   * @param {*} other The other value to compare.
	   * @returns {number} Returns the sort order indicator for `value`.
	   */
	  function baseCompareAscending(value, other) {
	    if (value !== other) {
	      var valIsNull = value === null,
	          valIsUndef = value === undefined,
	          valIsReflexive = value === value;

	      var othIsNull = other === null,
	          othIsUndef = other === undefined,
	          othIsReflexive = other === other;

	      if ((value > other && !othIsNull) || !valIsReflexive ||
	          (valIsNull && !othIsUndef && othIsReflexive) ||
	          (valIsUndef && othIsReflexive)) {
	        return 1;
	      }
	      if ((value < other && !valIsNull) || !othIsReflexive ||
	          (othIsNull && !valIsUndef && valIsReflexive) ||
	          (othIsUndef && valIsReflexive)) {
	        return -1;
	      }
	    }
	    return 0;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromRight) {
	    var length = array.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without support for binary searches.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    if (value !== value) {
	      return indexOfNaN(array, fromIndex);
	    }
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.isFunction` without support for environments
	   * with incorrect `typeof` results.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	   */
	  function baseIsFunction(value) {
	    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
	    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
	    return typeof value == 'function' || false;
	  }

	  /**
	   * Converts `value` to a string if it's not one. An empty string is returned
	   * for `null` or `undefined` values.
	   *
	   * @private
	   * @param {*} value The value to process.
	   * @returns {string} Returns the string.
	   */
	  function baseToString(value) {
	    return value == null ? '' : (value + '');
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the first character not found in `chars`.
	   */
	  function charsLeftIndex(string, chars) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the last character not found in `chars`.
	   */
	  function charsRightIndex(string, chars) {
	    var index = string.length;

	    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.sortBy` to compare transformed elements of a collection and stable
	   * sort them in ascending order.
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareAscending(object, other) {
	    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
	  }

	  /**
	   * Used by `_.sortByOrder` to compare multiple properties of a value to another
	   * and stable sort them.
	   *
	   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
	   * a value is sorted in ascending order if its corresponding order is "asc", and
	   * descending if "desc".
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @param {boolean[]} orders The order to sort by for each property.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareMultiple(object, other, orders) {
	    var index = -1,
	        objCriteria = object.criteria,
	        othCriteria = other.criteria,
	        length = objCriteria.length,
	        ordersLength = orders.length;

	    while (++index < length) {
	      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
	      if (result) {
	        if (index >= ordersLength) {
	          return result;
	        }
	        var order = orders[index];
	        return result * ((order === 'asc' || order === true) ? 1 : -1);
	      }
	    }
	    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	    // that causes it, under certain circumstances, to provide the same value for
	    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	    // for more details.
	    //
	    // This also ensures a stable sort in V8 and other engines.
	    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
	    return object.index - other.index;
	  }

	  /**
	   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  function deburrLetter(letter) {
	    return deburredLetters[letter];
	  }

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeHtmlChar(chr) {
	    return htmlEscapes[chr];
	  }

	  /**
	   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @param {string} leadingChar The capture group for a leading character.
	   * @param {string} whitespaceChar The capture group for a whitespace character.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
	    if (leadingChar) {
	      chr = regexpEscapes[chr];
	    } else if (whitespaceChar) {
	      chr = stringEscapes[chr];
	    }
	    return '\\' + chr;
	  }

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the index at which the first occurrence of `NaN` is found in `array`.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	   */
	  function indexOfNaN(array, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 0 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      var other = array[index];
	      if (other !== other) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * Checks if `value` is object-like.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	   */
	  function isObjectLike(value) {
	    return !!value && typeof value == 'object';
	  }

	  /**
	   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
	   * character code is whitespace.
	   *
	   * @private
	   * @param {number} charCode The character code to inspect.
	   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
	   */
	  function isSpace(charCode) {
	    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
	      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      if (array[index] === placeholder) {
	        array[index] = PLACEHOLDER;
	        result[++resIndex] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * An implementation of `_.uniq` optimized for sorted arrays without support
	   * for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} [iteratee] The function invoked per iteration.
	   * @returns {Array} Returns the new duplicate-value-free array.
	   */
	  function sortedUniq(array, iteratee) {
	    var seen,
	        index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      var value = array[index],
	          computed = iteratee ? iteratee(value, index, array) : value;

	      if (!index || seen !== computed) {
	        seen = computed;
	        result[++resIndex] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the first non-whitespace character.
	   */
	  function trimmedLeftIndex(string) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the last non-whitespace character.
	   */
	  function trimmedRightIndex(string) {
	    var index = string.length;

	    while (index-- && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  function unescapeHtmlChar(chr) {
	    return htmlUnescapes[chr];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the given `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @category Utility
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // using `context` to mock `Date#getTime` use in `_.now`
	   * var mock = _.runInContext({
	   *   'Date': function() {
	   *     return { 'getTime': getTimeMock };
	   *   }
	   * });
	   *
	   * // or creating a suped-up `defer` in Node.js
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  function runInContext(context) {
	    // Avoid issues with some ES3 environments that attempt to use values, named
	    // after built-in constructors like `Object`, for the creation of literals.
	    // ES5 clears this up by stating that literals must use built-in constructors.
	    // See https://es5.github.io/#x11.1.5 for more details.
	    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

	    /** Native constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Number = context.Number,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /** Used for native method references. */
	    var arrayProto = Array.prototype,
	        objectProto = Object.prototype,
	        stringProto = String.prototype;

	    /** Used to resolve the decompiled source of functions. */
	    var fnToString = Function.prototype.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /**
	     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var objToString = objectProto.toString;

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Native method references. */
	    var ArrayBuffer = context.ArrayBuffer,
	        clearTimeout = context.clearTimeout,
	        parseFloat = context.parseFloat,
	        pow = Math.pow,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        Set = getNative(context, 'Set'),
	        setTimeout = context.setTimeout,
	        splice = arrayProto.splice,
	        Uint8Array = context.Uint8Array,
	        WeakMap = getNative(context, 'WeakMap');

	    /* Native method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeCreate = getNative(Object, 'create'),
	        nativeFloor = Math.floor,
	        nativeIsArray = getNative(Array, 'isArray'),
	        nativeIsFinite = context.isFinite,
	        nativeKeys = getNative(Object, 'keys'),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = getNative(Date, 'now'),
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random;

	    /** Used as references for `-Infinity` and `Infinity`. */
	    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
	        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

	    /** Used as references for the maximum length and index of an array. */
	    var MAX_ARRAY_LENGTH = 4294967295,
	        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	    /**
	     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	     * of an array-like value.
	     */
	    var MAX_SAFE_INTEGER = 9007199254740991;

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
	     * Methods that operate on and return arrays, collections, and functions can
	     * be chained together. Methods that retrieve a single value or may return a
	     * primitive value will automatically end the chain returning the unwrapped
	     * value. Explicit chaining may be enabled using `_.chain`. The execution of
	     * chained methods is lazy, that is, execution is deferred until `_#value`
	     * is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
	     * fusion is an optimization strategy which merge iteratee calls; this can help
	     * to avoid the creation of intermediate data structures and greatly reduce the
	     * number of iteratee executions.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
	     * `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
	     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
	     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
	     * and `where`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
	     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
	     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
	     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
	     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
	     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
	     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
	     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
	     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
	     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
	     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
	     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
	     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
	     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
	     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
	     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
	     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
	     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
	     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
	     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
	     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
	     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
	     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
	     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
	     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
	     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
	     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
	     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
	     * `unescape`, `uniqueId`, `value`, and `words`
	     *
	     * The wrapper method `sample` will return a wrapped value when `n` is provided,
	     * otherwise an unwrapped value is returned.
	     *
	     * @name _
	     * @constructor
	     * @category Chain
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // returns an unwrapped value
	     * wrapped.reduce(function(total, n) {
	     *   return total + n;
	     * });
	     * // => 6
	     *
	     * // returns a wrapped value
	     * var squares = wrapped.map(function(n) {
	     *   return n * n;
	     * });
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The function whose prototype all chaining wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
	     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
	     */
	    function LodashWrapper(value, chainAll, actions) {
	      this.__wrapped__ = value;
	      this.__actions__ = actions || [];
	      this.__chain__ = !!chainAll;
	    }

	    /**
	     * An object environment feature flags.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    var support = lodash.support = {};

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type string
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type Object
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type Function
	         */
	        '_': lodash
	      }
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = POSITIVE_INFINITY;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = arrayCopy(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = arrayCopy(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = arrayCopy(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
	        return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a cache object to store key/value pairs.
	     *
	     * @private
	     * @static
	     * @name Cache
	     * @memberOf _.memoize
	     */
	    function MapCache() {
	      this.__data__ = {};
	    }

	    /**
	     * Removes `key` and its value from the cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
	     */
	    function mapDelete(key) {
	      return this.has(key) && delete this.__data__[key];
	    }

	    /**
	     * Gets the cached value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the cached value.
	     */
	    function mapGet(key) {
	      return key == '__proto__' ? undefined : this.__data__[key];
	    }

	    /**
	     * Checks if a cached value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapHas(key) {
	      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
	    }

	    /**
	     * Sets `value` to `key` of the cache.
	     *
	     * @private
	     * @name set
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to cache.
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache object.
	     */
	    function mapSet(key, value) {
	      if (key != '__proto__') {
	        this.__data__[key] = value;
	      }
	      return this;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates a cache object to store unique values.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var length = values ? values.length : 0;

	      this.data = { 'hash': nativeCreate(null), 'set': new Set };
	      while (length--) {
	        this.push(values[length]);
	      }
	    }

	    /**
	     * Checks if `value` is in `cache` mimicking the return signature of
	     * `_.indexOf` by returning `0` if the value is found, else `-1`.
	     *
	     * @private
	     * @param {Object} cache The cache to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `0` if `value` is found, else `-1`.
	     */
	    function cacheIndexOf(cache, value) {
	      var data = cache.data,
	          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

	      return result ? 0 : -1;
	    }

	    /**
	     * Adds `value` to the cache.
	     *
	     * @private
	     * @name push
	     * @memberOf SetCache
	     * @param {*} value The value to cache.
	     */
	    function cachePush(value) {
	      var data = this.data;
	      if (typeof value == 'string' || isObject(value)) {
	        data.set.add(value);
	      } else {
	        data.hash[value] = true;
	      }
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a new array joining `array` with `other`.
	     *
	     * @private
	     * @param {Array} array The array to join.
	     * @param {Array} other The other array to join.
	     * @returns {Array} Returns the new concatenated array.
	     */
	    function arrayConcat(array, other) {
	      var index = -1,
	          length = array.length,
	          othIndex = -1,
	          othLength = other.length,
	          result = Array(length + othLength);

	      while (++index < length) {
	        result[index] = array[index];
	      }
	      while (++othIndex < othLength) {
	        result[index++] = other[othIndex];
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayCopy(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEach` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEach(array, iteratee) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (iteratee(array[index], index, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEachRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEachRight(array, iteratee) {
	      var length = array.length;

	      while (length--) {
	        if (iteratee(array[length], length, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.every` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     */
	    function arrayEvery(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (!predicate(array[index], index, array)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
	     * with one argument: (value).
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function arrayExtremum(array, iteratee, comparator, exValue) {
	      var index = -1,
	          length = array.length,
	          computed = exValue,
	          result = computed;

	      while (++index < length) {
	        var value = array[index],
	            current = +iteratee(value);

	        if (comparator(current, computed)) {
	          computed = current;
	          result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.filter` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function arrayFilter(array, predicate) {
	      var index = -1,
	          length = array.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.map` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function arrayMap(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = iteratee(array[index], index, array);
	      }
	      return result;
	    }

	    /**
	     * Appends the elements of `values` to `array`.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to append.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayPush(array, values) {
	      var index = -1,
	          length = values.length,
	          offset = array.length;

	      while (++index < length) {
	        array[offset + index] = values[index];
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.reduce` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the first element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduce(array, iteratee, accumulator, initFromArray) {
	      var index = -1,
	          length = array.length;

	      if (initFromArray && length) {
	        accumulator = array[++index];
	      }
	      while (++index < length) {
	        accumulator = iteratee(accumulator, array[index], index, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.reduceRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the last element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
	      var length = array.length;
	      if (initFromArray && length) {
	        accumulator = array[--length];
	      }
	      while (length--) {
	        accumulator = iteratee(accumulator, array[length], length, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.some` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function arraySome(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (predicate(array[index], index, array)) {
	          return true;
	        }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `_.sum` for arrays without support for callback
	     * shorthands and `this` binding..
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function arraySum(array, iteratee) {
	      var length = array.length,
	          result = 0;

	      while (length--) {
	        result += +iteratee(array[length]) || 0;
	      }
	      return result;
	    }

	    /**
	     * Used by `_.defaults` to customize its `_.assign` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : objectValue;
	    }

	    /**
	     * Used by `_.template` to customize its `_.assign` use.
	     *
	     * **Note:** This function is like `assignDefaults` except that it ignores
	     * inherited property values when checking if a property is `undefined`.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @param {string} key The key associated with the object and source values.
	     * @param {Object} object The destination object.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignOwnDefaults(objectValue, sourceValue, key, object) {
	      return (objectValue === undefined || !hasOwnProperty.call(object, key))
	        ? sourceValue
	        : objectValue;
	    }

	    /**
	     * A specialized version of `_.assign` for customizing assigned values without
	     * support for argument juggling, multiple sources, and `this` binding `customizer`
	     * functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     */
	    function assignWith(object, source, customizer) {
	      var index = -1,
	          props = keys(source),
	          length = props.length;

	      while (++index < length) {
	        var key = props[index],
	            value = object[key],
	            result = customizer(value, source[key], key, object, source);

	        if ((result === result ? (result !== value) : (value === value)) ||
	            (value === undefined && !(key in object))) {
	          object[key] = result;
	        }
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.assign` without support for argument juggling,
	     * multiple sources, and `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return source == null
	        ? object
	        : baseCopy(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.at` without support for string collections
	     * and individual key arguments.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {number[]|string[]} props The property names or indexes of elements to pick.
	     * @returns {Array} Returns the new array of picked elements.
	     */
	    function baseAt(collection, props) {
	      var index = -1,
	          isNil = collection == null,
	          isArr = !isNil && isArrayLike(collection),
	          length = isArr ? collection.length : 0,
	          propsLength = props.length,
	          result = Array(propsLength);

	      while(++index < propsLength) {
	        var key = props[index];
	        if (isArr) {
	          result[index] = isIndex(key, length) ? collection[key] : undefined;
	        } else {
	          result[index] = isNil ? undefined : collection[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property names to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @returns {Object} Returns `object`.
	     */
	    function baseCopy(source, props, object) {
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];
	        object[key] = source[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.callback` which supports specifying the
	     * number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function baseCallback(func, thisArg, argCount) {
	      var type = typeof func;
	      if (type == 'function') {
	        return thisArg === undefined
	          ? func
	          : bindCallback(func, thisArg, argCount);
	      }
	      if (func == null) {
	        return identity;
	      }
	      if (type == 'object') {
	        return baseMatches(func);
	      }
	      return thisArg === undefined
	        ? property(func)
	        : baseMatchesProperty(func, thisArg);
	    }

	    /**
	     * The base implementation of `_.clone` without support for argument juggling
	     * and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The object `value` belongs to.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates clones with source counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
	      var result;
	      if (customizer) {
	        result = object ? customizer(value, key, object) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return arrayCopy(value, result);
	        }
	      } else {
	        var tag = objToString.call(value),
	            isFunc = tag == funcTag;

	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = initCloneObject(isFunc ? {} : value);
	          if (!isDeep) {
	            return baseAssign(result, value);
	          }
	        } else {
	          return cloneableTags[tag]
	            ? initCloneByTag(value, tag, isDeep)
	            : (object ? value : {});
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == value) {
	          return stackB[length];
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate it with its clone.
	      stackA.push(value);
	      stackB.push(result);

	      // Recursively populate clone (susceptible to call stack limits).
	      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
	        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} prototype The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(prototype) {
	        if (isObject(prototype)) {
	          object.prototype = prototype;
	          var result = new object;
	          object.prototype = undefined;
	        }
	        return result || {};
	      };
	    }());

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts an index
	     * of where to slice the arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Object} args The arguments provide to `func`.
	     * @returns {number} Returns the timer id.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }

	    /**
	     * The base implementation of `_.difference` which accepts a single array
	     * of values to exclude.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values) {
	      var length = array ? array.length : 0,
	          result = [];

	      if (!length) {
	        return result;
	      }
	      var index = -1,
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
	          valuesLength = values.length;

	      if (cache) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	        values = cache;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index];

	        if (isCommon && value === value) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === value) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (indexOf(values, value, 0) < 0) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * Gets the extremum value of `collection` invoking `iteratee` for each value
	     * in `collection` to generate the criterion by which the value is ranked.
	     * The `iteratee` is invoked with three arguments: (value, index|key, collection).
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(collection, iteratee, comparator, exValue) {
	      var computed = exValue,
	          result = computed;

	      baseEach(collection, function(value, index, collection) {
	        var current = +iteratee(value, index, collection);
	        if (comparator(current, computed) || (current === exValue && current === result)) {
	          computed = current;
	          result = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : (end >>> 0);
	      start >>>= 0;

	      while (start < length) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
	     * without support for callback shorthands and `this` binding, which iterates
	     * over `collection` using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @param {boolean} [retKey] Specify returning the key of the found element
	     *  instead of the element itself.
	     * @returns {*} Returns the found element or its key, else `undefined`.
	     */
	    function baseFind(collection, predicate, eachFunc, retKey) {
	      var result;
	      eachFunc(collection, function(value, key, collection) {
	        if (predicate(value, key, collection)) {
	          result = retKey ? key : value;
	          return false;
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with added support for restricting
	     * flattening and specifying the start index.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, isDeep, isStrict, result) {
	      result || (result = []);

	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        var value = array[index];
	        if (isObjectLike(value) && isArrayLike(value) &&
	            (isStrict || isArray(value) || isArguments(value))) {
	          if (isDeep) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, isDeep, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForIn` and `baseForOwn` which iterates
	     * over `object` properties returned by `keysFunc` invoking `iteratee` for
	     * each property. Iteratee functions may exit iteration early by explicitly
	     * returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forIn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForIn(object, iteratee) {
	      return baseFor(object, iteratee, keysIn);
	    }

	    /**
	     * The base implementation of `_.forOwn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from those provided.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the new array of filtered property names.
	     */
	    function baseFunctions(object, props) {
	      var index = -1,
	          length = props.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var key = props[index];
	        if (isFunction(object[key])) {
	          result[++resIndex] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `get` without support for string paths
	     * and default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path of the property to get.
	     * @param {string} [pathKey] The key representation of path.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path, pathKey) {
	      if (object == null) {
	        return;
	      }
	      if (pathKey !== undefined && pathKey in toObject(object)) {
	        path = [pathKey];
	      }
	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = object[path[index++]];
	      }
	      return (index && index == length) ? object : undefined;
	    }

	    /**
	     * The base implementation of `_.isEqual` without support for `this` binding
	     * `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
	     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = arrayTag,
	          othTag = arrayTag;

	      if (!objIsArr) {
	        objTag = objToString.call(object);
	        if (objTag == argsTag) {
	          objTag = objectTag;
	        } else if (objTag != objectTag) {
	          objIsArr = isTypedArray(object);
	        }
	      }
	      if (!othIsArr) {
	        othTag = objToString.call(other);
	        if (othTag == argsTag) {
	          othTag = objectTag;
	        } else if (othTag != objectTag) {
	          othIsArr = isTypedArray(other);
	        }
	      }
	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;

	      if (isSameTag && !(objIsArr || objIsObj)) {
	        return equalByTag(object, other, objTag);
	      }
	      if (!isLoose) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      // For more information on detecting circular references see https://es5.github.io/#JO.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == object) {
	          return stackB[length] == other;
	        }
	      }
	      // Add `object` and `other` to the stack of traversed objects.
	      stackA.push(object);
	      stackB.push(other);

	      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

	      stackA.pop();
	      stackB.pop();

	      return result;
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} matchData The propery names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = toObject(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined && !(key in object)) {
	            return false;
	          }
	        } else {
	          var result = customizer ? customizer(objValue, srcValue, key) : undefined;
	          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.map` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which does not clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        var key = matchData[0][0],
	            value = matchData[0][1];

	        return function(object) {
	          if (object == null) {
	            return false;
	          }
	          return object[key] === value && (value !== undefined || (key in toObject(object)));
	        };
	      }
	      return function(object) {
	        return baseIsMatch(object, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to compare.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      var isArr = isArray(path),
	          isCommon = isKey(path) && isStrictComparable(srcValue),
	          pathKey = (path + '');

	      path = toPath(path);
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        var key = pathKey;
	        object = toObject(object);
	        if ((isArr || !isCommon) && !(key in object)) {
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          if (object == null) {
	            return false;
	          }
	          key = last(path);
	          object = toObject(object);
	        }
	        return object[key] === srcValue
	          ? (srcValue !== undefined || (key in object))
	          : baseIsEqual(srcValue, object[key], undefined, true);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for argument juggling,
	     * multiple sources, and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {Object} Returns `object`.
	     */
	    function baseMerge(object, source, customizer, stackA, stackB) {
	      if (!isObject(object)) {
	        return object;
	      }
	      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
	          props = isSrcArr ? undefined : keys(source);

	      arrayEach(props || source, function(srcValue, key) {
	        if (props) {
	          key = srcValue;
	          srcValue = source[key];
	        }
	        if (isObjectLike(srcValue)) {
	          stackA || (stackA = []);
	          stackB || (stackB = []);
	          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
	        }
	        else {
	          var value = object[key],
	              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	              isCommon = result === undefined;

	          if (isCommon) {
	            result = srcValue;
	          }
	          if ((result !== undefined || (isSrcArr && !(key in object))) &&
	              (isCommon || (result === result ? (result !== value) : (value === value)))) {
	            object[key] = result;
	          }
	        }
	      });
	      return object;
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
	      var length = stackA.length,
	          srcValue = source[key];

	      while (length--) {
	        if (stackA[length] == srcValue) {
	          object[key] = stackB[length];
	          return;
	        }
	      }
	      var value = object[key],
	          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	          isCommon = result === undefined;

	      if (isCommon) {
	        result = srcValue;
	        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
	          result = isArray(value)
	            ? value
	            : (isArrayLike(value) ? arrayCopy(value) : []);
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          result = isArguments(value)
	            ? toPlainObject(value)
	            : (isPlainObject(value) ? value : {});
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate
	      // it with its merged value.
	      stackA.push(srcValue);
	      stackB.push(result);

	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
	      } else if (result === result ? (result !== value) : (value === value)) {
	        object[key] = result;
	      }
	    }

	    /**
	     * The base implementation of `_.property` without support for deep paths.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function baseProperty(key) {
	      return function(object) {
	        return object == null ? undefined : object[key];
	      };
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function basePropertyDeep(path) {
	      var pathKey = (path + '');
	      path = toPath(path);
	      return function(object) {
	        return baseGet(object, path, pathKey);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * index arguments and capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0;
	      while (length--) {
	        var index = indexes[length];
	        if (index != previous && isIndex(index)) {
	          var previous = index;
	          splice.call(array, index, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for argument juggling
	     * and returning floating-point numbers.
	     *
	     * @private
	     * @param {number} min The minimum possible value.
	     * @param {number} max The maximum possible value.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(min, max) {
	      return min + nativeFloor(nativeRandom() * (max - min + 1));
	    }

	    /**
	     * The base implementation of `_.reduce` and `_.reduceRight` without support
	     * for callback shorthands and `this` binding, which iterates over `collection`
	     * using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} accumulator The initial value.
	     * @param {boolean} initFromCollection Specify using the first or last element
	     *  of `collection` as the initial value.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @returns {*} Returns the accumulated value.
	     */
	    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
	      eachFunc(collection, function(value, index, collection) {
	        accumulator = initFromCollection
	          ? (initFromCollection = false, value)
	          : iteratee(accumulator, value, index, collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop detection.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortBy` which uses `comparer` to define
	     * the sort order of `array` and replaces criteria objects with their
	     * corresponding values.
	     *
	     * @private
	     * @param {Array} array The array to sort.
	     * @param {Function} comparer The function to define sort order.
	     * @returns {Array} Returns `array`.
	     */
	    function baseSortBy(array, comparer) {
	      var length = array.length;

	      array.sort(comparer);
	      while (length--) {
	        array[length] = array[length].value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.sortByOrder` without param guards.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseSortByOrder(collection, iteratees, orders) {
	      var callback = getCallback(),
	          index = -1;

	      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

	      var result = baseMap(collection, function(value) {
	        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.sum` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function baseSum(collection, iteratee) {
	      var result = 0;
	      baseEach(collection, function(value, index, collection) {
	        result += +iteratee(value, index, collection) || 0;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.uniq` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The function invoked per iteration.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     */
	    function baseUniq(array, iteratee) {
	      var index = -1,
	          indexOf = getIndexOf(),
	          length = array.length,
	          isCommon = indexOf == baseIndexOf,
	          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
	          seen = isLarge ? createCache() : null,
	          result = [];

	      if (seen) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	      } else {
	        isLarge = false;
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value, index, array) : value;

	        if (isCommon && value === value) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (indexOf(seen, computed, 0) < 0) {
	          if (iteratee || isLarge) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.values` and `_.valuesIn` which creates an
	     * array of `object` property values corresponding to the property names
	     * of `props`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} props The property names to get values for.
	     * @returns {Object} Returns the array of property values.
	     */
	    function baseValues(object, props) {
	      var index = -1,
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = object[props[index]];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
	     * and `_.takeWhile` without support for callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to peform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      var index = -1,
	          length = actions.length;

	      while (++index < length) {
	        var action = actions[index];
	        result = action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }
	      return result;
	    }

	    /**
	     * Performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndex(array, value, retHighest) {
	      var low = 0,
	          high = array ? array.length : low;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return binaryIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * This function is like `binaryIndex` except that it invokes `iteratee` for
	     * `value` and each element of `array` to compute their sort ranking. The
	     * iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);

	      var low = 0,
	          high = array ? array.length : 0,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsUndef = value === undefined;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            isDef = computed !== undefined,
	            isReflexive = computed === computed;

	        if (valIsNaN) {
	          var setLow = isReflexive || retHighest;
	        } else if (valIsNull) {
	          setLow = isReflexive && isDef && (retHighest || computed != null);
	        } else if (valIsUndef) {
	          setLow = isReflexive && (retHighest || isDef);
	        } else if (computed == null) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * A specialized version of `baseCallback` which only supports `this` binding
	     * and specifying the number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function bindCallback(func, thisArg, argCount) {
	      if (typeof func != 'function') {
	        return identity;
	      }
	      if (thisArg === undefined) {
	        return func;
	      }
	      switch (argCount) {
	        case 1: return function(value) {
	          return func.call(thisArg, value);
	        };
	        case 3: return function(value, index, collection) {
	          return func.call(thisArg, value, index, collection);
	        };
	        case 4: return function(accumulator, value, index, collection) {
	          return func.call(thisArg, accumulator, value, index, collection);
	        };
	        case 5: return function(value, other, key, object, source) {
	          return func.call(thisArg, value, other, key, object, source);
	        };
	      }
	      return function() {
	        return func.apply(thisArg, arguments);
	      };
	    }

	    /**
	     * Creates a clone of the given array buffer.
	     *
	     * @private
	     * @param {ArrayBuffer} buffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function bufferClone(buffer) {
	      var result = new ArrayBuffer(buffer.byteLength),
	          view = new Uint8Array(result);

	      view.set(new Uint8Array(buffer));
	      return result;
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders) {
	      var holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          leftIndex = -1,
	          leftLength = partials.length,
	          result = Array(leftLength + argsLength);

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        result[holders[argsIndex]] = args[argsIndex];
	      }
	      while (argsLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders) {
	      var holdersIndex = -1,
	          holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          rightIndex = -1,
	          rightLength = partials.length,
	          result = Array(argsLength + rightLength);

	      while (++argsIndex < argsLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        result[offset + holders[holdersIndex]] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
	     *
	     * @private
	     * @param {Function} setter The function to set keys and values of the accumulator object.
	     * @param {Function} [initializer] The function to initialize the accumulator object.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee, thisArg) {
	        var result = initializer ? initializer() : {};
	        iteratee = getCallback(iteratee, thisArg, 3);

	        if (isArray(collection)) {
	          var index = -1,
	              length = collection.length;

	          while (++index < length) {
	            var value = collection[index];
	            setter(result, value, iteratee(value, index, collection), collection);
	          }
	        } else {
	          baseEach(collection, function(value, key, collection) {
	            setter(result, value, iteratee(value, key, collection), collection);
	          });
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return restParam(function(object, sources) {
	        var index = -1,
	            length = object == null ? 0 : sources.length,
	            customizer = length > 2 ? sources[length - 2] : undefined,
	            guard = length > 2 ? sources[2] : undefined,
	            thisArg = length > 1 ? sources[length - 1] : undefined;

	        if (typeof customizer == 'function') {
	          customizer = bindCallback(customizer, thisArg, 5);
	          length -= 2;
	        } else {
	          customizer = typeof thisArg == 'function' ? thisArg : undefined;
	          length -= (customizer ? 1 : 0);
	        }
	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined : customizer;
	          length = 1;
	        }
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        var length = collection ? getLength(collection) : 0;
	        if (!isLength(length)) {
	          return eachFunc(collection, iteratee);
	        }
	        var index = fromRight ? length : -1,
	            iterable = toObject(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var iterable = toObject(object),
	            props = keysFunc(object),
	            length = props.length,
	            index = fromRight ? length : -1;

	        while ((fromRight ? index-- : ++index < length)) {
	          var key = props[index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createBindWrapper(func, thisArg) {
	      var Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(thisArg, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `Set` cache object to optimize linear searches of large arrays.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
	     */
	    function createCache(values) {
	      return (nativeCreate && Set) ? new SetCache(values) : null;
	    }

	    /**
	     * Creates a function that produces compound words out of the words in a
	     * given string.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        var index = -1,
	            array = words(deburr(string)),
	            length = array.length,
	            result = '';

	        while (++index < length) {
	          result = callback(result, array[index], index);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtorWrapper(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors.
	        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a `_.curry` or `_.curryRight` function.
	     *
	     * @private
	     * @param {boolean} flag The curry bit flag.
	     * @returns {Function} Returns the new curry function.
	     */
	    function createCurry(flag) {
	      function curryFunc(func, arity, guard) {
	        if (guard && isIterateeCall(func, arity, guard)) {
	          arity = undefined;
	        }
	        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
	        result.placeholder = curryFunc.placeholder;
	        return result;
	      }
	      return curryFunc;
	    }

	    /**
	     * Creates a `_.defaults` or `_.defaultsDeep` function.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Function} Returns the new defaults function.
	     */
	    function createDefaults(assigner, customizer) {
	      return restParam(function(args) {
	        var object = args[0];
	        if (object == null) {
	          return object;
	        }
	        args.push(customizer);
	        return assigner.apply(undefined, args);
	      });
	    }

	    /**
	     * Creates a `_.max` or `_.min` function.
	     *
	     * @private
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {Function} Returns the new extremum function.
	     */
	    function createExtremum(comparator, exValue) {
	      return function(collection, iteratee, thisArg) {
	        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	          iteratee = undefined;
	        }
	        iteratee = getCallback(iteratee, thisArg, 3);
	        if (iteratee.length == 1) {
	          collection = isArray(collection) ? collection : toIterable(collection);
	          var result = arrayExtremum(collection, iteratee, comparator, exValue);
	          if (!(collection.length && result === exValue)) {
	            return result;
	          }
	        }
	        return baseExtremum(collection, iteratee, comparator, exValue);
	      };
	    }

	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(eachFunc, fromRight) {
	      return function(collection, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        if (isArray(collection)) {
	          var index = baseFindIndex(collection, predicate, fromRight);
	          return index > -1 ? collection[index] : undefined;
	        }
	        return baseFind(collection, predicate, eachFunc);
	      };
	    }

	    /**
	     * Creates a `_.findIndex` or `_.findLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindIndex(fromRight) {
	      return function(array, predicate, thisArg) {
	        if (!(array && array.length)) {
	          return -1;
	        }
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFindIndex(array, predicate, fromRight);
	      };
	    }

	    /**
	     * Creates a `_.findKey` or `_.findLastKey` function.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindKey(objectFunc) {
	      return function(object, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFind(object, predicate, objectFunc, true);
	      };
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return function() {
	        var wrapper,
	            length = arguments.length,
	            index = fromRight ? length : -1,
	            leftIndex = 0,
	            funcs = Array(length);

	        while ((fromRight ? index-- : ++index < length)) {
	          var func = funcs[leftIndex++] = arguments[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
	            wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? -1 : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined;

	          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      };
	    }

	    /**
	     * Creates a function for `_.forEach` or `_.forEachRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForEach(arrayFunc, eachFunc) {
	      return function(collection, iteratee, thisArg) {
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee)
	          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
	      };
	    }

	    /**
	     * Creates a function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForIn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee, keysIn);
	      };
	    }

	    /**
	     * Creates a function for `_.forOwn` or `_.forOwnRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForOwn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee);
	      };
	    }

	    /**
	     * Creates a function for `_.mapKeys` or `_.mapValues`.
	     *
	     * @private
	     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
	     * @returns {Function} Returns the new map function.
	     */
	    function createObjectMapper(isMapKeys) {
	      return function(object, iteratee, thisArg) {
	        var result = {};
	        iteratee = getCallback(iteratee, thisArg, 3);

	        baseForOwn(object, function(value, key, object) {
	          var mapped = iteratee(value, key, object);
	          key = isMapKeys ? mapped : key;
	          value = isMapKeys ? value : mapped;
	          result[key] = value;
	        });
	        return result;
	      };
	    }

	    /**
	     * Creates a function for `_.padLeft` or `_.padRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify padding from the right.
	     * @returns {Function} Returns the new pad function.
	     */
	    function createPadDir(fromRight) {
	      return function(string, length, chars) {
	        string = baseToString(string);
	        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
	      };
	    }

	    /**
	     * Creates a `_.partial` or `_.partialRight` function.
	     *
	     * @private
	     * @param {boolean} flag The partial bit flag.
	     * @returns {Function} Returns the new partial function.
	     */
	    function createPartial(flag) {
	      var partialFunc = restParam(function(func, partials) {
	        var holders = replaceHolders(partials, partialFunc.placeholder);
	        return createWrapper(func, flag, undefined, partials, holders);
	      });
	      return partialFunc;
	    }

	    /**
	     * Creates a function for `_.reduce` or `_.reduceRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createReduce(arrayFunc, eachFunc) {
	      return function(collection, iteratee, accumulator, thisArg) {
	        var initFromArray = arguments.length < 3;
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
	          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with optional `this`
	     * binding of, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & ARY_FLAG,
	          isBind = bitmask & BIND_FLAG,
	          isBindKey = bitmask & BIND_KEY_FLAG,
	          isCurry = bitmask & CURRY_FLAG,
	          isCurryBound = bitmask & CURRY_BOUND_FLAG,
	          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
	          Ctor = isBindKey ? undefined : createCtorWrapper(func);

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it to other functions.
	        var length = arguments.length,
	            index = length,
	            args = Array(length);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight);
	        }
	        if (isCurry || isCurryRight) {
	          var placeholder = wrapper.placeholder,
	              argsHolders = replaceHolders(args, placeholder);

	          length -= argsHolders.length;
	          if (length < arity) {
	            var newArgPos = argPos ? arrayCopy(argPos) : undefined,
	                newArity = nativeMax(arity - length, 0),
	                newsHolders = isCurry ? argsHolders : undefined,
	                newHoldersRight = isCurry ? undefined : argsHolders,
	                newPartials = isCurry ? args : undefined,
	                newPartialsRight = isCurry ? undefined : args;

	            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

	            if (!isCurryBound) {
	              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	            }
	            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
	                result = createHybridWrapper.apply(undefined, newData);

	            if (isLaziable(func)) {
	              setData(result, newData);
	            }
	            result.placeholder = placeholder;
	            return result;
	          }
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        if (argPos) {
	          args = reorder(args, argPos);
	        }
	        if (isAry && ary < args.length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtorWrapper(func);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates the padding required for `string` based on the given `length`.
	     * The `chars` string is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {string} string The string to create padding for.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the pad for `string`.
	     */
	    function createPadding(string, length, chars) {
	      var strLength = string.length;
	      length = +length;

	      if (strLength >= length || !nativeIsFinite(length)) {
	        return '';
	      }
	      var padLength = length - strLength;
	      chars = chars == null ? ' ' : (chars + '');
	      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the optional `this`
	     * binding of `thisArg` and the `partials` prepended to those provided to
	     * the wrapper.
	     *
	     * @private
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to the new function.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createPartialWrapper(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it `func`.
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength);

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.ceil`, `_.floor`, or `_.round` function.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        precision = precision === undefined ? 0 : (+precision || 0);
	        if (precision) {
	          precision = pow(10, precision);
	          return func(number * precision) / precision;
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {Function} Returns the new index function.
	     */
	    function createSortedIndex(retHighest) {
	      return function(array, value, iteratee, thisArg) {
	        var callback = getCallback(iteratee);
	        return (iteratee == null && callback === baseCallback)
	          ? binaryIndex(array, value, retHighest)
	          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
	      };
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - `_.bind`
	     *     2 - `_.bindKey`
	     *     4 - `_.curry` or `_.curryRight` of a bound function
	     *     8 - `_.curry`
	     *    16 - `_.curryRight`
	     *    32 - `_.partial`
	     *    64 - `_.partialRight`
	     *   128 - `_.rearg`
	     *   256 - `_.ary`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined;
	      }
	      length -= (holders ? holders.length : 0);
	      if (bitmask & PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined;
	      }
	      var data = isBindKey ? undefined : getData(func),
	          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

	      if (data) {
	        mergeData(newData, data);
	        bitmask = newData[1];
	        arity = newData[9];
	      }
	      newData[9] = arity == null
	        ? (isBindKey ? 0 : func.length)
	        : (nativeMax(arity - length, 0) || 0);

	      if (bitmask == BIND_FLAG) {
	        var result = createBindWrapper(newData[0], newData[2]);
	      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
	        result = createPartialWrapper.apply(undefined, newData);
	      } else {
	        result = createHybridWrapper.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setter(result, newData);
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing arrays.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var index = -1,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
	        return false;
	      }
	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index],
	            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

	        if (result !== undefined) {
	          if (result) {
	            continue;
	          }
	          return false;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (isLoose) {
	          if (!arraySome(other, function(othValue) {
	                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
	              })) {
	            return false;
	          }
	        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag) {
	      switch (tag) {
	        case boolTag:
	        case dateTag:
	          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	          return +object == +other;

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case numberTag:
	          // Treat `NaN` vs. `NaN` as equal.
	          return (object != +object)
	            ? other != +other
	            : object == +other;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings primitives and string
	          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	          return object == (other + '');
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objProps = keys(object),
	          objLength = objProps.length,
	          othProps = keys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isLoose) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      var skipCtor = isLoose;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key],
	            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
	          return false;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (!skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Gets the appropriate "callback" function. If the `_.callback` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseCallback` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getCallback(func, thisArg, argCount) {
	      var result = lodash.callback || callback;
	      result = result === callback ? baseCallback : result;
	      return argCount ? result(func, thisArg, argCount) : result;
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = func.name,
	          array = realNames[result],
	          length = array ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseIndexOf` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function|number} Returns the chosen function or its result.
	     */
	    function getIndexOf(collection, target, fromIndex) {
	      var result = lodash.indexOf || indexOf;
	      result = result === indexOf ? baseIndexOf : result;
	      return collection ? result(collection, target, fromIndex) : result;
	    }

	    /**
	     * Gets the "length" property value of `object`.
	     *
	     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	     * that affects Safari on at least iOS 8.1-8.3 ARM64.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {*} Returns the "length" value.
	     */
	    var getLength = baseProperty('length');

	    /**
	     * Gets the propery names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = pairs(object),
	          length = result.length;

	      while (length--) {
	        result[length][2] = isStrictComparable(result[length][1]);
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = object == null ? undefined : object[key];
	      return isNative(value) ? value : undefined;
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = new array.constructor(length);

	      // Add array properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      var Ctor = object.constructor;
	      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
	        Ctor = Object;
	      }
	      return new Ctor;
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return bufferClone(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          var buffer = object.buffer;
	          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          var result = new Ctor(object.source, reFlags.exec(object));
	          result.lastIndex = object.lastIndex;
	      }
	      return result;
	    }

	    /**
	     * Invokes the method at `path` on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function invokePath(object, path, args) {
	      if (object != null && !isKey(path, object)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        path = last(path);
	      }
	      var func = object == null ? object : object[path];
	      return func == null ? undefined : func.apply(object, args);
	    }

	    /**
	     * Checks if `value` is array-like.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(getLength(value));
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	      length = length == null ? MAX_SAFE_INTEGER : length;
	      return value > -1 && value % 1 == 0 && value < length;
	    }

	    /**
	     * Checks if the provided arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	          ? (isArrayLike(object) && isIndex(index, object.length))
	          : (type == 'string' && index in object)) {
	        var other = object[index];
	        return value === value ? (value === other) : (other !== other);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      var type = typeof value;
	      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
	        return true;
	      }
	      if (isArray(value)) {
	        return false;
	      }
	      var result = !reIsDeepProp.test(value);
	      return result || (object != null && value in toObject(object));
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func);
	      if (!(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      var other = lodash[funcName];
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     */
	    function isLength(value) {
	      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers required to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
	     * augment function arguments, making the order in which they are executed important,
	     * preventing the merging of metadata. However, we make an exception for a safe
	     * common case where curried functions have `_.ary` and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < ARY_FLAG;

	      var isCombo =
	        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
	        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
	        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = arrayCopy(value);
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function mergeDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
	    }

	    /**
	     * A specialized version of `_.pick` which picks `object` properties specified
	     * by `props`.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property names to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByArray(object, props) {
	      object = toObject(object);

	      var index = -1,
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index];
	        if (key in object) {
	          result[key] = object[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.pick` which picks `object` properties `predicate`
	     * returns truthy for.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByCallback(object, predicate) {
	      var result = {};
	      baseForIn(object, function(value, key, object) {
	        if (predicate(value, key, object)) {
	          result[key] = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = arrayCopy(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity function
	     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = (function() {
	      var count = 0,
	          lastCalled = 0;

	      return function(key, value) {
	        var stamp = now(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return key;
	          }
	        } else {
	          count = 0;
	        }
	        return baseSetData(key, value);
	      };
	    }());

	    /**
	     * A fallback implementation of `Object.keys` which creates an array of the
	     * own enumerable property names of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function shimKeys(object) {
	      var props = keysIn(object),
	          propsLength = props.length,
	          length = propsLength && object.length;

	      var allowIndexes = !!length && isLength(length) &&
	        (isArray(object) || isArguments(object));

	      var index = -1,
	          result = [];

	      while (++index < propsLength) {
	        var key = props[index];
	        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to an array-like object if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array|Object} Returns the array-like object.
	     */
	    function toIterable(value) {
	      if (value == null) {
	        return [];
	      }
	      if (!isArrayLike(value)) {
	        return values(value);
	      }
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to an object if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Object} Returns the object.
	     */
	    function toObject(value) {
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to property path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array} Returns the property path array.
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return value;
	      }
	      var result = [];
	      baseToString(value).replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      return wrapper instanceof LazyWrapper
	        ? wrapper.clone()
	        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `collection` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new array containing chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if (guard ? isIterateeCall(array, size, guard) : size == null) {
	        size = 1;
	      } else {
	        size = nativeMax(nativeFloor(size) || 1, 1);
	      }
	      var index = 0,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[++resIndex] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of unique `array` values not included in the other
	     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The arrays of values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.difference([1, 2, 3], [4, 2]);
	     * // => [1, 3]
	     */
	    var difference = restParam(function(array, values) {
	      return (isObjectLike(array) && isArrayLike(array))
	        ? baseDifference(array, baseFlatten(values, false, true))
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that match the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [1]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active', false), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8], '*', 1, 2);
	     * // => [4, '*', 8]
	     */
	    function fill(array, value, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(chr) {
	     *   return chr.user == 'barney';
	     * });
	     * // => 0
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findIndex(users, 'active', false);
	     * // => 0
	     *
	     * // using the `_.property` callback shorthand
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    var findIndex = createFindIndex();

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(chr) {
	     *   return chr.user == 'pebbles';
	     * });
	     * // => 2
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastIndex(users, 'active', false);
	     * // => 2
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    var findLastIndex = createFindIndex(true);

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias head
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.first([1, 2, 3]);
	     * // => 1
	     *
	     * _.first([]);
	     * // => undefined
	     */
	    function first(array) {
	      return array ? array[0] : undefined;
	    }

	    /**
	     * Flattens a nested array. If `isDeep` is `true` the array is recursively
	     * flattened, otherwise it is only flattened a single level.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, [4]]
	     *
	     * // using `isDeep`
	     * _.flatten([1, [2, 3, [4]]], true);
	     * // => [1, 2, 3, 4]
	     */
	    function flatten(array, isDeep, guard) {
	      var length = array ? array.length : 0;
	      if (guard && isIterateeCall(array, isDeep, guard)) {
	        isDeep = false;
	      }
	      return length ? baseFlatten(array, isDeep) : [];
	    }

	    /**
	     * Recursively flattens a nested array.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to recursively flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, 4]
	     */
	    function flattenDeep(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, true) : [];
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
	     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
	     * performs a faster binary search.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
	     *  to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // using `fromIndex`
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     *
	     * // performing a binary search
	     * _.indexOf([1, 1, 2, 2], 2, true);
	     * // => 2
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      if (typeof fromIndex == 'number') {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
	      } else if (fromIndex) {
	        var index = binaryIndex(array, value);
	        if (index < length &&
	            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
	          return index;
	        }
	        return -1;
	      }
	      return baseIndexOf(array, value, fromIndex || 0);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      return dropRight(array, 1);
	    }

	    /**
	     * Creates an array of unique values that are included in all of the provided
	     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of shared values.
	     * @example
	     * _.intersection([1, 2], [4, 2], [2, 1]);
	     * // => [2]
	     */
	    var intersection = restParam(function(arrays) {
	      var othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(length),
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          result = [];

	      while (othIndex--) {
	        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
	        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
	      }
	      var array = arrays[0],
	          index = -1,
	          length = array ? array.length : 0,
	          seen = caches[0];

	      outer:
	      while (++index < length) {
	        value = array[index];
	        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
	          var othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(value);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    });

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array ? array.length : 0;
	      return length ? array[length - 1] : undefined;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
	     *  or `true` to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // using `fromIndex`
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     *
	     * // performing a binary search
	     * _.lastIndexOf([1, 1, 2, 2], 2, true);
	     * // => 3
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (typeof fromIndex == 'number') {
	        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
	      } else if (fromIndex) {
	        index = binaryIndex(array, value, true) - 1;
	        var other = array[index];
	        if (value === value ? (value === other) : (other !== other)) {
	          return index;
	        }
	        return -1;
	      }
	      if (value !== value) {
	        return indexOfNaN(array, index, true);
	      }
	      while (index--) {
	        if (array[index] === value) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Removes all provided values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pull(array, 2, 3);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    function pull() {
	      var args = arguments,
	          array = args[0];

	      if (!(array && array.length)) {
	        return array;
	      }
	      var index = 0,
	          indexOf = getIndexOf(),
	          length = args.length;

	      while (++index < length) {
	        var fromIndex = 0,
	            value = args[index];

	        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * Removes elements from `array` corresponding to the given indexes and returns
	     * an array of the removed elements. Indexes may be specified as an array of
	     * indexes or as individual arguments.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [5, 10, 15, 20];
	     * var evens = _.pullAt(array, 1, 3);
	     *
	     * console.log(array);
	     * // => [5, 15]
	     *
	     * console.log(evens);
	     * // => [10, 20]
	     */
	    var pullAt = restParam(function(array, indexes) {
	      indexes = baseFlatten(indexes);

	      var result = baseAt(array, indexes);
	      basePullAt(array, indexes.sort(baseCompareAscending));
	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate, thisArg) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getCallback(predicate, thisArg, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias tail
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.rest([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function rest(array) {
	      return drop(array, 1);
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of `Array#slice` to support node
	     * lists in IE < 9 and to ensure dense arrays are returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value` should
	     * be inserted into `array` in order to maintain its sort order. If an iteratee
	     * function is provided it is invoked for `value` and each element of `array`
	     * to compute their sort ranking. The iteratee is bound to `thisArg` and
	     * invoked with one argument; (value).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     *
	     * _.sortedIndex([4, 4, 5, 5], 5);
	     * // => 2
	     *
	     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
	     *
	     * // using an iteratee function
	     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
	     *   return this.data[word];
	     * }, dict);
	     * // => 1
	     *
	     * // using the `_.property` callback shorthand
	     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
	     * // => 1
	     */
	    var sortedIndex = createSortedIndex();

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 4, 5, 5], 5);
	     * // => 4
	     */
	    var sortedLastIndex = createSortedIndex(true);

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
	     * and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [2, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [1, 2]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false},
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active', false), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all of the provided arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([1, 2], [4, 2], [2, 1]);
	     * // => [1, 2, 4]
	     */
	    var union = restParam(function(arrays) {
	      return baseUniq(baseFlatten(arrays, false, true));
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurence of each element
	     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
	     * for sorted arrays. If an iteratee function is provided it is invoked for
	     * each element in the array to generate the criterion by which uniqueness
	     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, array).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias unique
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {boolean} [isSorted] Specify the array is sorted.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     *
	     * // using `isSorted`
	     * _.uniq([1, 1, 2], true);
	     * // => [1, 2]
	     *
	     * // using an iteratee function
	     * _.uniq([1, 2.5, 1.5, 2], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => [1, 2.5]
	     *
	     * // using the `_.property` callback shorthand
	     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniq(array, isSorted, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (isSorted != null && typeof isSorted != 'boolean') {
	        thisArg = iteratee;
	        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
	        isSorted = false;
	      }
	      var callback = getCallback();
	      if (!(iteratee == null && callback === baseCallback)) {
	        iteratee = callback(iteratee, thisArg, 3);
	      }
	      return (isSorted && getIndexOf() == baseIndexOf)
	        ? sortedUniq(array, iteratee)
	        : baseUniq(array, iteratee);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['fred', 'barney'], [30, 40], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var index = -1,
	          length = 0;

	      array = arrayFilter(array, function(group) {
	        if (isArrayLike(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      var result = Array(length);
	      while (++index < length) {
	        result[index] = arrayMap(array, baseProperty(index));
	      }
	      return result;
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts an iteratee to specify
	     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
	     * and invoked with four arguments: (accumulator, value, index, group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee] The function to combine regrouped values.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      iteratee = bindCallback(iteratee, thisArg, 4);
	      return arrayMap(result, function(group) {
	        return arrayReduce(group, iteratee, undefined, true);
	      });
	    }

	    /**
	     * Creates an array excluding all provided values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to filter.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.without([1, 2, 1, 3], 1, 2);
	     * // => [3]
	     */
	    var without = restParam(function(array, values) {
	      return isArrayLike(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the provided arrays.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * _.xor([1, 2], [4, 2]);
	     * // => [1, 4]
	     */
	    function xor() {
	      var index = -1,
	          length = arguments.length;

	      while (++index < length) {
	        var array = arguments[index];
	        if (isArrayLike(array)) {
	          var result = result
	            ? arrayPush(baseDifference(result, array), baseDifference(array, result))
	            : array;
	        }
	      }
	      return result ? baseUniq(result) : [];
	    }

	    /**
	     * Creates an array of grouped elements, the first of which contains the first
	     * elements of the given arrays, the second of which contains the second elements
	     * of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     */
	    var zip = restParam(unzip);

	    /**
	     * The inverse of `_.pairs`; this method returns an object composed from arrays
	     * of property names and values. Provide either a single two dimensional array,
	     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
	     * and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @alias object
	     * @category Array
	     * @param {Array} props The property names.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject([['fred', 30], ['barney', 40]]);
	     * // => { 'fred': 30, 'barney': 40 }
	     *
	     * _.zipObject(['fred', 'barney'], [30, 40]);
	     * // => { 'fred': 30, 'barney': 40 }
	     */
	    function zipObject(props, values) {
	      var index = -1,
	          length = props ? props.length : 0,
	          result = {};

	      if (length && !values && !isArray(props[0])) {
	        values = [];
	      }
	      while (++index < length) {
	        var key = props[index];
	        if (values) {
	          result[key] = values[index];
	        } else if (key) {
	          result[key[0]] = key[1];
	        }
	      }
	      return result;
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an iteratee to specify
	     * how grouped values should be combined. The `iteratee` is bound to `thisArg`
	     * and invoked with four arguments: (accumulator, value, index, group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee] The function to combine grouped values.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
	     * // => [111, 222]
	     */
	    var zipWith = restParam(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 2 ? arrays[length - 2] : undefined,
	          thisArg = length > 1 ? arrays[length - 1] : undefined;

	      if (length > 2 && typeof iteratee == 'function') {
	        length -= 2;
	      } else {
	        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
	        thisArg = undefined;
	      }
	      arrays.length = length;
	      return unzipWith(arrays, iteratee, thisArg);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object that wraps `value` with explicit method
	     * chaining enabled.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _.chain(users)
	     *   .sortBy('age')
	     *   .map(function(chr) {
	     *     return chr.user + ' is ' + chr.age;
	     *   })
	     *   .first()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor is
	     * bound to `thisArg` and invoked with one argument; (value). The purpose of
	     * this method is to "tap into" a method chain in order to perform operations
	     * on intermediate results within the chain.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor, thisArg) {
	      interceptor.call(thisArg, value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor, thisArg) {
	      return interceptor.call(thisArg, value);
	    }

	    /**
	     * Enables explicit method chaining on the wrapper object.
	     *
	     * @name chain
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // without explicit chaining
	     * _(users).first();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // with explicit chaining
	     * _(users).chain()
	     *   .first()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chained sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Creates a new array joining a wrapped array with any additional arrays
	     * and/or values.
	     *
	     * @name concat
	     * @memberOf _
	     * @category Chain
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var wrapped = _(array).concat(2, [3], [[4]]);
	     *
	     * console.log(wrapped.value());
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    var wrapperConcat = restParam(function(values) {
	      values = baseFlatten(values);
	      return this.thru(function(array) {
	        return arrayConcat(isArray(array) ? array : [toObject(array)], values);
	      });
	    });

	    /**
	     * Creates a clone of the chained sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).map(function(value) {
	     *   return Math.pow(value, 2);
	     * });
	     *
	     * var other = [3, 4];
	     * var otherWrapped = wrapped.plant(other);
	     *
	     * otherWrapped.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * Reverses the wrapped array so the first element becomes the last, the
	     * second element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;

	      var interceptor = function(value) {
	        return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();
	      };
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(interceptor);
	    }

	    /**
	     * Produces the result of coercing the unwrapped value to a string.
	     *
	     * @name toString
	     * @memberOf _
	     * @category Chain
	     * @returns {string} Returns the coerced string value.
	     * @example
	     *
	     * _([1, 2, 3]).toString();
	     * // => '1,2,3'
	     */
	    function wrapperToString() {
	      return (this.value() + '');
	    }

	    /**
	     * Executes the chained sequence to extract the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @alias run, toJSON, valueOf
	     * @category Chain
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements corresponding to the given keys, or indexes,
	     * of `collection`. Keys may be specified as individual arguments or as arrays
	     * of keys.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(number|number[]|string|string[])} [props] The property names
	     *  or indexes of elements to pick, specified individually or in arrays.
	     * @returns {Array} Returns the new array of picked elements.
	     * @example
	     *
	     * _.at(['a', 'b', 'c'], [0, 2]);
	     * // => ['a', 'c']
	     *
	     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
	     * // => ['barney', 'pebbles']
	     */
	    var at = restParam(function(collection, props) {
	      return baseAt(collection, baseFlatten(props));
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the number of times the key was returned by `iteratee`.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * The predicate is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias all
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': false },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.every(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = undefined;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias select
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.filter([4, 5, 6], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 6]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.filter(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.filter(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function filter(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias detect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.result(_.find(users, function(chr) {
	     *   return chr.age < 40;
	     * }), 'user');
	     * // => 'barney'
	     *
	     * // using the `_.matches` callback shorthand
	     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.result(_.find(users, 'active', false), 'user');
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.result(_.find(users, 'active'), 'user');
	     * // => 'barney'
	     */
	    var find = createFind(baseEach);

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(baseEachRight, true);

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning the first element that has equivalent property
	     * values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
	     * // => 'barney'
	     *
	     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
	     * // => 'fred'
	     */
	    function findWhere(collection, source) {
	      return find(collection, baseMatches(source));
	    }

	    /**
	     * Iterates over elements of `collection` invoking `iteratee` for each element.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection). Iteratee functions may exit iteration early
	     * by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length" property
	     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
	     * may be used for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @alias each
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEach(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from left to right and returns the array
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
	     *   console.log(n, key);
	     * });
	     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
	     */
	    var forEach = createForEach(arrayEach, baseEach);

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEachRight(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from right to left and returns the array
	     */
	    var forEachRight = createForEach(arrayEachRight, baseEachRight);

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is an array of the elements responsible for generating the key.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * // using the `_.property` callback shorthand
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        result[key] = [value];
	      }
	    });

	    /**
	     * Checks if `value` is in `collection` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
	     * from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @alias contains, include
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {*} target The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	     * // => true
	     *
	     * _.includes('pebbles', 'eb');
	     * // => true
	     */
	    function includes(collection, target, fromIndex, guard) {
	      var length = collection ? getLength(collection) : 0;
	      if (!isLength(length)) {
	        collection = values(collection);
	        length = collection.length;
	      }
	      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
	        fromIndex = 0;
	      } else {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
	      }
	      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
	        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
	        : (!!length && getIndexOf(collection, target, fromIndex) > -1);
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the last element responsible for generating the key. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var keyData = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.indexBy(keyData, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return String.fromCharCode(object.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return this.fromCharCode(object.code);
	     * }, String);
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     */
	    var indexBy = createAggregator(function(result, value, key) {
	      result[key] = value;
	    });

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `methodName` is a function it is
	     * invoked for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invoke([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invoke = restParam(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          isProp = isKey(path),
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
	        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an array of values by running each element in `collection` through
	     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
	     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
	     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
	     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
	     * `sum`, `uniq`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @alias collect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function timesThree(n) {
	     *   return n * 3;
	     * }
	     *
	     * _.map([1, 2], timesThree);
	     * // => [3, 6]
	     *
	     * _.map({ 'a': 1, 'b': 2 }, timesThree);
	     * // => [3, 6] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee, thisArg) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return func(collection, iteratee);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, while the second of which
	     * contains elements `predicate` returns falsey for. The predicate is bound
	     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * _.partition([1, 2, 3], function(n) {
	     *   return n % 2;
	     * });
	     * // => [[1, 3], [2]]
	     *
	     * _.partition([1.2, 2.3, 3.4], function(n) {
	     *   return this.floor(n) % 2;
	     * }, Math);
	     * // => [[1.2, 3.4], [2.3]]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * var mapper = function(array) {
	     *   return _.pluck(array, 'user');
	     * };
	     *
	     * // using the `_.matches` callback shorthand
	     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
	     * // => [['pebbles'], ['barney', 'fred']]
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.map(_.partition(users, 'active', false), mapper);
	     * // => [['barney', 'pebbles'], ['fred']]
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(_.partition(users, 'active'), mapper);
	     * // => [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Gets the property value of `path` from all elements in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|string} path The path of the property to pluck.
	     * @returns {Array} Returns the property values.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.pluck(users, 'user');
	     * // => ['barney', 'fred']
	     *
	     * var userIndex = _.indexBy(users, 'user');
	     * _.pluck(userIndex, 'age');
	     * // => [36, 40] (iteration order is not guaranteed)
	     */
	    function pluck(collection, path) {
	      return map(collection, property(path));
	    }

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` through `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not provided the first element of `collection` is used as the initial
	     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
	     * and `sortByOrder`
	     *
	     * @static
	     * @memberOf _
	     * @alias foldl, inject
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.reduce([1, 2], function(total, n) {
	     *   return total + n;
	     * });
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     *   return result;
	     * }, {});
	     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
	     */
	    var reduce = createReduce(arrayReduce, baseEach);

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias foldr
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    var reduceRight = createReduce(arrayReduceRight, baseEachRight);

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.reject([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [1, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.reject(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.reject(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function reject(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, function(value, index, collection) {
	        return !predicate(value, index, collection);
	      });
	    }

	    /**
	     * Gets a random element or `n` random elements from a collection.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to sample.
	     * @param {number} [n] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {*} Returns the random sample(s).
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     *
	     * _.sample([1, 2, 3, 4], 2);
	     * // => [3, 1]
	     */
	    function sample(collection, n, guard) {
	      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
	        collection = toIterable(collection);
	        var length = collection.length;
	        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
	      }
	      var index = -1,
	          result = toArray(collection),
	          length = result.length,
	          lastIndex = length - 1;

	      n = nativeMin(n < 0 ? 0 : (+n || 0), length);
	      while (++index < n) {
	        var rand = baseRandom(index, lastIndex),
	            value = result[rand];

	        result[rand] = result[index];
	        result[index] = value;
	      }
	      result.length = n;
	      return result;
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      return sample(collection, POSITIVE_INFINITY);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the size of `collection`.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      var length = collection ? getLength(collection) : 0;
	      return isLength(length) ? length : keys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * The function returns as soon as it finds a passing value and does not iterate
	     * over the entire collection. The predicate is bound to `thisArg` and invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias any
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.some(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = undefined;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection through `iteratee`. This method performs
	     * a stable sort, that is, it preserves the original sort order of equal elements.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return Math.sin(n);
	     * });
	     * // => [3, 1, 2]
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return this.sin(n);
	     * }, Math);
	     * // => [3, 1, 2]
	     *
	     * var users = [
	     *   { 'user': 'fred' },
	     *   { 'user': 'pebbles' },
	     *   { 'user': 'barney' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.sortBy(users, 'user'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function sortBy(collection, iteratee, thisArg) {
	      if (collection == null) {
	        return [];
	      }
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = undefined;
	      }
	      var index = -1;
	      iteratee = getCallback(iteratee, thisArg, 3);

	      var result = baseMap(collection, function(value, key, collection) {
	        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
	      });
	      return baseSortBy(result, compareAscending);
	    }

	    /**
	     * This method is like `_.sortBy` except that it can sort by multiple iteratees
	     * or property names.
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
	     *  The iteratees to sort by, specified as individual values or arrays of values.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
	     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
	     *
	     * _.map(_.sortByAll(users, 'user', function(chr) {
	     *   return Math.floor(chr.age / 10);
	     * }), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    var sortByAll = restParam(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var guard = iteratees[2];
	      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
	        iteratees.length = 1;
	      }
	      return baseSortByOrder(collection, baseFlatten(iteratees), []);
	    });

	    /**
	     * This method is like `_.sortByAll` except that it allows specifying the
	     * sort orders of the iteratees to sort by. If `orders` is unspecified, all
	     * values are sorted in ascending order. Otherwise, a value is sorted in
	     * ascending order if its corresponding order is "asc", and descending if "desc".
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // sort by `user` in ascending order and by `age` in descending order
	     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    function sortByOrder(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (guard && isIterateeCall(iteratees, orders, guard)) {
	        orders = undefined;
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseSortByOrder(collection, iteratees, orders);
	    }

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning an array of all elements that have equivalent
	     * property values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
	     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
	     * ];
	     *
	     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
	     * // => ['fred']
	     */
	    function where(collection, source) {
	      return filter(collection, baseMatches(source));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the number of milliseconds that have elapsed since the Unix epoch
	     * (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @category Date
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => logs the number of milliseconds it took for the deferred function to be invoked
	     */
	    var now = nativeNow || function() {
	      return new Date().getTime();
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it is called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => logs 'done saving!' after the two async saves have completed
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      n = nativeIsFinite(n = +n) ? n : 0;
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that accepts up to `n` arguments ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      if (guard && isIterateeCall(func, n, guard)) {
	        n = undefined;
	      }
	      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
	      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it is called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery('#add').on('click', _.before(5, addContactToList));
	     * // => allows adding up to 4 contacts to the list
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and prepends any additional `_.bind` arguments to those provided to the
	     * bound function.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind` this method does not set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var greet = function(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * };
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // using placeholders
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = restParam(function(func, thisArg, partials) {
	      var bitmask = BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bind.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method. Method names may be specified as individual arguments or as arrays
	     * of method names. If no method names are provided all enumerable function
	     * properties, own and inherited, of `object` are bound.
	     *
	     * **Note:** This method does not set the "length" property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} [methodNames] The object method names to bind,
	     *  specified as individual method names or arrays of method names.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'onClick': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view);
	     * jQuery('#docs').on('click', view.onClick);
	     * // => logs 'clicked docs' when the element is clicked
	     */
	    var bindAll = restParam(function(object, methodNames) {
	      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

	      var index = -1,
	          length = methodNames.length;

	      while (++index < length) {
	        var key = methodNames[index];
	        object[key] = createWrapper(object[key], BIND_FLAG, object);
	      }
	      return object;
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` and prepends
	     * any additional `_.bindKey` arguments to those provided to the bound function.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist.
	     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object the method belongs to.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // using placeholders
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = restParam(function(object, key, partials) {
	      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bindKey.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts one or more arguments of `func` that when
	     * called either invokes `func` returning its result, if all `func` arguments
	     * have been provided, or returns a function that accepts one or more of the
	     * remaining `func` arguments, and so on. The arity of `func` may be specified
	     * if `func.length` is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    var curry = createCurry(CURRY_FLAG);

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    var curryRight = createCurry(CURRY_RIGHT_FLAG);

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed invocations. Provide an options object to indicate that `func`
	     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
	     * Subsequent calls to the debounced function return the result of the last
	     * `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the debounced function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=false] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
	     *  delayed before it is invoked.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // avoid costly calculations while the window size is in flux
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
	     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // ensure `batchLog` is invoked once after 1 second of debounced calls
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', _.debounce(batchLog, 250, {
	     *   'maxWait': 1000
	     * }));
	     *
	     * // cancel a debounced call
	     * var todoChanges = _.debounce(batchLog, 1000);
	     * Object.observe(models.todo, todoChanges);
	     *
	     * Object.observe(models, function(changes) {
	     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
	     *     todoChanges.cancel();
	     *   }
	     * }, ['delete']);
	     *
	     * // ...at some point `models.todo` is changed
	     * models.todo.completed = true;
	     *
	     * // ...before 1 second has passed `models.todo` is deleted
	     * // which cancels the debounced `todoChanges` call
	     * delete models.todo;
	     */
	    function debounce(func, wait, options) {
	      var args,
	          maxTimeoutId,
	          result,
	          stamp,
	          thisArg,
	          timeoutId,
	          trailingCall,
	          lastCalled = 0,
	          maxWait = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = wait < 0 ? 0 : (+wait || 0);
	      if (options === true) {
	        var leading = true;
	        trailing = false;
	      } else if (isObject(options)) {
	        leading = !!options.leading;
	        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function cancel() {
	        if (timeoutId) {
	          clearTimeout(timeoutId);
	        }
	        if (maxTimeoutId) {
	          clearTimeout(maxTimeoutId);
	        }
	        lastCalled = 0;
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	      }

	      function complete(isCalled, id) {
	        if (id) {
	          clearTimeout(id);
	        }
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	        if (isCalled) {
	          lastCalled = now();
	          result = func.apply(thisArg, args);
	          if (!timeoutId && !maxTimeoutId) {
	            args = thisArg = undefined;
	          }
	        }
	      }

	      function delayed() {
	        var remaining = wait - (now() - stamp);
	        if (remaining <= 0 || remaining > wait) {
	          complete(trailingCall, maxTimeoutId);
	        } else {
	          timeoutId = setTimeout(delayed, remaining);
	        }
	      }

	      function maxDelayed() {
	        complete(trailing, timeoutId);
	      }

	      function debounced() {
	        args = arguments;
	        stamp = now();
	        thisArg = this;
	        trailingCall = trailing && (timeoutId || !leading);

	        if (maxWait === false) {
	          var leadingCall = leading && !timeoutId;
	        } else {
	          if (!maxTimeoutId && !leading) {
	            lastCalled = stamp;
	          }
	          var remaining = maxWait - (stamp - lastCalled),
	              isCalled = remaining <= 0 || remaining > maxWait;

	          if (isCalled) {
	            if (maxTimeoutId) {
	              maxTimeoutId = clearTimeout(maxTimeoutId);
	            }
	            lastCalled = stamp;
	            result = func.apply(thisArg, args);
	          }
	          else if (!maxTimeoutId) {
	            maxTimeoutId = setTimeout(maxDelayed, remaining);
	          }
	        }
	        if (isCalled && timeoutId) {
	          timeoutId = clearTimeout(timeoutId);
	        }
	        else if (!timeoutId && wait !== maxWait) {
	          timeoutId = setTimeout(delayed, wait);
	        }
	        if (leadingCall) {
	          isCalled = true;
	          result = func.apply(thisArg, args);
	        }
	        if (isCalled && !timeoutId && !maxTimeoutId) {
	          args = thisArg = undefined;
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // logs 'deferred' after one or more milliseconds
	     */
	    var defer = restParam(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => logs 'later' after one second
	     */
	    var delay = restParam(function(func, wait, args) {
	      return baseDelay(func, wait, args);
	    });

	    /**
	     * Creates a function that returns the result of invoking the provided
	     * functions with the `this` binding of the created function, where each
	     * successive invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow(_.add, square);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the provided functions from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias backflow, compose
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight(square, _.add);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is coerced to a string and used as the
	     * cache key. The `func` is invoked with the `this` binding of the memoized
	     * function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoizing function.
	     * @example
	     *
	     * var upperCase = _.memoize(function(string) {
	     *   return string.toUpperCase();
	     * });
	     *
	     * upperCase('fred');
	     * // => 'FRED'
	     *
	     * // modifying the result cache
	     * upperCase.cache.set('fred', 'BARNEY');
	     * upperCase('fred');
	     * // => 'BARNEY'
	     *
	     * // replacing `_.memoize.Cache`
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'barney' };
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'fred' }
	     *
	     * _.memoize.Cache = WeakMap;
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'barney' }
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result);
	        return result;
	      };
	      memoized.cache = new memoize.Cache;
	      return memoized;
	    }

	    /**
	     * Creates a function that runs each argument through a corresponding
	     * transform function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms] The functions to transform
	     * arguments, specified as individual functions or arrays of functions.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var modded = _.modArgs(function(x, y) {
	     *   return [x, y];
	     * }, square, doubled);
	     *
	     * modded(1, 2);
	     * // => [1, 4]
	     *
	     * modded(5, 10);
	     * // => [25, 20]
	     */
	    var modArgs = restParam(function(func, transforms) {
	      transforms = baseFlatten(transforms);
	      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = transforms.length;
	      return restParam(function(args) {
	        var index = nativeMin(args.length, length);
	        while (index--) {
	          args[index] = transforms[index](args[index]);
	        }
	        return func.apply(this, args);
	      });
	    });

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        return !predicate.apply(this, arguments);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first call. The `func` is invoked
	     * with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // `initialize` invokes `createApplication` once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with `partial` arguments prepended
	     * to those provided to the new function. This method is like `_.bind` except
	     * it does **not** alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // using placeholders
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = createPartial(PARTIAL_FLAG);

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to those provided to the new function.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // using placeholders
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified indexes where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, 2, 0, 1);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     *
	     * var map = _.rearg(_.map, [1, 0]);
	     * map(function(n) {
	     *   return n * 3;
	     * }, [1, 2, 3]);
	     * // => [3, 6, 9]
	     */
	    var rearg = restParam(function(func, indexes) {
	      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as an array.
	     *
	     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.restParam(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function restParam(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            rest = Array(length);

	        while (++index < length) {
	          rest[index] = args[start + index];
	        }
	        switch (start) {
	          case 0: return func.call(this, rest);
	          case 1: return func.call(this, args[0], rest);
	          case 2: return func.call(this, args[0], args[1], rest);
	        }
	        var otherArgs = Array(start + 1);
	        index = -1;
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = rest;
	        return func.apply(this, otherArgs);
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the created
	     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
	     *
	     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * // with a Promise
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function(array) {
	        return func.apply(this, array);
	      };
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed invocations. Provide an options object to indicate
	     * that `func` should be invoked on the leading and/or trailing edge of the
	     * `wait` timeout. Subsequent calls to the throttled function return the
	     * result of the last `func` call.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the throttled function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=true] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // avoid excessively updating the position while scrolling
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
	     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
	     *   'trailing': false
	     * }));
	     *
	     * // cancel a trailing throttled call
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (options === false) {
	        leading = false;
	      } else if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
	    }

	    /**
	     * Creates a function that provides `value` to the wrapper function as its
	     * first argument. Any additional arguments provided to the function are
	     * appended to those provided to the wrapper function. The wrapper is invoked
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} wrapper The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      wrapper = wrapper == null ? identity : wrapper;
	      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
	     * otherwise they are assigned by reference. If `customizer` is provided it is
	     * invoked to produce the cloned values. If `customizer` returns `undefined`
	     * cloning is handled by the method instead. The `customizer` is bound to
	     * `thisArg` and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var shallow = _.clone(users);
	     * shallow[0] === users[0];
	     * // => true
	     *
	     * var deep = _.clone(users, true);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.clone(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 0
	     */
	    function clone(value, isDeep, customizer, thisArg) {
	      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
	        isDeep = false;
	      }
	      else if (typeof isDeep == 'function') {
	        thisArg = customizer;
	        customizer = isDeep;
	        isDeep = false;
	      }
	      return typeof customizer == 'function'
	        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
	        : baseClone(value, isDeep);
	    }

	    /**
	     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
	     * to produce the cloned values. If `customizer` returns `undefined` cloning
	     * is handled by the method instead. The `customizer` is bound to `thisArg`
	     * and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var deep = _.cloneDeep(users);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.cloneDeep(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 20
	     */
	    function cloneDeep(value, customizer, thisArg) {
	      return typeof customizer == 'function'
	        ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
	        : baseClone(value, true);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    function gt(value, other) {
	      return value > other;
	    }

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    function gte(value, other) {
	      return value >= other;
	    }

	    /**
	     * Checks if `value` is classified as an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    function isArguments(value) {
	      return isObjectLike(value) && isArrayLike(value) &&
	        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	    }

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(function() { return arguments; }());
	     * // => false
	     */
	    var isArray = nativeIsArray || function(value) {
	      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	    };

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    function isDate(value) {
	      return isObjectLike(value) && objToString.call(value) == dateTag;
	    }

	    /**
	     * Checks if `value` is a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is empty. A value is considered empty unless it is an
	     * `arguments` object, array, string, or jQuery-like collection with a length
	     * greater than `0` or an object with own enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Array|Object|string} value The value to inspect.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
	          (isObjectLike(value) && isFunction(value.splice)))) {
	        return !value.length;
	      }
	      return !keys(value).length;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent. If `customizer` is provided it is invoked to compare values.
	     * If `customizer` returns `undefined` comparisons are handled by the method
	     * instead. The `customizer` is bound to `thisArg` and invoked with three
	     * arguments: (value, other [, index|key]).
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. Functions and DOM nodes
	     * are **not** supported. Provide a customizer function to extend support
	     * for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @alias eq
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * object == other;
	     * // => false
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * // using a customizer callback
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqual(array, other, function(value, other) {
	     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
	     *     return true;
	     *   }
	     * });
	     * // => true
	     */
	    function isEqual(value, other, customizer, thisArg) {
	      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	      var result = customizer ? customizer(value, other) : undefined;
	      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(10);
	     * // => true
	     *
	     * _.isFinite('10');
	     * // => false
	     *
	     * _.isFinite(true);
	     * // => false
	     *
	     * _.isFinite(Object(10));
	     * // => false
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in older versions of Chrome and Safari which return 'function' for regexes
	      // and Safari 8 equivalents which return 'object' for typed array constructors.
	      return isObject(value) && objToString.call(value) == funcTag;
	    }

	    /**
	     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(1);
	     * // => false
	     */
	    function isObject(value) {
	      // Avoid a V8 JIT bug in Chrome 19-20.
	      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	      var type = typeof value;
	      return !!value && (type == 'object' || type == 'function');
	    }

	    /**
	     * Performs a deep comparison between `object` and `source` to determine if
	     * `object` contains equivalent property values. If `customizer` is provided
	     * it is invoked to compare values. If `customizer` returns `undefined`
	     * comparisons are handled by the method instead. The `customizer` is bound
	     * to `thisArg` and invoked with three arguments: (value, other, index|key).
	     *
	     * **Note:** This method supports comparing properties of arrays, booleans,
	     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
	     * and DOM nodes are **not** supported. Provide a customizer function to extend
	     * support for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.isMatch(object, { 'age': 40 });
	     * // => true
	     *
	     * _.isMatch(object, { 'age': 36 });
	     * // => false
	     *
	     * // using a customizer callback
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatch(object, source, function(value, other) {
	     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
	     * });
	     * // => true
	     */
	    function isMatch(object, source, customizer, thisArg) {
	      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	      return baseIsMatch(object, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
	     * which returns `true` for `undefined` and other non-numeric values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a native function.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (value == null) {
	        return false;
	      }
	      if (isFunction(value)) {
	        return reIsNative.test(fnToString.call(value));
	      }
	      return isObjectLike(value) && reIsHostCtor.test(value);
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
	     * as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isNumber(8.4);
	     * // => true
	     *
	     * _.isNumber(NaN);
	     * // => true
	     *
	     * _.isNumber('8.4');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * **Note:** This method assumes objects created by the `Object` constructor
	     * have no inherited enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      var Ctor;

	      // Exit early for non `Object` objects.
	      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
	          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
	        return false;
	      }
	      // IE < 9 iterates inherited properties before own properties. If the first
	      // iterated property is an object's own property then there are no inherited
	      // enumerable properties.
	      var result;
	      // In most environments an object's own properties are iterated before
	      // its inherited properties. If the last iterated property is an object's
	      // own property then there are no inherited enumerable properties.
	      baseForIn(value, function(subValue, key) {
	        result = key;
	      });
	      return result === undefined || hasOwnProperty.call(value, result);
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    function isRegExp(value) {
	      return isObject(value) && objToString.call(value) == regexpTag;
	    }

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    function isTypedArray(value) {
	      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	    }

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    function lt(value, other) {
	      return value < other;
	    }

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    function lte(value, other) {
	      return value <= other;
	    }

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * (function() {
	     *   return _.toArray(arguments).slice(1);
	     * }(1, 2, 3));
	     * // => [2, 3]
	     */
	    function toArray(value) {
	      var length = value ? getLength(value) : 0;
	      if (!isLength(length)) {
	        return values(value);
	      }
	      if (!length) {
	        return [];
	      }
	      return arrayCopy(value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable
	     * properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return baseCopy(value, keysIn(value));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Recursively merges own enumerable properties of the source object(s), that
	     * don't resolve to `undefined` into the destination object. Subsequent sources
	     * overwrite property assignments of previous sources. If `customizer` is
	     * provided it is invoked to produce the merged values of the destination and
	     * source properties. If `customizer` returns `undefined` merging is handled
	     * by the method instead. The `customizer` is bound to `thisArg` and invoked
	     * with five arguments: (objectValue, sourceValue, key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var users = {
	     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	     * };
	     *
	     * var ages = {
	     *   'data': [{ 'age': 36 }, { 'age': 40 }]
	     * };
	     *
	     * _.merge(users, ages);
	     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	     *
	     * // using a customizer callback
	     * var object = {
	     *   'fruits': ['apple'],
	     *   'vegetables': ['beet']
	     * };
	     *
	     * var other = {
	     *   'fruits': ['banana'],
	     *   'vegetables': ['carrot']
	     * };
	     *
	     * _.merge(object, other, function(a, b) {
	     *   if (_.isArray(a)) {
	     *     return a.concat(b);
	     *   }
	     * });
	     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	     */
	    var merge = createAssigner(baseMerge);

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object. Subsequent sources overwrite property assignments of previous sources.
	     * If `customizer` is provided it is invoked to produce the assigned values.
	     * The `customizer` is bound to `thisArg` and invoked with five arguments:
	     * (objectValue, sourceValue, key, object, source).
	     *
	     * **Note:** This method mutates `object` and is based on
	     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
	     *
	     * @static
	     * @memberOf _
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using a customizer callback
	     * var defaults = _.partialRight(_.assign, function(value, other) {
	     *   return _.isUndefined(value) ? other : value;
	     * });
	     *
	     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var assign = createAssigner(function(object, source, customizer) {
	      return customizer
	        ? assignWith(object, source, customizer)
	        : baseAssign(object, source);
	    });

	    /**
	     * Creates an object that inherits from the given `prototype` object. If a
	     * `properties` object is provided its own enumerable properties are assigned
	     * to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties, guard) {
	      var result = baseCreate(prototype);
	      if (guard && isIterateeCall(prototype, properties, guard)) {
	        properties = undefined;
	      }
	      return properties ? baseAssign(result, properties) : result;
	    }

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object for all destination properties that resolve to `undefined`. Once a
	     * property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var defaults = createDefaults(assign, assignDefaults);

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
	     * // => { 'user': { 'name': 'barney', 'age': 36 } }
	     *
	     */
	    var defaultsDeep = createDefaults(merge, mergeDefaults);

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    var findKey = createFindKey(baseForOwn);

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => returns `pebbles` assuming `_.findKey` returns `barney`
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    var findLastKey = createFindKey(baseForOwnRight);

	    /**
	     * Iterates over own and inherited enumerable properties of an object invoking
	     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
	     */
	    var forIn = createForIn(baseFor);

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
	     */
	    var forInRight = createForIn(baseForRight);

	    /**
	     * Iterates over own enumerable properties of an object invoking `iteratee`
	     * for each property. The `iteratee` is bound to `thisArg` and invoked with
	     * three arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a' and 'b' (iteration order is not guaranteed)
	     */
	    var forOwn = createForOwn(baseForOwn);

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
	     */
	    var forOwnRight = createForOwn(baseForOwnRight);

	    /**
	     * Creates an array of function property names from all enumerable properties,
	     * own and inherited, of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @alias methods
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of property names.
	     * @example
	     *
	     * _.functions(_);
	     * // => ['after', 'ary', 'assign', ...]
	     */
	    function functions(object) {
	      return baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the property value at `path` of `object`. If the resolved value is
	     * `undefined` the `defaultValue` is used in its place.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
	      return result === undefined ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': { 'c': 3 } } };
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b.c');
	     * // => true
	     *
	     * _.has(object, ['a', 'b', 'c']);
	     * // => true
	     */
	    function has(object, path) {
	      if (object == null) {
	        return false;
	      }
	      var result = hasOwnProperty.call(object, path);
	      if (!result && !isKey(path)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        if (object == null) {
	          return false;
	        }
	        path = last(path);
	        result = hasOwnProperty.call(object, path);
	      }
	      return result || (isLength(object.length) && isIndex(path, object.length) &&
	        (isArray(object) || isArguments(object)));
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite property
	     * assignments of previous values unless `multiValue` is `true`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {boolean} [multiValue] Allow multiple values per key.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     *
	     * // with `multiValue`
	     * _.invert(object, true);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function invert(object, multiValue, guard) {
	      if (guard && isIterateeCall(object, multiValue, guard)) {
	        multiValue = undefined;
	      }
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index],
	            value = object[key];

	        if (multiValue) {
	          if (hasOwnProperty.call(result, value)) {
	            result[value].push(key);
	          } else {
	            result[value] = [key];
	          }
	        }
	        else {
	          result[value] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    var keys = !nativeKeys ? shimKeys : function(object) {
	      var Ctor = object == null ? undefined : object.constructor;
	      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	          (typeof object != 'function' && isArrayLike(object))) {
	        return shimKeys(object);
	      }
	      return isObject(object) ? nativeKeys(object) : [];
	    };

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      if (object == null) {
	        return [];
	      }
	      if (!isObject(object)) {
	        object = Object(object);
	      }
	      var length = object.length;
	      length = (length && isLength(length) &&
	        (isArray(object) || isArguments(object)) && length) || 0;

	      var Ctor = object.constructor,
	          index = -1,
	          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	          result = Array(length),
	          skipIndexes = length > 0;

	      while (++index < length) {
	        result[index] = (index + '');
	      }
	      for (var key in object) {
	        if (!(skipIndexes && isIndex(key, length)) &&
	            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * property of `object` through `iteratee`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    var mapKeys = createObjectMapper(true);

	    /**
	     * Creates an object with the same keys as `object` and values generated by
	     * running each own enumerable property of `object` through `iteratee`. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, key, object).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
	     *   return n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * // using the `_.property` callback shorthand
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    var mapValues = createObjectMapper();

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable properties of `object` that are not omitted.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to omit, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.omit(object, 'age');
	     * // => { 'user': 'fred' }
	     *
	     * _.omit(object, _.isNumber);
	     * // => { 'user': 'fred' }
	     */
	    var omit = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      if (typeof props[0] != 'function') {
	        var props = arrayMap(baseFlatten(props), String);
	        return pickByArray(object, baseDifference(keysIn(object), props));
	      }
	      var predicate = bindCallback(props[0], props[1], 3);
	      return pickByCallback(object, function(value, key, object) {
	        return !predicate(value, key, object);
	      });
	    });

	    /**
	     * Creates a two dimensional array of the key-value pairs for `object`,
	     * e.g. `[[key1, value1], [key2, value2]]`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the new array of key-value pairs.
	     * @example
	     *
	     * _.pairs({ 'barney': 36, 'fred': 40 });
	     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
	     */
	    function pairs(object) {
	      object = toObject(object);

	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        var key = props[index];
	        result[index] = [key, object[key]];
	      }
	      return result;
	    }

	    /**
	     * Creates an object composed of the picked `object` properties. Property
	     * names may be specified as individual arguments or as arrays of property
	     * names. If `predicate` is provided it is invoked for each property of `object`
	     * picking the properties `predicate` returns truthy for. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to pick, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.pick(object, 'user');
	     * // => { 'user': 'fred' }
	     *
	     * _.pick(object, _.isString);
	     * // => { 'user': 'fred' }
	     */
	    var pick = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      return typeof props[0] == 'function'
	        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
	        : pickByArray(object, baseFlatten(props));
	    });

	    /**
	     * This method is like `_.get` except that if the resolved value is a function
	     * it is invoked with the `this` binding of its parent object and its result
	     * is returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a.b.c', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a.b.c', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      var result = object == null ? undefined : object[path];
	      if (result === undefined) {
	        if (object != null && !isKey(path, object)) {
	          path = toPath(path);
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          result = object == null ? undefined : object[last(path)];
	        }
	        result = result === undefined ? defaultValue : result;
	      }
	      return isFunction(result) ? result.call(object) : result;
	    }

	    /**
	     * Sets the property value of `path` on `object`. If a portion of `path`
	     * does not exist it is created.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to augment.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, 'x[0].y.z', 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      if (object == null) {
	        return object;
	      }
	      var pathKey = (path + '');
	      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = path[index];
	        if (isObject(nested)) {
	          if (index == lastIndex) {
	            nested[key] = value;
	          } else if (nested[key] == null) {
	            nested[key] = isIndex(path[index + 1]) ? [] : {};
	          }
	        }
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own enumerable
	     * properties through `iteratee`, with each invocation potentially mutating
	     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
	     * with four arguments: (accumulator, value, key, object). Iteratee functions
	     * may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Array|Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     */
	    function transform(object, iteratee, accumulator, thisArg) {
	      var isArr = isArray(object) || isTypedArray(object);
	      iteratee = getCallback(iteratee, thisArg, 4);

	      if (accumulator == null) {
	        if (isArr || isObject(object)) {
	          var Ctor = object.constructor;
	          if (isArr) {
	            accumulator = isArray(object) ? new Ctor : [];
	          } else {
	            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
	          }
	        } else {
	          accumulator = {};
	        }
	      }
	      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Creates an array of the own enumerable property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return baseValues(object, keys(object));
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property values
	     * of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Checks if `n` is between `start` and up to but not including, `end`. If
	     * `end` is not specified it is set to `start` with `start` then set to `0`.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} n The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     */
	    function inRange(value, start, end) {
	      start = +start || 0;
	      if (end === undefined) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      return value >= nativeMin(start, end) && value < nativeMax(start, end);
	    }

	    /**
	     * Produces a random number between `min` and `max` (inclusive). If only one
	     * argument is provided a number between `0` and the given number is returned.
	     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
	     * number is returned instead of an integer.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} [min=0] The minimum possible value.
	     * @param {number} [max=1] The maximum possible value.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(min, max, floating) {
	      if (floating && isIterateeCall(min, max, floating)) {
	        max = floating = undefined;
	      }
	      var noMin = min == null,
	          noMax = max == null;

	      if (floating == null) {
	        if (noMax && typeof min == 'boolean') {
	          floating = min;
	          min = 1;
	        }
	        else if (typeof max == 'boolean') {
	          floating = max;
	          noMax = true;
	        }
	      }
	      if (noMin && noMax) {
	        max = 1;
	        noMax = false;
	      }
	      min = +min || 0;
	      if (noMax) {
	        max = min;
	        min = 0;
	      } else {
	        max = +max || 0;
	      }
	      if (floating || min % 1 || max % 1) {
	        var rand = nativeRandom();
	        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
	      }
	      return baseRandom(min, max);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__foo_bar__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
	    });

	    /**
	     * Capitalizes the first character of `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('fred');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      string = baseToString(string);
	      return string && (string.charAt(0).toUpperCase() + string.slice(1));
	    }

	    /**
	     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = baseToString(string);
	      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search from.
	     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = baseToString(string);
	      target = (target + '');

	      var length = string.length;
	      position = position === undefined
	        ? length
	        : nativeMin(position < 0 ? 0 : (+position || 0), length);

	      position -= target.length;
	      return position >= 0 && string.indexOf(target, position) == position;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
	     * their corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional characters
	     * use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value.
	     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * Backticks are escaped because in Internet Explorer < 9, they can break out
	     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
	     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
	     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
	     * for more details.
	     *
	     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
	     * to reduce XSS vectors.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
	      string = baseToString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
	     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
	     */
	    function escapeRegExp(string) {
	      string = baseToString(string);
	      return (string && reHasRegExpChars.test(string))
	        ? string.replace(reRegExpChars, escapeRegExpChar)
	        : (string || '(?:)');
	    }

	    /**
	     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__foo_bar__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = baseToString(string);
	      length = +length;

	      var strLength = string.length;
	      if (strLength >= length || !nativeIsFinite(length)) {
	        return string;
	      }
	      var mid = (length - strLength) / 2,
	          leftLength = nativeFloor(mid),
	          rightLength = nativeCeil(mid);

	      chars = createPadding('', rightLength, chars);
	      return chars.slice(0, leftLength) + string + chars;
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padLeft('abc', 6);
	     * // => '   abc'
	     *
	     * _.padLeft('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padLeft('abc', 3);
	     * // => 'abc'
	     */
	    var padLeft = createPadDir();

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padRight('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padRight('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padRight('abc', 3);
	     * // => 'abc'
	     */
	    var padRight = createPadDir(true);

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
	     * in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
	     * of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
	      // Chrome fails to trim leading <BOM> whitespace characters.
	      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
	      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      string = trim(string);
	      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=0] The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n) {
	      var result = '';
	      string = baseToString(string);
	      n = +n;
	      if (n < 1 || !string || !nativeIsFinite(n)) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        string += string;
	      } while (n);

	      return result;
	    }

	    /**
	     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--foo-bar');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__foo_bar__');
	     * // => 'Foo Bar'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = baseToString(string);
	      position = position == null
	        ? 0
	        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

	      return string.lastIndexOf(target, position) == position;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is provided it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options] The options object.
	     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
	     * @param {Object} [options.imports] An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
	     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
	     * @param {string} [options.variable] The data object variable name.
	     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // using the "interpolate" delimiter to create a compiled template
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // using the HTML "escape" delimiter to escape data property values
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the internal `print` function in "evaluate" delimiters
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // using custom template delimiters
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // using backslashes to treat delimiters as plain text
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // using the `imports` option to import `jQuery` as `jq`
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the `sourceURL` option to specify a custom sourceURL for the template
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
	     *
	     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // using the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and a stack trace
	     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, otherOptions) {
	      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
	        options = otherOptions = undefined;
	      }
	      string = baseToString(string);
	      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

	      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products requires returning the `match`
	        // string in order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
	      }
	      chars = (chars + '');
	      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimLeft('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimLeft('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimLeft(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string));
	      }
	      return string.slice(charsLeftIndex(string, (chars + '')));
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimRight('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimRight('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimRight(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(0, trimmedRightIndex(string) + 1);
	      }
	      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object|number} [options] The options object or maximum string length.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.trunc('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', 24);
	     * // => 'hi-diddly-ho there, n...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function trunc(string, options, guard) {
	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined;
	      }
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (options != null) {
	        if (isObject(options)) {
	          var separator = 'separator' in options ? options.separator : separator;
	          length = 'length' in options ? (+options.length || 0) : length;
	          omission = 'omission' in options ? baseToString(options.omission) : omission;
	        } else {
	          length = +options || 0;
	        }
	      }
	      string = baseToString(string);
	      if (length >= string.length) {
	        return string;
	      }
	      var end = length - omission.length;
	      if (end < 1) {
	        return omission;
	      }
	      var result = string.slice(0, end);
	      if (separator == null) {
	        return result + omission;
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              newEnd,
	              substring = string.slice(0, end);

	          if (!separator.global) {
	            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            newEnd = match.index;
	          }
	          result = result.slice(0, newEnd == null ? end : newEnd);
	        }
	      } else if (string.indexOf(separator, end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
	     * corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
	     * entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = baseToString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      if (guard && isIterateeCall(string, pattern, guard)) {
	        pattern = undefined;
	      }
	      string = baseToString(string);
	      return string.match(pattern || reWords) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function} func The function to attempt.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // avoid throwing errors for invalid selectors
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = restParam(function(func, args) {
	      try {
	        return func.apply(undefined, args);
	      } catch(e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and arguments of the created function. If `func` is a property name the
	     * created callback returns the property value for a given element. If `func`
	     * is an object the created callback returns `true` for elements that contain
	     * the equivalent object properties, otherwise it returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias iteratee
	     * @category Utility
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // wrap to create custom callback shorthands
	     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
	     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
	     *   if (!match) {
	     *     return callback(func, thisArg);
	     *   }
	     *   return function(object) {
	     *     return match[2] == 'gt'
	     *       ? object[match[1]] > match[3]
	     *       : object[match[1]] < match[3];
	     *   };
	     * });
	     *
	     * _.filter(users, 'age__gt36');
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     */
	    function callback(func, thisArg, guard) {
	      if (guard && isIterateeCall(func, thisArg, guard)) {
	        thisArg = undefined;
	      }
	      return isObjectLike(func)
	        ? matches(func)
	        : baseCallback(func, thisArg);
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var getter = _.constant(object);
	     *
	     * getter() === object;
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * This method returns the first argument provided to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.identity(object) === object;
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that performs a deep comparison between a given object
	     * and `source`, returning `true` if the given object has equivalent property
	     * values, else `false`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
	     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, true));
	    }

	    /**
	     * Creates a function that compares the property value of `path` on a given
	     * object to `value`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * _.find(users, _.matchesProperty('user', 'fred'));
	     * // => { 'user': 'fred' }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, true));
	    }

	    /**
	     * Creates a function that invokes the method at `path` on a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': _.constant(2) } } },
	     *   { 'a': { 'b': { 'c': _.constant(1) } } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    var method = restParam(function(path, args) {
	      return function(object) {
	        return invokePath(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path on `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = restParam(function(object, args) {
	      return function(path) {
	        return invokePath(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable function properties of a source object to the
	     * destination object. If `object` is a function then methods are added to
	     * its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.chain=true] Specify whether the functions added
	     *  are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      if (options == null) {
	        var isObj = isObject(source),
	            props = isObj ? keys(source) : undefined,
	            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;

	        if (!(methodNames ? methodNames.length : isObj)) {
	          methodNames = false;
	          options = source;
	          source = object;
	          object = this;
	        }
	      }
	      if (!methodNames) {
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = true,
	          index = -1,
	          isFunc = isFunction(object),
	          length = methodNames.length;

	      if (options === false) {
	        chain = false;
	      } else if (isObject(options) && 'chain' in options) {
	        chain = options.chain;
	      }
	      while (++index < length) {
	        var methodName = methodNames[index],
	            func = source[methodName];

	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = (function(func) {
	            return function() {
	              var chainAll = this.__chain__;
	              if (chain || chainAll) {
	                var result = object(this.__wrapped__),
	                    actions = result.__actions__ = arrayCopy(this.__actions__);

	                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	                result.__chain__ = chainAll;
	                return result;
	              }
	              return func.apply(object, arrayPush([this.value()], arguments));
	            };
	          }(func));
	        }
	      }
	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      root._ = oldDash;
	      return this;
	    }

	    /**
	     * A no-operation function that returns `undefined` regardless of the
	     * arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.noop(object) === undefined;
	     * // => true
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that returns the property value at `path` on a
	     * given object.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': 2 } } },
	     *   { 'a': { 'b': { 'c': 1 } } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the property value at a given path on `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return baseGet(object, toPath(path), path + '');
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. If `end` is not specified it is
	     * set to `start` with `start` then set to `0`. If `end` is less than `start`
	     * a zero-length range is created unless a negative `step` is specified.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the new array of numbers.
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    function range(start, end, step) {
	      if (step && isIterateeCall(start, end, step)) {
	        end = step = undefined;
	      }
	      start = +start || 0;
	      step = step == null ? 1 : (+step || 0);

	      if (end == null) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
	      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (++index < length) {
	        result[index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * Invokes the iteratee function `n` times, returning an array of the results
	     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
	     * one argument; (index).
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
	     * // => [3, 6, 4]
	     *
	     * _.times(3, function(n) {
	     *   mage.castSpell(n);
	     * });
	     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
	     *
	     * _.times(3, function(n) {
	     *   this.cast(n);
	     * }, mage);
	     * // => also invokes `mage.castSpell(n)` three times
	     */
	    function times(n, iteratee, thisArg) {
	      n = nativeFloor(n);

	      // Exit early to avoid a JSC JIT bug in Safari 8
	      // where `Array(0)` is treated as `Array(1)`.
	      if (n < 1 || !nativeIsFinite(n)) {
	        return [];
	      }
	      var index = -1,
	          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

	      iteratee = bindCallback(iteratee, thisArg, 1);
	      while (++index < n) {
	        if (index < MAX_ARRAY_LENGTH) {
	          result[index] = iteratee(index);
	        } else {
	          iteratee(index);
	        }
	      }
	      return result;
	    }

	    /**
	     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {string} [prefix] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return baseToString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} augend The first number to add.
	     * @param {number} addend The second number to add.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    function add(augend, addend) {
	      return (+augend || 0) + (+addend || 0);
	    }

	    /**
	     * Calculates `n` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Calculates `n` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Gets the maximum value of `collection`. If `collection` is empty or falsey
	     * `-Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => -Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.max(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.max(users, 'age');
	     * // => { 'user': 'fred', 'age': 40 }
	     */
	    var max = createExtremum(gt, NEGATIVE_INFINITY);

	    /**
	     * Gets the minimum value of `collection`. If `collection` is empty or falsey
	     * `Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.min(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.min(users, 'age');
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var min = createExtremum(lt, POSITIVE_INFINITY);

	    /**
	     * Calculates `n` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Gets the sum of the values in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 6]);
	     * // => 10
	     *
	     * _.sum({ 'a': 4, 'b': 6 });
	     * // => 10
	     *
	     * var objects = [
	     *   { 'n': 4 },
	     *   { 'n': 6 }
	     * ];
	     *
	     * _.sum(objects, function(object) {
	     *   return object.n;
	     * });
	     * // => 10
	     *
	     * // using the `_.property` callback shorthand
	     * _.sum(objects, 'n');
	     * // => 10
	     */
	    function sum(collection, iteratee, thisArg) {
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = undefined;
	      }
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return iteratee.length == 1
	        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
	        : baseSum(collection, iteratee);
	    }

	    /*------------------------------------------------------------------------*/

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    // Add functions to the `Map` cache.
	    MapCache.prototype['delete'] = mapDelete;
	    MapCache.prototype.get = mapGet;
	    MapCache.prototype.has = mapHas;
	    MapCache.prototype.set = mapSet;

	    // Add functions to the `Set` cache.
	    SetCache.prototype.push = cachePush;

	    // Assign cache to `_.memoize`.
	    memoize.Cache = MapCache;

	    // Add functions that return wrapped values when chaining.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.callback = callback;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.functions = functions;
	    lodash.groupBy = groupBy;
	    lodash.indexBy = indexBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.invert = invert;
	    lodash.invoke = invoke;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.modArgs = modArgs;
	    lodash.negate = negate;
	    lodash.omit = omit;
	    lodash.once = once;
	    lodash.pairs = pairs;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pluck = pluck;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.restParam = restParam;
	    lodash.set = set;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortByAll = sortByAll;
	    lodash.sortByOrder = sortByOrder;
	    lodash.spread = spread;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.times = times;
	    lodash.toArray = toArray;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.union = union;
	    lodash.uniq = uniq;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.where = where;
	    lodash.without = without;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.backflow = flowRight;
	    lodash.collect = map;
	    lodash.compose = flowRight;
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.extend = assign;
	    lodash.iteratee = callback;
	    lodash.methods = functions;
	    lodash.object = zipObject;
	    lodash.select = filter;
	    lodash.tail = rest;
	    lodash.unique = uniq;

	    // Add functions to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add functions that return unwrapped values when chaining.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.deburr = deburr;
	    lodash.endsWith = endsWith;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.findWhere = findWhere;
	    lodash.first = first;
	    lodash.floor = floor;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isBoolean = isBoolean;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isMatch = isMatch;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isString = isString;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.min = min;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padLeft = padLeft;
	    lodash.padRight = padRight;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.sum = sum;
	    lodash.template = template;
	    lodash.trim = trim;
	    lodash.trimLeft = trimLeft;
	    lodash.trimRight = trimRight;
	    lodash.trunc = trunc;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.words = words;

	    // Add aliases.
	    lodash.all = every;
	    lodash.any = some;
	    lodash.contains = includes;
	    lodash.eq = isEqual;
	    lodash.detect = find;
	    lodash.foldl = reduce;
	    lodash.foldr = reduceRight;
	    lodash.head = first;
	    lodash.include = includes;
	    lodash.inject = reduce;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!lodash.prototype[methodName]) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), false);

	    /*------------------------------------------------------------------------*/

	    // Add functions capable of returning wrapped and unwrapped values when chaining.
	    lodash.sample = sample;

	    lodash.prototype.sample = function(n) {
	      if (!this.__chain__ && n == null) {
	        return sample(this.value());
	      }
	      return this.thru(function(value) {
	        return sample(value, n);
	      });
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type string
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        var filtered = this.__filtered__;
	        if (filtered && !index) {
	          return new LazyWrapper(this);
	        }
	        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);

	        var result = this.clone();
	        if (filtered) {
	          result.__takeCount__ = nativeMin(result.__takeCount__, n);
	        } else {
	          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type != LAZY_MAP_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
	        var result = this.clone();
	        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.first` and `_.last`.
	    arrayEach(['first', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
	    arrayEach(['initial', 'rest'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
	    arrayEach(['pluck', 'where'], function(methodName, index) {
	      var operationName = index ? 'filter' : 'map',
	          createCallback = index ? baseMatches : property;

	      LazyWrapper.prototype[methodName] = function(value) {
	        return this[operationName](createCallback(value));
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.reject = function(predicate, thisArg) {
	      predicate = getCallback(predicate, thisArg, 1);
	      return this.filter(function(value) {
	        return !predicate(value);
	      });
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = start == null ? 0 : (+start || 0);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined) {
	        end = (+end || 0);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
	      return this.reverse().takeWhile(predicate, thisArg).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(POSITIVE_INFINITY);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
	          retUnwrapped = /^(?:first|last)$/.test(methodName),
	          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var args = retUnwrapped ? [1] : arguments,
	            chainAll = this.__chain__,
	            value = this.__wrapped__,
	            isHybrid = !!this.__actions__.length,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var interceptor = function(value) {
	          return (retUnwrapped && chainAll)
	            ? lodashFunc(value, 1)[0]
	            : lodashFunc.apply(undefined, arrayPush([value], args));
	        };

	        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },
	            onlyLazy = isLazy && !isHybrid;

	        if (retUnwrapped && !chainAll) {
	          if (onlyLazy) {
	            value = value.clone();
	            value.__actions__.push(action);
	            return func.call(value);
	          }
	          return lodashFunc.call(undefined, this.value())[0];
	        }
	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push(action);
	          return new LodashWrapper(result, chainAll);
	        }
	        return this.thru(interceptor);
	      };
	    });

	    // Add `Array` and `String` methods to `lodash.prototype`.
	    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
	      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          return func.apply(this.value(), args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(value, args);
	        });
	      };
	    });

	    // Map minified function names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = lodashFunc.name,
	            names = realNames[key] || (realNames[key] = []);

	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

	    // Add functions to the lazy wrapper.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chaining functions to the `lodash` wrapper.
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.concat = wrapperConcat;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toString = wrapperToString;
	    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    // Add function aliases to the `lodash` wrapper.
	    lodash.prototype.collect = lodash.prototype.map;
	    lodash.prototype.head = lodash.prototype.first;
	    lodash.prototype.select = lodash.prototype.filter;
	    lodash.prototype.tail = lodash.prototype.rest;

	    return lodash;
	  }

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Some AMD build optimizers like r.js check for condition patterns like the following:
	  if (true) {
	    // Expose lodash to the global object when an AMD loader is present to avoid
	    // errors in cases where lodash is loaded by a script tag and not intended
	    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
	    // more details.
	    root._ = _;

	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
	  else if (freeExports && freeModule) {
	    // Export for Node.js or RingoJS.
	    if (moduleExports) {
	      (freeModule.exports = _)._ = _;
	    }
	    // Export for Rhino with CommonJS support.
	    else {
	      freeExports._ = _;
	    }
	  }
	  else {
	    // Export for a browser or Rhino.
	    root._ = _;
	  }
	}.call(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(340)(module), (function() { return this; }())))

/***/ },

/***/ 340:
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },

/***/ 341:
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },

/***/ 349:
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },

/***/ 365:
/***/ function(module, exports, __webpack_require__) {

	var jQuery = __webpack_require__(366);

	/*! jQuery UI - v1.10.3 - 2013-05-03
	* http://jqueryui.com
	* Includes: jquery.ui.core.js, jquery.ui.widget.js, jquery.ui.mouse.js, jquery.ui.draggable.js, jquery.ui.droppable.js, jquery.ui.resizable.js, jquery.ui.selectable.js, jquery.ui.sortable.js, jquery.ui.effect.js, jquery.ui.accordion.js, jquery.ui.autocomplete.js, jquery.ui.button.js, jquery.ui.datepicker.js, jquery.ui.dialog.js, jquery.ui.effect-blind.js, jquery.ui.effect-bounce.js, jquery.ui.effect-clip.js, jquery.ui.effect-drop.js, jquery.ui.effect-explode.js, jquery.ui.effect-fade.js, jquery.ui.effect-fold.js, jquery.ui.effect-highlight.js, jquery.ui.effect-pulsate.js, jquery.ui.effect-scale.js, jquery.ui.effect-shake.js, jquery.ui.effect-slide.js, jquery.ui.effect-transfer.js, jquery.ui.menu.js, jquery.ui.position.js, jquery.ui.progressbar.js, jquery.ui.slider.js, jquery.ui.spinner.js, jquery.ui.tabs.js, jquery.ui.tooltip.js
	* Copyright 2013 jQuery Foundation and other contributors; Licensed MIT */
	(function( $, undefined ) {

	var uuid = 0,
		runiqueId = /^ui-id-\d+$/;

	// $.ui might exist from components with no dependencies, e.g., $.ui.position
	$.ui = $.ui || {};

	$.extend( $.ui, {
		version: "1.10.3",

		keyCode: {
			BACKSPACE: 8,
			COMMA: 188,
			DELETE: 46,
			DOWN: 40,
			END: 35,
			ENTER: 13,
			ESCAPE: 27,
			HOME: 36,
			LEFT: 37,
			NUMPAD_ADD: 107,
			NUMPAD_DECIMAL: 110,
			NUMPAD_DIVIDE: 111,
			NUMPAD_ENTER: 108,
			NUMPAD_MULTIPLY: 106,
			NUMPAD_SUBTRACT: 109,
			PAGE_DOWN: 34,
			PAGE_UP: 33,
			PERIOD: 190,
			RIGHT: 39,
			SPACE: 32,
			TAB: 9,
			UP: 38
		}
	});

	// plugins
	$.fn.extend({
		focus: (function( orig ) {
			return function( delay, fn ) {
				return typeof delay === "number" ?
					this.each(function() {
						var elem = this;
						setTimeout(function() {
							$( elem ).focus();
							if ( fn ) {
								fn.call( elem );
							}
						}, delay );
					}) :
					orig.apply( this, arguments );
			};
		})( $.fn.focus ),

		scrollParent: function() {
			var scrollParent;
			if (($.ui.ie && (/(static|relative)/).test(this.css("position"))) || (/absolute/).test(this.css("position"))) {
				scrollParent = this.parents().filter(function() {
					return (/(relative|absolute|fixed)/).test($.css(this,"position")) && (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
				}).eq(0);
			} else {
				scrollParent = this.parents().filter(function() {
					return (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
				}).eq(0);
			}

			return (/fixed/).test(this.css("position")) || !scrollParent.length ? $(document) : scrollParent;
		},

		zIndex: function( zIndex ) {
			if ( zIndex !== undefined ) {
				return this.css( "zIndex", zIndex );
			}

			if ( this.length ) {
				var elem = $( this[ 0 ] ), position, value;
				while ( elem.length && elem[ 0 ] !== document ) {
					// Ignore z-index if position is set to a value where z-index is ignored by the browser
					// This makes behavior of this function consistent across browsers
					// WebKit always returns auto if the element is positioned
					position = elem.css( "position" );
					if ( position === "absolute" || position === "relative" || position === "fixed" ) {
						// IE returns 0 when zIndex is not specified
						// other browsers return a string
						// we ignore the case of nested elements with an explicit value of 0
						// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
						value = parseInt( elem.css( "zIndex" ), 10 );
						if ( !isNaN( value ) && value !== 0 ) {
							return value;
						}
					}
					elem = elem.parent();
				}
			}

			return 0;
		},

		uniqueId: function() {
			return this.each(function() {
				if ( !this.id ) {
					this.id = "ui-id-" + (++uuid);
				}
			});
		},

		removeUniqueId: function() {
			return this.each(function() {
				if ( runiqueId.test( this.id ) ) {
					$( this ).removeAttr( "id" );
				}
			});
		}
	});

	// selectors
	function focusable( element, isTabIndexNotNaN ) {
		var map, mapName, img,
			nodeName = element.nodeName.toLowerCase();
		if ( "area" === nodeName ) {
			map = element.parentNode;
			mapName = map.name;
			if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
				return false;
			}
			img = $( "img[usemap=#" + mapName + "]" )[0];
			return !!img && visible( img );
		}
		return ( /input|select|textarea|button|object/.test( nodeName ) ?
			!element.disabled :
			"a" === nodeName ?
				element.href || isTabIndexNotNaN :
				isTabIndexNotNaN) &&
			// the element and all of its ancestors must be visible
			visible( element );
	}

	function visible( element ) {
		return $.expr.filters.visible( element ) &&
			!$( element ).parents().addBack().filter(function() {
				return $.css( this, "visibility" ) === "hidden";
			}).length;
	}

	$.extend( $.expr[ ":" ], {
		data: $.expr.createPseudo ?
			$.expr.createPseudo(function( dataName ) {
				return function( elem ) {
					return !!$.data( elem, dataName );
				};
			}) :
			// support: jQuery <1.8
			function( elem, i, match ) {
				return !!$.data( elem, match[ 3 ] );
			},

		focusable: function( element ) {
			return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
		},

		tabbable: function( element ) {
			var tabIndex = $.attr( element, "tabindex" ),
				isTabIndexNaN = isNaN( tabIndex );
			return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
		}
	});

	// support: jQuery <1.8
	if ( !$( "<a>" ).outerWidth( 1 ).jquery ) {
		$.each( [ "Width", "Height" ], function( i, name ) {
			var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
				type = name.toLowerCase(),
				orig = {
					innerWidth: $.fn.innerWidth,
					innerHeight: $.fn.innerHeight,
					outerWidth: $.fn.outerWidth,
					outerHeight: $.fn.outerHeight
				};

			function reduce( elem, size, border, margin ) {
				$.each( side, function() {
					size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
					if ( border ) {
						size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
					}
					if ( margin ) {
						size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
					}
				});
				return size;
			}

			$.fn[ "inner" + name ] = function( size ) {
				if ( size === undefined ) {
					return orig[ "inner" + name ].call( this );
				}

				return this.each(function() {
					$( this ).css( type, reduce( this, size ) + "px" );
				});
			};

			$.fn[ "outer" + name] = function( size, margin ) {
				if ( typeof size !== "number" ) {
					return orig[ "outer" + name ].call( this, size );
				}

				return this.each(function() {
					$( this).css( type, reduce( this, size, true, margin ) + "px" );
				});
			};
		});
	}

	// support: jQuery <1.8
	if ( !$.fn.addBack ) {
		$.fn.addBack = function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		};
	}

	// support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)
	if ( $( "<a>" ).data( "a-b", "a" ).removeData( "a-b" ).data( "a-b" ) ) {
		$.fn.removeData = (function( removeData ) {
			return function( key ) {
				if ( arguments.length ) {
					return removeData.call( this, $.camelCase( key ) );
				} else {
					return removeData.call( this );
				}
			};
		})( $.fn.removeData );
	}





	// deprecated
	$.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );

	$.support.selectstart = "onselectstart" in document.createElement( "div" );
	$.fn.extend({
		disableSelection: function() {
			return this.bind( ( $.support.selectstart ? "selectstart" : "mousedown" ) +
				".ui-disableSelection", function( event ) {
					event.preventDefault();
				});
		},

		enableSelection: function() {
			return this.unbind( ".ui-disableSelection" );
		}
	});

	$.extend( $.ui, {
		// $.ui.plugin is deprecated. Use $.widget() extensions instead.
		plugin: {
			add: function( module, option, set ) {
				var i,
					proto = $.ui[ module ].prototype;
				for ( i in set ) {
					proto.plugins[ i ] = proto.plugins[ i ] || [];
					proto.plugins[ i ].push( [ option, set[ i ] ] );
				}
			},
			call: function( instance, name, args ) {
				var i,
					set = instance.plugins[ name ];
				if ( !set || !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) {
					return;
				}

				for ( i = 0; i < set.length; i++ ) {
					if ( instance.options[ set[ i ][ 0 ] ] ) {
						set[ i ][ 1 ].apply( instance.element, args );
					}
				}
			}
		},

		// only used by resizable
		hasScroll: function( el, a ) {

			//If overflow is hidden, the element might have extra content, but the user wants to hide it
			if ( $( el ).css( "overflow" ) === "hidden") {
				return false;
			}

			var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
				has = false;

			if ( el[ scroll ] > 0 ) {
				return true;
			}

			// TODO: determine which cases actually cause this to happen
			// if the element doesn't have the scroll set, see if it's possible to
			// set the scroll
			el[ scroll ] = 1;
			has = ( el[ scroll ] > 0 );
			el[ scroll ] = 0;
			return has;
		}
	});

	})( jQuery );

	(function( $, undefined ) {

	var uuid = 0,
		slice = Array.prototype.slice,
		_cleanData = $.cleanData;
	$.cleanData = function( elems ) {
		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
			try {
				$( elem ).triggerHandler( "remove" );
			// http://bugs.jquery.com/ticket/8235
			} catch( e ) {}
		}
		_cleanData( elems );
	};

	$.widget = function( name, base, prototype ) {
		var fullName, existingConstructor, constructor, basePrototype,
			// proxiedPrototype allows the provided prototype to remain unmodified
			// so that it can be used as a mixin for multiple widgets (#8876)
			proxiedPrototype = {},
			namespace = name.split( "." )[ 0 ];

		name = name.split( "." )[ 1 ];
		fullName = namespace + "-" + name;

		if ( !prototype ) {
			prototype = base;
			base = $.Widget;
		}

		// create selector for plugin
		$.expr[ ":" ][ fullName.toLowerCase() ] = function( elem ) {
			return !!$.data( elem, fullName );
		};

		$[ namespace ] = $[ namespace ] || {};
		existingConstructor = $[ namespace ][ name ];
		constructor = $[ namespace ][ name ] = function( options, element ) {
			// allow instantiation without "new" keyword
			if ( !this._createWidget ) {
				return new constructor( options, element );
			}

			// allow instantiation without initializing for simple inheritance
			// must use "new" keyword (the code above always passes args)
			if ( arguments.length ) {
				this._createWidget( options, element );
			}
		};
		// extend with the existing constructor to carry over any static properties
		$.extend( constructor, existingConstructor, {
			version: prototype.version,
			// copy the object used to create the prototype in case we need to
			// redefine the widget later
			_proto: $.extend( {}, prototype ),
			// track widgets that inherit from this widget in case this widget is
			// redefined after a widget inherits from it
			_childConstructors: []
		});

		basePrototype = new base();
		// we need to make the options hash a property directly on the new instance
		// otherwise we'll modify the options hash on the prototype that we're
		// inheriting from
		basePrototype.options = $.widget.extend( {}, basePrototype.options );
		$.each( prototype, function( prop, value ) {
			if ( !$.isFunction( value ) ) {
				proxiedPrototype[ prop ] = value;
				return;
			}
			proxiedPrototype[ prop ] = (function() {
				var _super = function() {
						return base.prototype[ prop ].apply( this, arguments );
					},
					_superApply = function( args ) {
						return base.prototype[ prop ].apply( this, args );
					};
				return function() {
					var __super = this._super,
						__superApply = this._superApply,
						returnValue;

					this._super = _super;
					this._superApply = _superApply;

					returnValue = value.apply( this, arguments );

					this._super = __super;
					this._superApply = __superApply;

					return returnValue;
				};
			})();
		});
		constructor.prototype = $.widget.extend( basePrototype, {
			// TODO: remove support for widgetEventPrefix
			// always use the name + a colon as the prefix, e.g., draggable:start
			// don't prefix for widgets that aren't DOM-based
			widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix : name
		}, proxiedPrototype, {
			constructor: constructor,
			namespace: namespace,
			widgetName: name,
			widgetFullName: fullName
		});

		// If this widget is being redefined then we need to find all widgets that
		// are inheriting from it and redefine all of them so that they inherit from
		// the new version of this widget. We're essentially trying to replace one
		// level in the prototype chain.
		if ( existingConstructor ) {
			$.each( existingConstructor._childConstructors, function( i, child ) {
				var childPrototype = child.prototype;

				// redefine the child widget using the same prototype that was
				// originally used, but inherit from the new version of the base
				$.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto );
			});
			// remove the list of existing child constructors from the old constructor
			// so the old child constructors can be garbage collected
			delete existingConstructor._childConstructors;
		} else {
			base._childConstructors.push( constructor );
		}

		$.widget.bridge( name, constructor );
	};

	$.widget.extend = function( target ) {
		var input = slice.call( arguments, 1 ),
			inputIndex = 0,
			inputLength = input.length,
			key,
			value;
		for ( ; inputIndex < inputLength; inputIndex++ ) {
			for ( key in input[ inputIndex ] ) {
				value = input[ inputIndex ][ key ];
				if ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {
					// Clone objects
					if ( $.isPlainObject( value ) ) {
						target[ key ] = $.isPlainObject( target[ key ] ) ?
							$.widget.extend( {}, target[ key ], value ) :
							// Don't extend strings, arrays, etc. with objects
							$.widget.extend( {}, value );
					// Copy everything else by reference
					} else {
						target[ key ] = value;
					}
				}
			}
		}
		return target;
	};

	$.widget.bridge = function( name, object ) {
		var fullName = object.prototype.widgetFullName || name;
		$.fn[ name ] = function( options ) {
			var isMethodCall = typeof options === "string",
				args = slice.call( arguments, 1 ),
				returnValue = this;

			// allow multiple hashes to be passed on init
			options = !isMethodCall && args.length ?
				$.widget.extend.apply( null, [ options ].concat(args) ) :
				options;

			if ( isMethodCall ) {
				this.each(function() {
					var methodValue,
						instance = $.data( this, fullName );
					if ( !instance ) {
						return $.error( "cannot call methods on " + name + " prior to initialization; " +
							"attempted to call method '" + options + "'" );
					}
					if ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === "_" ) {
						return $.error( "no such method '" + options + "' for " + name + " widget instance" );
					}
					methodValue = instance[ options ].apply( instance, args );
					if ( methodValue !== instance && methodValue !== undefined ) {
						returnValue = methodValue && methodValue.jquery ?
							returnValue.pushStack( methodValue.get() ) :
							methodValue;
						return false;
					}
				});
			} else {
				this.each(function() {
					var instance = $.data( this, fullName );
					if ( instance ) {
						instance.option( options || {} )._init();
					} else {
						$.data( this, fullName, new object( options, this ) );
					}
				});
			}

			return returnValue;
		};
	};

	$.Widget = function( /* options, element */ ) {};
	$.Widget._childConstructors = [];

	$.Widget.prototype = {
		widgetName: "widget",
		widgetEventPrefix: "",
		defaultElement: "<div>",
		options: {
			disabled: false,

			// callbacks
			create: null
		},
		_createWidget: function( options, element ) {
			element = $( element || this.defaultElement || this )[ 0 ];
			this.element = $( element );
			this.uuid = uuid++;
			this.eventNamespace = "." + this.widgetName + this.uuid;
			this.options = $.widget.extend( {},
				this.options,
				this._getCreateOptions(),
				options );

			this.bindings = $();
			this.hoverable = $();
			this.focusable = $();

			if ( element !== this ) {
				$.data( element, this.widgetFullName, this );
				this._on( true, this.element, {
					remove: function( event ) {
						if ( event.target === element ) {
							this.destroy();
						}
					}
				});
				this.document = $( element.style ?
					// element within the document
					element.ownerDocument :
					// element is window or document
					element.document || element );
				this.window = $( this.document[0].defaultView || this.document[0].parentWindow );
			}

			this._create();
			this._trigger( "create", null, this._getCreateEventData() );
			this._init();
		},
		_getCreateOptions: $.noop,
		_getCreateEventData: $.noop,
		_create: $.noop,
		_init: $.noop,

		destroy: function() {
			this._destroy();
			// we can probably remove the unbind calls in 2.0
			// all event bindings should go through this._on()
			this.element
				.unbind( this.eventNamespace )
				// 1.9 BC for #7810
				// TODO remove dual storage
				.removeData( this.widgetName )
				.removeData( this.widgetFullName )
				// support: jquery <1.6.3
				// http://bugs.jquery.com/ticket/9413
				.removeData( $.camelCase( this.widgetFullName ) );
			this.widget()
				.unbind( this.eventNamespace )
				.removeAttr( "aria-disabled" )
				.removeClass(
					this.widgetFullName + "-disabled " +
					"ui-state-disabled" );

			// clean up events and states
			this.bindings.unbind( this.eventNamespace );
			this.hoverable.removeClass( "ui-state-hover" );
			this.focusable.removeClass( "ui-state-focus" );
		},
		_destroy: $.noop,

		widget: function() {
			return this.element;
		},

		option: function( key, value ) {
			var options = key,
				parts,
				curOption,
				i;

			if ( arguments.length === 0 ) {
				// don't return a reference to the internal hash
				return $.widget.extend( {}, this.options );
			}

			if ( typeof key === "string" ) {
				// handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
				options = {};
				parts = key.split( "." );
				key = parts.shift();
				if ( parts.length ) {
					curOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );
					for ( i = 0; i < parts.length - 1; i++ ) {
						curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
						curOption = curOption[ parts[ i ] ];
					}
					key = parts.pop();
					if ( value === undefined ) {
						return curOption[ key ] === undefined ? null : curOption[ key ];
					}
					curOption[ key ] = value;
				} else {
					if ( value === undefined ) {
						return this.options[ key ] === undefined ? null : this.options[ key ];
					}
					options[ key ] = value;
				}
			}

			this._setOptions( options );

			return this;
		},
		_setOptions: function( options ) {
			var key;

			for ( key in options ) {
				this._setOption( key, options[ key ] );
			}

			return this;
		},
		_setOption: function( key, value ) {
			this.options[ key ] = value;

			if ( key === "disabled" ) {
				this.widget()
					.toggleClass( this.widgetFullName + "-disabled ui-state-disabled", !!value )
					.attr( "aria-disabled", value );
				this.hoverable.removeClass( "ui-state-hover" );
				this.focusable.removeClass( "ui-state-focus" );
			}

			return this;
		},

		enable: function() {
			return this._setOption( "disabled", false );
		},
		disable: function() {
			return this._setOption( "disabled", true );
		},

		_on: function( suppressDisabledCheck, element, handlers ) {
			var delegateElement,
				instance = this;

			// no suppressDisabledCheck flag, shuffle arguments
			if ( typeof suppressDisabledCheck !== "boolean" ) {
				handlers = element;
				element = suppressDisabledCheck;
				suppressDisabledCheck = false;
			}

			// no element argument, shuffle and use this.element
			if ( !handlers ) {
				handlers = element;
				element = this.element;
				delegateElement = this.widget();
			} else {
				// accept selectors, DOM elements
				element = delegateElement = $( element );
				this.bindings = this.bindings.add( element );
			}

			$.each( handlers, function( event, handler ) {
				function handlerProxy() {
					// allow widgets to customize the disabled handling
					// - disabled as an array instead of boolean
					// - disabled class as method for disabling individual parts
					if ( !suppressDisabledCheck &&
							( instance.options.disabled === true ||
								$( this ).hasClass( "ui-state-disabled" ) ) ) {
						return;
					}
					return ( typeof handler === "string" ? instance[ handler ] : handler )
						.apply( instance, arguments );
				}

				// copy the guid so direct unbinding works
				if ( typeof handler !== "string" ) {
					handlerProxy.guid = handler.guid =
						handler.guid || handlerProxy.guid || $.guid++;
				}

				var match = event.match( /^(\w+)\s*(.*)$/ ),
					eventName = match[1] + instance.eventNamespace,
					selector = match[2];
				if ( selector ) {
					delegateElement.delegate( selector, eventName, handlerProxy );
				} else {
					element.bind( eventName, handlerProxy );
				}
			});
		},

		_off: function( element, eventName ) {
			eventName = (eventName || "").split( " " ).join( this.eventNamespace + " " ) + this.eventNamespace;
			element.unbind( eventName ).undelegate( eventName );
		},

		_delay: function( handler, delay ) {
			function handlerProxy() {
				return ( typeof handler === "string" ? instance[ handler ] : handler )
					.apply( instance, arguments );
			}
			var instance = this;
			return setTimeout( handlerProxy, delay || 0 );
		},

		_hoverable: function( element ) {
			this.hoverable = this.hoverable.add( element );
			this._on( element, {
				mouseenter: function( event ) {
					$( event.currentTarget ).addClass( "ui-state-hover" );
				},
				mouseleave: function( event ) {
					$( event.currentTarget ).removeClass( "ui-state-hover" );
				}
			});
		},

		_focusable: function( element ) {
			this.focusable = this.focusable.add( element );
			this._on( element, {
				focusin: function( event ) {
					$( event.currentTarget ).addClass( "ui-state-focus" );
				},
				focusout: function( event ) {
					$( event.currentTarget ).removeClass( "ui-state-focus" );
				}
			});
		},

		_trigger: function( type, event, data ) {
			var prop, orig,
				callback = this.options[ type ];

			data = data || {};
			event = $.Event( event );
			event.type = ( type === this.widgetEventPrefix ?
				type :
				this.widgetEventPrefix + type ).toLowerCase();
			// the original event may come from any element
			// so we need to reset the target on the new event
			event.target = this.element[ 0 ];

			// copy original event properties over to the new event
			orig = event.originalEvent;
			if ( orig ) {
				for ( prop in orig ) {
					if ( !( prop in event ) ) {
						event[ prop ] = orig[ prop ];
					}
				}
			}

			this.element.trigger( event, data );
			return !( $.isFunction( callback ) &&
				callback.apply( this.element[0], [ event ].concat( data ) ) === false ||
				event.isDefaultPrevented() );
		}
	};

	$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
		$.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
			if ( typeof options === "string" ) {
				options = { effect: options };
			}
			var hasOptions,
				effectName = !options ?
					method :
					options === true || typeof options === "number" ?
						defaultEffect :
						options.effect || defaultEffect;
			options = options || {};
			if ( typeof options === "number" ) {
				options = { duration: options };
			}
			hasOptions = !$.isEmptyObject( options );
			options.complete = callback;
			if ( options.delay ) {
				element.delay( options.delay );
			}
			if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
				element[ method ]( options );
			} else if ( effectName !== method && element[ effectName ] ) {
				element[ effectName ]( options.duration, options.easing, callback );
			} else {
				element.queue(function( next ) {
					$( this )[ method ]();
					if ( callback ) {
						callback.call( element[ 0 ] );
					}
					next();
				});
			}
		};
	});

	})( jQuery );

	(function( $, undefined ) {

	var mouseHandled = false;
	$( document ).mouseup( function() {
		mouseHandled = false;
	});

	$.widget("ui.mouse", {
		version: "1.10.3",
		options: {
			cancel: "input,textarea,button,select,option",
			distance: 1,
			delay: 0
		},
		_mouseInit: function() {
			var that = this;

			this.element
				.bind("mousedown."+this.widgetName, function(event) {
					return that._mouseDown(event);
				})
				.bind("click."+this.widgetName, function(event) {
					if (true === $.data(event.target, that.widgetName + ".preventClickEvent")) {
						$.removeData(event.target, that.widgetName + ".preventClickEvent");
						event.stopImmediatePropagation();
						return false;
					}
				});

			this.started = false;
		},

		// TODO: make sure destroying one instance of mouse doesn't mess with
		// other instances of mouse
		_mouseDestroy: function() {
			this.element.unbind("."+this.widgetName);
			if ( this._mouseMoveDelegate ) {
				$(document)
					.unbind("mousemove."+this.widgetName, this._mouseMoveDelegate)
					.unbind("mouseup."+this.widgetName, this._mouseUpDelegate);
			}
		},

		_mouseDown: function(event) {
			// don't let more than one widget handle mouseStart
			if( mouseHandled ) { return; }

			// we may have missed mouseup (out of window)
			(this._mouseStarted && this._mouseUp(event));

			this._mouseDownEvent = event;

			var that = this,
				btnIsLeft = (event.which === 1),
				// event.target.nodeName works around a bug in IE 8 with
				// disabled inputs (#7620)
				elIsCancel = (typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);
			if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
				return true;
			}

			this.mouseDelayMet = !this.options.delay;
			if (!this.mouseDelayMet) {
				this._mouseDelayTimer = setTimeout(function() {
					that.mouseDelayMet = true;
				}, this.options.delay);
			}

			if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
				this._mouseStarted = (this._mouseStart(event) !== false);
				if (!this._mouseStarted) {
					event.preventDefault();
					return true;
				}
			}

			// Click event may never have fired (Gecko & Opera)
			if (true === $.data(event.target, this.widgetName + ".preventClickEvent")) {
				$.removeData(event.target, this.widgetName + ".preventClickEvent");
			}

			// these delegates are required to keep context
			this._mouseMoveDelegate = function(event) {
				return that._mouseMove(event);
			};
			this._mouseUpDelegate = function(event) {
				return that._mouseUp(event);
			};
			$(document)
				.bind("mousemove."+this.widgetName, this._mouseMoveDelegate)
				.bind("mouseup."+this.widgetName, this._mouseUpDelegate);

			event.preventDefault();

			mouseHandled = true;
			return true;
		},

		_mouseMove: function(event) {
			// IE mouseup check - mouseup happened when mouse was out of window
			if ($.ui.ie && ( !document.documentMode || document.documentMode < 9 ) && !event.button) {
				return this._mouseUp(event);
			}

			if (this._mouseStarted) {
				this._mouseDrag(event);
				return event.preventDefault();
			}

			if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
				this._mouseStarted =
					(this._mouseStart(this._mouseDownEvent, event) !== false);
				(this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));
			}

			return !this._mouseStarted;
		},

		_mouseUp: function(event) {
			$(document)
				.unbind("mousemove."+this.widgetName, this._mouseMoveDelegate)
				.unbind("mouseup."+this.widgetName, this._mouseUpDelegate);

			if (this._mouseStarted) {
				this._mouseStarted = false;

				if (event.target === this._mouseDownEvent.target) {
					$.data(event.target, this.widgetName + ".preventClickEvent", true);
				}

				this._mouseStop(event);
			}

			return false;
		},

		_mouseDistanceMet: function(event) {
			return (Math.max(
					Math.abs(this._mouseDownEvent.pageX - event.pageX),
					Math.abs(this._mouseDownEvent.pageY - event.pageY)
				) >= this.options.distance
			);
		},

		_mouseDelayMet: function(/* event */) {
			return this.mouseDelayMet;
		},

		// These are placeholder methods, to be overriden by extending plugin
		_mouseStart: function(/* event */) {},
		_mouseDrag: function(/* event */) {},
		_mouseStop: function(/* event */) {},
		_mouseCapture: function(/* event */) { return true; }
	});

	})(jQuery);

	(function( $, undefined ) {

	$.widget("ui.draggable", $.ui.mouse, {
		version: "1.10.3",
		widgetEventPrefix: "drag",
		options: {
			addClasses: true,
			appendTo: "parent",
			axis: false,
			connectToSortable: false,
			containment: false,
			cursor: "auto",
			cursorAt: false,
			grid: false,
			handle: false,
			helper: "original",
			iframeFix: false,
			opacity: false,
			refreshPositions: false,
			revert: false,
			revertDuration: 500,
			scope: "default",
			scroll: true,
			scrollSensitivity: 20,
			scrollSpeed: 20,
			snap: false,
			snapMode: "both",
			snapTolerance: 20,
			stack: false,
			zIndex: false,

			// callbacks
			drag: null,
			start: null,
			stop: null
		},
		_create: function() {

			if (this.options.helper === "original" && !(/^(?:r|a|f)/).test(this.element.css("position"))) {
				this.element[0].style.position = "relative";
			}
			if (this.options.addClasses){
				this.element.addClass("ui-draggable");
			}
			if (this.options.disabled){
				this.element.addClass("ui-draggable-disabled");
			}

			this._mouseInit();

		},

		_destroy: function() {
			this.element.removeClass( "ui-draggable ui-draggable-dragging ui-draggable-disabled" );
			this._mouseDestroy();
		},

		_mouseCapture: function(event) {

			var o = this.options;

			// among others, prevent a drag on a resizable-handle
			if (this.helper || o.disabled || $(event.target).closest(".ui-resizable-handle").length > 0) {
				return false;
			}

			//Quit if we're not on a valid handle
			this.handle = this._getHandle(event);
			if (!this.handle) {
				return false;
			}

			$(o.iframeFix === true ? "iframe" : o.iframeFix).each(function() {
				$("<div class='ui-draggable-iframeFix' style='background: #fff;'></div>")
				.css({
					width: this.offsetWidth+"px", height: this.offsetHeight+"px",
					position: "absolute", opacity: "0.001", zIndex: 1000
				})
				.css($(this).offset())
				.appendTo("body");
			});

			return true;

		},

		_mouseStart: function(event) {

			var o = this.options;

			//Create and append the visible helper
			this.helper = this._createHelper(event);

			this.helper.addClass("ui-draggable-dragging");

			//Cache the helper size
			this._cacheHelperProportions();

			//If ddmanager is used for droppables, set the global draggable
			if($.ui.ddmanager) {
				$.ui.ddmanager.current = this;
			}

			/*
			 * - Position generation -
			 * This block generates everything position related - it's the core of draggables.
			 */

			//Cache the margins of the original element
			this._cacheMargins();

			//Store the helper's css position
			this.cssPosition = this.helper.css( "position" );
			this.scrollParent = this.helper.scrollParent();
			this.offsetParent = this.helper.offsetParent();
			this.offsetParentCssPosition = this.offsetParent.css( "position" );

			//The element's absolute position on the page minus margins
			this.offset = this.positionAbs = this.element.offset();
			this.offset = {
				top: this.offset.top - this.margins.top,
				left: this.offset.left - this.margins.left
			};

			//Reset scroll cache
			this.offset.scroll = false;

			$.extend(this.offset, {
				click: { //Where the click happened, relative to the element
					left: event.pageX - this.offset.left,
					top: event.pageY - this.offset.top
				},
				parent: this._getParentOffset(),
				relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
			});

			//Generate the original position
			this.originalPosition = this.position = this._generatePosition(event);
			this.originalPageX = event.pageX;
			this.originalPageY = event.pageY;

			//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
			(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

			//Set a containment if given in the options
			this._setContainment();

			//Trigger event + callbacks
			if(this._trigger("start", event) === false) {
				this._clear();
				return false;
			}

			//Recache the helper size
			this._cacheHelperProportions();

			//Prepare the droppable offsets
			if ($.ui.ddmanager && !o.dropBehaviour) {
				$.ui.ddmanager.prepareOffsets(this, event);
			}


			this._mouseDrag(event, true); //Execute the drag once - this causes the helper not to be visible before getting its correct position

			//If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)
			if ( $.ui.ddmanager ) {
				$.ui.ddmanager.dragStart(this, event);
			}

			return true;
		},

		_mouseDrag: function(event, noPropagation) {
			// reset any necessary cached properties (see #5009)
			if ( this.offsetParentCssPosition === "fixed" ) {
				this.offset.parent = this._getParentOffset();
			}

			//Compute the helpers position
			this.position = this._generatePosition(event);
			this.positionAbs = this._convertPositionTo("absolute");

			//Call plugins and callbacks and use the resulting position if something is returned
			if (!noPropagation) {
				var ui = this._uiHash();
				if(this._trigger("drag", event, ui) === false) {
					this._mouseUp({});
					return false;
				}
				this.position = ui.position;
			}

			if(!this.options.axis || this.options.axis !== "y") {
				this.helper[0].style.left = this.position.left+"px";
			}
			if(!this.options.axis || this.options.axis !== "x") {
				this.helper[0].style.top = this.position.top+"px";
			}
			if($.ui.ddmanager) {
				$.ui.ddmanager.drag(this, event);
			}

			return false;
		},

		_mouseStop: function(event) {

			//If we are using droppables, inform the manager about the drop
			var that = this,
				dropped = false;
			if ($.ui.ddmanager && !this.options.dropBehaviour) {
				dropped = $.ui.ddmanager.drop(this, event);
			}

			//if a drop comes from outside (a sortable)
			if(this.dropped) {
				dropped = this.dropped;
				this.dropped = false;
			}

			//if the original element is no longer in the DOM don't bother to continue (see #8269)
			if ( this.options.helper === "original" && !$.contains( this.element[ 0 ].ownerDocument, this.element[ 0 ] ) ) {
				return false;
			}

			if((this.options.revert === "invalid" && !dropped) || (this.options.revert === "valid" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) {
				$(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
					if(that._trigger("stop", event) !== false) {
						that._clear();
					}
				});
			} else {
				if(this._trigger("stop", event) !== false) {
					this._clear();
				}
			}

			return false;
		},

		_mouseUp: function(event) {
			//Remove frame helpers
			$("div.ui-draggable-iframeFix").each(function() {
				this.parentNode.removeChild(this);
			});

			//If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)
			if( $.ui.ddmanager ) {
				$.ui.ddmanager.dragStop(this, event);
			}

			return $.ui.mouse.prototype._mouseUp.call(this, event);
		},

		cancel: function() {

			if(this.helper.is(".ui-draggable-dragging")) {
				this._mouseUp({});
			} else {
				this._clear();
			}

			return this;

		},

		_getHandle: function(event) {
			return this.options.handle ?
				!!$( event.target ).closest( this.element.find( this.options.handle ) ).length :
				true;
		},

		_createHelper: function(event) {

			var o = this.options,
				helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event])) : (o.helper === "clone" ? this.element.clone().removeAttr("id") : this.element);

			if(!helper.parents("body").length) {
				helper.appendTo((o.appendTo === "parent" ? this.element[0].parentNode : o.appendTo));
			}

			if(helper[0] !== this.element[0] && !(/(fixed|absolute)/).test(helper.css("position"))) {
				helper.css("position", "absolute");
			}

			return helper;

		},

		_adjustOffsetFromHelper: function(obj) {
			if (typeof obj === "string") {
				obj = obj.split(" ");
			}
			if ($.isArray(obj)) {
				obj = {left: +obj[0], top: +obj[1] || 0};
			}
			if ("left" in obj) {
				this.offset.click.left = obj.left + this.margins.left;
			}
			if ("right" in obj) {
				this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
			}
			if ("top" in obj) {
				this.offset.click.top = obj.top + this.margins.top;
			}
			if ("bottom" in obj) {
				this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
			}
		},

		_getParentOffset: function() {

			//Get the offsetParent and cache its position
			var po = this.offsetParent.offset();

			// This is a special case where we need to modify a offset calculated on start, since the following happened:
			// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
			// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
			//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
			if(this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
				po.left += this.scrollParent.scrollLeft();
				po.top += this.scrollParent.scrollTop();
			}

			//This needs to be actually done for all browsers, since pageX/pageY includes this information
			//Ugly IE fix
			if((this.offsetParent[0] === document.body) ||
				(this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie)) {
				po = { top: 0, left: 0 };
			}

			return {
				top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
				left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
			};

		},

		_getRelativeOffset: function() {

			if(this.cssPosition === "relative") {
				var p = this.element.position();
				return {
					top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
					left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
				};
			} else {
				return { top: 0, left: 0 };
			}

		},

		_cacheMargins: function() {
			this.margins = {
				left: (parseInt(this.element.css("marginLeft"),10) || 0),
				top: (parseInt(this.element.css("marginTop"),10) || 0),
				right: (parseInt(this.element.css("marginRight"),10) || 0),
				bottom: (parseInt(this.element.css("marginBottom"),10) || 0)
			};
		},

		_cacheHelperProportions: function() {
			this.helperProportions = {
				width: this.helper.outerWidth(),
				height: this.helper.outerHeight()
			};
		},

		_setContainment: function() {

			var over, c, ce,
				o = this.options;

			if ( !o.containment ) {
				this.containment = null;
				return;
			}

			if ( o.containment === "window" ) {
				this.containment = [
					$( window ).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
					$( window ).scrollTop() - this.offset.relative.top - this.offset.parent.top,
					$( window ).scrollLeft() + $( window ).width() - this.helperProportions.width - this.margins.left,
					$( window ).scrollTop() + ( $( window ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
				];
				return;
			}

			if ( o.containment === "document") {
				this.containment = [
					0,
					0,
					$( document ).width() - this.helperProportions.width - this.margins.left,
					( $( document ).height() || document.body.parentNode.scrollHeight ) - this.helperProportions.height - this.margins.top
				];
				return;
			}

			if ( o.containment.constructor === Array ) {
				this.containment = o.containment;
				return;
			}

			if ( o.containment === "parent" ) {
				o.containment = this.helper[ 0 ].parentNode;
			}

			c = $( o.containment );
			ce = c[ 0 ];

			if( !ce ) {
				return;
			}

			over = c.css( "overflow" ) !== "hidden";

			this.containment = [
				( parseInt( c.css( "borderLeftWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingLeft" ), 10 ) || 0 ),
				( parseInt( c.css( "borderTopWidth" ), 10 ) || 0 ) + ( parseInt( c.css( "paddingTop" ), 10 ) || 0 ) ,
				( over ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) - ( parseInt( c.css( "borderRightWidth" ), 10 ) || 0 ) - ( parseInt( c.css( "paddingRight" ), 10 ) || 0 ) - this.helperProportions.width - this.margins.left - this.margins.right,
				( over ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) - ( parseInt( c.css( "borderBottomWidth" ), 10 ) || 0 ) - ( parseInt( c.css( "paddingBottom" ), 10 ) || 0 ) - this.helperProportions.height - this.margins.top  - this.margins.bottom
			];
			this.relative_container = c;
		},

		_convertPositionTo: function(d, pos) {

			if(!pos) {
				pos = this.position;
			}

			var mod = d === "absolute" ? 1 : -1,
				scroll = this.cssPosition === "absolute" && !( this.scrollParent[ 0 ] !== document && $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ? this.offsetParent : this.scrollParent;

			//Cache the scroll
			if (!this.offset.scroll) {
				this.offset.scroll = {top : scroll.scrollTop(), left : scroll.scrollLeft()};
			}

			return {
				top: (
					pos.top	+																// The absolute mouse position
					this.offset.relative.top * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.top * mod -										// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : this.offset.scroll.top ) * mod )
				),
				left: (
					pos.left +																// The absolute mouse position
					this.offset.relative.left * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.left * mod	-										// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : this.offset.scroll.left ) * mod )
				)
			};

		},

		_generatePosition: function(event) {

			var containment, co, top, left,
				o = this.options,
				scroll = this.cssPosition === "absolute" && !( this.scrollParent[ 0 ] !== document && $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) ? this.offsetParent : this.scrollParent,
				pageX = event.pageX,
				pageY = event.pageY;

			//Cache the scroll
			if (!this.offset.scroll) {
				this.offset.scroll = {top : scroll.scrollTop(), left : scroll.scrollLeft()};
			}

			/*
			 * - Position constraining -
			 * Constrain the position to a mix of grid, containment.
			 */

			// If we are not dragging yet, we won't check for options
			if ( this.originalPosition ) {
				if ( this.containment ) {
					if ( this.relative_container ){
						co = this.relative_container.offset();
						containment = [
							this.containment[ 0 ] + co.left,
							this.containment[ 1 ] + co.top,
							this.containment[ 2 ] + co.left,
							this.containment[ 3 ] + co.top
						];
					}
					else {
						containment = this.containment;
					}

					if(event.pageX - this.offset.click.left < containment[0]) {
						pageX = containment[0] + this.offset.click.left;
					}
					if(event.pageY - this.offset.click.top < containment[1]) {
						pageY = containment[1] + this.offset.click.top;
					}
					if(event.pageX - this.offset.click.left > containment[2]) {
						pageX = containment[2] + this.offset.click.left;
					}
					if(event.pageY - this.offset.click.top > containment[3]) {
						pageY = containment[3] + this.offset.click.top;
					}
				}

				if(o.grid) {
					//Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)
					top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
					pageY = containment ? ((top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3]) ? top : ((top - this.offset.click.top >= containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

					left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
					pageX = containment ? ((left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2]) ? left : ((left - this.offset.click.left >= containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
				}

			}

			return {
				top: (
					pageY -																	// The absolute mouse position
					this.offset.click.top	-												// Click offset (relative to the element)
					this.offset.relative.top -												// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.top +												// The offsetParent's offset without borders (offset + border)
					( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : this.offset.scroll.top )
				),
				left: (
					pageX -																	// The absolute mouse position
					this.offset.click.left -												// Click offset (relative to the element)
					this.offset.relative.left -												// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.left +												// The offsetParent's offset without borders (offset + border)
					( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : this.offset.scroll.left )
				)
			};

		},

		_clear: function() {
			this.helper.removeClass("ui-draggable-dragging");
			if(this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
				this.helper.remove();
			}
			this.helper = null;
			this.cancelHelperRemoval = false;
		},

		// From now on bulk stuff - mainly helpers

		_trigger: function(type, event, ui) {
			ui = ui || this._uiHash();
			$.ui.plugin.call(this, type, [event, ui]);
			//The absolute position has to be recalculated after plugins
			if(type === "drag") {
				this.positionAbs = this._convertPositionTo("absolute");
			}
			return $.Widget.prototype._trigger.call(this, type, event, ui);
		},

		plugins: {},

		_uiHash: function() {
			return {
				helper: this.helper,
				position: this.position,
				originalPosition: this.originalPosition,
				offset: this.positionAbs
			};
		}

	});

	$.ui.plugin.add("draggable", "connectToSortable", {
		start: function(event, ui) {

			var inst = $(this).data("ui-draggable"), o = inst.options,
				uiSortable = $.extend({}, ui, { item: inst.element });
			inst.sortables = [];
			$(o.connectToSortable).each(function() {
				var sortable = $.data(this, "ui-sortable");
				if (sortable && !sortable.options.disabled) {
					inst.sortables.push({
						instance: sortable,
						shouldRevert: sortable.options.revert
					});
					sortable.refreshPositions();	// Call the sortable's refreshPositions at drag start to refresh the containerCache since the sortable container cache is used in drag and needs to be up to date (this will ensure it's initialised as well as being kept in step with any changes that might have happened on the page).
					sortable._trigger("activate", event, uiSortable);
				}
			});

		},
		stop: function(event, ui) {

			//If we are still over the sortable, we fake the stop event of the sortable, but also remove helper
			var inst = $(this).data("ui-draggable"),
				uiSortable = $.extend({}, ui, { item: inst.element });

			$.each(inst.sortables, function() {
				if(this.instance.isOver) {

					this.instance.isOver = 0;

					inst.cancelHelperRemoval = true; //Don't remove the helper in the draggable instance
					this.instance.cancelHelperRemoval = false; //Remove it in the sortable instance (so sortable plugins like revert still work)

					//The sortable revert is supported, and we have to set a temporary dropped variable on the draggable to support revert: "valid/invalid"
					if(this.shouldRevert) {
						this.instance.options.revert = this.shouldRevert;
					}

					//Trigger the stop of the sortable
					this.instance._mouseStop(event);

					this.instance.options.helper = this.instance.options._helper;

					//If the helper has been the original item, restore properties in the sortable
					if(inst.options.helper === "original") {
						this.instance.currentItem.css({ top: "auto", left: "auto" });
					}

				} else {
					this.instance.cancelHelperRemoval = false; //Remove the helper in the sortable instance
					this.instance._trigger("deactivate", event, uiSortable);
				}

			});

		},
		drag: function(event, ui) {

			var inst = $(this).data("ui-draggable"), that = this;

			$.each(inst.sortables, function() {

				var innermostIntersecting = false,
					thisSortable = this;

				//Copy over some variables to allow calling the sortable's native _intersectsWith
				this.instance.positionAbs = inst.positionAbs;
				this.instance.helperProportions = inst.helperProportions;
				this.instance.offset.click = inst.offset.click;

				if(this.instance._intersectsWith(this.instance.containerCache)) {
					innermostIntersecting = true;
					$.each(inst.sortables, function () {
						this.instance.positionAbs = inst.positionAbs;
						this.instance.helperProportions = inst.helperProportions;
						this.instance.offset.click = inst.offset.click;
						if (this !== thisSortable &&
							this.instance._intersectsWith(this.instance.containerCache) &&
							$.contains(thisSortable.instance.element[0], this.instance.element[0])
						) {
							innermostIntersecting = false;
						}
						return innermostIntersecting;
					});
				}


				if(innermostIntersecting) {
					//If it intersects, we use a little isOver variable and set it once, so our move-in stuff gets fired only once
					if(!this.instance.isOver) {

						this.instance.isOver = 1;
						//Now we fake the start of dragging for the sortable instance,
						//by cloning the list group item, appending it to the sortable and using it as inst.currentItem
						//We can then fire the start event of the sortable with our passed browser event, and our own helper (so it doesn't create a new one)
						this.instance.currentItem = $(that).clone().removeAttr("id").appendTo(this.instance.element).data("ui-sortable-item", true);
						this.instance.options._helper = this.instance.options.helper; //Store helper option to later restore it
						this.instance.options.helper = function() { return ui.helper[0]; };

						event.target = this.instance.currentItem[0];
						this.instance._mouseCapture(event, true);
						this.instance._mouseStart(event, true, true);

						//Because the browser event is way off the new appended portlet, we modify a couple of variables to reflect the changes
						this.instance.offset.click.top = inst.offset.click.top;
						this.instance.offset.click.left = inst.offset.click.left;
						this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;
						this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;

						inst._trigger("toSortable", event);
						inst.dropped = this.instance.element; //draggable revert needs that
						//hack so receive/update callbacks work (mostly)
						inst.currentItem = inst.element;
						this.instance.fromOutside = inst;

					}

					//Provided we did all the previous steps, we can fire the drag event of the sortable on every draggable drag, when it intersects with the sortable
					if(this.instance.currentItem) {
						this.instance._mouseDrag(event);
					}

				} else {

					//If it doesn't intersect with the sortable, and it intersected before,
					//we fake the drag stop of the sortable, but make sure it doesn't remove the helper by using cancelHelperRemoval
					if(this.instance.isOver) {

						this.instance.isOver = 0;
						this.instance.cancelHelperRemoval = true;

						//Prevent reverting on this forced stop
						this.instance.options.revert = false;

						// The out event needs to be triggered independently
						this.instance._trigger("out", event, this.instance._uiHash(this.instance));

						this.instance._mouseStop(event, true);
						this.instance.options.helper = this.instance.options._helper;

						//Now we remove our currentItem, the list group clone again, and the placeholder, and animate the helper back to it's original size
						this.instance.currentItem.remove();
						if(this.instance.placeholder) {
							this.instance.placeholder.remove();
						}

						inst._trigger("fromSortable", event);
						inst.dropped = false; //draggable revert needs that
					}

				}

			});

		}
	});

	$.ui.plugin.add("draggable", "cursor", {
		start: function() {
			var t = $("body"), o = $(this).data("ui-draggable").options;
			if (t.css("cursor")) {
				o._cursor = t.css("cursor");
			}
			t.css("cursor", o.cursor);
		},
		stop: function() {
			var o = $(this).data("ui-draggable").options;
			if (o._cursor) {
				$("body").css("cursor", o._cursor);
			}
		}
	});

	$.ui.plugin.add("draggable", "opacity", {
		start: function(event, ui) {
			var t = $(ui.helper), o = $(this).data("ui-draggable").options;
			if(t.css("opacity")) {
				o._opacity = t.css("opacity");
			}
			t.css("opacity", o.opacity);
		},
		stop: function(event, ui) {
			var o = $(this).data("ui-draggable").options;
			if(o._opacity) {
				$(ui.helper).css("opacity", o._opacity);
			}
		}
	});

	$.ui.plugin.add("draggable", "scroll", {
		start: function() {
			var i = $(this).data("ui-draggable");
			if(i.scrollParent[0] !== document && i.scrollParent[0].tagName !== "HTML") {
				i.overflowOffset = i.scrollParent.offset();
			}
		},
		drag: function( event ) {

			var i = $(this).data("ui-draggable"), o = i.options, scrolled = false;

			if(i.scrollParent[0] !== document && i.scrollParent[0].tagName !== "HTML") {

				if(!o.axis || o.axis !== "x") {
					if((i.overflowOffset.top + i.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {
						i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop + o.scrollSpeed;
					} else if(event.pageY - i.overflowOffset.top < o.scrollSensitivity) {
						i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop - o.scrollSpeed;
					}
				}

				if(!o.axis || o.axis !== "y") {
					if((i.overflowOffset.left + i.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {
						i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft + o.scrollSpeed;
					} else if(event.pageX - i.overflowOffset.left < o.scrollSensitivity) {
						i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft - o.scrollSpeed;
					}
				}

			} else {

				if(!o.axis || o.axis !== "x") {
					if(event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
						scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
					} else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
						scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
					}
				}

				if(!o.axis || o.axis !== "y") {
					if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
						scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
					} else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
						scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
					}
				}

			}

			if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
				$.ui.ddmanager.prepareOffsets(i, event);
			}

		}
	});

	$.ui.plugin.add("draggable", "snap", {
		start: function() {

			var i = $(this).data("ui-draggable"),
				o = i.options;

			i.snapElements = [];

			$(o.snap.constructor !== String ? ( o.snap.items || ":data(ui-draggable)" ) : o.snap).each(function() {
				var $t = $(this),
					$o = $t.offset();
				if(this !== i.element[0]) {
					i.snapElements.push({
						item: this,
						width: $t.outerWidth(), height: $t.outerHeight(),
						top: $o.top, left: $o.left
					});
				}
			});

		},
		drag: function(event, ui) {

			var ts, bs, ls, rs, l, r, t, b, i, first,
				inst = $(this).data("ui-draggable"),
				o = inst.options,
				d = o.snapTolerance,
				x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,
				y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;

			for (i = inst.snapElements.length - 1; i >= 0; i--){

				l = inst.snapElements[i].left;
				r = l + inst.snapElements[i].width;
				t = inst.snapElements[i].top;
				b = t + inst.snapElements[i].height;

				if ( x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains( inst.snapElements[ i ].item.ownerDocument, inst.snapElements[ i ].item ) ) {
					if(inst.snapElements[i].snapping) {
						(inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
					}
					inst.snapElements[i].snapping = false;
					continue;
				}

				if(o.snapMode !== "inner") {
					ts = Math.abs(t - y2) <= d;
					bs = Math.abs(b - y1) <= d;
					ls = Math.abs(l - x2) <= d;
					rs = Math.abs(r - x1) <= d;
					if(ts) {
						ui.position.top = inst._convertPositionTo("relative", { top: t - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
					}
					if(bs) {
						ui.position.top = inst._convertPositionTo("relative", { top: b, left: 0 }).top - inst.margins.top;
					}
					if(ls) {
						ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l - inst.helperProportions.width }).left - inst.margins.left;
					}
					if(rs) {
						ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r }).left - inst.margins.left;
					}
				}

				first = (ts || bs || ls || rs);

				if(o.snapMode !== "outer") {
					ts = Math.abs(t - y1) <= d;
					bs = Math.abs(b - y2) <= d;
					ls = Math.abs(l - x1) <= d;
					rs = Math.abs(r - x2) <= d;
					if(ts) {
						ui.position.top = inst._convertPositionTo("relative", { top: t, left: 0 }).top - inst.margins.top;
					}
					if(bs) {
						ui.position.top = inst._convertPositionTo("relative", { top: b - inst.helperProportions.height, left: 0 }).top - inst.margins.top;
					}
					if(ls) {
						ui.position.left = inst._convertPositionTo("relative", { top: 0, left: l }).left - inst.margins.left;
					}
					if(rs) {
						ui.position.left = inst._convertPositionTo("relative", { top: 0, left: r - inst.helperProportions.width }).left - inst.margins.left;
					}
				}

				if(!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {
					(inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item })));
				}
				inst.snapElements[i].snapping = (ts || bs || ls || rs || first);

			}

		}
	});

	$.ui.plugin.add("draggable", "stack", {
		start: function() {
			var min,
				o = this.data("ui-draggable").options,
				group = $.makeArray($(o.stack)).sort(function(a,b) {
					return (parseInt($(a).css("zIndex"),10) || 0) - (parseInt($(b).css("zIndex"),10) || 0);
				});

			if (!group.length) { return; }

			min = parseInt($(group[0]).css("zIndex"), 10) || 0;
			$(group).each(function(i) {
				$(this).css("zIndex", min + i);
			});
			this.css("zIndex", (min + group.length));
		}
	});

	$.ui.plugin.add("draggable", "zIndex", {
		start: function(event, ui) {
			var t = $(ui.helper), o = $(this).data("ui-draggable").options;
			if(t.css("zIndex")) {
				o._zIndex = t.css("zIndex");
			}
			t.css("zIndex", o.zIndex);
		},
		stop: function(event, ui) {
			var o = $(this).data("ui-draggable").options;
			if(o._zIndex) {
				$(ui.helper).css("zIndex", o._zIndex);
			}
		}
	});

	})(jQuery);

	(function( $, undefined ) {

	function isOverAxis( x, reference, size ) {
		return ( x > reference ) && ( x < ( reference + size ) );
	}

	$.widget("ui.droppable", {
		version: "1.10.3",
		widgetEventPrefix: "drop",
		options: {
			accept: "*",
			activeClass: false,
			addClasses: true,
			greedy: false,
			hoverClass: false,
			scope: "default",
			tolerance: "intersect",

			// callbacks
			activate: null,
			deactivate: null,
			drop: null,
			out: null,
			over: null
		},
		_create: function() {

			var o = this.options,
				accept = o.accept;

			this.isover = false;
			this.isout = true;

			this.accept = $.isFunction(accept) ? accept : function(d) {
				return d.is(accept);
			};

			//Store the droppable's proportions
			this.proportions = { width: this.element[0].offsetWidth, height: this.element[0].offsetHeight };

			// Add the reference and positions to the manager
			$.ui.ddmanager.droppables[o.scope] = $.ui.ddmanager.droppables[o.scope] || [];
			$.ui.ddmanager.droppables[o.scope].push(this);

			(o.addClasses && this.element.addClass("ui-droppable"));

		},

		_destroy: function() {
			var i = 0,
				drop = $.ui.ddmanager.droppables[this.options.scope];

			for ( ; i < drop.length; i++ ) {
				if ( drop[i] === this ) {
					drop.splice(i, 1);
				}
			}

			this.element.removeClass("ui-droppable ui-droppable-disabled");
		},

		_setOption: function(key, value) {

			if(key === "accept") {
				this.accept = $.isFunction(value) ? value : function(d) {
					return d.is(value);
				};
			}
			$.Widget.prototype._setOption.apply(this, arguments);
		},

		_activate: function(event) {
			var draggable = $.ui.ddmanager.current;
			if(this.options.activeClass) {
				this.element.addClass(this.options.activeClass);
			}
			if(draggable){
				this._trigger("activate", event, this.ui(draggable));
			}
		},

		_deactivate: function(event) {
			var draggable = $.ui.ddmanager.current;
			if(this.options.activeClass) {
				this.element.removeClass(this.options.activeClass);
			}
			if(draggable){
				this._trigger("deactivate", event, this.ui(draggable));
			}
		},

		_over: function(event) {

			var draggable = $.ui.ddmanager.current;

			// Bail if draggable and droppable are same element
			if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
				return;
			}

			if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
				if(this.options.hoverClass) {
					this.element.addClass(this.options.hoverClass);
				}
				this._trigger("over", event, this.ui(draggable));
			}

		},

		_out: function(event) {

			var draggable = $.ui.ddmanager.current;

			// Bail if draggable and droppable are same element
			if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
				return;
			}

			if (this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
				if(this.options.hoverClass) {
					this.element.removeClass(this.options.hoverClass);
				}
				this._trigger("out", event, this.ui(draggable));
			}

		},

		_drop: function(event,custom) {

			var draggable = custom || $.ui.ddmanager.current,
				childrenIntersection = false;

			// Bail if draggable and droppable are same element
			if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
				return false;
			}

			this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function() {
				var inst = $.data(this, "ui-droppable");
				if(
					inst.options.greedy &&
					!inst.options.disabled &&
					inst.options.scope === draggable.options.scope &&
					inst.accept.call(inst.element[0], (draggable.currentItem || draggable.element)) &&
					$.ui.intersect(draggable, $.extend(inst, { offset: inst.element.offset() }), inst.options.tolerance)
				) { childrenIntersection = true; return false; }
			});
			if(childrenIntersection) {
				return false;
			}

			if(this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
				if(this.options.activeClass) {
					this.element.removeClass(this.options.activeClass);
				}
				if(this.options.hoverClass) {
					this.element.removeClass(this.options.hoverClass);
				}
				this._trigger("drop", event, this.ui(draggable));
				return this.element;
			}

			return false;

		},

		ui: function(c) {
			return {
				draggable: (c.currentItem || c.element),
				helper: c.helper,
				position: c.position,
				offset: c.positionAbs
			};
		}

	});

	$.ui.intersect = function(draggable, droppable, toleranceMode) {

		if (!droppable.offset) {
			return false;
		}

		var draggableLeft, draggableTop,
			x1 = (draggable.positionAbs || draggable.position.absolute).left, x2 = x1 + draggable.helperProportions.width,
			y1 = (draggable.positionAbs || draggable.position.absolute).top, y2 = y1 + draggable.helperProportions.height,
			l = droppable.offset.left, r = l + droppable.proportions.width,
			t = droppable.offset.top, b = t + droppable.proportions.height;

		switch (toleranceMode) {
			case "fit":
				return (l <= x1 && x2 <= r && t <= y1 && y2 <= b);
			case "intersect":
				return (l < x1 + (draggable.helperProportions.width / 2) && // Right Half
					x2 - (draggable.helperProportions.width / 2) < r && // Left Half
					t < y1 + (draggable.helperProportions.height / 2) && // Bottom Half
					y2 - (draggable.helperProportions.height / 2) < b ); // Top Half
			case "pointer":
				draggableLeft = ((draggable.positionAbs || draggable.position.absolute).left + (draggable.clickOffset || draggable.offset.click).left);
				draggableTop = ((draggable.positionAbs || draggable.position.absolute).top + (draggable.clickOffset || draggable.offset.click).top);
				return isOverAxis( draggableTop, t, droppable.proportions.height ) && isOverAxis( draggableLeft, l, droppable.proportions.width );
			case "touch":
				return (
					(y1 >= t && y1 <= b) ||	// Top edge touching
					(y2 >= t && y2 <= b) ||	// Bottom edge touching
					(y1 < t && y2 > b)		// Surrounded vertically
				) && (
					(x1 >= l && x1 <= r) ||	// Left edge touching
					(x2 >= l && x2 <= r) ||	// Right edge touching
					(x1 < l && x2 > r)		// Surrounded horizontally
				);
			default:
				return false;
			}

	};

	/*
		This manager tracks offsets of draggables and droppables
	*/
	$.ui.ddmanager = {
		current: null,
		droppables: { "default": [] },
		prepareOffsets: function(t, event) {

			var i, j,
				m = $.ui.ddmanager.droppables[t.options.scope] || [],
				type = event ? event.type : null, // workaround for #2317
				list = (t.currentItem || t.element).find(":data(ui-droppable)").addBack();

			droppablesLoop: for (i = 0; i < m.length; i++) {

				//No disabled and non-accepted
				if(m[i].options.disabled || (t && !m[i].accept.call(m[i].element[0],(t.currentItem || t.element)))) {
					continue;
				}

				// Filter out elements in the current dragged item
				for (j=0; j < list.length; j++) {
					if(list[j] === m[i].element[0]) {
						m[i].proportions.height = 0;
						continue droppablesLoop;
					}
				}

				m[i].visible = m[i].element.css("display") !== "none";
				if(!m[i].visible) {
					continue;
				}

				//Activate the droppable if used directly from draggables
				if(type === "mousedown") {
					m[i]._activate.call(m[i], event);
				}

				m[i].offset = m[i].element.offset();
				m[i].proportions = { width: m[i].element[0].offsetWidth, height: m[i].element[0].offsetHeight };

			}

		},
		drop: function(draggable, event) {

			var dropped = false;
			// Create a copy of the droppables in case the list changes during the drop (#9116)
			$.each(($.ui.ddmanager.droppables[draggable.options.scope] || []).slice(), function() {

				if(!this.options) {
					return;
				}
				if (!this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance)) {
					dropped = this._drop.call(this, event) || dropped;
				}

				if (!this.options.disabled && this.visible && this.accept.call(this.element[0],(draggable.currentItem || draggable.element))) {
					this.isout = true;
					this.isover = false;
					this._deactivate.call(this, event);
				}

			});
			return dropped;

		},
		dragStart: function( draggable, event ) {
			//Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)
			draggable.element.parentsUntil( "body" ).bind( "scroll.droppable", function() {
				if( !draggable.options.refreshPositions ) {
					$.ui.ddmanager.prepareOffsets( draggable, event );
				}
			});
		},
		drag: function(draggable, event) {

			//If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse.
			if(draggable.options.refreshPositions) {
				$.ui.ddmanager.prepareOffsets(draggable, event);
			}

			//Run through all droppables and check their positions based on specific tolerance options
			$.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {

				if(this.options.disabled || this.greedyChild || !this.visible) {
					return;
				}

				var parentInstance, scope, parent,
					intersects = $.ui.intersect(draggable, this, this.options.tolerance),
					c = !intersects && this.isover ? "isout" : (intersects && !this.isover ? "isover" : null);
				if(!c) {
					return;
				}

				if (this.options.greedy) {
					// find droppable parents with same scope
					scope = this.options.scope;
					parent = this.element.parents(":data(ui-droppable)").filter(function () {
						return $.data(this, "ui-droppable").options.scope === scope;
					});

					if (parent.length) {
						parentInstance = $.data(parent[0], "ui-droppable");
						parentInstance.greedyChild = (c === "isover");
					}
				}

				// we just moved into a greedy child
				if (parentInstance && c === "isover") {
					parentInstance.isover = false;
					parentInstance.isout = true;
					parentInstance._out.call(parentInstance, event);
				}

				this[c] = true;
				this[c === "isout" ? "isover" : "isout"] = false;
				this[c === "isover" ? "_over" : "_out"].call(this, event);

				// we just moved out of a greedy child
				if (parentInstance && c === "isout") {
					parentInstance.isout = false;
					parentInstance.isover = true;
					parentInstance._over.call(parentInstance, event);
				}
			});

		},
		dragStop: function( draggable, event ) {
			draggable.element.parentsUntil( "body" ).unbind( "scroll.droppable" );
			//Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)
			if( !draggable.options.refreshPositions ) {
				$.ui.ddmanager.prepareOffsets( draggable, event );
			}
		}
	};

	})(jQuery);

	(function( $, undefined ) {

	function num(v) {
		return parseInt(v, 10) || 0;
	}

	function isNumber(value) {
		return !isNaN(parseInt(value, 10));
	}

	$.widget("ui.resizable", $.ui.mouse, {
		version: "1.10.3",
		widgetEventPrefix: "resize",
		options: {
			alsoResize: false,
			animate: false,
			animateDuration: "slow",
			animateEasing: "swing",
			aspectRatio: false,
			autoHide: false,
			containment: false,
			ghost: false,
			grid: false,
			handles: "e,s,se",
			helper: false,
			maxHeight: null,
			maxWidth: null,
			minHeight: 10,
			minWidth: 10,
			// See #7960
			zIndex: 90,

			// callbacks
			resize: null,
			start: null,
			stop: null
		},
		_create: function() {

			var n, i, handle, axis, hname,
				that = this,
				o = this.options;
			this.element.addClass("ui-resizable");

			$.extend(this, {
				_aspectRatio: !!(o.aspectRatio),
				aspectRatio: o.aspectRatio,
				originalElement: this.element,
				_proportionallyResizeElements: [],
				_helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
			});

			//Wrap the element if it cannot hold child nodes
			if(this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {

				//Create a wrapper element and set the wrapper to the new current internal element
				this.element.wrap(
					$("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
						position: this.element.css("position"),
						width: this.element.outerWidth(),
						height: this.element.outerHeight(),
						top: this.element.css("top"),
						left: this.element.css("left")
					})
				);

				//Overwrite the original this.element
				this.element = this.element.parent().data(
					"ui-resizable", this.element.data("ui-resizable")
				);

				this.elementIsWrapper = true;

				//Move margins to the wrapper
				this.element.css({ marginLeft: this.originalElement.css("marginLeft"), marginTop: this.originalElement.css("marginTop"), marginRight: this.originalElement.css("marginRight"), marginBottom: this.originalElement.css("marginBottom") });
				this.originalElement.css({ marginLeft: 0, marginTop: 0, marginRight: 0, marginBottom: 0});

				//Prevent Safari textarea resize
				this.originalResizeStyle = this.originalElement.css("resize");
				this.originalElement.css("resize", "none");

				//Push the actual element to our proportionallyResize internal array
				this._proportionallyResizeElements.push(this.originalElement.css({ position: "static", zoom: 1, display: "block" }));

				// avoid IE jump (hard set the margin)
				this.originalElement.css({ margin: this.originalElement.css("margin") });

				// fix handlers offset
				this._proportionallyResize();

			}

			this.handles = o.handles || (!$(".ui-resizable-handle", this.element).length ? "e,s,se" : { n: ".ui-resizable-n", e: ".ui-resizable-e", s: ".ui-resizable-s", w: ".ui-resizable-w", se: ".ui-resizable-se", sw: ".ui-resizable-sw", ne: ".ui-resizable-ne", nw: ".ui-resizable-nw" });
			if(this.handles.constructor === String) {

				if ( this.handles === "all") {
					this.handles = "n,e,s,w,se,sw,ne,nw";
				}

				n = this.handles.split(",");
				this.handles = {};

				for(i = 0; i < n.length; i++) {

					handle = $.trim(n[i]);
					hname = "ui-resizable-"+handle;
					axis = $("<div class='ui-resizable-handle " + hname + "'></div>");

					// Apply zIndex to all handles - see #7960
					axis.css({ zIndex: o.zIndex });

					//TODO : What's going on here?
					if ("se" === handle) {
						axis.addClass("ui-icon ui-icon-gripsmall-diagonal-se");
					}

					//Insert into internal handles object and append to element
					this.handles[handle] = ".ui-resizable-"+handle;
					this.element.append(axis);
				}

			}

			this._renderAxis = function(target) {

				var i, axis, padPos, padWrapper;

				target = target || this.element;

				for(i in this.handles) {

					if(this.handles[i].constructor === String) {
						this.handles[i] = $(this.handles[i], this.element).show();
					}

					//Apply pad to wrapper element, needed to fix axis position (textarea, inputs, scrolls)
					if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {

						axis = $(this.handles[i], this.element);

						//Checking the correct pad and border
						padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();

						//The padding type i have to apply...
						padPos = [ "padding",
							/ne|nw|n/.test(i) ? "Top" :
							/se|sw|s/.test(i) ? "Bottom" :
							/^e$/.test(i) ? "Right" : "Left" ].join("");

						target.css(padPos, padWrapper);

						this._proportionallyResize();

					}

					//TODO: What's that good for? There's not anything to be executed left
					if(!$(this.handles[i]).length) {
						continue;
					}
				}
			};

			//TODO: make renderAxis a prototype function
			this._renderAxis(this.element);

			this._handles = $(".ui-resizable-handle", this.element)
				.disableSelection();

			//Matching axis name
			this._handles.mouseover(function() {
				if (!that.resizing) {
					if (this.className) {
						axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
					}
					//Axis, default = se
					that.axis = axis && axis[1] ? axis[1] : "se";
				}
			});

			//If we want to auto hide the elements
			if (o.autoHide) {
				this._handles.hide();
				$(this.element)
					.addClass("ui-resizable-autohide")
					.mouseenter(function() {
						if (o.disabled) {
							return;
						}
						$(this).removeClass("ui-resizable-autohide");
						that._handles.show();
					})
					.mouseleave(function(){
						if (o.disabled) {
							return;
						}
						if (!that.resizing) {
							$(this).addClass("ui-resizable-autohide");
							that._handles.hide();
						}
					});
			}

			//Initialize the mouse interaction
			this._mouseInit();

		},

		_destroy: function() {

			this._mouseDestroy();

			var wrapper,
				_destroy = function(exp) {
					$(exp).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing")
						.removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove();
				};

			//TODO: Unwrap at same DOM position
			if (this.elementIsWrapper) {
				_destroy(this.element);
				wrapper = this.element;
				this.originalElement.css({
					position: wrapper.css("position"),
					width: wrapper.outerWidth(),
					height: wrapper.outerHeight(),
					top: wrapper.css("top"),
					left: wrapper.css("left")
				}).insertAfter( wrapper );
				wrapper.remove();
			}

			this.originalElement.css("resize", this.originalResizeStyle);
			_destroy(this.originalElement);

			return this;
		},

		_mouseCapture: function(event) {
			var i, handle,
				capture = false;

			for (i in this.handles) {
				handle = $(this.handles[i])[0];
				if (handle === event.target || $.contains(handle, event.target)) {
					capture = true;
				}
			}

			return !this.options.disabled && capture;
		},

		_mouseStart: function(event) {

			var curleft, curtop, cursor,
				o = this.options,
				iniPos = this.element.position(),
				el = this.element;

			this.resizing = true;

			// bugfix for http://dev.jquery.com/ticket/1749
			if ( (/absolute/).test( el.css("position") ) ) {
				el.css({ position: "absolute", top: el.css("top"), left: el.css("left") });
			} else if (el.is(".ui-draggable")) {
				el.css({ position: "absolute", top: iniPos.top, left: iniPos.left });
			}

			this._renderProxy();

			curleft = num(this.helper.css("left"));
			curtop = num(this.helper.css("top"));

			if (o.containment) {
				curleft += $(o.containment).scrollLeft() || 0;
				curtop += $(o.containment).scrollTop() || 0;
			}

			//Store needed variables
			this.offset = this.helper.offset();
			this.position = { left: curleft, top: curtop };
			this.size = this._helper ? { width: el.outerWidth(), height: el.outerHeight() } : { width: el.width(), height: el.height() };
			this.originalSize = this._helper ? { width: el.outerWidth(), height: el.outerHeight() } : { width: el.width(), height: el.height() };
			this.originalPosition = { left: curleft, top: curtop };
			this.sizeDiff = { width: el.outerWidth() - el.width(), height: el.outerHeight() - el.height() };
			this.originalMousePosition = { left: event.pageX, top: event.pageY };

			//Aspect Ratio
			this.aspectRatio = (typeof o.aspectRatio === "number") ? o.aspectRatio : ((this.originalSize.width / this.originalSize.height) || 1);

			cursor = $(".ui-resizable-" + this.axis).css("cursor");
			$("body").css("cursor", cursor === "auto" ? this.axis + "-resize" : cursor);

			el.addClass("ui-resizable-resizing");
			this._propagate("start", event);
			return true;
		},

		_mouseDrag: function(event) {

			//Increase performance, avoid regex
			var data,
				el = this.helper, props = {},
				smp = this.originalMousePosition,
				a = this.axis,
				prevTop = this.position.top,
				prevLeft = this.position.left,
				prevWidth = this.size.width,
				prevHeight = this.size.height,
				dx = (event.pageX-smp.left)||0,
				dy = (event.pageY-smp.top)||0,
				trigger = this._change[a];

			if (!trigger) {
				return false;
			}

			// Calculate the attrs that will be change
			data = trigger.apply(this, [event, dx, dy]);

			// Put this in the mouseDrag handler since the user can start pressing shift while resizing
			this._updateVirtualBoundaries(event.shiftKey);
			if (this._aspectRatio || event.shiftKey) {
				data = this._updateRatio(data, event);
			}

			data = this._respectSize(data, event);

			this._updateCache(data);

			// plugins callbacks need to be called first
			this._propagate("resize", event);

			if (this.position.top !== prevTop) {
				props.top = this.position.top + "px";
			}
			if (this.position.left !== prevLeft) {
				props.left = this.position.left + "px";
			}
			if (this.size.width !== prevWidth) {
				props.width = this.size.width + "px";
			}
			if (this.size.height !== prevHeight) {
				props.height = this.size.height + "px";
			}
			el.css(props);

			if (!this._helper && this._proportionallyResizeElements.length) {
				this._proportionallyResize();
			}

			// Call the user callback if the element was resized
			if ( ! $.isEmptyObject(props) ) {
				this._trigger("resize", event, this.ui());
			}

			return false;
		},

		_mouseStop: function(event) {

			this.resizing = false;
			var pr, ista, soffseth, soffsetw, s, left, top,
				o = this.options, that = this;

			if(this._helper) {

				pr = this._proportionallyResizeElements;
				ista = pr.length && (/textarea/i).test(pr[0].nodeName);
				soffseth = ista && $.ui.hasScroll(pr[0], "left") /* TODO - jump height */ ? 0 : that.sizeDiff.height;
				soffsetw = ista ? 0 : that.sizeDiff.width;

				s = { width: (that.helper.width()  - soffsetw), height: (that.helper.height() - soffseth) };
				left = (parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left)) || null;
				top = (parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top)) || null;

				if (!o.animate) {
					this.element.css($.extend(s, { top: top, left: left }));
				}

				that.helper.height(that.size.height);
				that.helper.width(that.size.width);

				if (this._helper && !o.animate) {
					this._proportionallyResize();
				}
			}

			$("body").css("cursor", "auto");

			this.element.removeClass("ui-resizable-resizing");

			this._propagate("stop", event);

			if (this._helper) {
				this.helper.remove();
			}

			return false;

		},

		_updateVirtualBoundaries: function(forceAspectRatio) {
			var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b,
				o = this.options;

			b = {
				minWidth: isNumber(o.minWidth) ? o.minWidth : 0,
				maxWidth: isNumber(o.maxWidth) ? o.maxWidth : Infinity,
				minHeight: isNumber(o.minHeight) ? o.minHeight : 0,
				maxHeight: isNumber(o.maxHeight) ? o.maxHeight : Infinity
			};

			if(this._aspectRatio || forceAspectRatio) {
				// We want to create an enclosing box whose aspect ration is the requested one
				// First, compute the "projected" size for each dimension based on the aspect ratio and other dimension
				pMinWidth = b.minHeight * this.aspectRatio;
				pMinHeight = b.minWidth / this.aspectRatio;
				pMaxWidth = b.maxHeight * this.aspectRatio;
				pMaxHeight = b.maxWidth / this.aspectRatio;

				if(pMinWidth > b.minWidth) {
					b.minWidth = pMinWidth;
				}
				if(pMinHeight > b.minHeight) {
					b.minHeight = pMinHeight;
				}
				if(pMaxWidth < b.maxWidth) {
					b.maxWidth = pMaxWidth;
				}
				if(pMaxHeight < b.maxHeight) {
					b.maxHeight = pMaxHeight;
				}
			}
			this._vBoundaries = b;
		},

		_updateCache: function(data) {
			this.offset = this.helper.offset();
			if (isNumber(data.left)) {
				this.position.left = data.left;
			}
			if (isNumber(data.top)) {
				this.position.top = data.top;
			}
			if (isNumber(data.height)) {
				this.size.height = data.height;
			}
			if (isNumber(data.width)) {
				this.size.width = data.width;
			}
		},

		_updateRatio: function( data ) {

			var cpos = this.position,
				csize = this.size,
				a = this.axis;

			if (isNumber(data.height)) {
				data.width = (data.height * this.aspectRatio);
			} else if (isNumber(data.width)) {
				data.height = (data.width / this.aspectRatio);
			}

			if (a === "sw") {
				data.left = cpos.left + (csize.width - data.width);
				data.top = null;
			}
			if (a === "nw") {
				data.top = cpos.top + (csize.height - data.height);
				data.left = cpos.left + (csize.width - data.width);
			}

			return data;
		},

		_respectSize: function( data ) {

			var o = this._vBoundaries,
				a = this.axis,
				ismaxw = isNumber(data.width) && o.maxWidth && (o.maxWidth < data.width), ismaxh = isNumber(data.height) && o.maxHeight && (o.maxHeight < data.height),
				isminw = isNumber(data.width) && o.minWidth && (o.minWidth > data.width), isminh = isNumber(data.height) && o.minHeight && (o.minHeight > data.height),
				dw = this.originalPosition.left + this.originalSize.width,
				dh = this.position.top + this.size.height,
				cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);
			if (isminw) {
				data.width = o.minWidth;
			}
			if (isminh) {
				data.height = o.minHeight;
			}
			if (ismaxw) {
				data.width = o.maxWidth;
			}
			if (ismaxh) {
				data.height = o.maxHeight;
			}

			if (isminw && cw) {
				data.left = dw - o.minWidth;
			}
			if (ismaxw && cw) {
				data.left = dw - o.maxWidth;
			}
			if (isminh && ch) {
				data.top = dh - o.minHeight;
			}
			if (ismaxh && ch) {
				data.top = dh - o.maxHeight;
			}

			// fixing jump error on top/left - bug #2330
			if (!data.width && !data.height && !data.left && data.top) {
				data.top = null;
			} else if (!data.width && !data.height && !data.top && data.left) {
				data.left = null;
			}

			return data;
		},

		_proportionallyResize: function() {

			if (!this._proportionallyResizeElements.length) {
				return;
			}

			var i, j, borders, paddings, prel,
				element = this.helper || this.element;

			for ( i=0; i < this._proportionallyResizeElements.length; i++) {

				prel = this._proportionallyResizeElements[i];

				if (!this.borderDif) {
					this.borderDif = [];
					borders = [prel.css("borderTopWidth"), prel.css("borderRightWidth"), prel.css("borderBottomWidth"), prel.css("borderLeftWidth")];
					paddings = [prel.css("paddingTop"), prel.css("paddingRight"), prel.css("paddingBottom"), prel.css("paddingLeft")];

					for ( j = 0; j < borders.length; j++ ) {
						this.borderDif[ j ] = ( parseInt( borders[ j ], 10 ) || 0 ) + ( parseInt( paddings[ j ], 10 ) || 0 );
					}
				}

				prel.css({
					height: (element.height() - this.borderDif[0] - this.borderDif[2]) || 0,
					width: (element.width() - this.borderDif[1] - this.borderDif[3]) || 0
				});

			}

		},

		_renderProxy: function() {

			var el = this.element, o = this.options;
			this.elementOffset = el.offset();

			if(this._helper) {

				this.helper = this.helper || $("<div style='overflow:hidden;'></div>");

				this.helper.addClass(this._helper).css({
					width: this.element.outerWidth() - 1,
					height: this.element.outerHeight() - 1,
					position: "absolute",
					left: this.elementOffset.left +"px",
					top: this.elementOffset.top +"px",
					zIndex: ++o.zIndex //TODO: Don't modify option
				});

				this.helper
					.appendTo("body")
					.disableSelection();

			} else {
				this.helper = this.element;
			}

		},

		_change: {
			e: function(event, dx) {
				return { width: this.originalSize.width + dx };
			},
			w: function(event, dx) {
				var cs = this.originalSize, sp = this.originalPosition;
				return { left: sp.left + dx, width: cs.width - dx };
			},
			n: function(event, dx, dy) {
				var cs = this.originalSize, sp = this.originalPosition;
				return { top: sp.top + dy, height: cs.height - dy };
			},
			s: function(event, dx, dy) {
				return { height: this.originalSize.height + dy };
			},
			se: function(event, dx, dy) {
				return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
			},
			sw: function(event, dx, dy) {
				return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
			},
			ne: function(event, dx, dy) {
				return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [event, dx, dy]));
			},
			nw: function(event, dx, dy) {
				return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [event, dx, dy]));
			}
		},

		_propagate: function(n, event) {
			$.ui.plugin.call(this, n, [event, this.ui()]);
			(n !== "resize" && this._trigger(n, event, this.ui()));
		},

		plugins: {},

		ui: function() {
			return {
				originalElement: this.originalElement,
				element: this.element,
				helper: this.helper,
				position: this.position,
				size: this.size,
				originalSize: this.originalSize,
				originalPosition: this.originalPosition
			};
		}

	});

	/*
	 * Resizable Extensions
	 */

	$.ui.plugin.add("resizable", "animate", {

		stop: function( event ) {
			var that = $(this).data("ui-resizable"),
				o = that.options,
				pr = that._proportionallyResizeElements,
				ista = pr.length && (/textarea/i).test(pr[0].nodeName),
				soffseth = ista && $.ui.hasScroll(pr[0], "left") /* TODO - jump height */ ? 0 : that.sizeDiff.height,
				soffsetw = ista ? 0 : that.sizeDiff.width,
				style = { width: (that.size.width - soffsetw), height: (that.size.height - soffseth) },
				left = (parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left)) || null,
				top = (parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top)) || null;

			that.element.animate(
				$.extend(style, top && left ? { top: top, left: left } : {}), {
					duration: o.animateDuration,
					easing: o.animateEasing,
					step: function() {

						var data = {
							width: parseInt(that.element.css("width"), 10),
							height: parseInt(that.element.css("height"), 10),
							top: parseInt(that.element.css("top"), 10),
							left: parseInt(that.element.css("left"), 10)
						};

						if (pr && pr.length) {
							$(pr[0]).css({ width: data.width, height: data.height });
						}

						// propagating resize, and updating values for each animation step
						that._updateCache(data);
						that._propagate("resize", event);

					}
				}
			);
		}

	});

	$.ui.plugin.add("resizable", "containment", {

		start: function() {
			var element, p, co, ch, cw, width, height,
				that = $(this).data("ui-resizable"),
				o = that.options,
				el = that.element,
				oc = o.containment,
				ce = (oc instanceof $) ? oc.get(0) : (/parent/.test(oc)) ? el.parent().get(0) : oc;

			if (!ce) {
				return;
			}

			that.containerElement = $(ce);

			if (/document/.test(oc) || oc === document) {
				that.containerOffset = { left: 0, top: 0 };
				that.containerPosition = { left: 0, top: 0 };

				that.parentData = {
					element: $(document), left: 0, top: 0,
					width: $(document).width(), height: $(document).height() || document.body.parentNode.scrollHeight
				};
			}

			// i'm a node, so compute top, left, right, bottom
			else {
				element = $(ce);
				p = [];
				$([ "Top", "Right", "Left", "Bottom" ]).each(function(i, name) { p[i] = num(element.css("padding" + name)); });

				that.containerOffset = element.offset();
				that.containerPosition = element.position();
				that.containerSize = { height: (element.innerHeight() - p[3]), width: (element.innerWidth() - p[1]) };

				co = that.containerOffset;
				ch = that.containerSize.height;
				cw = that.containerSize.width;
				width = ($.ui.hasScroll(ce, "left") ? ce.scrollWidth : cw );
				height = ($.ui.hasScroll(ce) ? ce.scrollHeight : ch);

				that.parentData = {
					element: ce, left: co.left, top: co.top, width: width, height: height
				};
			}
		},

		resize: function( event ) {
			var woset, hoset, isParent, isOffsetRelative,
				that = $(this).data("ui-resizable"),
				o = that.options,
				co = that.containerOffset, cp = that.position,
				pRatio = that._aspectRatio || event.shiftKey,
				cop = { top:0, left:0 }, ce = that.containerElement;

			if (ce[0] !== document && (/static/).test(ce.css("position"))) {
				cop = co;
			}

			if (cp.left < (that._helper ? co.left : 0)) {
				that.size.width = that.size.width + (that._helper ? (that.position.left - co.left) : (that.position.left - cop.left));
				if (pRatio) {
					that.size.height = that.size.width / that.aspectRatio;
				}
				that.position.left = o.helper ? co.left : 0;
			}

			if (cp.top < (that._helper ? co.top : 0)) {
				that.size.height = that.size.height + (that._helper ? (that.position.top - co.top) : that.position.top);
				if (pRatio) {
					that.size.width = that.size.height * that.aspectRatio;
				}
				that.position.top = that._helper ? co.top : 0;
			}

			that.offset.left = that.parentData.left+that.position.left;
			that.offset.top = that.parentData.top+that.position.top;

			woset = Math.abs( (that._helper ? that.offset.left - cop.left : (that.offset.left - cop.left)) + that.sizeDiff.width );
			hoset = Math.abs( (that._helper ? that.offset.top - cop.top : (that.offset.top - co.top)) + that.sizeDiff.height );

			isParent = that.containerElement.get(0) === that.element.parent().get(0);
			isOffsetRelative = /relative|absolute/.test(that.containerElement.css("position"));

			if(isParent && isOffsetRelative) {
				woset -= that.parentData.left;
			}

			if (woset + that.size.width >= that.parentData.width) {
				that.size.width = that.parentData.width - woset;
				if (pRatio) {
					that.size.height = that.size.width / that.aspectRatio;
				}
			}

			if (hoset + that.size.height >= that.parentData.height) {
				that.size.height = that.parentData.height - hoset;
				if (pRatio) {
					that.size.width = that.size.height * that.aspectRatio;
				}
			}
		},

		stop: function(){
			var that = $(this).data("ui-resizable"),
				o = that.options,
				co = that.containerOffset,
				cop = that.containerPosition,
				ce = that.containerElement,
				helper = $(that.helper),
				ho = helper.offset(),
				w = helper.outerWidth() - that.sizeDiff.width,
				h = helper.outerHeight() - that.sizeDiff.height;

			if (that._helper && !o.animate && (/relative/).test(ce.css("position"))) {
				$(this).css({ left: ho.left - cop.left - co.left, width: w, height: h });
			}

			if (that._helper && !o.animate && (/static/).test(ce.css("position"))) {
				$(this).css({ left: ho.left - cop.left - co.left, width: w, height: h });
			}

		}
	});

	$.ui.plugin.add("resizable", "alsoResize", {

		start: function () {
			var that = $(this).data("ui-resizable"),
				o = that.options,
				_store = function (exp) {
					$(exp).each(function() {
						var el = $(this);
						el.data("ui-resizable-alsoresize", {
							width: parseInt(el.width(), 10), height: parseInt(el.height(), 10),
							left: parseInt(el.css("left"), 10), top: parseInt(el.css("top"), 10)
						});
					});
				};

			if (typeof(o.alsoResize) === "object" && !o.alsoResize.parentNode) {
				if (o.alsoResize.length) { o.alsoResize = o.alsoResize[0]; _store(o.alsoResize); }
				else { $.each(o.alsoResize, function (exp) { _store(exp); }); }
			}else{
				_store(o.alsoResize);
			}
		},

		resize: function (event, ui) {
			var that = $(this).data("ui-resizable"),
				o = that.options,
				os = that.originalSize,
				op = that.originalPosition,
				delta = {
					height: (that.size.height - os.height) || 0, width: (that.size.width - os.width) || 0,
					top: (that.position.top - op.top) || 0, left: (that.position.left - op.left) || 0
				},

				_alsoResize = function (exp, c) {
					$(exp).each(function() {
						var el = $(this), start = $(this).data("ui-resizable-alsoresize"), style = {},
							css = c && c.length ? c : el.parents(ui.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"];

						$.each(css, function (i, prop) {
							var sum = (start[prop]||0) + (delta[prop]||0);
							if (sum && sum >= 0) {
								style[prop] = sum || null;
							}
						});

						el.css(style);
					});
				};

			if (typeof(o.alsoResize) === "object" && !o.alsoResize.nodeType) {
				$.each(o.alsoResize, function (exp, c) { _alsoResize(exp, c); });
			}else{
				_alsoResize(o.alsoResize);
			}
		},

		stop: function () {
			$(this).removeData("resizable-alsoresize");
		}
	});

	$.ui.plugin.add("resizable", "ghost", {

		start: function() {

			var that = $(this).data("ui-resizable"), o = that.options, cs = that.size;

			that.ghost = that.originalElement.clone();
			that.ghost
				.css({ opacity: 0.25, display: "block", position: "relative", height: cs.height, width: cs.width, margin: 0, left: 0, top: 0 })
				.addClass("ui-resizable-ghost")
				.addClass(typeof o.ghost === "string" ? o.ghost : "");

			that.ghost.appendTo(that.helper);

		},

		resize: function(){
			var that = $(this).data("ui-resizable");
			if (that.ghost) {
				that.ghost.css({ position: "relative", height: that.size.height, width: that.size.width });
			}
		},

		stop: function() {
			var that = $(this).data("ui-resizable");
			if (that.ghost && that.helper) {
				that.helper.get(0).removeChild(that.ghost.get(0));
			}
		}

	});

	$.ui.plugin.add("resizable", "grid", {

		resize: function() {
			var that = $(this).data("ui-resizable"),
				o = that.options,
				cs = that.size,
				os = that.originalSize,
				op = that.originalPosition,
				a = that.axis,
				grid = typeof o.grid === "number" ? [o.grid, o.grid] : o.grid,
				gridX = (grid[0]||1),
				gridY = (grid[1]||1),
				ox = Math.round((cs.width - os.width) / gridX) * gridX,
				oy = Math.round((cs.height - os.height) / gridY) * gridY,
				newWidth = os.width + ox,
				newHeight = os.height + oy,
				isMaxWidth = o.maxWidth && (o.maxWidth < newWidth),
				isMaxHeight = o.maxHeight && (o.maxHeight < newHeight),
				isMinWidth = o.minWidth && (o.minWidth > newWidth),
				isMinHeight = o.minHeight && (o.minHeight > newHeight);

			o.grid = grid;

			if (isMinWidth) {
				newWidth = newWidth + gridX;
			}
			if (isMinHeight) {
				newHeight = newHeight + gridY;
			}
			if (isMaxWidth) {
				newWidth = newWidth - gridX;
			}
			if (isMaxHeight) {
				newHeight = newHeight - gridY;
			}

			if (/^(se|s|e)$/.test(a)) {
				that.size.width = newWidth;
				that.size.height = newHeight;
			} else if (/^(ne)$/.test(a)) {
				that.size.width = newWidth;
				that.size.height = newHeight;
				that.position.top = op.top - oy;
			} else if (/^(sw)$/.test(a)) {
				that.size.width = newWidth;
				that.size.height = newHeight;
				that.position.left = op.left - ox;
			} else {
				that.size.width = newWidth;
				that.size.height = newHeight;
				that.position.top = op.top - oy;
				that.position.left = op.left - ox;
			}
		}

	});

	})(jQuery);

	(function( $, undefined ) {

	$.widget("ui.selectable", $.ui.mouse, {
		version: "1.10.3",
		options: {
			appendTo: "body",
			autoRefresh: true,
			distance: 0,
			filter: "*",
			tolerance: "touch",

			// callbacks
			selected: null,
			selecting: null,
			start: null,
			stop: null,
			unselected: null,
			unselecting: null
		},
		_create: function() {
			var selectees,
				that = this;

			this.element.addClass("ui-selectable");

			this.dragged = false;

			// cache selectee children based on filter
			this.refresh = function() {
				selectees = $(that.options.filter, that.element[0]);
				selectees.addClass("ui-selectee");
				selectees.each(function() {
					var $this = $(this),
						pos = $this.offset();
					$.data(this, "selectable-item", {
						element: this,
						$element: $this,
						left: pos.left,
						top: pos.top,
						right: pos.left + $this.outerWidth(),
						bottom: pos.top + $this.outerHeight(),
						startselected: false,
						selected: $this.hasClass("ui-selected"),
						selecting: $this.hasClass("ui-selecting"),
						unselecting: $this.hasClass("ui-unselecting")
					});
				});
			};
			this.refresh();

			this.selectees = selectees.addClass("ui-selectee");

			this._mouseInit();

			this.helper = $("<div class='ui-selectable-helper'></div>");
		},

		_destroy: function() {
			this.selectees
				.removeClass("ui-selectee")
				.removeData("selectable-item");
			this.element
				.removeClass("ui-selectable ui-selectable-disabled");
			this._mouseDestroy();
		},

		_mouseStart: function(event) {
			var that = this,
				options = this.options;

			this.opos = [event.pageX, event.pageY];

			if (this.options.disabled) {
				return;
			}

			this.selectees = $(options.filter, this.element[0]);

			this._trigger("start", event);

			$(options.appendTo).append(this.helper);
			// position helper (lasso)
			this.helper.css({
				"left": event.pageX,
				"top": event.pageY,
				"width": 0,
				"height": 0
			});

			if (options.autoRefresh) {
				this.refresh();
			}

			this.selectees.filter(".ui-selected").each(function() {
				var selectee = $.data(this, "selectable-item");
				selectee.startselected = true;
				if (!event.metaKey && !event.ctrlKey) {
					selectee.$element.removeClass("ui-selected");
					selectee.selected = false;
					selectee.$element.addClass("ui-unselecting");
					selectee.unselecting = true;
					// selectable UNSELECTING callback
					that._trigger("unselecting", event, {
						unselecting: selectee.element
					});
				}
			});

			$(event.target).parents().addBack().each(function() {
				var doSelect,
					selectee = $.data(this, "selectable-item");
				if (selectee) {
					doSelect = (!event.metaKey && !event.ctrlKey) || !selectee.$element.hasClass("ui-selected");
					selectee.$element
						.removeClass(doSelect ? "ui-unselecting" : "ui-selected")
						.addClass(doSelect ? "ui-selecting" : "ui-unselecting");
					selectee.unselecting = !doSelect;
					selectee.selecting = doSelect;
					selectee.selected = doSelect;
					// selectable (UN)SELECTING callback
					if (doSelect) {
						that._trigger("selecting", event, {
							selecting: selectee.element
						});
					} else {
						that._trigger("unselecting", event, {
							unselecting: selectee.element
						});
					}
					return false;
				}
			});

		},

		_mouseDrag: function(event) {

			this.dragged = true;

			if (this.options.disabled) {
				return;
			}

			var tmp,
				that = this,
				options = this.options,
				x1 = this.opos[0],
				y1 = this.opos[1],
				x2 = event.pageX,
				y2 = event.pageY;

			if (x1 > x2) { tmp = x2; x2 = x1; x1 = tmp; }
			if (y1 > y2) { tmp = y2; y2 = y1; y1 = tmp; }
			this.helper.css({left: x1, top: y1, width: x2-x1, height: y2-y1});

			this.selectees.each(function() {
				var selectee = $.data(this, "selectable-item"),
					hit = false;

				//prevent helper from being selected if appendTo: selectable
				if (!selectee || selectee.element === that.element[0]) {
					return;
				}

				if (options.tolerance === "touch") {
					hit = ( !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1) );
				} else if (options.tolerance === "fit") {
					hit = (selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2);
				}

				if (hit) {
					// SELECT
					if (selectee.selected) {
						selectee.$element.removeClass("ui-selected");
						selectee.selected = false;
					}
					if (selectee.unselecting) {
						selectee.$element.removeClass("ui-unselecting");
						selectee.unselecting = false;
					}
					if (!selectee.selecting) {
						selectee.$element.addClass("ui-selecting");
						selectee.selecting = true;
						// selectable SELECTING callback
						that._trigger("selecting", event, {
							selecting: selectee.element
						});
					}
				} else {
					// UNSELECT
					if (selectee.selecting) {
						if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
							selectee.$element.removeClass("ui-selecting");
							selectee.selecting = false;
							selectee.$element.addClass("ui-selected");
							selectee.selected = true;
						} else {
							selectee.$element.removeClass("ui-selecting");
							selectee.selecting = false;
							if (selectee.startselected) {
								selectee.$element.addClass("ui-unselecting");
								selectee.unselecting = true;
							}
							// selectable UNSELECTING callback
							that._trigger("unselecting", event, {
								unselecting: selectee.element
							});
						}
					}
					if (selectee.selected) {
						if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {
							selectee.$element.removeClass("ui-selected");
							selectee.selected = false;

							selectee.$element.addClass("ui-unselecting");
							selectee.unselecting = true;
							// selectable UNSELECTING callback
							that._trigger("unselecting", event, {
								unselecting: selectee.element
							});
						}
					}
				}
			});

			return false;
		},

		_mouseStop: function(event) {
			var that = this;

			this.dragged = false;

			$(".ui-unselecting", this.element[0]).each(function() {
				var selectee = $.data(this, "selectable-item");
				selectee.$element.removeClass("ui-unselecting");
				selectee.unselecting = false;
				selectee.startselected = false;
				that._trigger("unselected", event, {
					unselected: selectee.element
				});
			});
			$(".ui-selecting", this.element[0]).each(function() {
				var selectee = $.data(this, "selectable-item");
				selectee.$element.removeClass("ui-selecting").addClass("ui-selected");
				selectee.selecting = false;
				selectee.selected = true;
				selectee.startselected = true;
				that._trigger("selected", event, {
					selected: selectee.element
				});
			});
			this._trigger("stop", event);

			this.helper.remove();

			return false;
		}

	});

	})(jQuery);

	(function( $, undefined ) {

	/*jshint loopfunc: true */

	function isOverAxis( x, reference, size ) {
		return ( x > reference ) && ( x < ( reference + size ) );
	}

	function isFloating(item) {
		return (/left|right/).test(item.css("float")) || (/inline|table-cell/).test(item.css("display"));
	}

	$.widget("ui.sortable", $.ui.mouse, {
		version: "1.10.3",
		widgetEventPrefix: "sort",
		ready: false,
		options: {
			appendTo: "parent",
			axis: false,
			connectWith: false,
			containment: false,
			cursor: "auto",
			cursorAt: false,
			dropOnEmpty: true,
			forcePlaceholderSize: false,
			forceHelperSize: false,
			grid: false,
			handle: false,
			helper: "original",
			items: "> *",
			opacity: false,
			placeholder: false,
			revert: false,
			scroll: true,
			scrollSensitivity: 20,
			scrollSpeed: 20,
			scope: "default",
			tolerance: "intersect",
			zIndex: 1000,

			// callbacks
			activate: null,
			beforeStop: null,
			change: null,
			deactivate: null,
			out: null,
			over: null,
			receive: null,
			remove: null,
			sort: null,
			start: null,
			stop: null,
			update: null
		},
		_create: function() {

			var o = this.options;
			this.containerCache = {};
			this.element.addClass("ui-sortable");

			//Get the items
			this.refresh();

			//Let's determine if the items are being displayed horizontally
			this.floating = this.items.length ? o.axis === "x" || isFloating(this.items[0].item) : false;

			//Let's determine the parent's offset
			this.offset = this.element.offset();

			//Initialize mouse events for interaction
			this._mouseInit();

			//We're ready to go
			this.ready = true;

		},

		_destroy: function() {
			this.element
				.removeClass("ui-sortable ui-sortable-disabled");
			this._mouseDestroy();

			for ( var i = this.items.length - 1; i >= 0; i-- ) {
				this.items[i].item.removeData(this.widgetName + "-item");
			}

			return this;
		},

		_setOption: function(key, value){
			if ( key === "disabled" ) {
				this.options[ key ] = value;

				this.widget().toggleClass( "ui-sortable-disabled", !!value );
			} else {
				// Don't call widget base _setOption for disable as it adds ui-state-disabled class
				$.Widget.prototype._setOption.apply(this, arguments);
			}
		},

		_mouseCapture: function(event, overrideHandle) {
			var currentItem = null,
				validHandle = false,
				that = this;

			if (this.reverting) {
				return false;
			}

			if(this.options.disabled || this.options.type === "static") {
				return false;
			}

			//We have to refresh the items data once first
			this._refreshItems(event);

			//Find out if the clicked node (or one of its parents) is a actual item in this.items
			$(event.target).parents().each(function() {
				if($.data(this, that.widgetName + "-item") === that) {
					currentItem = $(this);
					return false;
				}
			});
			if($.data(event.target, that.widgetName + "-item") === that) {
				currentItem = $(event.target);
			}

			if(!currentItem) {
				return false;
			}
			if(this.options.handle && !overrideHandle) {
				$(this.options.handle, currentItem).find("*").addBack().each(function() {
					if(this === event.target) {
						validHandle = true;
					}
				});
				if(!validHandle) {
					return false;
				}
			}

			this.currentItem = currentItem;
			this._removeCurrentsFromItems();
			return true;

		},

		_mouseStart: function(event, overrideHandle, noActivation) {

			var i, body,
				o = this.options;

			this.currentContainer = this;

			//We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture
			this.refreshPositions();

			//Create and append the visible helper
			this.helper = this._createHelper(event);

			//Cache the helper size
			this._cacheHelperProportions();

			/*
			 * - Position generation -
			 * This block generates everything position related - it's the core of draggables.
			 */

			//Cache the margins of the original element
			this._cacheMargins();

			//Get the next scrolling parent
			this.scrollParent = this.helper.scrollParent();

			//The element's absolute position on the page minus margins
			this.offset = this.currentItem.offset();
			this.offset = {
				top: this.offset.top - this.margins.top,
				left: this.offset.left - this.margins.left
			};

			$.extend(this.offset, {
				click: { //Where the click happened, relative to the element
					left: event.pageX - this.offset.left,
					top: event.pageY - this.offset.top
				},
				parent: this._getParentOffset(),
				relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper
			});

			// Only after we got the offset, we can change the helper's position to absolute
			// TODO: Still need to figure out a way to make relative sorting possible
			this.helper.css("position", "absolute");
			this.cssPosition = this.helper.css("position");

			//Generate the original position
			this.originalPosition = this._generatePosition(event);
			this.originalPageX = event.pageX;
			this.originalPageY = event.pageY;

			//Adjust the mouse offset relative to the helper if "cursorAt" is supplied
			(o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));

			//Cache the former DOM position
			this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] };

			//If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way
			if(this.helper[0] !== this.currentItem[0]) {
				this.currentItem.hide();
			}

			//Create the placeholder
			this._createPlaceholder();

			//Set a containment if given in the options
			if(o.containment) {
				this._setContainment();
			}

			if( o.cursor && o.cursor !== "auto" ) { // cursor option
				body = this.document.find( "body" );

				// support: IE
				this.storedCursor = body.css( "cursor" );
				body.css( "cursor", o.cursor );

				this.storedStylesheet = $( "<style>*{ cursor: "+o.cursor+" !important; }</style>" ).appendTo( body );
			}

			if(o.opacity) { // opacity option
				if (this.helper.css("opacity")) {
					this._storedOpacity = this.helper.css("opacity");
				}
				this.helper.css("opacity", o.opacity);
			}

			if(o.zIndex) { // zIndex option
				if (this.helper.css("zIndex")) {
					this._storedZIndex = this.helper.css("zIndex");
				}
				this.helper.css("zIndex", o.zIndex);
			}

			//Prepare scrolling
			if(this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {
				this.overflowOffset = this.scrollParent.offset();
			}

			//Call callbacks
			this._trigger("start", event, this._uiHash());

			//Recache the helper size
			if(!this._preserveHelperProportions) {
				this._cacheHelperProportions();
			}


			//Post "activate" events to possible containers
			if( !noActivation ) {
				for ( i = this.containers.length - 1; i >= 0; i-- ) {
					this.containers[ i ]._trigger( "activate", event, this._uiHash( this ) );
				}
			}

			//Prepare possible droppables
			if($.ui.ddmanager) {
				$.ui.ddmanager.current = this;
			}

			if ($.ui.ddmanager && !o.dropBehaviour) {
				$.ui.ddmanager.prepareOffsets(this, event);
			}

			this.dragging = true;

			this.helper.addClass("ui-sortable-helper");
			this._mouseDrag(event); //Execute the drag once - this causes the helper not to be visible before getting its correct position
			return true;

		},

		_mouseDrag: function(event) {
			var i, item, itemElement, intersection,
				o = this.options,
				scrolled = false;

			//Compute the helpers position
			this.position = this._generatePosition(event);
			this.positionAbs = this._convertPositionTo("absolute");

			if (!this.lastPositionAbs) {
				this.lastPositionAbs = this.positionAbs;
			}

			//Do scrolling
			if(this.options.scroll) {
				if(this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {

					if((this.overflowOffset.top + this.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {
						this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
					} else if(event.pageY - this.overflowOffset.top < o.scrollSensitivity) {
						this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;
					}

					if((this.overflowOffset.left + this.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {
						this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
					} else if(event.pageX - this.overflowOffset.left < o.scrollSensitivity) {
						this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;
					}

				} else {

					if(event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
						scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
					} else if($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
						scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
					}

					if(event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
						scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
					} else if($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
						scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
					}

				}

				if(scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
					$.ui.ddmanager.prepareOffsets(this, event);
				}
			}

			//Regenerate the absolute position used for position checks
			this.positionAbs = this._convertPositionTo("absolute");

			//Set the helper position
			if(!this.options.axis || this.options.axis !== "y") {
				this.helper[0].style.left = this.position.left+"px";
			}
			if(!this.options.axis || this.options.axis !== "x") {
				this.helper[0].style.top = this.position.top+"px";
			}

			//Rearrange
			for (i = this.items.length - 1; i >= 0; i--) {

				//Cache variables and intersection, continue if no intersection
				item = this.items[i];
				itemElement = item.item[0];
				intersection = this._intersectsWithPointer(item);
				if (!intersection) {
					continue;
				}

				// Only put the placeholder inside the current Container, skip all
				// items form other containers. This works because when moving
				// an item from one container to another the
				// currentContainer is switched before the placeholder is moved.
				//
				// Without this moving items in "sub-sortables" can cause the placeholder to jitter
				// beetween the outer and inner container.
				if (item.instance !== this.currentContainer) {
					continue;
				}

				// cannot intersect with itself
				// no useless actions that have been done before
				// no action if the item moved is the parent of the item checked
				if (itemElement !== this.currentItem[0] &&
					this.placeholder[intersection === 1 ? "next" : "prev"]()[0] !== itemElement &&
					!$.contains(this.placeholder[0], itemElement) &&
					(this.options.type === "semi-dynamic" ? !$.contains(this.element[0], itemElement) : true)
				) {

					this.direction = intersection === 1 ? "down" : "up";

					if (this.options.tolerance === "pointer" || this._intersectsWithSides(item)) {
						this._rearrange(event, item);
					} else {
						break;
					}

					this._trigger("change", event, this._uiHash());
					break;
				}
			}

			//Post events to containers
			this._contactContainers(event);

			//Interconnect with droppables
			if($.ui.ddmanager) {
				$.ui.ddmanager.drag(this, event);
			}

			//Call callbacks
			this._trigger("sort", event, this._uiHash());

			this.lastPositionAbs = this.positionAbs;
			return false;

		},

		_mouseStop: function(event, noPropagation) {

			if(!event) {
				return;
			}

			//If we are using droppables, inform the manager about the drop
			if ($.ui.ddmanager && !this.options.dropBehaviour) {
				$.ui.ddmanager.drop(this, event);
			}

			if(this.options.revert) {
				var that = this,
					cur = this.placeholder.offset(),
					axis = this.options.axis,
					animation = {};

				if ( !axis || axis === "x" ) {
					animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollLeft);
				}
				if ( !axis || axis === "y" ) {
					animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollTop);
				}
				this.reverting = true;
				$(this.helper).animate( animation, parseInt(this.options.revert, 10) || 500, function() {
					that._clear(event);
				});
			} else {
				this._clear(event, noPropagation);
			}

			return false;

		},

		cancel: function() {

			if(this.dragging) {

				this._mouseUp({ target: null });

				if(this.options.helper === "original") {
					this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
				} else {
					this.currentItem.show();
				}

				//Post deactivating events to containers
				for (var i = this.containers.length - 1; i >= 0; i--){
					this.containers[i]._trigger("deactivate", null, this._uiHash(this));
					if(this.containers[i].containerCache.over) {
						this.containers[i]._trigger("out", null, this._uiHash(this));
						this.containers[i].containerCache.over = 0;
					}
				}

			}

			if (this.placeholder) {
				//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
				if(this.placeholder[0].parentNode) {
					this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
				}
				if(this.options.helper !== "original" && this.helper && this.helper[0].parentNode) {
					this.helper.remove();
				}

				$.extend(this, {
					helper: null,
					dragging: false,
					reverting: false,
					_noFinalSort: null
				});

				if(this.domPosition.prev) {
					$(this.domPosition.prev).after(this.currentItem);
				} else {
					$(this.domPosition.parent).prepend(this.currentItem);
				}
			}

			return this;

		},

		serialize: function(o) {

			var items = this._getItemsAsjQuery(o && o.connected),
				str = [];
			o = o || {};

			$(items).each(function() {
				var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || (/(.+)[\-=_](.+)/));
				if (res) {
					str.push((o.key || res[1]+"[]")+"="+(o.key && o.expression ? res[1] : res[2]));
				}
			});

			if(!str.length && o.key) {
				str.push(o.key + "=");
			}

			return str.join("&");

		},

		toArray: function(o) {

			var items = this._getItemsAsjQuery(o && o.connected),
				ret = [];

			o = o || {};

			items.each(function() { ret.push($(o.item || this).attr(o.attribute || "id") || ""); });
			return ret;

		},

		/* Be careful with the following core functions */
		_intersectsWith: function(item) {

			var x1 = this.positionAbs.left,
				x2 = x1 + this.helperProportions.width,
				y1 = this.positionAbs.top,
				y2 = y1 + this.helperProportions.height,
				l = item.left,
				r = l + item.width,
				t = item.top,
				b = t + item.height,
				dyClick = this.offset.click.top,
				dxClick = this.offset.click.left,
				isOverElementHeight = ( this.options.axis === "x" ) || ( ( y1 + dyClick ) > t && ( y1 + dyClick ) < b ),
				isOverElementWidth = ( this.options.axis === "y" ) || ( ( x1 + dxClick ) > l && ( x1 + dxClick ) < r ),
				isOverElement = isOverElementHeight && isOverElementWidth;

			if ( this.options.tolerance === "pointer" ||
				this.options.forcePointerForContainers ||
				(this.options.tolerance !== "pointer" && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"])
			) {
				return isOverElement;
			} else {

				return (l < x1 + (this.helperProportions.width / 2) && // Right Half
					x2 - (this.helperProportions.width / 2) < r && // Left Half
					t < y1 + (this.helperProportions.height / 2) && // Bottom Half
					y2 - (this.helperProportions.height / 2) < b ); // Top Half

			}
		},

		_intersectsWithPointer: function(item) {

			var isOverElementHeight = (this.options.axis === "x") || isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height),
				isOverElementWidth = (this.options.axis === "y") || isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width),
				isOverElement = isOverElementHeight && isOverElementWidth,
				verticalDirection = this._getDragVerticalDirection(),
				horizontalDirection = this._getDragHorizontalDirection();

			if (!isOverElement) {
				return false;
			}

			return this.floating ?
				( ((horizontalDirection && horizontalDirection === "right") || verticalDirection === "down") ? 2 : 1 )
				: ( verticalDirection && (verticalDirection === "down" ? 2 : 1) );

		},

		_intersectsWithSides: function(item) {

			var isOverBottomHalf = isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + (item.height/2), item.height),
				isOverRightHalf = isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + (item.width/2), item.width),
				verticalDirection = this._getDragVerticalDirection(),
				horizontalDirection = this._getDragHorizontalDirection();

			if (this.floating && horizontalDirection) {
				return ((horizontalDirection === "right" && isOverRightHalf) || (horizontalDirection === "left" && !isOverRightHalf));
			} else {
				return verticalDirection && ((verticalDirection === "down" && isOverBottomHalf) || (verticalDirection === "up" && !isOverBottomHalf));
			}

		},

		_getDragVerticalDirection: function() {
			var delta = this.positionAbs.top - this.lastPositionAbs.top;
			return delta !== 0 && (delta > 0 ? "down" : "up");
		},

		_getDragHorizontalDirection: function() {
			var delta = this.positionAbs.left - this.lastPositionAbs.left;
			return delta !== 0 && (delta > 0 ? "right" : "left");
		},

		refresh: function(event) {
			this._refreshItems(event);
			this.refreshPositions();
			return this;
		},

		_connectWith: function() {
			var options = this.options;
			return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith;
		},

		_getItemsAsjQuery: function(connected) {

			var i, j, cur, inst,
				items = [],
				queries = [],
				connectWith = this._connectWith();

			if(connectWith && connected) {
				for (i = connectWith.length - 1; i >= 0; i--){
					cur = $(connectWith[i]);
					for ( j = cur.length - 1; j >= 0; j--){
						inst = $.data(cur[j], this.widgetFullName);
						if(inst && inst !== this && !inst.options.disabled) {
							queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), inst]);
						}
					}
				}
			}

			queries.push([$.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : $(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]);

			for (i = queries.length - 1; i >= 0; i--){
				queries[i][0].each(function() {
					items.push(this);
				});
			}

			return $(items);

		},

		_removeCurrentsFromItems: function() {

			var list = this.currentItem.find(":data(" + this.widgetName + "-item)");

			this.items = $.grep(this.items, function (item) {
				for (var j=0; j < list.length; j++) {
					if(list[j] === item.item[0]) {
						return false;
					}
				}
				return true;
			});

		},

		_refreshItems: function(event) {

			this.items = [];
			this.containers = [this];

			var i, j, cur, inst, targetData, _queries, item, queriesLength,
				items = this.items,
				queries = [[$.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, { item: this.currentItem }) : $(this.options.items, this.element), this]],
				connectWith = this._connectWith();

			if(connectWith && this.ready) { //Shouldn't be run the first time through due to massive slow-down
				for (i = connectWith.length - 1; i >= 0; i--){
					cur = $(connectWith[i]);
					for (j = cur.length - 1; j >= 0; j--){
						inst = $.data(cur[j], this.widgetFullName);
						if(inst && inst !== this && !inst.options.disabled) {
							queries.push([$.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, { item: this.currentItem }) : $(inst.options.items, inst.element), inst]);
							this.containers.push(inst);
						}
					}
				}
			}

			for (i = queries.length - 1; i >= 0; i--) {
				targetData = queries[i][1];
				_queries = queries[i][0];

				for (j=0, queriesLength = _queries.length; j < queriesLength; j++) {
					item = $(_queries[j]);

					item.data(this.widgetName + "-item", targetData); // Data for target checking (mouse manager)

					items.push({
						item: item,
						instance: targetData,
						width: 0, height: 0,
						left: 0, top: 0
					});
				}
			}

		},

		refreshPositions: function(fast) {

			//This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change
			if(this.offsetParent && this.helper) {
				this.offset.parent = this._getParentOffset();
			}

			var i, item, t, p;

			for (i = this.items.length - 1; i >= 0; i--){
				item = this.items[i];

				//We ignore calculating positions of all connected containers when we're not over them
				if(item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {
					continue;
				}

				t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;

				if (!fast) {
					item.width = t.outerWidth();
					item.height = t.outerHeight();
				}

				p = t.offset();
				item.left = p.left;
				item.top = p.top;
			}

			if(this.options.custom && this.options.custom.refreshContainers) {
				this.options.custom.refreshContainers.call(this);
			} else {
				for (i = this.containers.length - 1; i >= 0; i--){
					p = this.containers[i].element.offset();
					this.containers[i].containerCache.left = p.left;
					this.containers[i].containerCache.top = p.top;
					this.containers[i].containerCache.width	= this.containers[i].element.outerWidth();
					this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
				}
			}

			return this;
		},

		_createPlaceholder: function(that) {
			that = that || this;
			var className,
				o = that.options;

			if(!o.placeholder || o.placeholder.constructor === String) {
				className = o.placeholder;
				o.placeholder = {
					element: function() {

						var nodeName = that.currentItem[0].nodeName.toLowerCase(),
							element = $( "<" + nodeName + ">", that.document[0] )
								.addClass(className || that.currentItem[0].className+" ui-sortable-placeholder")
								.removeClass("ui-sortable-helper");

						if ( nodeName === "tr" ) {
							that.currentItem.children().each(function() {
								$( "<td>&#160;</td>", that.document[0] )
									.attr( "colspan", $( this ).attr( "colspan" ) || 1 )
									.appendTo( element );
							});
						} else if ( nodeName === "img" ) {
							element.attr( "src", that.currentItem.attr( "src" ) );
						}

						if ( !className ) {
							element.css( "visibility", "hidden" );
						}

						return element;
					},
					update: function(container, p) {

						// 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that
						// 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified
						if(className && !o.forcePlaceholderSize) {
							return;
						}

						//If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item
						if(!p.height()) { p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop")||0, 10) - parseInt(that.currentItem.css("paddingBottom")||0, 10)); }
						if(!p.width()) { p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft")||0, 10) - parseInt(that.currentItem.css("paddingRight")||0, 10)); }
					}
				};
			}

			//Create the placeholder
			that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));

			//Append it after the actual current item
			that.currentItem.after(that.placeholder);

			//Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
			o.placeholder.update(that, that.placeholder);

		},

		_contactContainers: function(event) {
			var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, base, cur, nearBottom, floating,
				innermostContainer = null,
				innermostIndex = null;

			// get innermost container that intersects with item
			for (i = this.containers.length - 1; i >= 0; i--) {

				// never consider a container that's located within the item itself
				if($.contains(this.currentItem[0], this.containers[i].element[0])) {
					continue;
				}

				if(this._intersectsWith(this.containers[i].containerCache)) {

					// if we've already found a container and it's more "inner" than this, then continue
					if(innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {
						continue;
					}

					innermostContainer = this.containers[i];
					innermostIndex = i;

				} else {
					// container doesn't intersect. trigger "out" event if necessary
					if(this.containers[i].containerCache.over) {
						this.containers[i]._trigger("out", event, this._uiHash(this));
						this.containers[i].containerCache.over = 0;
					}
				}

			}

			// if no intersecting containers found, return
			if(!innermostContainer) {
				return;
			}

			// move the item into the container if it's not there already
			if(this.containers.length === 1) {
				if (!this.containers[innermostIndex].containerCache.over) {
					this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
					this.containers[innermostIndex].containerCache.over = 1;
				}
			} else {

				//When entering a new container, we will find the item with the least distance and append our item near it
				dist = 10000;
				itemWithLeastDistance = null;
				floating = innermostContainer.floating || isFloating(this.currentItem);
				posProperty = floating ? "left" : "top";
				sizeProperty = floating ? "width" : "height";
				base = this.positionAbs[posProperty] + this.offset.click[posProperty];
				for (j = this.items.length - 1; j >= 0; j--) {
					if(!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {
						continue;
					}
					if(this.items[j].item[0] === this.currentItem[0]) {
						continue;
					}
					if (floating && !isOverAxis(this.positionAbs.top + this.offset.click.top, this.items[j].top, this.items[j].height)) {
						continue;
					}
					cur = this.items[j].item.offset()[posProperty];
					nearBottom = false;
					if(Math.abs(cur - base) > Math.abs(cur + this.items[j][sizeProperty] - base)){
						nearBottom = true;
						cur += this.items[j][sizeProperty];
					}

					if(Math.abs(cur - base) < dist) {
						dist = Math.abs(cur - base); itemWithLeastDistance = this.items[j];
						this.direction = nearBottom ? "up": "down";
					}
				}

				//Check if dropOnEmpty is enabled
				if(!itemWithLeastDistance && !this.options.dropOnEmpty) {
					return;
				}

				if(this.currentContainer === this.containers[innermostIndex]) {
					return;
				}

				itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
				this._trigger("change", event, this._uiHash());
				this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));
				this.currentContainer = this.containers[innermostIndex];

				//Update the placeholder
				this.options.placeholder.update(this.currentContainer, this.placeholder);

				this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
				this.containers[innermostIndex].containerCache.over = 1;
			}


		},

		_createHelper: function(event) {

			var o = this.options,
				helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event, this.currentItem])) : (o.helper === "clone" ? this.currentItem.clone() : this.currentItem);

			//Add the helper to the DOM if that didn't happen already
			if(!helper.parents("body").length) {
				$(o.appendTo !== "parent" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);
			}

			if(helper[0] === this.currentItem[0]) {
				this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") };
			}

			if(!helper[0].style.width || o.forceHelperSize) {
				helper.width(this.currentItem.width());
			}
			if(!helper[0].style.height || o.forceHelperSize) {
				helper.height(this.currentItem.height());
			}

			return helper;

		},

		_adjustOffsetFromHelper: function(obj) {
			if (typeof obj === "string") {
				obj = obj.split(" ");
			}
			if ($.isArray(obj)) {
				obj = {left: +obj[0], top: +obj[1] || 0};
			}
			if ("left" in obj) {
				this.offset.click.left = obj.left + this.margins.left;
			}
			if ("right" in obj) {
				this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
			}
			if ("top" in obj) {
				this.offset.click.top = obj.top + this.margins.top;
			}
			if ("bottom" in obj) {
				this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
			}
		},

		_getParentOffset: function() {


			//Get the offsetParent and cache its position
			this.offsetParent = this.helper.offsetParent();
			var po = this.offsetParent.offset();

			// This is a special case where we need to modify a offset calculated on start, since the following happened:
			// 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
			// 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
			//    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
			if(this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
				po.left += this.scrollParent.scrollLeft();
				po.top += this.scrollParent.scrollTop();
			}

			// This needs to be actually done for all browsers, since pageX/pageY includes this information
			// with an ugly IE fix
			if( this.offsetParent[0] === document.body || (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie)) {
				po = { top: 0, left: 0 };
			}

			return {
				top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"),10) || 0),
				left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"),10) || 0)
			};

		},

		_getRelativeOffset: function() {

			if(this.cssPosition === "relative") {
				var p = this.currentItem.position();
				return {
					top: p.top - (parseInt(this.helper.css("top"),10) || 0) + this.scrollParent.scrollTop(),
					left: p.left - (parseInt(this.helper.css("left"),10) || 0) + this.scrollParent.scrollLeft()
				};
			} else {
				return { top: 0, left: 0 };
			}

		},

		_cacheMargins: function() {
			this.margins = {
				left: (parseInt(this.currentItem.css("marginLeft"),10) || 0),
				top: (parseInt(this.currentItem.css("marginTop"),10) || 0)
			};
		},

		_cacheHelperProportions: function() {
			this.helperProportions = {
				width: this.helper.outerWidth(),
				height: this.helper.outerHeight()
			};
		},

		_setContainment: function() {

			var ce, co, over,
				o = this.options;
			if(o.containment === "parent") {
				o.containment = this.helper[0].parentNode;
			}
			if(o.containment === "document" || o.containment === "window") {
				this.containment = [
					0 - this.offset.relative.left - this.offset.parent.left,
					0 - this.offset.relative.top - this.offset.parent.top,
					$(o.containment === "document" ? document : window).width() - this.helperProportions.width - this.margins.left,
					($(o.containment === "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
				];
			}

			if(!(/^(document|window|parent)$/).test(o.containment)) {
				ce = $(o.containment)[0];
				co = $(o.containment).offset();
				over = ($(ce).css("overflow") !== "hidden");

				this.containment = [
					co.left + (parseInt($(ce).css("borderLeftWidth"),10) || 0) + (parseInt($(ce).css("paddingLeft"),10) || 0) - this.margins.left,
					co.top + (parseInt($(ce).css("borderTopWidth"),10) || 0) + (parseInt($(ce).css("paddingTop"),10) || 0) - this.margins.top,
					co.left+(over ? Math.max(ce.scrollWidth,ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"),10) || 0) - (parseInt($(ce).css("paddingRight"),10) || 0) - this.helperProportions.width - this.margins.left,
					co.top+(over ? Math.max(ce.scrollHeight,ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"),10) || 0) - (parseInt($(ce).css("paddingBottom"),10) || 0) - this.helperProportions.height - this.margins.top
				];
			}

		},

		_convertPositionTo: function(d, pos) {

			if(!pos) {
				pos = this.position;
			}
			var mod = d === "absolute" ? 1 : -1,
				scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,
				scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

			return {
				top: (
					pos.top	+																// The absolute mouse position
					this.offset.relative.top * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.top * mod -											// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ) * mod)
				),
				left: (
					pos.left +																// The absolute mouse position
					this.offset.relative.left * mod +										// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.left * mod	-										// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ) * mod)
				)
			};

		},

		_generatePosition: function(event) {

			var top, left,
				o = this.options,
				pageX = event.pageX,
				pageY = event.pageY,
				scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = (/(html|body)/i).test(scroll[0].tagName);

			// This is another very weird special case that only happens for relative elements:
			// 1. If the css position is relative
			// 2. and the scroll parent is the document or similar to the offset parent
			// we have to refresh the relative offset during the scroll so there are no jumps
			if(this.cssPosition === "relative" && !(this.scrollParent[0] !== document && this.scrollParent[0] !== this.offsetParent[0])) {
				this.offset.relative = this._getRelativeOffset();
			}

			/*
			 * - Position constraining -
			 * Constrain the position to a mix of grid, containment.
			 */

			if(this.originalPosition) { //If we are not dragging yet, we won't check for options

				if(this.containment) {
					if(event.pageX - this.offset.click.left < this.containment[0]) {
						pageX = this.containment[0] + this.offset.click.left;
					}
					if(event.pageY - this.offset.click.top < this.containment[1]) {
						pageY = this.containment[1] + this.offset.click.top;
					}
					if(event.pageX - this.offset.click.left > this.containment[2]) {
						pageX = this.containment[2] + this.offset.click.left;
					}
					if(event.pageY - this.offset.click.top > this.containment[3]) {
						pageY = this.containment[3] + this.offset.click.top;
					}
				}

				if(o.grid) {
					top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
					pageY = this.containment ? ( (top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3]) ? top : ((top - this.offset.click.top >= this.containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;

					left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
					pageX = this.containment ? ( (left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2]) ? left : ((left - this.offset.click.left >= this.containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;
				}

			}

			return {
				top: (
					pageY -																// The absolute mouse position
					this.offset.click.top -													// Click offset (relative to the element)
					this.offset.relative.top	-											// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.top +												// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : ( scrollIsRootNode ? 0 : scroll.scrollTop() ) ))
				),
				left: (
					pageX -																// The absolute mouse position
					this.offset.click.left -												// Click offset (relative to the element)
					this.offset.relative.left	-											// Only for relative positioned nodes: Relative offset from element to offset parent
					this.offset.parent.left +												// The offsetParent's offset without borders (offset + border)
					( ( this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft() ))
				)
			};

		},

		_rearrange: function(event, i, a, hardRefresh) {

			a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], (this.direction === "down" ? i.item[0] : i.item[0].nextSibling));

			//Various things done here to improve the performance:
			// 1. we create a setTimeout, that calls refreshPositions
			// 2. on the instance, we have a counter variable, that get's higher after every append
			// 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same
			// 4. this lets only the last addition to the timeout stack through
			this.counter = this.counter ? ++this.counter : 1;
			var counter = this.counter;

			this._delay(function() {
				if(counter === this.counter) {
					this.refreshPositions(!hardRefresh); //Precompute after each DOM insertion, NOT on mousemove
				}
			});

		},

		_clear: function(event, noPropagation) {

			this.reverting = false;
			// We delay all events that have to be triggered to after the point where the placeholder has been removed and
			// everything else normalized again
			var i,
				delayedTriggers = [];

			// We first have to update the dom position of the actual currentItem
			// Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)
			if(!this._noFinalSort && this.currentItem.parent().length) {
				this.placeholder.before(this.currentItem);
			}
			this._noFinalSort = null;

			if(this.helper[0] === this.currentItem[0]) {
				for(i in this._storedCSS) {
					if(this._storedCSS[i] === "auto" || this._storedCSS[i] === "static") {
						this._storedCSS[i] = "";
					}
				}
				this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
			} else {
				this.currentItem.show();
			}

			if(this.fromOutside && !noPropagation) {
				delayedTriggers.push(function(event) { this._trigger("receive", event, this._uiHash(this.fromOutside)); });
			}
			if((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {
				delayedTriggers.push(function(event) { this._trigger("update", event, this._uiHash()); }); //Trigger update callback if the DOM position has changed
			}

			// Check if the items Container has Changed and trigger appropriate
			// events.
			if (this !== this.currentContainer) {
				if(!noPropagation) {
					delayedTriggers.push(function(event) { this._trigger("remove", event, this._uiHash()); });
					delayedTriggers.push((function(c) { return function(event) { c._trigger("receive", event, this._uiHash(this)); };  }).call(this, this.currentContainer));
					delayedTriggers.push((function(c) { return function(event) { c._trigger("update", event, this._uiHash(this));  }; }).call(this, this.currentContainer));
				}
			}


			//Post events to containers
			for (i = this.containers.length - 1; i >= 0; i--){
				if(!noPropagation) {
					delayedTriggers.push((function(c) { return function(event) { c._trigger("deactivate", event, this._uiHash(this)); };  }).call(this, this.containers[i]));
				}
				if(this.containers[i].containerCache.over) {
					delayedTriggers.push((function(c) { return function(event) { c._trigger("out", event, this._uiHash(this)); };  }).call(this, this.containers[i]));
					this.containers[i].containerCache.over = 0;
				}
			}

			//Do what was originally in plugins
			if ( this.storedCursor ) {
				this.document.find( "body" ).css( "cursor", this.storedCursor );
				this.storedStylesheet.remove();
			}
			if(this._storedOpacity) {
				this.helper.css("opacity", this._storedOpacity);
			}
			if(this._storedZIndex) {
				this.helper.css("zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex);
			}

			this.dragging = false;
			if(this.cancelHelperRemoval) {
				if(!noPropagation) {
					this._trigger("beforeStop", event, this._uiHash());
					for (i=0; i < delayedTriggers.length; i++) {
						delayedTriggers[i].call(this, event);
					} //Trigger all delayed events
					this._trigger("stop", event, this._uiHash());
				}

				this.fromOutside = false;
				return false;
			}

			if(!noPropagation) {
				this._trigger("beforeStop", event, this._uiHash());
			}

			//$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
			this.placeholder[0].parentNode.removeChild(this.placeholder[0]);

			if(this.helper[0] !== this.currentItem[0]) {
				this.helper.remove();
			}
			this.helper = null;

			if(!noPropagation) {
				for (i=0; i < delayedTriggers.length; i++) {
					delayedTriggers[i].call(this, event);
				} //Trigger all delayed events
				this._trigger("stop", event, this._uiHash());
			}

			this.fromOutside = false;
			return true;

		},

		_trigger: function() {
			if ($.Widget.prototype._trigger.apply(this, arguments) === false) {
				this.cancel();
			}
		},

		_uiHash: function(_inst) {
			var inst = _inst || this;
			return {
				helper: inst.helper,
				placeholder: inst.placeholder || $([]),
				position: inst.position,
				originalPosition: inst.originalPosition,
				offset: inst.positionAbs,
				item: inst.currentItem,
				sender: _inst ? _inst.element : null
			};
		}

	});

	})(jQuery);

	(function($, undefined) {

	var dataSpace = "ui-effects-";

	$.effects = {
		effect: {}
	};

	/*!
	 * jQuery Color Animations v2.1.2
	 * https://github.com/jquery/jquery-color
	 *
	 * Copyright 2013 jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * Date: Wed Jan 16 08:47:09 2013 -0600
	 */
	(function( jQuery, undefined ) {

		var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",

		// plusequals test for += 100 -= 100
		rplusequals = /^([\-+])=\s*(\d+\.?\d*)/,
		// a set of RE's that can match strings and generate color tuples.
		stringParsers = [{
				re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
				parse: function( execResult ) {
					return [
						execResult[ 1 ],
						execResult[ 2 ],
						execResult[ 3 ],
						execResult[ 4 ]
					];
				}
			}, {
				re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
				parse: function( execResult ) {
					return [
						execResult[ 1 ] * 2.55,
						execResult[ 2 ] * 2.55,
						execResult[ 3 ] * 2.55,
						execResult[ 4 ]
					];
				}
			}, {
				// this regex ignores A-F because it's compared against an already lowercased string
				re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
				parse: function( execResult ) {
					return [
						parseInt( execResult[ 1 ], 16 ),
						parseInt( execResult[ 2 ], 16 ),
						parseInt( execResult[ 3 ], 16 )
					];
				}
			}, {
				// this regex ignores A-F because it's compared against an already lowercased string
				re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
				parse: function( execResult ) {
					return [
						parseInt( execResult[ 1 ] + execResult[ 1 ], 16 ),
						parseInt( execResult[ 2 ] + execResult[ 2 ], 16 ),
						parseInt( execResult[ 3 ] + execResult[ 3 ], 16 )
					];
				}
			}, {
				re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
				space: "hsla",
				parse: function( execResult ) {
					return [
						execResult[ 1 ],
						execResult[ 2 ] / 100,
						execResult[ 3 ] / 100,
						execResult[ 4 ]
					];
				}
			}],

		// jQuery.Color( )
		color = jQuery.Color = function( color, green, blue, alpha ) {
			return new jQuery.Color.fn.parse( color, green, blue, alpha );
		},
		spaces = {
			rgba: {
				props: {
					red: {
						idx: 0,
						type: "byte"
					},
					green: {
						idx: 1,
						type: "byte"
					},
					blue: {
						idx: 2,
						type: "byte"
					}
				}
			},

			hsla: {
				props: {
					hue: {
						idx: 0,
						type: "degrees"
					},
					saturation: {
						idx: 1,
						type: "percent"
					},
					lightness: {
						idx: 2,
						type: "percent"
					}
				}
			}
		},
		propTypes = {
			"byte": {
				floor: true,
				max: 255
			},
			"percent": {
				max: 1
			},
			"degrees": {
				mod: 360,
				floor: true
			}
		},
		support = color.support = {},

		// element for support tests
		supportElem = jQuery( "<p>" )[ 0 ],

		// colors = jQuery.Color.names
		colors,

		// local aliases of functions called often
		each = jQuery.each;

	// determine rgba support immediately
	supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
	support.rgba = supportElem.style.backgroundColor.indexOf( "rgba" ) > -1;

	// define cache name and alpha properties
	// for rgba and hsla spaces
	each( spaces, function( spaceName, space ) {
		space.cache = "_" + spaceName;
		space.props.alpha = {
			idx: 3,
			type: "percent",
			def: 1
		};
	});

	function clamp( value, prop, allowEmpty ) {
		var type = propTypes[ prop.type ] || {};

		if ( value == null ) {
			return (allowEmpty || !prop.def) ? null : prop.def;
		}

		// ~~ is an short way of doing floor for positive numbers
		value = type.floor ? ~~value : parseFloat( value );

		// IE will pass in empty strings as value for alpha,
		// which will hit this case
		if ( isNaN( value ) ) {
			return prop.def;
		}

		if ( type.mod ) {
			// we add mod before modding to make sure that negatives values
			// get converted properly: -10 -> 350
			return (value + type.mod) % type.mod;
		}

		// for now all property types without mod have min and max
		return 0 > value ? 0 : type.max < value ? type.max : value;
	}

	function stringParse( string ) {
		var inst = color(),
			rgba = inst._rgba = [];

		string = string.toLowerCase();

		each( stringParsers, function( i, parser ) {
			var parsed,
				match = parser.re.exec( string ),
				values = match && parser.parse( match ),
				spaceName = parser.space || "rgba";

			if ( values ) {
				parsed = inst[ spaceName ]( values );

				// if this was an rgba parse the assignment might happen twice
				// oh well....
				inst[ spaces[ spaceName ].cache ] = parsed[ spaces[ spaceName ].cache ];
				rgba = inst._rgba = parsed._rgba;

				// exit each( stringParsers ) here because we matched
				return false;
			}
		});

		// Found a stringParser that handled it
		if ( rgba.length ) {

			// if this came from a parsed string, force "transparent" when alpha is 0
			// chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)
			if ( rgba.join() === "0,0,0,0" ) {
				jQuery.extend( rgba, colors.transparent );
			}
			return inst;
		}

		// named colors
		return colors[ string ];
	}

	color.fn = jQuery.extend( color.prototype, {
		parse: function( red, green, blue, alpha ) {
			if ( red === undefined ) {
				this._rgba = [ null, null, null, null ];
				return this;
			}
			if ( red.jquery || red.nodeType ) {
				red = jQuery( red ).css( green );
				green = undefined;
			}

			var inst = this,
				type = jQuery.type( red ),
				rgba = this._rgba = [];

			// more than 1 argument specified - assume ( red, green, blue, alpha )
			if ( green !== undefined ) {
				red = [ red, green, blue, alpha ];
				type = "array";
			}

			if ( type === "string" ) {
				return this.parse( stringParse( red ) || colors._default );
			}

			if ( type === "array" ) {
				each( spaces.rgba.props, function( key, prop ) {
					rgba[ prop.idx ] = clamp( red[ prop.idx ], prop );
				});
				return this;
			}

			if ( type === "object" ) {
				if ( red instanceof color ) {
					each( spaces, function( spaceName, space ) {
						if ( red[ space.cache ] ) {
							inst[ space.cache ] = red[ space.cache ].slice();
						}
					});
				} else {
					each( spaces, function( spaceName, space ) {
						var cache = space.cache;
						each( space.props, function( key, prop ) {

							// if the cache doesn't exist, and we know how to convert
							if ( !inst[ cache ] && space.to ) {

								// if the value was null, we don't need to copy it
								// if the key was alpha, we don't need to copy it either
								if ( key === "alpha" || red[ key ] == null ) {
									return;
								}
								inst[ cache ] = space.to( inst._rgba );
							}

							// this is the only case where we allow nulls for ALL properties.
							// call clamp with alwaysAllowEmpty
							inst[ cache ][ prop.idx ] = clamp( red[ key ], prop, true );
						});

						// everything defined but alpha?
						if ( inst[ cache ] && jQuery.inArray( null, inst[ cache ].slice( 0, 3 ) ) < 0 ) {
							// use the default of 1
							inst[ cache ][ 3 ] = 1;
							if ( space.from ) {
								inst._rgba = space.from( inst[ cache ] );
							}
						}
					});
				}
				return this;
			}
		},
		is: function( compare ) {
			var is = color( compare ),
				same = true,
				inst = this;

			each( spaces, function( _, space ) {
				var localCache,
					isCache = is[ space.cache ];
				if (isCache) {
					localCache = inst[ space.cache ] || space.to && space.to( inst._rgba ) || [];
					each( space.props, function( _, prop ) {
						if ( isCache[ prop.idx ] != null ) {
							same = ( isCache[ prop.idx ] === localCache[ prop.idx ] );
							return same;
						}
					});
				}
				return same;
			});
			return same;
		},
		_space: function() {
			var used = [],
				inst = this;
			each( spaces, function( spaceName, space ) {
				if ( inst[ space.cache ] ) {
					used.push( spaceName );
				}
			});
			return used.pop();
		},
		transition: function( other, distance ) {
			var end = color( other ),
				spaceName = end._space(),
				space = spaces[ spaceName ],
				startColor = this.alpha() === 0 ? color( "transparent" ) : this,
				start = startColor[ space.cache ] || space.to( startColor._rgba ),
				result = start.slice();

			end = end[ space.cache ];
			each( space.props, function( key, prop ) {
				var index = prop.idx,
					startValue = start[ index ],
					endValue = end[ index ],
					type = propTypes[ prop.type ] || {};

				// if null, don't override start value
				if ( endValue === null ) {
					return;
				}
				// if null - use end
				if ( startValue === null ) {
					result[ index ] = endValue;
				} else {
					if ( type.mod ) {
						if ( endValue - startValue > type.mod / 2 ) {
							startValue += type.mod;
						} else if ( startValue - endValue > type.mod / 2 ) {
							startValue -= type.mod;
						}
					}
					result[ index ] = clamp( ( endValue - startValue ) * distance + startValue, prop );
				}
			});
			return this[ spaceName ]( result );
		},
		blend: function( opaque ) {
			// if we are already opaque - return ourself
			if ( this._rgba[ 3 ] === 1 ) {
				return this;
			}

			var rgb = this._rgba.slice(),
				a = rgb.pop(),
				blend = color( opaque )._rgba;

			return color( jQuery.map( rgb, function( v, i ) {
				return ( 1 - a ) * blend[ i ] + a * v;
			}));
		},
		toRgbaString: function() {
			var prefix = "rgba(",
				rgba = jQuery.map( this._rgba, function( v, i ) {
					return v == null ? ( i > 2 ? 1 : 0 ) : v;
				});

			if ( rgba[ 3 ] === 1 ) {
				rgba.pop();
				prefix = "rgb(";
			}

			return prefix + rgba.join() + ")";
		},
		toHslaString: function() {
			var prefix = "hsla(",
				hsla = jQuery.map( this.hsla(), function( v, i ) {
					if ( v == null ) {
						v = i > 2 ? 1 : 0;
					}

					// catch 1 and 2
					if ( i && i < 3 ) {
						v = Math.round( v * 100 ) + "%";
					}
					return v;
				});

			if ( hsla[ 3 ] === 1 ) {
				hsla.pop();
				prefix = "hsl(";
			}
			return prefix + hsla.join() + ")";
		},
		toHexString: function( includeAlpha ) {
			var rgba = this._rgba.slice(),
				alpha = rgba.pop();

			if ( includeAlpha ) {
				rgba.push( ~~( alpha * 255 ) );
			}

			return "#" + jQuery.map( rgba, function( v ) {

				// default to 0 when nulls exist
				v = ( v || 0 ).toString( 16 );
				return v.length === 1 ? "0" + v : v;
			}).join("");
		},
		toString: function() {
			return this._rgba[ 3 ] === 0 ? "transparent" : this.toRgbaString();
		}
	});
	color.fn.parse.prototype = color.fn;

	// hsla conversions adapted from:
	// https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021

	function hue2rgb( p, q, h ) {
		h = ( h + 1 ) % 1;
		if ( h * 6 < 1 ) {
			return p + (q - p) * h * 6;
		}
		if ( h * 2 < 1) {
			return q;
		}
		if ( h * 3 < 2 ) {
			return p + (q - p) * ((2/3) - h) * 6;
		}
		return p;
	}

	spaces.hsla.to = function ( rgba ) {
		if ( rgba[ 0 ] == null || rgba[ 1 ] == null || rgba[ 2 ] == null ) {
			return [ null, null, null, rgba[ 3 ] ];
		}
		var r = rgba[ 0 ] / 255,
			g = rgba[ 1 ] / 255,
			b = rgba[ 2 ] / 255,
			a = rgba[ 3 ],
			max = Math.max( r, g, b ),
			min = Math.min( r, g, b ),
			diff = max - min,
			add = max + min,
			l = add * 0.5,
			h, s;

		if ( min === max ) {
			h = 0;
		} else if ( r === max ) {
			h = ( 60 * ( g - b ) / diff ) + 360;
		} else if ( g === max ) {
			h = ( 60 * ( b - r ) / diff ) + 120;
		} else {
			h = ( 60 * ( r - g ) / diff ) + 240;
		}

		// chroma (diff) == 0 means greyscale which, by definition, saturation = 0%
		// otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)
		if ( diff === 0 ) {
			s = 0;
		} else if ( l <= 0.5 ) {
			s = diff / add;
		} else {
			s = diff / ( 2 - add );
		}
		return [ Math.round(h) % 360, s, l, a == null ? 1 : a ];
	};

	spaces.hsla.from = function ( hsla ) {
		if ( hsla[ 0 ] == null || hsla[ 1 ] == null || hsla[ 2 ] == null ) {
			return [ null, null, null, hsla[ 3 ] ];
		}
		var h = hsla[ 0 ] / 360,
			s = hsla[ 1 ],
			l = hsla[ 2 ],
			a = hsla[ 3 ],
			q = l <= 0.5 ? l * ( 1 + s ) : l + s - l * s,
			p = 2 * l - q;

		return [
			Math.round( hue2rgb( p, q, h + ( 1 / 3 ) ) * 255 ),
			Math.round( hue2rgb( p, q, h ) * 255 ),
			Math.round( hue2rgb( p, q, h - ( 1 / 3 ) ) * 255 ),
			a
		];
	};


	each( spaces, function( spaceName, space ) {
		var props = space.props,
			cache = space.cache,
			to = space.to,
			from = space.from;

		// makes rgba() and hsla()
		color.fn[ spaceName ] = function( value ) {

			// generate a cache for this space if it doesn't exist
			if ( to && !this[ cache ] ) {
				this[ cache ] = to( this._rgba );
			}
			if ( value === undefined ) {
				return this[ cache ].slice();
			}

			var ret,
				type = jQuery.type( value ),
				arr = ( type === "array" || type === "object" ) ? value : arguments,
				local = this[ cache ].slice();

			each( props, function( key, prop ) {
				var val = arr[ type === "object" ? key : prop.idx ];
				if ( val == null ) {
					val = local[ prop.idx ];
				}
				local[ prop.idx ] = clamp( val, prop );
			});

			if ( from ) {
				ret = color( from( local ) );
				ret[ cache ] = local;
				return ret;
			} else {
				return color( local );
			}
		};

		// makes red() green() blue() alpha() hue() saturation() lightness()
		each( props, function( key, prop ) {
			// alpha is included in more than one space
			if ( color.fn[ key ] ) {
				return;
			}
			color.fn[ key ] = function( value ) {
				var vtype = jQuery.type( value ),
					fn = ( key === "alpha" ? ( this._hsla ? "hsla" : "rgba" ) : spaceName ),
					local = this[ fn ](),
					cur = local[ prop.idx ],
					match;

				if ( vtype === "undefined" ) {
					return cur;
				}

				if ( vtype === "function" ) {
					value = value.call( this, cur );
					vtype = jQuery.type( value );
				}
				if ( value == null && prop.empty ) {
					return this;
				}
				if ( vtype === "string" ) {
					match = rplusequals.exec( value );
					if ( match ) {
						value = cur + parseFloat( match[ 2 ] ) * ( match[ 1 ] === "+" ? 1 : -1 );
					}
				}
				local[ prop.idx ] = value;
				return this[ fn ]( local );
			};
		});
	});

	// add cssHook and .fx.step function for each named hook.
	// accept a space separated string of properties
	color.hook = function( hook ) {
		var hooks = hook.split( " " );
		each( hooks, function( i, hook ) {
			jQuery.cssHooks[ hook ] = {
				set: function( elem, value ) {
					var parsed, curElem,
						backgroundColor = "";

					if ( value !== "transparent" && ( jQuery.type( value ) !== "string" || ( parsed = stringParse( value ) ) ) ) {
						value = color( parsed || value );
						if ( !support.rgba && value._rgba[ 3 ] !== 1 ) {
							curElem = hook === "backgroundColor" ? elem.parentNode : elem;
							while (
								(backgroundColor === "" || backgroundColor === "transparent") &&
								curElem && curElem.style
							) {
								try {
									backgroundColor = jQuery.css( curElem, "backgroundColor" );
									curElem = curElem.parentNode;
								} catch ( e ) {
								}
							}

							value = value.blend( backgroundColor && backgroundColor !== "transparent" ?
								backgroundColor :
								"_default" );
						}

						value = value.toRgbaString();
					}
					try {
						elem.style[ hook ] = value;
					} catch( e ) {
						// wrapped to prevent IE from throwing errors on "invalid" values like 'auto' or 'inherit'
					}
				}
			};
			jQuery.fx.step[ hook ] = function( fx ) {
				if ( !fx.colorInit ) {
					fx.start = color( fx.elem, hook );
					fx.end = color( fx.end );
					fx.colorInit = true;
				}
				jQuery.cssHooks[ hook ].set( fx.elem, fx.start.transition( fx.end, fx.pos ) );
			};
		});

	};

	color.hook( stepHooks );

	jQuery.cssHooks.borderColor = {
		expand: function( value ) {
			var expanded = {};

			each( [ "Top", "Right", "Bottom", "Left" ], function( i, part ) {
				expanded[ "border" + part + "Color" ] = value;
			});
			return expanded;
		}
	};

	// Basic color names only.
	// Usage of any of the other color names requires adding yourself or including
	// jquery.color.svg-names.js.
	colors = jQuery.Color.names = {
		// 4.1. Basic color keywords
		aqua: "#00ffff",
		black: "#000000",
		blue: "#0000ff",
		fuchsia: "#ff00ff",
		gray: "#808080",
		green: "#008000",
		lime: "#00ff00",
		maroon: "#800000",
		navy: "#000080",
		olive: "#808000",
		purple: "#800080",
		red: "#ff0000",
		silver: "#c0c0c0",
		teal: "#008080",
		white: "#ffffff",
		yellow: "#ffff00",

		// 4.2.3. "transparent" color keyword
		transparent: [ null, null, null, 0 ],

		_default: "#ffffff"
	};

	})( jQuery );


	/******************************************************************************/
	/****************************** CLASS ANIMATIONS ******************************/
	/******************************************************************************/
	(function() {

	var classAnimationActions = [ "add", "remove", "toggle" ],
		shorthandStyles = {
			border: 1,
			borderBottom: 1,
			borderColor: 1,
			borderLeft: 1,
			borderRight: 1,
			borderTop: 1,
			borderWidth: 1,
			margin: 1,
			padding: 1
		};

	$.each([ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ], function( _, prop ) {
		$.fx.step[ prop ] = function( fx ) {
			if ( fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr ) {
				jQuery.style( fx.elem, prop, fx.end );
				fx.setAttr = true;
			}
		};
	});

	function getElementStyles( elem ) {
		var key, len,
			style = elem.ownerDocument.defaultView ?
				elem.ownerDocument.defaultView.getComputedStyle( elem, null ) :
				elem.currentStyle,
			styles = {};

		if ( style && style.length && style[ 0 ] && style[ style[ 0 ] ] ) {
			len = style.length;
			while ( len-- ) {
				key = style[ len ];
				if ( typeof style[ key ] === "string" ) {
					styles[ $.camelCase( key ) ] = style[ key ];
				}
			}
		// support: Opera, IE <9
		} else {
			for ( key in style ) {
				if ( typeof style[ key ] === "string" ) {
					styles[ key ] = style[ key ];
				}
			}
		}

		return styles;
	}


	function styleDifference( oldStyle, newStyle ) {
		var diff = {},
			name, value;

		for ( name in newStyle ) {
			value = newStyle[ name ];
			if ( oldStyle[ name ] !== value ) {
				if ( !shorthandStyles[ name ] ) {
					if ( $.fx.step[ name ] || !isNaN( parseFloat( value ) ) ) {
						diff[ name ] = value;
					}
				}
			}
		}

		return diff;
	}

	// support: jQuery <1.8
	if ( !$.fn.addBack ) {
		$.fn.addBack = function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		};
	}

	$.effects.animateClass = function( value, duration, easing, callback ) {
		var o = $.speed( duration, easing, callback );

		return this.queue( function() {
			var animated = $( this ),
				baseClass = animated.attr( "class" ) || "",
				applyClassChange,
				allAnimations = o.children ? animated.find( "*" ).addBack() : animated;

			// map the animated objects to store the original styles.
			allAnimations = allAnimations.map(function() {
				var el = $( this );
				return {
					el: el,
					start: getElementStyles( this )
				};
			});

			// apply class change
			applyClassChange = function() {
				$.each( classAnimationActions, function(i, action) {
					if ( value[ action ] ) {
						animated[ action + "Class" ]( value[ action ] );
					}
				});
			};
			applyClassChange();

			// map all animated objects again - calculate new styles and diff
			allAnimations = allAnimations.map(function() {
				this.end = getElementStyles( this.el[ 0 ] );
				this.diff = styleDifference( this.start, this.end );
				return this;
			});

			// apply original class
			animated.attr( "class", baseClass );

			// map all animated objects again - this time collecting a promise
			allAnimations = allAnimations.map(function() {
				var styleInfo = this,
					dfd = $.Deferred(),
					opts = $.extend({}, o, {
						queue: false,
						complete: function() {
							dfd.resolve( styleInfo );
						}
					});

				this.el.animate( this.diff, opts );
				return dfd.promise();
			});

			// once all animations have completed:
			$.when.apply( $, allAnimations.get() ).done(function() {

				// set the final class
				applyClassChange();

				// for each animated element,
				// clear all css properties that were animated
				$.each( arguments, function() {
					var el = this.el;
					$.each( this.diff, function(key) {
						el.css( key, "" );
					});
				});

				// this is guarnteed to be there if you use jQuery.speed()
				// it also handles dequeuing the next anim...
				o.complete.call( animated[ 0 ] );
			});
		});
	};

	$.fn.extend({
		addClass: (function( orig ) {
			return function( classNames, speed, easing, callback ) {
				return speed ?
					$.effects.animateClass.call( this,
						{ add: classNames }, speed, easing, callback ) :
					orig.apply( this, arguments );
			};
		})( $.fn.addClass ),

		removeClass: (function( orig ) {
			return function( classNames, speed, easing, callback ) {
				return arguments.length > 1 ?
					$.effects.animateClass.call( this,
						{ remove: classNames }, speed, easing, callback ) :
					orig.apply( this, arguments );
			};
		})( $.fn.removeClass ),

		toggleClass: (function( orig ) {
			return function( classNames, force, speed, easing, callback ) {
				if ( typeof force === "boolean" || force === undefined ) {
					if ( !speed ) {
						// without speed parameter
						return orig.apply( this, arguments );
					} else {
						return $.effects.animateClass.call( this,
							(force ? { add: classNames } : { remove: classNames }),
							speed, easing, callback );
					}
				} else {
					// without force parameter
					return $.effects.animateClass.call( this,
						{ toggle: classNames }, force, speed, easing );
				}
			};
		})( $.fn.toggleClass ),

		switchClass: function( remove, add, speed, easing, callback) {
			return $.effects.animateClass.call( this, {
				add: add,
				remove: remove
			}, speed, easing, callback );
		}
	});

	})();

	/******************************************************************************/
	/*********************************** EFFECTS **********************************/
	/******************************************************************************/

	(function() {

	$.extend( $.effects, {
		version: "1.10.3",

		// Saves a set of properties in a data storage
		save: function( element, set ) {
			for( var i=0; i < set.length; i++ ) {
				if ( set[ i ] !== null ) {
					element.data( dataSpace + set[ i ], element[ 0 ].style[ set[ i ] ] );
				}
			}
		},

		// Restores a set of previously saved properties from a data storage
		restore: function( element, set ) {
			var val, i;
			for( i=0; i < set.length; i++ ) {
				if ( set[ i ] !== null ) {
					val = element.data( dataSpace + set[ i ] );
					// support: jQuery 1.6.2
					// http://bugs.jquery.com/ticket/9917
					// jQuery 1.6.2 incorrectly returns undefined for any falsy value.
					// We can't differentiate between "" and 0 here, so we just assume
					// empty string since it's likely to be a more common value...
					if ( val === undefined ) {
						val = "";
					}
					element.css( set[ i ], val );
				}
			}
		},

		setMode: function( el, mode ) {
			if (mode === "toggle") {
				mode = el.is( ":hidden" ) ? "show" : "hide";
			}
			return mode;
		},

		// Translates a [top,left] array into a baseline value
		// this should be a little more flexible in the future to handle a string & hash
		getBaseline: function( origin, original ) {
			var y, x;
			switch ( origin[ 0 ] ) {
				case "top": y = 0; break;
				case "middle": y = 0.5; break;
				case "bottom": y = 1; break;
				default: y = origin[ 0 ] / original.height;
			}
			switch ( origin[ 1 ] ) {
				case "left": x = 0; break;
				case "center": x = 0.5; break;
				case "right": x = 1; break;
				default: x = origin[ 1 ] / original.width;
			}
			return {
				x: x,
				y: y
			};
		},

		// Wraps the element around a wrapper that copies position properties
		createWrapper: function( element ) {

			// if the element is already wrapped, return it
			if ( element.parent().is( ".ui-effects-wrapper" )) {
				return element.parent();
			}

			// wrap the element
			var props = {
					width: element.outerWidth(true),
					height: element.outerHeight(true),
					"float": element.css( "float" )
				},
				wrapper = $( "<div></div>" )
					.addClass( "ui-effects-wrapper" )
					.css({
						fontSize: "100%",
						background: "transparent",
						border: "none",
						margin: 0,
						padding: 0
					}),
				// Store the size in case width/height are defined in % - Fixes #5245
				size = {
					width: element.width(),
					height: element.height()
				},
				active = document.activeElement;

			// support: Firefox
			// Firefox incorrectly exposes anonymous content
			// https://bugzilla.mozilla.org/show_bug.cgi?id=561664
			try {
				active.id;
			} catch( e ) {
				active = document.body;
			}

			element.wrap( wrapper );

			// Fixes #7595 - Elements lose focus when wrapped.
			if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
				$( active ).focus();
			}

			wrapper = element.parent(); //Hotfix for jQuery 1.4 since some change in wrap() seems to actually lose the reference to the wrapped element

			// transfer positioning properties to the wrapper
			if ( element.css( "position" ) === "static" ) {
				wrapper.css({ position: "relative" });
				element.css({ position: "relative" });
			} else {
				$.extend( props, {
					position: element.css( "position" ),
					zIndex: element.css( "z-index" )
				});
				$.each([ "top", "left", "bottom", "right" ], function(i, pos) {
					props[ pos ] = element.css( pos );
					if ( isNaN( parseInt( props[ pos ], 10 ) ) ) {
						props[ pos ] = "auto";
					}
				});
				element.css({
					position: "relative",
					top: 0,
					left: 0,
					right: "auto",
					bottom: "auto"
				});
			}
			element.css(size);

			return wrapper.css( props ).show();
		},

		removeWrapper: function( element ) {
			var active = document.activeElement;

			if ( element.parent().is( ".ui-effects-wrapper" ) ) {
				element.parent().replaceWith( element );

				// Fixes #7595 - Elements lose focus when wrapped.
				if ( element[ 0 ] === active || $.contains( element[ 0 ], active ) ) {
					$( active ).focus();
				}
			}


			return element;
		},

		setTransition: function( element, list, factor, value ) {
			value = value || {};
			$.each( list, function( i, x ) {
				var unit = element.cssUnit( x );
				if ( unit[ 0 ] > 0 ) {
					value[ x ] = unit[ 0 ] * factor + unit[ 1 ];
				}
			});
			return value;
		}
	});

	// return an effect options object for the given parameters:
	function _normalizeArguments( effect, options, speed, callback ) {

		// allow passing all options as the first parameter
		if ( $.isPlainObject( effect ) ) {
			options = effect;
			effect = effect.effect;
		}

		// convert to an object
		effect = { effect: effect };

		// catch (effect, null, ...)
		if ( options == null ) {
			options = {};
		}

		// catch (effect, callback)
		if ( $.isFunction( options ) ) {
			callback = options;
			speed = null;
			options = {};
		}

		// catch (effect, speed, ?)
		if ( typeof options === "number" || $.fx.speeds[ options ] ) {
			callback = speed;
			speed = options;
			options = {};
		}

		// catch (effect, options, callback)
		if ( $.isFunction( speed ) ) {
			callback = speed;
			speed = null;
		}

		// add options to effect
		if ( options ) {
			$.extend( effect, options );
		}

		speed = speed || options.duration;
		effect.duration = $.fx.off ? 0 :
			typeof speed === "number" ? speed :
			speed in $.fx.speeds ? $.fx.speeds[ speed ] :
			$.fx.speeds._default;

		effect.complete = callback || options.complete;

		return effect;
	}

	function standardAnimationOption( option ) {
		// Valid standard speeds (nothing, number, named speed)
		if ( !option || typeof option === "number" || $.fx.speeds[ option ] ) {
			return true;
		}

		// Invalid strings - treat as "normal" speed
		if ( typeof option === "string" && !$.effects.effect[ option ] ) {
			return true;
		}

		// Complete callback
		if ( $.isFunction( option ) ) {
			return true;
		}

		// Options hash (but not naming an effect)
		if ( typeof option === "object" && !option.effect ) {
			return true;
		}

		// Didn't match any standard API
		return false;
	}

	$.fn.extend({
		effect: function( /* effect, options, speed, callback */ ) {
			var args = _normalizeArguments.apply( this, arguments ),
				mode = args.mode,
				queue = args.queue,
				effectMethod = $.effects.effect[ args.effect ];

			if ( $.fx.off || !effectMethod ) {
				// delegate to the original method (e.g., .show()) if possible
				if ( mode ) {
					return this[ mode ]( args.duration, args.complete );
				} else {
					return this.each( function() {
						if ( args.complete ) {
							args.complete.call( this );
						}
					});
				}
			}

			function run( next ) {
				var elem = $( this ),
					complete = args.complete,
					mode = args.mode;

				function done() {
					if ( $.isFunction( complete ) ) {
						complete.call( elem[0] );
					}
					if ( $.isFunction( next ) ) {
						next();
					}
				}

				// If the element already has the correct final state, delegate to
				// the core methods so the internal tracking of "olddisplay" works.
				if ( elem.is( ":hidden" ) ? mode === "hide" : mode === "show" ) {
					elem[ mode ]();
					done();
				} else {
					effectMethod.call( elem[0], args, done );
				}
			}

			return queue === false ? this.each( run ) : this.queue( queue || "fx", run );
		},

		show: (function( orig ) {
			return function( option ) {
				if ( standardAnimationOption( option ) ) {
					return orig.apply( this, arguments );
				} else {
					var args = _normalizeArguments.apply( this, arguments );
					args.mode = "show";
					return this.effect.call( this, args );
				}
			};
		})( $.fn.show ),

		hide: (function( orig ) {
			return function( option ) {
				if ( standardAnimationOption( option ) ) {
					return orig.apply( this, arguments );
				} else {
					var args = _normalizeArguments.apply( this, arguments );
					args.mode = "hide";
					return this.effect.call( this, args );
				}
			};
		})( $.fn.hide ),

		toggle: (function( orig ) {
			return function( option ) {
				if ( standardAnimationOption( option ) || typeof option === "boolean" ) {
					return orig.apply( this, arguments );
				} else {
					var args = _normalizeArguments.apply( this, arguments );
					args.mode = "toggle";
					return this.effect.call( this, args );
				}
			};
		})( $.fn.toggle ),

		// helper functions
		cssUnit: function(key) {
			var style = this.css( key ),
				val = [];

			$.each( [ "em", "px", "%", "pt" ], function( i, unit ) {
				if ( style.indexOf( unit ) > 0 ) {
					val = [ parseFloat( style ), unit ];
				}
			});
			return val;
		}
	});

	})();

	/******************************************************************************/
	/*********************************** EASING ***********************************/
	/******************************************************************************/

	(function() {

	// based on easing equations from Robert Penner (http://www.robertpenner.com/easing)

	var baseEasings = {};

	$.each( [ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function( i, name ) {
		baseEasings[ name ] = function( p ) {
			return Math.pow( p, i + 2 );
		};
	});

	$.extend( baseEasings, {
		Sine: function ( p ) {
			return 1 - Math.cos( p * Math.PI / 2 );
		},
		Circ: function ( p ) {
			return 1 - Math.sqrt( 1 - p * p );
		},
		Elastic: function( p ) {
			return p === 0 || p === 1 ? p :
				-Math.pow( 2, 8 * (p - 1) ) * Math.sin( ( (p - 1) * 80 - 7.5 ) * Math.PI / 15 );
		},
		Back: function( p ) {
			return p * p * ( 3 * p - 2 );
		},
		Bounce: function ( p ) {
			var pow2,
				bounce = 4;

			while ( p < ( ( pow2 = Math.pow( 2, --bounce ) ) - 1 ) / 11 ) {}
			return 1 / Math.pow( 4, 3 - bounce ) - 7.5625 * Math.pow( ( pow2 * 3 - 2 ) / 22 - p, 2 );
		}
	});

	$.each( baseEasings, function( name, easeIn ) {
		$.easing[ "easeIn" + name ] = easeIn;
		$.easing[ "easeOut" + name ] = function( p ) {
			return 1 - easeIn( 1 - p );
		};
		$.easing[ "easeInOut" + name ] = function( p ) {
			return p < 0.5 ?
				easeIn( p * 2 ) / 2 :
				1 - easeIn( p * -2 + 2 ) / 2;
		};
	});

	})();

	})(jQuery);

	(function( $, undefined ) {

	var uid = 0,
		hideProps = {},
		showProps = {};

	hideProps.height = hideProps.paddingTop = hideProps.paddingBottom =
		hideProps.borderTopWidth = hideProps.borderBottomWidth = "hide";
	showProps.height = showProps.paddingTop = showProps.paddingBottom =
		showProps.borderTopWidth = showProps.borderBottomWidth = "show";

	$.widget( "ui.accordion", {
		version: "1.10.3",
		options: {
			active: 0,
			animate: {},
			collapsible: false,
			event: "click",
			header: "> li > :first-child,> :not(li):even",
			heightStyle: "auto",
			icons: {
				activeHeader: "ui-icon-triangle-1-s",
				header: "ui-icon-triangle-1-e"
			},

			// callbacks
			activate: null,
			beforeActivate: null
		},

		_create: function() {
			var options = this.options;
			this.prevShow = this.prevHide = $();
			this.element.addClass( "ui-accordion ui-widget ui-helper-reset" )
				// ARIA
				.attr( "role", "tablist" );

			// don't allow collapsible: false and active: false / null
			if ( !options.collapsible && (options.active === false || options.active == null) ) {
				options.active = 0;
			}

			this._processPanels();
			// handle negative values
			if ( options.active < 0 ) {
				options.active += this.headers.length;
			}
			this._refresh();
		},

		_getCreateEventData: function() {
			return {
				header: this.active,
				panel: !this.active.length ? $() : this.active.next(),
				content: !this.active.length ? $() : this.active.next()
			};
		},

		_createIcons: function() {
			var icons = this.options.icons;
			if ( icons ) {
				$( "<span>" )
					.addClass( "ui-accordion-header-icon ui-icon " + icons.header )
					.prependTo( this.headers );
				this.active.children( ".ui-accordion-header-icon" )
					.removeClass( icons.header )
					.addClass( icons.activeHeader );
				this.headers.addClass( "ui-accordion-icons" );
			}
		},

		_destroyIcons: function() {
			this.headers
				.removeClass( "ui-accordion-icons" )
				.children( ".ui-accordion-header-icon" )
					.remove();
		},

		_destroy: function() {
			var contents;

			// clean up main element
			this.element
				.removeClass( "ui-accordion ui-widget ui-helper-reset" )
				.removeAttr( "role" );

			// clean up headers
			this.headers
				.removeClass( "ui-accordion-header ui-accordion-header-active ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top" )
				.removeAttr( "role" )
				.removeAttr( "aria-selected" )
				.removeAttr( "aria-controls" )
				.removeAttr( "tabIndex" )
				.each(function() {
					if ( /^ui-accordion/.test( this.id ) ) {
						this.removeAttribute( "id" );
					}
				});
			this._destroyIcons();

			// clean up content panels
			contents = this.headers.next()
				.css( "display", "" )
				.removeAttr( "role" )
				.removeAttr( "aria-expanded" )
				.removeAttr( "aria-hidden" )
				.removeAttr( "aria-labelledby" )
				.removeClass( "ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled" )
				.each(function() {
					if ( /^ui-accordion/.test( this.id ) ) {
						this.removeAttribute( "id" );
					}
				});
			if ( this.options.heightStyle !== "content" ) {
				contents.css( "height", "" );
			}
		},

		_setOption: function( key, value ) {
			if ( key === "active" ) {
				// _activate() will handle invalid values and update this.options
				this._activate( value );
				return;
			}

			if ( key === "event" ) {
				if ( this.options.event ) {
					this._off( this.headers, this.options.event );
				}
				this._setupEvents( value );
			}

			this._super( key, value );

			// setting collapsible: false while collapsed; open first panel
			if ( key === "collapsible" && !value && this.options.active === false ) {
				this._activate( 0 );
			}

			if ( key === "icons" ) {
				this._destroyIcons();
				if ( value ) {
					this._createIcons();
				}
			}

			// #5332 - opacity doesn't cascade to positioned elements in IE
			// so we need to add the disabled class to the headers and panels
			if ( key === "disabled" ) {
				this.headers.add( this.headers.next() )
					.toggleClass( "ui-state-disabled", !!value );
			}
		},

		_keydown: function( event ) {
			/*jshint maxcomplexity:15*/
			if ( event.altKey || event.ctrlKey ) {
				return;
			}

			var keyCode = $.ui.keyCode,
				length = this.headers.length,
				currentIndex = this.headers.index( event.target ),
				toFocus = false;

			switch ( event.keyCode ) {
				case keyCode.RIGHT:
				case keyCode.DOWN:
					toFocus = this.headers[ ( currentIndex + 1 ) % length ];
					break;
				case keyCode.LEFT:
				case keyCode.UP:
					toFocus = this.headers[ ( currentIndex - 1 + length ) % length ];
					break;
				case keyCode.SPACE:
				case keyCode.ENTER:
					this._eventHandler( event );
					break;
				case keyCode.HOME:
					toFocus = this.headers[ 0 ];
					break;
				case keyCode.END:
					toFocus = this.headers[ length - 1 ];
					break;
			}

			if ( toFocus ) {
				$( event.target ).attr( "tabIndex", -1 );
				$( toFocus ).attr( "tabIndex", 0 );
				toFocus.focus();
				event.preventDefault();
			}
		},

		_panelKeyDown : function( event ) {
			if ( event.keyCode === $.ui.keyCode.UP && event.ctrlKey ) {
				$( event.currentTarget ).prev().focus();
			}
		},

		refresh: function() {
			var options = this.options;
			this._processPanels();

			// was collapsed or no panel
			if ( ( options.active === false && options.collapsible === true ) || !this.headers.length ) {
				options.active = false;
				this.active = $();
			// active false only when collapsible is true
			} else if ( options.active === false ) {
				this._activate( 0 );
			// was active, but active panel is gone
			} else if ( this.active.length && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
				// all remaining panel are disabled
				if ( this.headers.length === this.headers.find(".ui-state-disabled").length ) {
					options.active = false;
					this.active = $();
				// activate previous panel
				} else {
					this._activate( Math.max( 0, options.active - 1 ) );
				}
			// was active, active panel still exists
			} else {
				// make sure active index is correct
				options.active = this.headers.index( this.active );
			}

			this._destroyIcons();

			this._refresh();
		},

		_processPanels: function() {
			this.headers = this.element.find( this.options.header )
				.addClass( "ui-accordion-header ui-helper-reset ui-state-default ui-corner-all" );

			this.headers.next()
				.addClass( "ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom" )
				.filter(":not(.ui-accordion-content-active)")
				.hide();
		},

		_refresh: function() {
			var maxHeight,
				options = this.options,
				heightStyle = options.heightStyle,
				parent = this.element.parent(),
				accordionId = this.accordionId = "ui-accordion-" +
					(this.element.attr( "id" ) || ++uid);

			this.active = this._findActive( options.active )
				.addClass( "ui-accordion-header-active ui-state-active ui-corner-top" )
				.removeClass( "ui-corner-all" );
			this.active.next()
				.addClass( "ui-accordion-content-active" )
				.show();

			this.headers
				.attr( "role", "tab" )
				.each(function( i ) {
					var header = $( this ),
						headerId = header.attr( "id" ),
						panel = header.next(),
						panelId = panel.attr( "id" );
					if ( !headerId ) {
						headerId = accordionId + "-header-" + i;
						header.attr( "id", headerId );
					}
					if ( !panelId ) {
						panelId = accordionId + "-panel-" + i;
						panel.attr( "id", panelId );
					}
					header.attr( "aria-controls", panelId );
					panel.attr( "aria-labelledby", headerId );
				})
				.next()
					.attr( "role", "tabpanel" );

			this.headers
				.not( this.active )
				.attr({
					"aria-selected": "false",
					tabIndex: -1
				})
				.next()
					.attr({
						"aria-expanded": "false",
						"aria-hidden": "true"
					})
					.hide();

			// make sure at least one header is in the tab order
			if ( !this.active.length ) {
				this.headers.eq( 0 ).attr( "tabIndex", 0 );
			} else {
				this.active.attr({
					"aria-selected": "true",
					tabIndex: 0
				})
				.next()
					.attr({
						"aria-expanded": "true",
						"aria-hidden": "false"
					});
			}

			this._createIcons();

			this._setupEvents( options.event );

			if ( heightStyle === "fill" ) {
				maxHeight = parent.height();
				this.element.siblings( ":visible" ).each(function() {
					var elem = $( this ),
						position = elem.css( "position" );

					if ( position === "absolute" || position === "fixed" ) {
						return;
					}
					maxHeight -= elem.outerHeight( true );
				});

				this.headers.each(function() {
					maxHeight -= $( this ).outerHeight( true );
				});

				this.headers.next()
					.each(function() {
						$( this ).height( Math.max( 0, maxHeight -
							$( this ).innerHeight() + $( this ).height() ) );
					})
					.css( "overflow", "auto" );
			} else if ( heightStyle === "auto" ) {
				maxHeight = 0;
				this.headers.next()
					.each(function() {
						maxHeight = Math.max( maxHeight, $( this ).css( "height", "" ).height() );
					})
					.height( maxHeight );
			}
		},

		_activate: function( index ) {
			var active = this._findActive( index )[ 0 ];

			// trying to activate the already active panel
			if ( active === this.active[ 0 ] ) {
				return;
			}

			// trying to collapse, simulate a click on the currently active header
			active = active || this.active[ 0 ];

			this._eventHandler({
				target: active,
				currentTarget: active,
				preventDefault: $.noop
			});
		},

		_findActive: function( selector ) {
			return typeof selector === "number" ? this.headers.eq( selector ) : $();
		},

		_setupEvents: function( event ) {
			var events = {
				keydown: "_keydown"
			};
			if ( event ) {
				$.each( event.split(" "), function( index, eventName ) {
					events[ eventName ] = "_eventHandler";
				});
			}

			this._off( this.headers.add( this.headers.next() ) );
			this._on( this.headers, events );
			this._on( this.headers.next(), { keydown: "_panelKeyDown" });
			this._hoverable( this.headers );
			this._focusable( this.headers );
		},

		_eventHandler: function( event ) {
			var options = this.options,
				active = this.active,
				clicked = $( event.currentTarget ),
				clickedIsActive = clicked[ 0 ] === active[ 0 ],
				collapsing = clickedIsActive && options.collapsible,
				toShow = collapsing ? $() : clicked.next(),
				toHide = active.next(),
				eventData = {
					oldHeader: active,
					oldPanel: toHide,
					newHeader: collapsing ? $() : clicked,
					newPanel: toShow
				};

			event.preventDefault();

			if (
					// click on active header, but not collapsible
					( clickedIsActive && !options.collapsible ) ||
					// allow canceling activation
					( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
				return;
			}

			options.active = collapsing ? false : this.headers.index( clicked );

			// when the call to ._toggle() comes after the class changes
			// it causes a very odd bug in IE 8 (see #6720)
			this.active = clickedIsActive ? $() : clicked;
			this._toggle( eventData );

			// switch classes
			// corner classes on the previously active header stay after the animation
			active.removeClass( "ui-accordion-header-active ui-state-active" );
			if ( options.icons ) {
				active.children( ".ui-accordion-header-icon" )
					.removeClass( options.icons.activeHeader )
					.addClass( options.icons.header );
			}

			if ( !clickedIsActive ) {
				clicked
					.removeClass( "ui-corner-all" )
					.addClass( "ui-accordion-header-active ui-state-active ui-corner-top" );
				if ( options.icons ) {
					clicked.children( ".ui-accordion-header-icon" )
						.removeClass( options.icons.header )
						.addClass( options.icons.activeHeader );
				}

				clicked
					.next()
					.addClass( "ui-accordion-content-active" );
			}
		},

		_toggle: function( data ) {
			var toShow = data.newPanel,
				toHide = this.prevShow.length ? this.prevShow : data.oldPanel;

			// handle activating a panel during the animation for another activation
			this.prevShow.add( this.prevHide ).stop( true, true );
			this.prevShow = toShow;
			this.prevHide = toHide;

			if ( this.options.animate ) {
				this._animate( toShow, toHide, data );
			} else {
				toHide.hide();
				toShow.show();
				this._toggleComplete( data );
			}

			toHide.attr({
				"aria-expanded": "false",
				"aria-hidden": "true"
			});
			toHide.prev().attr( "aria-selected", "false" );
			// if we're switching panels, remove the old header from the tab order
			// if we're opening from collapsed state, remove the previous header from the tab order
			// if we're collapsing, then keep the collapsing header in the tab order
			if ( toShow.length && toHide.length ) {
				toHide.prev().attr( "tabIndex", -1 );
			} else if ( toShow.length ) {
				this.headers.filter(function() {
					return $( this ).attr( "tabIndex" ) === 0;
				})
				.attr( "tabIndex", -1 );
			}

			toShow
				.attr({
					"aria-expanded": "true",
					"aria-hidden": "false"
				})
				.prev()
					.attr({
						"aria-selected": "true",
						tabIndex: 0
					});
		},

		_animate: function( toShow, toHide, data ) {
			var total, easing, duration,
				that = this,
				adjust = 0,
				down = toShow.length &&
					( !toHide.length || ( toShow.index() < toHide.index() ) ),
				animate = this.options.animate || {},
				options = down && animate.down || animate,
				complete = function() {
					that._toggleComplete( data );
				};

			if ( typeof options === "number" ) {
				duration = options;
			}
			if ( typeof options === "string" ) {
				easing = options;
			}
			// fall back from options to animation in case of partial down settings
			easing = easing || options.easing || animate.easing;
			duration = duration || options.duration || animate.duration;

			if ( !toHide.length ) {
				return toShow.animate( showProps, duration, easing, complete );
			}
			if ( !toShow.length ) {
				return toHide.animate( hideProps, duration, easing, complete );
			}

			total = toShow.show().outerHeight();
			toHide.animate( hideProps, {
				duration: duration,
				easing: easing,
				step: function( now, fx ) {
					fx.now = Math.round( now );
				}
			});
			toShow
				.hide()
				.animate( showProps, {
					duration: duration,
					easing: easing,
					complete: complete,
					step: function( now, fx ) {
						fx.now = Math.round( now );
						if ( fx.prop !== "height" ) {
							adjust += fx.now;
						} else if ( that.options.heightStyle !== "content" ) {
							fx.now = Math.round( total - toHide.outerHeight() - adjust );
							adjust = 0;
						}
					}
				});
		},

		_toggleComplete: function( data ) {
			var toHide = data.oldPanel;

			toHide
				.removeClass( "ui-accordion-content-active" )
				.prev()
					.removeClass( "ui-corner-top" )
					.addClass( "ui-corner-all" );

			// Work around for rendering bug in IE (#5421)
			if ( toHide.length ) {
				toHide.parent()[0].className = toHide.parent()[0].className;
			}

			this._trigger( "activate", null, data );
		}
	});

	})( jQuery );

	(function( $, undefined ) {

	// used to prevent race conditions with remote data sources
	var requestIndex = 0;

	$.widget( "ui.autocomplete", {
		version: "1.10.3",
		defaultElement: "<input>",
		options: {
			appendTo: null,
			autoFocus: false,
			delay: 300,
			minLength: 1,
			position: {
				my: "left top",
				at: "left bottom",
				collision: "none"
			},
			source: null,

			// callbacks
			change: null,
			close: null,
			focus: null,
			open: null,
			response: null,
			search: null,
			select: null
		},

		pending: 0,

		_create: function() {
			// Some browsers only repeat keydown events, not keypress events,
			// so we use the suppressKeyPress flag to determine if we've already
			// handled the keydown event. #7269
			// Unfortunately the code for & in keypress is the same as the up arrow,
			// so we use the suppressKeyPressRepeat flag to avoid handling keypress
			// events when we know the keydown event was used to modify the
			// search term. #7799
			var suppressKeyPress, suppressKeyPressRepeat, suppressInput,
				nodeName = this.element[0].nodeName.toLowerCase(),
				isTextarea = nodeName === "textarea",
				isInput = nodeName === "input";

			this.isMultiLine =
				// Textareas are always multi-line
				isTextarea ? true :
				// Inputs are always single-line, even if inside a contentEditable element
				// IE also treats inputs as contentEditable
				isInput ? false :
				// All other element types are determined by whether or not they're contentEditable
				this.element.prop( "isContentEditable" );

			this.valueMethod = this.element[ isTextarea || isInput ? "val" : "text" ];
			this.isNewMenu = true;

			this.element
				.addClass( "ui-autocomplete-input" )
				.attr( "autocomplete", "off" );

			this._on( this.element, {
				keydown: function( event ) {
					/*jshint maxcomplexity:15*/
					if ( this.element.prop( "readOnly" ) ) {
						suppressKeyPress = true;
						suppressInput = true;
						suppressKeyPressRepeat = true;
						return;
					}

					suppressKeyPress = false;
					suppressInput = false;
					suppressKeyPressRepeat = false;
					var keyCode = $.ui.keyCode;
					switch( event.keyCode ) {
					case keyCode.PAGE_UP:
						suppressKeyPress = true;
						this._move( "previousPage", event );
						break;
					case keyCode.PAGE_DOWN:
						suppressKeyPress = true;
						this._move( "nextPage", event );
						break;
					case keyCode.UP:
						suppressKeyPress = true;
						this._keyEvent( "previous", event );
						break;
					case keyCode.DOWN:
						suppressKeyPress = true;
						this._keyEvent( "next", event );
						break;
					case keyCode.ENTER:
					case keyCode.NUMPAD_ENTER:
						// when menu is open and has focus
						if ( this.menu.active ) {
							// #6055 - Opera still allows the keypress to occur
							// which causes forms to submit
							suppressKeyPress = true;
							event.preventDefault();
							this.menu.select( event );
						}
						break;
					case keyCode.TAB:
						if ( this.menu.active ) {
							this.menu.select( event );
						}
						break;
					case keyCode.ESCAPE:
						if ( this.menu.element.is( ":visible" ) ) {
							this._value( this.term );
							this.close( event );
							// Different browsers have different default behavior for escape
							// Single press can mean undo or clear
							// Double press in IE means clear the whole form
							event.preventDefault();
						}
						break;
					default:
						suppressKeyPressRepeat = true;
						// search timeout should be triggered before the input value is changed
						this._searchTimeout( event );
						break;
					}
				},
				keypress: function( event ) {
					if ( suppressKeyPress ) {
						suppressKeyPress = false;
						if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
							event.preventDefault();
						}
						return;
					}
					if ( suppressKeyPressRepeat ) {
						return;
					}

					// replicate some key handlers to allow them to repeat in Firefox and Opera
					var keyCode = $.ui.keyCode;
					switch( event.keyCode ) {
					case keyCode.PAGE_UP:
						this._move( "previousPage", event );
						break;
					case keyCode.PAGE_DOWN:
						this._move( "nextPage", event );
						break;
					case keyCode.UP:
						this._keyEvent( "previous", event );
						break;
					case keyCode.DOWN:
						this._keyEvent( "next", event );
						break;
					}
				},
				input: function( event ) {
					if ( suppressInput ) {
						suppressInput = false;
						event.preventDefault();
						return;
					}
					this._searchTimeout( event );
				},
				focus: function() {
					this.selectedItem = null;
					this.previous = this._value();
				},
				blur: function( event ) {
					if ( this.cancelBlur ) {
						delete this.cancelBlur;
						return;
					}

					clearTimeout( this.searching );
					this.close( event );
					this._change( event );
				}
			});

			this._initSource();
			this.menu = $( "<ul>" )
				.addClass( "ui-autocomplete ui-front" )
				.appendTo( this._appendTo() )
				.menu({
					// disable ARIA support, the live region takes care of that
					role: null
				})
				.hide()
				.data( "ui-menu" );

			this._on( this.menu.element, {
				mousedown: function( event ) {
					// prevent moving focus out of the text field
					event.preventDefault();

					// IE doesn't prevent moving focus even with event.preventDefault()
					// so we set a flag to know when we should ignore the blur event
					this.cancelBlur = true;
					this._delay(function() {
						delete this.cancelBlur;
					});

					// clicking on the scrollbar causes focus to shift to the body
					// but we can't detect a mouseup or a click immediately afterward
					// so we have to track the next mousedown and close the menu if
					// the user clicks somewhere outside of the autocomplete
					var menuElement = this.menu.element[ 0 ];
					if ( !$( event.target ).closest( ".ui-menu-item" ).length ) {
						this._delay(function() {
							var that = this;
							this.document.one( "mousedown", function( event ) {
								if ( event.target !== that.element[ 0 ] &&
										event.target !== menuElement &&
										!$.contains( menuElement, event.target ) ) {
									that.close();
								}
							});
						});
					}
				},
				menufocus: function( event, ui ) {
					// support: Firefox
					// Prevent accidental activation of menu items in Firefox (#7024 #9118)
					if ( this.isNewMenu ) {
						this.isNewMenu = false;
						if ( event.originalEvent && /^mouse/.test( event.originalEvent.type ) ) {
							this.menu.blur();

							this.document.one( "mousemove", function() {
								$( event.target ).trigger( event.originalEvent );
							});

							return;
						}
					}

					var item = ui.item.data( "ui-autocomplete-item" );
					if ( false !== this._trigger( "focus", event, { item: item } ) ) {
						// use value to match what will end up in the input, if it was a key event
						if ( event.originalEvent && /^key/.test( event.originalEvent.type ) ) {
							this._value( item.value );
						}
					} else {
						// Normally the input is populated with the item's value as the
						// menu is navigated, causing screen readers to notice a change and
						// announce the item. Since the focus event was canceled, this doesn't
						// happen, so we update the live region so that screen readers can
						// still notice the change and announce it.
						this.liveRegion.text( item.value );
					}
				},
				menuselect: function( event, ui ) {
					var item = ui.item.data( "ui-autocomplete-item" ),
						previous = this.previous;

					// only trigger when focus was lost (click on menu)
					if ( this.element[0] !== this.document[0].activeElement ) {
						this.element.focus();
						this.previous = previous;
						// #6109 - IE triggers two focus events and the second
						// is asynchronous, so we need to reset the previous
						// term synchronously and asynchronously :-(
						this._delay(function() {
							this.previous = previous;
							this.selectedItem = item;
						});
					}

					if ( false !== this._trigger( "select", event, { item: item } ) ) {
						this._value( item.value );
					}
					// reset the term after the select event
					// this allows custom select handling to work properly
					this.term = this._value();

					this.close( event );
					this.selectedItem = item;
				}
			});

			this.liveRegion = $( "<span>", {
					role: "status",
					"aria-live": "polite"
				})
				.addClass( "ui-helper-hidden-accessible" )
				.insertBefore( this.element );

			// turning off autocomplete prevents the browser from remembering the
			// value when navigating through history, so we re-enable autocomplete
			// if the page is unloaded before the widget is destroyed. #7790
			this._on( this.window, {
				beforeunload: function() {
					this.element.removeAttr( "autocomplete" );
				}
			});
		},

		_destroy: function() {
			clearTimeout( this.searching );
			this.element
				.removeClass( "ui-autocomplete-input" )
				.removeAttr( "autocomplete" );
			this.menu.element.remove();
			this.liveRegion.remove();
		},

		_setOption: function( key, value ) {
			this._super( key, value );
			if ( key === "source" ) {
				this._initSource();
			}
			if ( key === "appendTo" ) {
				this.menu.element.appendTo( this._appendTo() );
			}
			if ( key === "disabled" && value && this.xhr ) {
				this.xhr.abort();
			}
		},

		_appendTo: function() {
			var element = this.options.appendTo;

			if ( element ) {
				element = element.jquery || element.nodeType ?
					$( element ) :
					this.document.find( element ).eq( 0 );
			}

			if ( !element ) {
				element = this.element.closest( ".ui-front" );
			}

			if ( !element.length ) {
				element = this.document[0].body;
			}

			return element;
		},

		_initSource: function() {
			var array, url,
				that = this;
			if ( $.isArray(this.options.source) ) {
				array = this.options.source;
				this.source = function( request, response ) {
					response( $.ui.autocomplete.filter( array, request.term ) );
				};
			} else if ( typeof this.options.source === "string" ) {
				url = this.options.source;
				this.source = function( request, response ) {
					if ( that.xhr ) {
						that.xhr.abort();
					}
					that.xhr = $.ajax({
						url: url,
						data: request,
						dataType: "json",
						success: function( data ) {
							response( data );
						},
						error: function() {
							response( [] );
						}
					});
				};
			} else {
				this.source = this.options.source;
			}
		},

		_searchTimeout: function( event ) {
			clearTimeout( this.searching );
			this.searching = this._delay(function() {
				// only search if the value has changed
				if ( this.term !== this._value() ) {
					this.selectedItem = null;
					this.search( null, event );
				}
			}, this.options.delay );
		},

		search: function( value, event ) {
			value = value != null ? value : this._value();

			// always save the actual value, not the one passed as an argument
			this.term = this._value();

			if ( value.length < this.options.minLength ) {
				return this.close( event );
			}

			if ( this._trigger( "search", event ) === false ) {
				return;
			}

			return this._search( value );
		},

		_search: function( value ) {
			this.pending++;
			this.element.addClass( "ui-autocomplete-loading" );
			this.cancelSearch = false;

			this.source( { term: value }, this._response() );
		},

		_response: function() {
			var that = this,
				index = ++requestIndex;

			return function( content ) {
				if ( index === requestIndex ) {
					that.__response( content );
				}

				that.pending--;
				if ( !that.pending ) {
					that.element.removeClass( "ui-autocomplete-loading" );
				}
			};
		},

		__response: function( content ) {
			if ( content ) {
				content = this._normalize( content );
			}
			this._trigger( "response", null, { content: content } );
			if ( !this.options.disabled && content && content.length && !this.cancelSearch ) {
				this._suggest( content );
				this._trigger( "open" );
			} else {
				// use ._close() instead of .close() so we don't cancel future searches
				this._close();
			}
		},

		close: function( event ) {
			this.cancelSearch = true;
			this._close( event );
		},

		_close: function( event ) {
			if ( this.menu.element.is( ":visible" ) ) {
				this.menu.element.hide();
				this.menu.blur();
				this.isNewMenu = true;
				this._trigger( "close", event );
			}
		},

		_change: function( event ) {
			if ( this.previous !== this._value() ) {
				this._trigger( "change", event, { item: this.selectedItem } );
			}
		},

		_normalize: function( items ) {
			// assume all items have the right format when the first item is complete
			if ( items.length && items[0].label && items[0].value ) {
				return items;
			}
			return $.map( items, function( item ) {
				if ( typeof item === "string" ) {
					return {
						label: item,
						value: item
					};
				}
				return $.extend({
					label: item.label || item.value,
					value: item.value || item.label
				}, item );
			});
		},

		_suggest: function( items ) {
			var ul = this.menu.element.empty();
			this._renderMenu( ul, items );
			this.isNewMenu = true;
			this.menu.refresh();

			// size and position menu
			ul.show();
			this._resizeMenu();
			ul.position( $.extend({
				of: this.element
			}, this.options.position ));

			if ( this.options.autoFocus ) {
				this.menu.next();
			}
		},

		_resizeMenu: function() {
			var ul = this.menu.element;
			ul.outerWidth( Math.max(
				// Firefox wraps long text (possibly a rounding bug)
				// so we add 1px to avoid the wrapping (#7513)
				ul.width( "" ).outerWidth() + 1,
				this.element.outerWidth()
			) );
		},

		_renderMenu: function( ul, items ) {
			var that = this;
			$.each( items, function( index, item ) {
				that._renderItemData( ul, item );
			});
		},

		_renderItemData: function( ul, item ) {
			return this._renderItem( ul, item ).data( "ui-autocomplete-item", item );
		},

		_renderItem: function( ul, item ) {
			return $( "<li>" )
				.append( $( "<a>" ).text( item.label ) )
				.appendTo( ul );
		},

		_move: function( direction, event ) {
			if ( !this.menu.element.is( ":visible" ) ) {
				this.search( null, event );
				return;
			}
			if ( this.menu.isFirstItem() && /^previous/.test( direction ) ||
					this.menu.isLastItem() && /^next/.test( direction ) ) {
				this._value( this.term );
				this.menu.blur();
				return;
			}
			this.menu[ direction ]( event );
		},

		widget: function() {
			return this.menu.element;
		},

		_value: function() {
			return this.valueMethod.apply( this.element, arguments );
		},

		_keyEvent: function( keyEvent, event ) {
			if ( !this.isMultiLine || this.menu.element.is( ":visible" ) ) {
				this._move( keyEvent, event );

				// prevents moving cursor to beginning/end of the text field in some browsers
				event.preventDefault();
			}
		}
	});

	$.extend( $.ui.autocomplete, {
		escapeRegex: function( value ) {
			return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
		},
		filter: function(array, term) {
			var matcher = new RegExp( $.ui.autocomplete.escapeRegex(term), "i" );
			return $.grep( array, function(value) {
				return matcher.test( value.label || value.value || value );
			});
		}
	});


	// live region extension, adding a `messages` option
	// NOTE: This is an experimental API. We are still investigating
	// a full solution for string manipulation and internationalization.
	$.widget( "ui.autocomplete", $.ui.autocomplete, {
		options: {
			messages: {
				noResults: "No search results.",
				results: function( amount ) {
					return amount + ( amount > 1 ? " results are" : " result is" ) +
						" available, use up and down arrow keys to navigate.";
				}
			}
		},

		__response: function( content ) {
			var message;
			this._superApply( arguments );
			if ( this.options.disabled || this.cancelSearch ) {
				return;
			}
			if ( content && content.length ) {
				message = this.options.messages.results( content.length );
			} else {
				message = this.options.messages.noResults;
			}
			this.liveRegion.text( message );
		}
	});

	}( jQuery ));

	(function( $, undefined ) {

	var lastActive, startXPos, startYPos, clickDragged,
		baseClasses = "ui-button ui-widget ui-state-default ui-corner-all",
		stateClasses = "ui-state-hover ui-state-active ",
		typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",
		formResetHandler = function() {
			var form = $( this );
			setTimeout(function() {
				form.find( ":ui-button" ).button( "refresh" );
			}, 1 );
		},
		radioGroup = function( radio ) {
			var name = radio.name,
				form = radio.form,
				radios = $( [] );
			if ( name ) {
				name = name.replace( /'/g, "\\'" );
				if ( form ) {
					radios = $( form ).find( "[name='" + name + "']" );
				} else {
					radios = $( "[name='" + name + "']", radio.ownerDocument )
						.filter(function() {
							return !this.form;
						});
				}
			}
			return radios;
		};

	$.widget( "ui.button", {
		version: "1.10.3",
		defaultElement: "<button>",
		options: {
			disabled: null,
			text: true,
			label: null,
			icons: {
				primary: null,
				secondary: null
			}
		},
		_create: function() {
			this.element.closest( "form" )
				.unbind( "reset" + this.eventNamespace )
				.bind( "reset" + this.eventNamespace, formResetHandler );

			if ( typeof this.options.disabled !== "boolean" ) {
				this.options.disabled = !!this.element.prop( "disabled" );
			} else {
				this.element.prop( "disabled", this.options.disabled );
			}

			this._determineButtonType();
			this.hasTitle = !!this.buttonElement.attr( "title" );

			var that = this,
				options = this.options,
				toggleButton = this.type === "checkbox" || this.type === "radio",
				activeClass = !toggleButton ? "ui-state-active" : "",
				focusClass = "ui-state-focus";

			if ( options.label === null ) {
				options.label = (this.type === "input" ? this.buttonElement.val() : this.buttonElement.html());
			}

			this._hoverable( this.buttonElement );

			this.buttonElement
				.addClass( baseClasses )
				.attr( "role", "button" )
				.bind( "mouseenter" + this.eventNamespace, function() {
					if ( options.disabled ) {
						return;
					}
					if ( this === lastActive ) {
						$( this ).addClass( "ui-state-active" );
					}
				})
				.bind( "mouseleave" + this.eventNamespace, function() {
					if ( options.disabled ) {
						return;
					}
					$( this ).removeClass( activeClass );
				})
				.bind( "click" + this.eventNamespace, function( event ) {
					if ( options.disabled ) {
						event.preventDefault();
						event.stopImmediatePropagation();
					}
				});

			this.element
				.bind( "focus" + this.eventNamespace, function() {
					// no need to check disabled, focus won't be triggered anyway
					that.buttonElement.addClass( focusClass );
				})
				.bind( "blur" + this.eventNamespace, function() {
					that.buttonElement.removeClass( focusClass );
				});

			if ( toggleButton ) {
				this.element.bind( "change" + this.eventNamespace, function() {
					if ( clickDragged ) {
						return;
					}
					that.refresh();
				});
				// if mouse moves between mousedown and mouseup (drag) set clickDragged flag
				// prevents issue where button state changes but checkbox/radio checked state
				// does not in Firefox (see ticket #6970)
				this.buttonElement
					.bind( "mousedown" + this.eventNamespace, function( event ) {
						if ( options.disabled ) {
							return;
						}
						clickDragged = false;
						startXPos = event.pageX;
						startYPos = event.pageY;
					})
					.bind( "mouseup" + this.eventNamespace, function( event ) {
						if ( options.disabled ) {
							return;
						}
						if ( startXPos !== event.pageX || startYPos !== event.pageY ) {
							clickDragged = true;
						}
				});
			}

			if ( this.type === "checkbox" ) {
				this.buttonElement.bind( "click" + this.eventNamespace, function() {
					if ( options.disabled || clickDragged ) {
						return false;
					}
				});
			} else if ( this.type === "radio" ) {
				this.buttonElement.bind( "click" + this.eventNamespace, function() {
					if ( options.disabled || clickDragged ) {
						return false;
					}
					$( this ).addClass( "ui-state-active" );
					that.buttonElement.attr( "aria-pressed", "true" );

					var radio = that.element[ 0 ];
					radioGroup( radio )
						.not( radio )
						.map(function() {
							return $( this ).button( "widget" )[ 0 ];
						})
						.removeClass( "ui-state-active" )
						.attr( "aria-pressed", "false" );
				});
			} else {
				this.buttonElement
					.bind( "mousedown" + this.eventNamespace, function() {
						if ( options.disabled ) {
							return false;
						}
						$( this ).addClass( "ui-state-active" );
						lastActive = this;
						that.document.one( "mouseup", function() {
							lastActive = null;
						});
					})
					.bind( "mouseup" + this.eventNamespace, function() {
						if ( options.disabled ) {
							return false;
						}
						$( this ).removeClass( "ui-state-active" );
					})
					.bind( "keydown" + this.eventNamespace, function(event) {
						if ( options.disabled ) {
							return false;
						}
						if ( event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER ) {
							$( this ).addClass( "ui-state-active" );
						}
					})
					// see #8559, we bind to blur here in case the button element loses
					// focus between keydown and keyup, it would be left in an "active" state
					.bind( "keyup" + this.eventNamespace + " blur" + this.eventNamespace, function() {
						$( this ).removeClass( "ui-state-active" );
					});

				if ( this.buttonElement.is("a") ) {
					this.buttonElement.keyup(function(event) {
						if ( event.keyCode === $.ui.keyCode.SPACE ) {
							// TODO pass through original event correctly (just as 2nd argument doesn't work)
							$( this ).click();
						}
					});
				}
			}

			// TODO: pull out $.Widget's handling for the disabled option into
			// $.Widget.prototype._setOptionDisabled so it's easy to proxy and can
			// be overridden by individual plugins
			this._setOption( "disabled", options.disabled );
			this._resetButton();
		},

		_determineButtonType: function() {
			var ancestor, labelSelector, checked;

			if ( this.element.is("[type=checkbox]") ) {
				this.type = "checkbox";
			} else if ( this.element.is("[type=radio]") ) {
				this.type = "radio";
			} else if ( this.element.is("input") ) {
				this.type = "input";
			} else {
				this.type = "button";
			}

			if ( this.type === "checkbox" || this.type === "radio" ) {
				// we don't search against the document in case the element
				// is disconnected from the DOM
				ancestor = this.element.parents().last();
				labelSelector = "label[for='" + this.element.attr("id") + "']";
				this.buttonElement = ancestor.find( labelSelector );
				if ( !this.buttonElement.length ) {
					ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();
					this.buttonElement = ancestor.filter( labelSelector );
					if ( !this.buttonElement.length ) {
						this.buttonElement = ancestor.find( labelSelector );
					}
				}
				this.element.addClass( "ui-helper-hidden-accessible" );

				checked = this.element.is( ":checked" );
				if ( checked ) {
					this.buttonElement.addClass( "ui-state-active" );
				}
				this.buttonElement.prop( "aria-pressed", checked );
			} else {
				this.buttonElement = this.element;
			}
		},

		widget: function() {
			return this.buttonElement;
		},

		_destroy: function() {
			this.element
				.removeClass( "ui-helper-hidden-accessible" );
			this.buttonElement
				.removeClass( baseClasses + " " + stateClasses + " " + typeClasses )
				.removeAttr( "role" )
				.removeAttr( "aria-pressed" )
				.html( this.buttonElement.find(".ui-button-text").html() );

			if ( !this.hasTitle ) {
				this.buttonElement.removeAttr( "title" );
			}
		},

		_setOption: function( key, value ) {
			this._super( key, value );
			if ( key === "disabled" ) {
				if ( value ) {
					this.element.prop( "disabled", true );
				} else {
					this.element.prop( "disabled", false );
				}
				return;
			}
			this._resetButton();
		},

		refresh: function() {
			//See #8237 & #8828
			var isDisabled = this.element.is( "input, button" ) ? this.element.is( ":disabled" ) : this.element.hasClass( "ui-button-disabled" );

			if ( isDisabled !== this.options.disabled ) {
				this._setOption( "disabled", isDisabled );
			}
			if ( this.type === "radio" ) {
				radioGroup( this.element[0] ).each(function() {
					if ( $( this ).is( ":checked" ) ) {
						$( this ).button( "widget" )
							.addClass( "ui-state-active" )
							.attr( "aria-pressed", "true" );
					} else {
						$( this ).button( "widget" )
							.removeClass( "ui-state-active" )
							.attr( "aria-pressed", "false" );
					}
				});
			} else if ( this.type === "checkbox" ) {
				if ( this.element.is( ":checked" ) ) {
					this.buttonElement
						.addClass( "ui-state-active" )
						.attr( "aria-pressed", "true" );
				} else {
					this.buttonElement
						.removeClass( "ui-state-active" )
						.attr( "aria-pressed", "false" );
				}
			}
		},

		_resetButton: function() {
			if ( this.type === "input" ) {
				if ( this.options.label ) {
					this.element.val( this.options.label );
				}
				return;
			}
			var buttonElement = this.buttonElement.removeClass( typeClasses ),
				buttonText = $( "<span></span>", this.document[0] )
					.addClass( "ui-button-text" )
					.html( this.options.label )
					.appendTo( buttonElement.empty() )
					.text(),
				icons = this.options.icons,
				multipleIcons = icons.primary && icons.secondary,
				buttonClasses = [];

			if ( icons.primary || icons.secondary ) {
				if ( this.options.text ) {
					buttonClasses.push( "ui-button-text-icon" + ( multipleIcons ? "s" : ( icons.primary ? "-primary" : "-secondary" ) ) );
				}

				if ( icons.primary ) {
					buttonElement.prepend( "<span class='ui-button-icon-primary ui-icon " + icons.primary + "'></span>" );
				}

				if ( icons.secondary ) {
					buttonElement.append( "<span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'></span>" );
				}

				if ( !this.options.text ) {
					buttonClasses.push( multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only" );

					if ( !this.hasTitle ) {
						buttonElement.attr( "title", $.trim( buttonText ) );
					}
				}
			} else {
				buttonClasses.push( "ui-button-text-only" );
			}
			buttonElement.addClass( buttonClasses.join( " " ) );
		}
	});

	$.widget( "ui.buttonset", {
		version: "1.10.3",
		options: {
			items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"
		},

		_create: function() {
			this.element.addClass( "ui-buttonset" );
		},

		_init: function() {
			this.refresh();
		},

		_setOption: function( key, value ) {
			if ( key === "disabled" ) {
				this.buttons.button( "option", key, value );
			}

			this._super( key, value );
		},

		refresh: function() {
			var rtl = this.element.css( "direction" ) === "rtl";

			this.buttons = this.element.find( this.options.items )
				.filter( ":ui-button" )
					.button( "refresh" )
				.end()
				.not( ":ui-button" )
					.button()
				.end()
				.map(function() {
					return $( this ).button( "widget" )[ 0 ];
				})
					.removeClass( "ui-corner-all ui-corner-left ui-corner-right" )
					.filter( ":first" )
						.addClass( rtl ? "ui-corner-right" : "ui-corner-left" )
					.end()
					.filter( ":last" )
						.addClass( rtl ? "ui-corner-left" : "ui-corner-right" )
					.end()
				.end();
		},

		_destroy: function() {
			this.element.removeClass( "ui-buttonset" );
			this.buttons
				.map(function() {
					return $( this ).button( "widget" )[ 0 ];
				})
					.removeClass( "ui-corner-left ui-corner-right" )
				.end()
				.button( "destroy" );
		}
	});

	}( jQuery ) );

	(function( $, undefined ) {

	$.extend($.ui, { datepicker: { version: "1.10.3" } });

	var PROP_NAME = "datepicker",
		instActive;

	/* Date picker manager.
	   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
	   Settings for (groups of) date pickers are maintained in an instance object,
	   allowing multiple different settings on the same page. */

	function Datepicker() {
		this._curInst = null; // The current instance in use
		this._keyEvent = false; // If the last event was a key event
		this._disabledInputs = []; // List of date picker inputs that have been disabled
		this._datepickerShowing = false; // True if the popup picker is showing , false if not
		this._inDialog = false; // True if showing within a "dialog", false if not
		this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division
		this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class
		this._appendClass = "ui-datepicker-append"; // The name of the append marker class
		this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class
		this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class
		this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class
		this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class
		this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class
		this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class
		this.regional = []; // Available regional settings, indexed by language code
		this.regional[""] = { // Default regional settings
			closeText: "Done", // Display text for close link
			prevText: "Prev", // Display text for previous month link
			nextText: "Next", // Display text for next month link
			currentText: "Today", // Display text for current month link
			monthNames: ["January","February","March","April","May","June",
				"July","August","September","October","November","December"], // Names of months for drop-down and formatting
			monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], // For formatting
			dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], // For formatting
			dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], // For formatting
			dayNamesMin: ["Su","Mo","Tu","We","Th","Fr","Sa"], // Column headings for days starting at Sunday
			weekHeader: "Wk", // Column header for week of the year
			dateFormat: "mm/dd/yy", // See format options on parseDate
			firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
			isRTL: false, // True if right-to-left language, false if left-to-right
			showMonthAfterYear: false, // True if the year select precedes month, false for month then year
			yearSuffix: "" // Additional text to append to the year in the month headers
		};
		this._defaults = { // Global defaults for all the date picker instances
			showOn: "focus", // "focus" for popup on focus,
				// "button" for trigger button, or "both" for either
			showAnim: "fadeIn", // Name of jQuery animation for popup
			showOptions: {}, // Options for enhanced animations
			defaultDate: null, // Used when field is blank: actual date,
				// +/-number for offset from today, null for today
			appendText: "", // Display text following the input box, e.g. showing the format
			buttonText: "...", // Text for trigger button
			buttonImage: "", // URL for trigger button image
			buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
			hideIfNoPrevNext: false, // True to hide next/previous month links
				// if not applicable, false to just disable them
			navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
			gotoCurrent: false, // True if today link goes back to current selection instead
			changeMonth: false, // True if month can be selected directly, false if only prev/next
			changeYear: false, // True if year can be selected directly, false if only prev/next
			yearRange: "c-10:c+10", // Range of years to display in drop-down,
				// either relative to today's year (-nn:+nn), relative to currently displayed year
				// (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
			showOtherMonths: false, // True to show dates in other months, false to leave blank
			selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
			showWeek: false, // True to show week of the year, false to not show it
			calculateWeek: this.iso8601Week, // How to calculate the week of the year,
				// takes a Date and returns the number of the week for it
			shortYearCutoff: "+10", // Short year values < this are in the current century,
				// > this are in the previous century,
				// string value starting with "+" for current year + value
			minDate: null, // The earliest selectable date, or null for no limit
			maxDate: null, // The latest selectable date, or null for no limit
			duration: "fast", // Duration of display/closure
			beforeShowDay: null, // Function that takes a date and returns an array with
				// [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
				// [2] = cell title (optional), e.g. $.datepicker.noWeekends
			beforeShow: null, // Function that takes an input field and
				// returns a set of custom settings for the date picker
			onSelect: null, // Define a callback function when a date is selected
			onChangeMonthYear: null, // Define a callback function when the month or year is changed
			onClose: null, // Define a callback function when the datepicker is closed
			numberOfMonths: 1, // Number of months to show at a time
			showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
			stepMonths: 1, // Number of months to step back/forward
			stepBigMonths: 12, // Number of months to step back/forward for the big links
			altField: "", // Selector for an alternate field to store selected dates into
			altFormat: "", // The date format to use for the alternate field
			constrainInput: true, // The input is constrained by the current date format
			showButtonPanel: false, // True to show button panel, false to not show it
			autoSize: false, // True to size the input for the date format, false to leave as is
			disabled: false // The initial disabled state
		};
		$.extend(this._defaults, this.regional[""]);
		this.dpDiv = bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
	}

	$.extend(Datepicker.prototype, {
		/* Class name added to elements to indicate already configured with a date picker. */
		markerClassName: "hasDatepicker",

		//Keep track of the maximum number of rows displayed (see #7043)
		maxRows: 4,

		// TODO rename to "widget" when switching to widget factory
		_widgetDatepicker: function() {
			return this.dpDiv;
		},

		/* Override the default settings for all instances of the date picker.
		 * @param  settings  object - the new settings to use as defaults (anonymous object)
		 * @return the manager object
		 */
		setDefaults: function(settings) {
			extendRemove(this._defaults, settings || {});
			return this;
		},

		/* Attach the date picker to a jQuery selection.
		 * @param  target	element - the target input field or division or span
		 * @param  settings  object - the new settings to use for this date picker instance (anonymous)
		 */
		_attachDatepicker: function(target, settings) {
			var nodeName, inline, inst;
			nodeName = target.nodeName.toLowerCase();
			inline = (nodeName === "div" || nodeName === "span");
			if (!target.id) {
				this.uuid += 1;
				target.id = "dp" + this.uuid;
			}
			inst = this._newInst($(target), inline);
			inst.settings = $.extend({}, settings || {});
			if (nodeName === "input") {
				this._connectDatepicker(target, inst);
			} else if (inline) {
				this._inlineDatepicker(target, inst);
			}
		},

		/* Create a new instance object. */
		_newInst: function(target, inline) {
			var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"); // escape jQuery meta chars
			return {id: id, input: target, // associated target
				selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
				drawMonth: 0, drawYear: 0, // month being drawn
				inline: inline, // is datepicker inline or not
				dpDiv: (!inline ? this.dpDiv : // presentation div
				bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")))};
		},

		/* Attach the date picker to an input field. */
		_connectDatepicker: function(target, inst) {
			var input = $(target);
			inst.append = $([]);
			inst.trigger = $([]);
			if (input.hasClass(this.markerClassName)) {
				return;
			}
			this._attachments(input, inst);
			input.addClass(this.markerClassName).keydown(this._doKeyDown).
				keypress(this._doKeyPress).keyup(this._doKeyUp);
			this._autoSize(inst);
			$.data(target, PROP_NAME, inst);
			//If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
			if( inst.settings.disabled ) {
				this._disableDatepicker( target );
			}
		},

		/* Make attachments based on settings. */
		_attachments: function(input, inst) {
			var showOn, buttonText, buttonImage,
				appendText = this._get(inst, "appendText"),
				isRTL = this._get(inst, "isRTL");

			if (inst.append) {
				inst.append.remove();
			}
			if (appendText) {
				inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
				input[isRTL ? "before" : "after"](inst.append);
			}

			input.unbind("focus", this._showDatepicker);

			if (inst.trigger) {
				inst.trigger.remove();
			}

			showOn = this._get(inst, "showOn");
			if (showOn === "focus" || showOn === "both") { // pop-up date picker when in the marked field
				input.focus(this._showDatepicker);
			}
			if (showOn === "button" || showOn === "both") { // pop-up date picker when button clicked
				buttonText = this._get(inst, "buttonText");
				buttonImage = this._get(inst, "buttonImage");
				inst.trigger = $(this._get(inst, "buttonImageOnly") ?
					$("<img/>").addClass(this._triggerClass).
						attr({ src: buttonImage, alt: buttonText, title: buttonText }) :
					$("<button type='button'></button>").addClass(this._triggerClass).
						html(!buttonImage ? buttonText : $("<img/>").attr(
						{ src:buttonImage, alt:buttonText, title:buttonText })));
				input[isRTL ? "before" : "after"](inst.trigger);
				inst.trigger.click(function() {
					if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {
						$.datepicker._hideDatepicker();
					} else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
						$.datepicker._hideDatepicker();
						$.datepicker._showDatepicker(input[0]);
					} else {
						$.datepicker._showDatepicker(input[0]);
					}
					return false;
				});
			}
		},

		/* Apply the maximum length for the date format. */
		_autoSize: function(inst) {
			if (this._get(inst, "autoSize") && !inst.inline) {
				var findMax, max, maxI, i,
					date = new Date(2009, 12 - 1, 20), // Ensure double digits
					dateFormat = this._get(inst, "dateFormat");

				if (dateFormat.match(/[DM]/)) {
					findMax = function(names) {
						max = 0;
						maxI = 0;
						for (i = 0; i < names.length; i++) {
							if (names[i].length > max) {
								max = names[i].length;
								maxI = i;
							}
						}
						return maxI;
					};
					date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?
						"monthNames" : "monthNamesShort"))));
					date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?
						"dayNames" : "dayNamesShort"))) + 20 - date.getDay());
				}
				inst.input.attr("size", this._formatDate(inst, date).length);
			}
		},

		/* Attach an inline date picker to a div. */
		_inlineDatepicker: function(target, inst) {
			var divSpan = $(target);
			if (divSpan.hasClass(this.markerClassName)) {
				return;
			}
			divSpan.addClass(this.markerClassName).append(inst.dpDiv);
			$.data(target, PROP_NAME, inst);
			this._setDate(inst, this._getDefaultDate(inst), true);
			this._updateDatepicker(inst);
			this._updateAlternate(inst);
			//If disabled option is true, disable the datepicker before showing it (see ticket #5665)
			if( inst.settings.disabled ) {
				this._disableDatepicker( target );
			}
			// Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
			// http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
			inst.dpDiv.css( "display", "block" );
		},

		/* Pop-up the date picker in a "dialog" box.
		 * @param  input element - ignored
		 * @param  date	string or Date - the initial date to display
		 * @param  onSelect  function - the function to call when a date is selected
		 * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
		 * @param  pos int[2] - coordinates for the dialog's position within the screen or
		 *					event - with x/y coordinates or
		 *					leave empty for default (screen centre)
		 * @return the manager object
		 */
		_dialogDatepicker: function(input, date, onSelect, settings, pos) {
			var id, browserWidth, browserHeight, scrollX, scrollY,
				inst = this._dialogInst; // internal instance

			if (!inst) {
				this.uuid += 1;
				id = "dp" + this.uuid;
				this._dialogInput = $("<input type='text' id='" + id +
					"' style='position: absolute; top: -100px; width: 0px;'/>");
				this._dialogInput.keydown(this._doKeyDown);
				$("body").append(this._dialogInput);
				inst = this._dialogInst = this._newInst(this._dialogInput, false);
				inst.settings = {};
				$.data(this._dialogInput[0], PROP_NAME, inst);
			}
			extendRemove(inst.settings, settings || {});
			date = (date && date.constructor === Date ? this._formatDate(inst, date) : date);
			this._dialogInput.val(date);

			this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
			if (!this._pos) {
				browserWidth = document.documentElement.clientWidth;
				browserHeight = document.documentElement.clientHeight;
				scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
				scrollY = document.documentElement.scrollTop || document.body.scrollTop;
				this._pos = // should use actual width/height below
					[(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
			}

			// move input on screen for focus, but hidden behind dialog
			this._dialogInput.css("left", (this._pos[0] + 20) + "px").css("top", this._pos[1] + "px");
			inst.settings.onSelect = onSelect;
			this._inDialog = true;
			this.dpDiv.addClass(this._dialogClass);
			this._showDatepicker(this._dialogInput[0]);
			if ($.blockUI) {
				$.blockUI(this.dpDiv);
			}
			$.data(this._dialogInput[0], PROP_NAME, inst);
			return this;
		},

		/* Detach a datepicker from its control.
		 * @param  target	element - the target input field or division or span
		 */
		_destroyDatepicker: function(target) {
			var nodeName,
				$target = $(target),
				inst = $.data(target, PROP_NAME);

			if (!$target.hasClass(this.markerClassName)) {
				return;
			}

			nodeName = target.nodeName.toLowerCase();
			$.removeData(target, PROP_NAME);
			if (nodeName === "input") {
				inst.append.remove();
				inst.trigger.remove();
				$target.removeClass(this.markerClassName).
					unbind("focus", this._showDatepicker).
					unbind("keydown", this._doKeyDown).
					unbind("keypress", this._doKeyPress).
					unbind("keyup", this._doKeyUp);
			} else if (nodeName === "div" || nodeName === "span") {
				$target.removeClass(this.markerClassName).empty();
			}
		},

		/* Enable the date picker to a jQuery selection.
		 * @param  target	element - the target input field or division or span
		 */
		_enableDatepicker: function(target) {
			var nodeName, inline,
				$target = $(target),
				inst = $.data(target, PROP_NAME);

			if (!$target.hasClass(this.markerClassName)) {
				return;
			}

			nodeName = target.nodeName.toLowerCase();
			if (nodeName === "input") {
				target.disabled = false;
				inst.trigger.filter("button").
					each(function() { this.disabled = false; }).end().
					filter("img").css({opacity: "1.0", cursor: ""});
			} else if (nodeName === "div" || nodeName === "span") {
				inline = $target.children("." + this._inlineClass);
				inline.children().removeClass("ui-state-disabled");
				inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
					prop("disabled", false);
			}
			this._disabledInputs = $.map(this._disabledInputs,
				function(value) { return (value === target ? null : value); }); // delete entry
		},

		/* Disable the date picker to a jQuery selection.
		 * @param  target	element - the target input field or division or span
		 */
		_disableDatepicker: function(target) {
			var nodeName, inline,
				$target = $(target),
				inst = $.data(target, PROP_NAME);

			if (!$target.hasClass(this.markerClassName)) {
				return;
			}

			nodeName = target.nodeName.toLowerCase();
			if (nodeName === "input") {
				target.disabled = true;
				inst.trigger.filter("button").
					each(function() { this.disabled = true; }).end().
					filter("img").css({opacity: "0.5", cursor: "default"});
			} else if (nodeName === "div" || nodeName === "span") {
				inline = $target.children("." + this._inlineClass);
				inline.children().addClass("ui-state-disabled");
				inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
					prop("disabled", true);
			}
			this._disabledInputs = $.map(this._disabledInputs,
				function(value) { return (value === target ? null : value); }); // delete entry
			this._disabledInputs[this._disabledInputs.length] = target;
		},

		/* Is the first field in a jQuery collection disabled as a datepicker?
		 * @param  target	element - the target input field or division or span
		 * @return boolean - true if disabled, false if enabled
		 */
		_isDisabledDatepicker: function(target) {
			if (!target) {
				return false;
			}
			for (var i = 0; i < this._disabledInputs.length; i++) {
				if (this._disabledInputs[i] === target) {
					return true;
				}
			}
			return false;
		},

		/* Retrieve the instance data for the target control.
		 * @param  target  element - the target input field or division or span
		 * @return  object - the associated instance data
		 * @throws  error if a jQuery problem getting data
		 */
		_getInst: function(target) {
			try {
				return $.data(target, PROP_NAME);
			}
			catch (err) {
				throw "Missing instance data for this datepicker";
			}
		},

		/* Update or retrieve the settings for a date picker attached to an input field or division.
		 * @param  target  element - the target input field or division or span
		 * @param  name	object - the new settings to update or
		 *				string - the name of the setting to change or retrieve,
		 *				when retrieving also "all" for all instance settings or
		 *				"defaults" for all global defaults
		 * @param  value   any - the new value for the setting
		 *				(omit if above is an object or to retrieve a value)
		 */
		_optionDatepicker: function(target, name, value) {
			var settings, date, minDate, maxDate,
				inst = this._getInst(target);

			if (arguments.length === 2 && typeof name === "string") {
				return (name === "defaults" ? $.extend({}, $.datepicker._defaults) :
					(inst ? (name === "all" ? $.extend({}, inst.settings) :
					this._get(inst, name)) : null));
			}

			settings = name || {};
			if (typeof name === "string") {
				settings = {};
				settings[name] = value;
			}

			if (inst) {
				if (this._curInst === inst) {
					this._hideDatepicker();
				}

				date = this._getDateDatepicker(target, true);
				minDate = this._getMinMaxDate(inst, "min");
				maxDate = this._getMinMaxDate(inst, "max");
				extendRemove(inst.settings, settings);
				// reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
				if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {
					inst.settings.minDate = this._formatDate(inst, minDate);
				}
				if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {
					inst.settings.maxDate = this._formatDate(inst, maxDate);
				}
				if ( "disabled" in settings ) {
					if ( settings.disabled ) {
						this._disableDatepicker(target);
					} else {
						this._enableDatepicker(target);
					}
				}
				this._attachments($(target), inst);
				this._autoSize(inst);
				this._setDate(inst, date);
				this._updateAlternate(inst);
				this._updateDatepicker(inst);
			}
		},

		// change method deprecated
		_changeDatepicker: function(target, name, value) {
			this._optionDatepicker(target, name, value);
		},

		/* Redraw the date picker attached to an input field or division.
		 * @param  target  element - the target input field or division or span
		 */
		_refreshDatepicker: function(target) {
			var inst = this._getInst(target);
			if (inst) {
				this._updateDatepicker(inst);
			}
		},

		/* Set the dates for a jQuery selection.
		 * @param  target element - the target input field or division or span
		 * @param  date	Date - the new date
		 */
		_setDateDatepicker: function(target, date) {
			var inst = this._getInst(target);
			if (inst) {
				this._setDate(inst, date);
				this._updateDatepicker(inst);
				this._updateAlternate(inst);
			}
		},

		/* Get the date(s) for the first entry in a jQuery selection.
		 * @param  target element - the target input field or division or span
		 * @param  noDefault boolean - true if no default date is to be used
		 * @return Date - the current date
		 */
		_getDateDatepicker: function(target, noDefault) {
			var inst = this._getInst(target);
			if (inst && !inst.inline) {
				this._setDateFromField(inst, noDefault);
			}
			return (inst ? this._getDate(inst) : null);
		},

		/* Handle keystrokes. */
		_doKeyDown: function(event) {
			var onSelect, dateStr, sel,
				inst = $.datepicker._getInst(event.target),
				handled = true,
				isRTL = inst.dpDiv.is(".ui-datepicker-rtl");

			inst._keyEvent = true;
			if ($.datepicker._datepickerShowing) {
				switch (event.keyCode) {
					case 9: $.datepicker._hideDatepicker();
							handled = false;
							break; // hide on tab out
					case 13: sel = $("td." + $.datepicker._dayOverClass + ":not(." +
										$.datepicker._currentClass + ")", inst.dpDiv);
							if (sel[0]) {
								$.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
							}

							onSelect = $.datepicker._get(inst, "onSelect");
							if (onSelect) {
								dateStr = $.datepicker._formatDate(inst);

								// trigger custom callback
								onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
							} else {
								$.datepicker._hideDatepicker();
							}

							return false; // don't submit the form
					case 27: $.datepicker._hideDatepicker();
							break; // hide on escape
					case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
								-$.datepicker._get(inst, "stepBigMonths") :
								-$.datepicker._get(inst, "stepMonths")), "M");
							break; // previous month/year on page up/+ ctrl
					case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
								+$.datepicker._get(inst, "stepBigMonths") :
								+$.datepicker._get(inst, "stepMonths")), "M");
							break; // next month/year on page down/+ ctrl
					case 35: if (event.ctrlKey || event.metaKey) {
								$.datepicker._clearDate(event.target);
							}
							handled = event.ctrlKey || event.metaKey;
							break; // clear on ctrl or command +end
					case 36: if (event.ctrlKey || event.metaKey) {
								$.datepicker._gotoToday(event.target);
							}
							handled = event.ctrlKey || event.metaKey;
							break; // current on ctrl or command +home
					case 37: if (event.ctrlKey || event.metaKey) {
								$.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), "D");
							}
							handled = event.ctrlKey || event.metaKey;
							// -1 day on ctrl or command +left
							if (event.originalEvent.altKey) {
								$.datepicker._adjustDate(event.target, (event.ctrlKey ?
									-$.datepicker._get(inst, "stepBigMonths") :
									-$.datepicker._get(inst, "stepMonths")), "M");
							}
							// next month/year on alt +left on Mac
							break;
					case 38: if (event.ctrlKey || event.metaKey) {
								$.datepicker._adjustDate(event.target, -7, "D");
							}
							handled = event.ctrlKey || event.metaKey;
							break; // -1 week on ctrl or command +up
					case 39: if (event.ctrlKey || event.metaKey) {
								$.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), "D");
							}
							handled = event.ctrlKey || event.metaKey;
							// +1 day on ctrl or command +right
							if (event.originalEvent.altKey) {
								$.datepicker._adjustDate(event.target, (event.ctrlKey ?
									+$.datepicker._get(inst, "stepBigMonths") :
									+$.datepicker._get(inst, "stepMonths")), "M");
							}
							// next month/year on alt +right
							break;
					case 40: if (event.ctrlKey || event.metaKey) {
								$.datepicker._adjustDate(event.target, +7, "D");
							}
							handled = event.ctrlKey || event.metaKey;
							break; // +1 week on ctrl or command +down
					default: handled = false;
				}
			} else if (event.keyCode === 36 && event.ctrlKey) { // display the date picker on ctrl+home
				$.datepicker._showDatepicker(this);
			} else {
				handled = false;
			}

			if (handled) {
				event.preventDefault();
				event.stopPropagation();
			}
		},

		/* Filter entered characters - based on date format. */
		_doKeyPress: function(event) {
			var chars, chr,
				inst = $.datepicker._getInst(event.target);

			if ($.datepicker._get(inst, "constrainInput")) {
				chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
				chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
				return event.ctrlKey || event.metaKey || (chr < " " || !chars || chars.indexOf(chr) > -1);
			}
		},

		/* Synchronise manual entry and field/alternate field. */
		_doKeyUp: function(event) {
			var date,
				inst = $.datepicker._getInst(event.target);

			if (inst.input.val() !== inst.lastVal) {
				try {
					date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
						(inst.input ? inst.input.val() : null),
						$.datepicker._getFormatConfig(inst));

					if (date) { // only if valid
						$.datepicker._setDateFromField(inst);
						$.datepicker._updateAlternate(inst);
						$.datepicker._updateDatepicker(inst);
					}
				}
				catch (err) {
				}
			}
			return true;
		},

		/* Pop-up the date picker for a given input field.
		 * If false returned from beforeShow event handler do not show.
		 * @param  input  element - the input field attached to the date picker or
		 *					event - if triggered by focus
		 */
		_showDatepicker: function(input) {
			input = input.target || input;
			if (input.nodeName.toLowerCase() !== "input") { // find from button/image trigger
				input = $("input", input.parentNode)[0];
			}

			if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) { // already here
				return;
			}

			var inst, beforeShow, beforeShowSettings, isFixed,
				offset, showAnim, duration;

			inst = $.datepicker._getInst(input);
			if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
				$.datepicker._curInst.dpDiv.stop(true, true);
				if ( inst && $.datepicker._datepickerShowing ) {
					$.datepicker._hideDatepicker( $.datepicker._curInst.input[0] );
				}
			}

			beforeShow = $.datepicker._get(inst, "beforeShow");
			beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
			if(beforeShowSettings === false){
				return;
			}
			extendRemove(inst.settings, beforeShowSettings);

			inst.lastVal = null;
			$.datepicker._lastInput = input;
			$.datepicker._setDateFromField(inst);

			if ($.datepicker._inDialog) { // hide cursor
				input.value = "";
			}
			if (!$.datepicker._pos) { // position below input
				$.datepicker._pos = $.datepicker._findPos(input);
				$.datepicker._pos[1] += input.offsetHeight; // add the height
			}

			isFixed = false;
			$(input).parents().each(function() {
				isFixed |= $(this).css("position") === "fixed";
				return !isFixed;
			});

			offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};
			$.datepicker._pos = null;
			//to avoid flashes on Firefox
			inst.dpDiv.empty();
			// determine sizing offscreen
			inst.dpDiv.css({position: "absolute", display: "block", top: "-1000px"});
			$.datepicker._updateDatepicker(inst);
			// fix width for dynamic number of date pickers
			// and adjust position before showing
			offset = $.datepicker._checkOffset(inst, offset, isFixed);
			inst.dpDiv.css({position: ($.datepicker._inDialog && $.blockUI ?
				"static" : (isFixed ? "fixed" : "absolute")), display: "none",
				left: offset.left + "px", top: offset.top + "px"});

			if (!inst.inline) {
				showAnim = $.datepicker._get(inst, "showAnim");
				duration = $.datepicker._get(inst, "duration");
				inst.dpDiv.zIndex($(input).zIndex()+1);
				$.datepicker._datepickerShowing = true;

				if ( $.effects && $.effects.effect[ showAnim ] ) {
					inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration);
				} else {
					inst.dpDiv[showAnim || "show"](showAnim ? duration : null);
				}

				if ( $.datepicker._shouldFocusInput( inst ) ) {
					inst.input.focus();
				}

				$.datepicker._curInst = inst;
			}
		},

		/* Generate the date picker content. */
		_updateDatepicker: function(inst) {
			this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
			instActive = inst; // for delegate hover events
			inst.dpDiv.empty().append(this._generateHTML(inst));
			this._attachHandlers(inst);
			inst.dpDiv.find("." + this._dayOverClass + " a").mouseover();

			var origyearshtml,
				numMonths = this._getNumberOfMonths(inst),
				cols = numMonths[1],
				width = 17;

			inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
			if (cols > 1) {
				inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", (width * cols) + "em");
			}
			inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") +
				"Class"]("ui-datepicker-multi");
			inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") +
				"Class"]("ui-datepicker-rtl");

			if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {
				inst.input.focus();
			}

			// deffered render of the years select (to avoid flashes on Firefox)
			if( inst.yearshtml ){
				origyearshtml = inst.yearshtml;
				setTimeout(function(){
					//assure that inst.yearshtml didn't change.
					if( origyearshtml === inst.yearshtml && inst.yearshtml ){
						inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);
					}
					origyearshtml = inst.yearshtml = null;
				}, 0);
			}
		},

		// #6694 - don't focus the input if it's already focused
		// this breaks the change event in IE
		// Support: IE and jQuery <1.9
		_shouldFocusInput: function( inst ) {
			return inst.input && inst.input.is( ":visible" ) && !inst.input.is( ":disabled" ) && !inst.input.is( ":focus" );
		},

		/* Check positioning to remain on screen. */
		_checkOffset: function(inst, offset, isFixed) {
			var dpWidth = inst.dpDiv.outerWidth(),
				dpHeight = inst.dpDiv.outerHeight(),
				inputWidth = inst.input ? inst.input.outerWidth() : 0,
				inputHeight = inst.input ? inst.input.outerHeight() : 0,
				viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),
				viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());

			offset.left -= (this._get(inst, "isRTL") ? (dpWidth - inputWidth) : 0);
			offset.left -= (isFixed && offset.left === inst.input.offset().left) ? $(document).scrollLeft() : 0;
			offset.top -= (isFixed && offset.top === (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;

			// now check if datepicker is showing outside window viewport - move to a better place if so.
			offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
				Math.abs(offset.left + dpWidth - viewWidth) : 0);
			offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
				Math.abs(dpHeight + inputHeight) : 0);

			return offset;
		},

		/* Find an object's position on the screen. */
		_findPos: function(obj) {
			var position,
				inst = this._getInst(obj),
				isRTL = this._get(inst, "isRTL");

			while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {
				obj = obj[isRTL ? "previousSibling" : "nextSibling"];
			}

			position = $(obj).offset();
			return [position.left, position.top];
		},

		/* Hide the date picker from view.
		 * @param  input  element - the input field attached to the date picker
		 */
		_hideDatepicker: function(input) {
			var showAnim, duration, postProcess, onClose,
				inst = this._curInst;

			if (!inst || (input && inst !== $.data(input, PROP_NAME))) {
				return;
			}

			if (this._datepickerShowing) {
				showAnim = this._get(inst, "showAnim");
				duration = this._get(inst, "duration");
				postProcess = function() {
					$.datepicker._tidyDialog(inst);
				};

				// DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
				if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {
					inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess);
				} else {
					inst.dpDiv[(showAnim === "slideDown" ? "slideUp" :
						(showAnim === "fadeIn" ? "fadeOut" : "hide"))]((showAnim ? duration : null), postProcess);
				}

				if (!showAnim) {
					postProcess();
				}
				this._datepickerShowing = false;

				onClose = this._get(inst, "onClose");
				if (onClose) {
					onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : ""), inst]);
				}

				this._lastInput = null;
				if (this._inDialog) {
					this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" });
					if ($.blockUI) {
						$.unblockUI();
						$("body").append(this.dpDiv);
					}
				}
				this._inDialog = false;
			}
		},

		/* Tidy up after a dialog display. */
		_tidyDialog: function(inst) {
			inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");
		},

		/* Close date picker if clicked elsewhere. */
		_checkExternalClick: function(event) {
			if (!$.datepicker._curInst) {
				return;
			}

			var $target = $(event.target),
				inst = $.datepicker._getInst($target[0]);

			if ( ( ( $target[0].id !== $.datepicker._mainDivId &&
					$target.parents("#" + $.datepicker._mainDivId).length === 0 &&
					!$target.hasClass($.datepicker.markerClassName) &&
					!$target.closest("." + $.datepicker._triggerClass).length &&
					$.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) ) ) ||
				( $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst ) ) {
					$.datepicker._hideDatepicker();
			}
		},

		/* Adjust one of the date sub-fields. */
		_adjustDate: function(id, offset, period) {
			var target = $(id),
				inst = this._getInst(target[0]);

			if (this._isDisabledDatepicker(target[0])) {
				return;
			}
			this._adjustInstDate(inst, offset +
				(period === "M" ? this._get(inst, "showCurrentAtPos") : 0), // undo positioning
				period);
			this._updateDatepicker(inst);
		},

		/* Action for current link. */
		_gotoToday: function(id) {
			var date,
				target = $(id),
				inst = this._getInst(target[0]);

			if (this._get(inst, "gotoCurrent") && inst.currentDay) {
				inst.selectedDay = inst.currentDay;
				inst.drawMonth = inst.selectedMonth = inst.currentMonth;
				inst.drawYear = inst.selectedYear = inst.currentYear;
			} else {
				date = new Date();
				inst.selectedDay = date.getDate();
				inst.drawMonth = inst.selectedMonth = date.getMonth();
				inst.drawYear = inst.selectedYear = date.getFullYear();
			}
			this._notifyChange(inst);
			this._adjustDate(target);
		},

		/* Action for selecting a new month/year. */
		_selectMonthYear: function(id, select, period) {
			var target = $(id),
				inst = this._getInst(target[0]);

			inst["selected" + (period === "M" ? "Month" : "Year")] =
			inst["draw" + (period === "M" ? "Month" : "Year")] =
				parseInt(select.options[select.selectedIndex].value,10);

			this._notifyChange(inst);
			this._adjustDate(target);
		},

		/* Action for selecting a day. */
		_selectDay: function(id, month, year, td) {
			var inst,
				target = $(id);

			if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
				return;
			}

			inst = this._getInst(target[0]);
			inst.selectedDay = inst.currentDay = $("a", td).html();
			inst.selectedMonth = inst.currentMonth = month;
			inst.selectedYear = inst.currentYear = year;
			this._selectDate(id, this._formatDate(inst,
				inst.currentDay, inst.currentMonth, inst.currentYear));
		},

		/* Erase the input field and hide the date picker. */
		_clearDate: function(id) {
			var target = $(id);
			this._selectDate(target, "");
		},

		/* Update the input field with the selected date. */
		_selectDate: function(id, dateStr) {
			var onSelect,
				target = $(id),
				inst = this._getInst(target[0]);

			dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
			if (inst.input) {
				inst.input.val(dateStr);
			}
			this._updateAlternate(inst);

			onSelect = this._get(inst, "onSelect");
			if (onSelect) {
				onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback
			} else if (inst.input) {
				inst.input.trigger("change"); // fire the change event
			}

			if (inst.inline){
				this._updateDatepicker(inst);
			} else {
				this._hideDatepicker();
				this._lastInput = inst.input[0];
				if (typeof(inst.input[0]) !== "object") {
					inst.input.focus(); // restore focus
				}
				this._lastInput = null;
			}
		},

		/* Update any alternate field to synchronise with the main field. */
		_updateAlternate: function(inst) {
			var altFormat, date, dateStr,
				altField = this._get(inst, "altField");

			if (altField) { // update alternate field too
				altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
				date = this._getDate(inst);
				dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
				$(altField).each(function() { $(this).val(dateStr); });
			}
		},

		/* Set as beforeShowDay function to prevent selection of weekends.
		 * @param  date  Date - the date to customise
		 * @return [boolean, string] - is this date selectable?, what is its CSS class?
		 */
		noWeekends: function(date) {
			var day = date.getDay();
			return [(day > 0 && day < 6), ""];
		},

		/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
		 * @param  date  Date - the date to get the week for
		 * @return  number - the number of the week within the year that contains this date
		 */
		iso8601Week: function(date) {
			var time,
				checkDate = new Date(date.getTime());

			// Find Thursday of this week starting on Monday
			checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));

			time = checkDate.getTime();
			checkDate.setMonth(0); // Compare with Jan 1
			checkDate.setDate(1);
			return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
		},

		/* Parse a string value into a date object.
		 * See formatDate below for the possible formats.
		 *
		 * @param  format string - the expected format of the date
		 * @param  value string - the date in the above format
		 * @param  settings Object - attributes include:
		 *					shortYearCutoff  number - the cutoff year for determining the century (optional)
		 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
		 *					dayNames		string[7] - names of the days from Sunday (optional)
		 *					monthNamesShort string[12] - abbreviated names of the months (optional)
		 *					monthNames		string[12] - names of the months (optional)
		 * @return  Date - the extracted date value or null if value is blank
		 */
		parseDate: function (format, value, settings) {
			if (format == null || value == null) {
				throw "Invalid arguments";
			}

			value = (typeof value === "object" ? value.toString() : value + "");
			if (value === "") {
				return null;
			}

			var iFormat, dim, extra,
				iValue = 0,
				shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,
				shortYearCutoff = (typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
					new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10)),
				dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
				dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
				monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
				monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
				year = -1,
				month = -1,
				day = -1,
				doy = -1,
				literal = false,
				date,
				// Check whether a format character is doubled
				lookAhead = function(match) {
					var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
					if (matches) {
						iFormat++;
					}
					return matches;
				},
				// Extract a number from the string value
				getNumber = function(match) {
					var isDoubled = lookAhead(match),
						size = (match === "@" ? 14 : (match === "!" ? 20 :
						(match === "y" && isDoubled ? 4 : (match === "o" ? 3 : 2)))),
						digits = new RegExp("^\\d{1," + size + "}"),
						num = value.substring(iValue).match(digits);
					if (!num) {
						throw "Missing number at position " + iValue;
					}
					iValue += num[0].length;
					return parseInt(num[0], 10);
				},
				// Extract a name from the string value and convert to an index
				getName = function(match, shortNames, longNames) {
					var index = -1,
						names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {
							return [ [k, v] ];
						}).sort(function (a, b) {
							return -(a[1].length - b[1].length);
						});

					$.each(names, function (i, pair) {
						var name = pair[1];
						if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
							index = pair[0];
							iValue += name.length;
							return false;
						}
					});
					if (index !== -1) {
						return index + 1;
					} else {
						throw "Unknown name at position " + iValue;
					}
				},
				// Confirm that a literal character matches the string value
				checkLiteral = function() {
					if (value.charAt(iValue) !== format.charAt(iFormat)) {
						throw "Unexpected literal at position " + iValue;
					}
					iValue++;
				};

			for (iFormat = 0; iFormat < format.length; iFormat++) {
				if (literal) {
					if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
						literal = false;
					} else {
						checkLiteral();
					}
				} else {
					switch (format.charAt(iFormat)) {
						case "d":
							day = getNumber("d");
							break;
						case "D":
							getName("D", dayNamesShort, dayNames);
							break;
						case "o":
							doy = getNumber("o");
							break;
						case "m":
							month = getNumber("m");
							break;
						case "M":
							month = getName("M", monthNamesShort, monthNames);
							break;
						case "y":
							year = getNumber("y");
							break;
						case "@":
							date = new Date(getNumber("@"));
							year = date.getFullYear();
							month = date.getMonth() + 1;
							day = date.getDate();
							break;
						case "!":
							date = new Date((getNumber("!") - this._ticksTo1970) / 10000);
							year = date.getFullYear();
							month = date.getMonth() + 1;
							day = date.getDate();
							break;
						case "'":
							if (lookAhead("'")){
								checkLiteral();
							} else {
								literal = true;
							}
							break;
						default:
							checkLiteral();
					}
				}
			}

			if (iValue < value.length){
				extra = value.substr(iValue);
				if (!/^\s+/.test(extra)) {
					throw "Extra/unparsed characters found in date: " + extra;
				}
			}

			if (year === -1) {
				year = new Date().getFullYear();
			} else if (year < 100) {
				year += new Date().getFullYear() - new Date().getFullYear() % 100 +
					(year <= shortYearCutoff ? 0 : -100);
			}

			if (doy > -1) {
				month = 1;
				day = doy;
				do {
					dim = this._getDaysInMonth(year, month - 1);
					if (day <= dim) {
						break;
					}
					month++;
					day -= dim;
				} while (true);
			}

			date = this._daylightSavingAdjust(new Date(year, month - 1, day));
			if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
				throw "Invalid date"; // E.g. 31/02/00
			}
			return date;
		},

		/* Standard date formats. */
		ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
		COOKIE: "D, dd M yy",
		ISO_8601: "yy-mm-dd",
		RFC_822: "D, d M y",
		RFC_850: "DD, dd-M-y",
		RFC_1036: "D, d M y",
		RFC_1123: "D, d M yy",
		RFC_2822: "D, d M yy",
		RSS: "D, d M y", // RFC 822
		TICKS: "!",
		TIMESTAMP: "@",
		W3C: "yy-mm-dd", // ISO 8601

		_ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
			Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),

		/* Format a date object into a string value.
		 * The format can be combinations of the following:
		 * d  - day of month (no leading zero)
		 * dd - day of month (two digit)
		 * o  - day of year (no leading zeros)
		 * oo - day of year (three digit)
		 * D  - day name short
		 * DD - day name long
		 * m  - month of year (no leading zero)
		 * mm - month of year (two digit)
		 * M  - month name short
		 * MM - month name long
		 * y  - year (two digit)
		 * yy - year (four digit)
		 * @ - Unix timestamp (ms since 01/01/1970)
		 * ! - Windows ticks (100ns since 01/01/0001)
		 * "..." - literal text
		 * '' - single quote
		 *
		 * @param  format string - the desired format of the date
		 * @param  date Date - the date value to format
		 * @param  settings Object - attributes include:
		 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
		 *					dayNames		string[7] - names of the days from Sunday (optional)
		 *					monthNamesShort string[12] - abbreviated names of the months (optional)
		 *					monthNames		string[12] - names of the months (optional)
		 * @return  string - the date in the above format
		 */
		formatDate: function (format, date, settings) {
			if (!date) {
				return "";
			}

			var iFormat,
				dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
				dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
				monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
				monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
				// Check whether a format character is doubled
				lookAhead = function(match) {
					var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
					if (matches) {
						iFormat++;
					}
					return matches;
				},
				// Format a number, with leading zero if necessary
				formatNumber = function(match, value, len) {
					var num = "" + value;
					if (lookAhead(match)) {
						while (num.length < len) {
							num = "0" + num;
						}
					}
					return num;
				},
				// Format a name, short or long as requested
				formatName = function(match, value, shortNames, longNames) {
					return (lookAhead(match) ? longNames[value] : shortNames[value]);
				},
				output = "",
				literal = false;

			if (date) {
				for (iFormat = 0; iFormat < format.length; iFormat++) {
					if (literal) {
						if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
							literal = false;
						} else {
							output += format.charAt(iFormat);
						}
					} else {
						switch (format.charAt(iFormat)) {
							case "d":
								output += formatNumber("d", date.getDate(), 2);
								break;
							case "D":
								output += formatName("D", date.getDay(), dayNamesShort, dayNames);
								break;
							case "o":
								output += formatNumber("o",
									Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
								break;
							case "m":
								output += formatNumber("m", date.getMonth() + 1, 2);
								break;
							case "M":
								output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
								break;
							case "y":
								output += (lookAhead("y") ? date.getFullYear() :
									(date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100);
								break;
							case "@":
								output += date.getTime();
								break;
							case "!":
								output += date.getTime() * 10000 + this._ticksTo1970;
								break;
							case "'":
								if (lookAhead("'")) {
									output += "'";
								} else {
									literal = true;
								}
								break;
							default:
								output += format.charAt(iFormat);
						}
					}
				}
			}
			return output;
		},

		/* Extract all possible characters from the date format. */
		_possibleChars: function (format) {
			var iFormat,
				chars = "",
				literal = false,
				// Check whether a format character is doubled
				lookAhead = function(match) {
					var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
					if (matches) {
						iFormat++;
					}
					return matches;
				};

			for (iFormat = 0; iFormat < format.length; iFormat++) {
				if (literal) {
					if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
						literal = false;
					} else {
						chars += format.charAt(iFormat);
					}
				} else {
					switch (format.charAt(iFormat)) {
						case "d": case "m": case "y": case "@":
							chars += "0123456789";
							break;
						case "D": case "M":
							return null; // Accept anything
						case "'":
							if (lookAhead("'")) {
								chars += "'";
							} else {
								literal = true;
							}
							break;
						default:
							chars += format.charAt(iFormat);
					}
				}
			}
			return chars;
		},

		/* Get a setting value, defaulting if necessary. */
		_get: function(inst, name) {
			return inst.settings[name] !== undefined ?
				inst.settings[name] : this._defaults[name];
		},

		/* Parse existing date and initialise date picker. */
		_setDateFromField: function(inst, noDefault) {
			if (inst.input.val() === inst.lastVal) {
				return;
			}

			var dateFormat = this._get(inst, "dateFormat"),
				dates = inst.lastVal = inst.input ? inst.input.val() : null,
				defaultDate = this._getDefaultDate(inst),
				date = defaultDate,
				settings = this._getFormatConfig(inst);

			try {
				date = this.parseDate(dateFormat, dates, settings) || defaultDate;
			} catch (event) {
				dates = (noDefault ? "" : dates);
			}
			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
			inst.currentDay = (dates ? date.getDate() : 0);
			inst.currentMonth = (dates ? date.getMonth() : 0);
			inst.currentYear = (dates ? date.getFullYear() : 0);
			this._adjustInstDate(inst);
		},

		/* Retrieve the default date shown on opening. */
		_getDefaultDate: function(inst) {
			return this._restrictMinMax(inst,
				this._determineDate(inst, this._get(inst, "defaultDate"), new Date()));
		},

		/* A date may be specified as an exact value or a relative one. */
		_determineDate: function(inst, date, defaultDate) {
			var offsetNumeric = function(offset) {
					var date = new Date();
					date.setDate(date.getDate() + offset);
					return date;
				},
				offsetString = function(offset) {
					try {
						return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
							offset, $.datepicker._getFormatConfig(inst));
					}
					catch (e) {
						// Ignore
					}

					var date = (offset.toLowerCase().match(/^c/) ?
						$.datepicker._getDate(inst) : null) || new Date(),
						year = date.getFullYear(),
						month = date.getMonth(),
						day = date.getDate(),
						pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
						matches = pattern.exec(offset);

					while (matches) {
						switch (matches[2] || "d") {
							case "d" : case "D" :
								day += parseInt(matches[1],10); break;
							case "w" : case "W" :
								day += parseInt(matches[1],10) * 7; break;
							case "m" : case "M" :
								month += parseInt(matches[1],10);
								day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
								break;
							case "y": case "Y" :
								year += parseInt(matches[1],10);
								day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
								break;
						}
						matches = pattern.exec(offset);
					}
					return new Date(year, month, day);
				},
				newDate = (date == null || date === "" ? defaultDate : (typeof date === "string" ? offsetString(date) :
					(typeof date === "number" ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));

			newDate = (newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate);
			if (newDate) {
				newDate.setHours(0);
				newDate.setMinutes(0);
				newDate.setSeconds(0);
				newDate.setMilliseconds(0);
			}
			return this._daylightSavingAdjust(newDate);
		},

		/* Handle switch to/from daylight saving.
		 * Hours may be non-zero on daylight saving cut-over:
		 * > 12 when midnight changeover, but then cannot generate
		 * midnight datetime, so jump to 1AM, otherwise reset.
		 * @param  date  (Date) the date to check
		 * @return  (Date) the corrected date
		 */
		_daylightSavingAdjust: function(date) {
			if (!date) {
				return null;
			}
			date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
			return date;
		},

		/* Set the date(s) directly. */
		_setDate: function(inst, date, noChange) {
			var clear = !date,
				origMonth = inst.selectedMonth,
				origYear = inst.selectedYear,
				newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));

			inst.selectedDay = inst.currentDay = newDate.getDate();
			inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
			inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
			if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
				this._notifyChange(inst);
			}
			this._adjustInstDate(inst);
			if (inst.input) {
				inst.input.val(clear ? "" : this._formatDate(inst));
			}
		},

		/* Retrieve the date(s) directly. */
		_getDate: function(inst) {
			var startDate = (!inst.currentYear || (inst.input && inst.input.val() === "") ? null :
				this._daylightSavingAdjust(new Date(
				inst.currentYear, inst.currentMonth, inst.currentDay)));
				return startDate;
		},

		/* Attach the onxxx handlers.  These are declared statically so
		 * they work with static code transformers like Caja.
		 */
		_attachHandlers: function(inst) {
			var stepMonths = this._get(inst, "stepMonths"),
				id = "#" + inst.id.replace( /\\\\/g, "\\" );
			inst.dpDiv.find("[data-handler]").map(function () {
				var handler = {
					prev: function () {
						$.datepicker._adjustDate(id, -stepMonths, "M");
					},
					next: function () {
						$.datepicker._adjustDate(id, +stepMonths, "M");
					},
					hide: function () {
						$.datepicker._hideDatepicker();
					},
					today: function () {
						$.datepicker._gotoToday(id);
					},
					selectDay: function () {
						$.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
						return false;
					},
					selectMonth: function () {
						$.datepicker._selectMonthYear(id, this, "M");
						return false;
					},
					selectYear: function () {
						$.datepicker._selectMonthYear(id, this, "Y");
						return false;
					}
				};
				$(this).bind(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
			});
		},

		/* Generate the HTML for the current state of the date picker. */
		_generateHTML: function(inst) {
			var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
				controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
				monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
				selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,
				cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
				printDate, dRow, tbody, daySettings, otherMonth, unselectable,
				tempDate = new Date(),
				today = this._daylightSavingAdjust(
					new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), // clear time
				isRTL = this._get(inst, "isRTL"),
				showButtonPanel = this._get(inst, "showButtonPanel"),
				hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"),
				navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"),
				numMonths = this._getNumberOfMonths(inst),
				showCurrentAtPos = this._get(inst, "showCurrentAtPos"),
				stepMonths = this._get(inst, "stepMonths"),
				isMultiMonth = (numMonths[0] !== 1 || numMonths[1] !== 1),
				currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :
					new Date(inst.currentYear, inst.currentMonth, inst.currentDay))),
				minDate = this._getMinMaxDate(inst, "min"),
				maxDate = this._getMinMaxDate(inst, "max"),
				drawMonth = inst.drawMonth - showCurrentAtPos,
				drawYear = inst.drawYear;

			if (drawMonth < 0) {
				drawMonth += 12;
				drawYear--;
			}
			if (maxDate) {
				maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
					maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
				maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
				while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
					drawMonth--;
					if (drawMonth < 0) {
						drawMonth = 11;
						drawYear--;
					}
				}
			}
			inst.drawMonth = drawMonth;
			inst.drawYear = drawYear;

			prevText = this._get(inst, "prevText");
			prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
				this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
				this._getFormatConfig(inst)));

			prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
				"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" +
				" title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" :
				(hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+ prevText +"'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>"));

			nextText = this._get(inst, "nextText");
			nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
				this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
				this._getFormatConfig(inst)));

			next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
				"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" +
				" title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" :
				(hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+ nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>"));

			currentText = this._get(inst, "currentText");
			gotoDate = (this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today);
			currentText = (!navigationAsDateFormat ? currentText :
				this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));

			controls = (!inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" +
				this._get(inst, "closeText") + "</button>" : "");

			buttonPanel = (showButtonPanel) ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") +
				(this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" +
				">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";

			firstDay = parseInt(this._get(inst, "firstDay"),10);
			firstDay = (isNaN(firstDay) ? 0 : firstDay);

			showWeek = this._get(inst, "showWeek");
			dayNames = this._get(inst, "dayNames");
			dayNamesMin = this._get(inst, "dayNamesMin");
			monthNames = this._get(inst, "monthNames");
			monthNamesShort = this._get(inst, "monthNamesShort");
			beforeShowDay = this._get(inst, "beforeShowDay");
			showOtherMonths = this._get(inst, "showOtherMonths");
			selectOtherMonths = this._get(inst, "selectOtherMonths");
			defaultDate = this._getDefaultDate(inst);
			html = "";
			dow;
			for (row = 0; row < numMonths[0]; row++) {
				group = "";
				this.maxRows = 4;
				for (col = 0; col < numMonths[1]; col++) {
					selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
					cornerClass = " ui-corner-all";
					calender = "";
					if (isMultiMonth) {
						calender += "<div class='ui-datepicker-group";
						if (numMonths[1] > 1) {
							switch (col) {
								case 0: calender += " ui-datepicker-group-first";
									cornerClass = " ui-corner-" + (isRTL ? "right" : "left"); break;
								case numMonths[1]-1: calender += " ui-datepicker-group-last";
									cornerClass = " ui-corner-" + (isRTL ? "left" : "right"); break;
								default: calender += " ui-datepicker-group-middle"; cornerClass = ""; break;
							}
						}
						calender += "'>";
					}
					calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +
						(/all|left/.test(cornerClass) && row === 0 ? (isRTL ? next : prev) : "") +
						(/all|right/.test(cornerClass) && row === 0 ? (isRTL ? prev : next) : "") +
						this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
						row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
						"</div><table class='ui-datepicker-calendar'><thead>" +
						"<tr>";
					thead = (showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "");
					for (dow = 0; dow < 7; dow++) { // days of the week
						day = (dow + firstDay) % 7;
						thead += "<th" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" +
							"<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
					}
					calender += thead + "</tr></thead><tbody>";
					daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
					if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
						inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
					}
					leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
					curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
					numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
					this.maxRows = numRows;
					printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
					for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows
						calender += "<tr>";
						tbody = (!showWeek ? "" : "<td class='ui-datepicker-week-col'>" +
							this._get(inst, "calculateWeek")(printDate) + "</td>");
						for (dow = 0; dow < 7; dow++) { // create date picker days
							daySettings = (beforeShowDay ?
								beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, ""]);
							otherMonth = (printDate.getMonth() !== drawMonth);
							unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||
								(minDate && printDate < minDate) || (maxDate && printDate > maxDate);
							tbody += "<td class='" +
								((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + // highlight weekends
								(otherMonth ? " ui-datepicker-other-month" : "") + // highlight days from other months
								((printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent) || // user pressed key
								(defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime()) ?
								// or defaultDate is current printedDate and defaultDate is selectedDate
								" " + this._dayOverClass : "") + // highlight selected day
								(unselectable ? " " + this._unselectableClass + " ui-state-disabled": "") +  // highlight unselectable days
								(otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + // highlight custom dates
								(printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + // highlight selected day
								(printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + // highlight today (if different)
								((!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + // cell title
								(unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + // actions
								(otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
								(unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
								(printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") +
								(printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + // highlight selected day
								(otherMonth ? " ui-priority-secondary" : "") + // distinguish dates from other months
								"' href='#'>" + printDate.getDate() + "</a>")) + "</td>"; // display selectable date
							printDate.setDate(printDate.getDate() + 1);
							printDate = this._daylightSavingAdjust(printDate);
						}
						calender += tbody + "</tr>";
					}
					drawMonth++;
					if (drawMonth > 11) {
						drawMonth = 0;
						drawYear++;
					}
					calender += "</tbody></table>" + (isMultiMonth ? "</div>" +
								((numMonths[0] > 0 && col === numMonths[1]-1) ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
					group += calender;
				}
				html += group;
			}
			html += buttonPanel;
			inst._keyEvent = false;
			return html;
		},

		/* Generate the month and year header. */
		_generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate,
				secondary, monthNames, monthNamesShort) {

			var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
				changeMonth = this._get(inst, "changeMonth"),
				changeYear = this._get(inst, "changeYear"),
				showMonthAfterYear = this._get(inst, "showMonthAfterYear"),
				html = "<div class='ui-datepicker-title'>",
				monthHtml = "";

			// month selection
			if (secondary || !changeMonth) {
				monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>";
			} else {
				inMinYear = (minDate && minDate.getFullYear() === drawYear);
				inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);
				monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
				for ( month = 0; month < 12; month++) {
					if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
						monthHtml += "<option value='" + month + "'" +
							(month === drawMonth ? " selected='selected'" : "") +
							">" + monthNamesShort[month] + "</option>";
					}
				}
				monthHtml += "</select>";
			}

			if (!showMonthAfterYear) {
				html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "");
			}

			// year selection
			if ( !inst.yearshtml ) {
				inst.yearshtml = "";
				if (secondary || !changeYear) {
					html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
				} else {
					// determine range of years to display
					years = this._get(inst, "yearRange").split(":");
					thisYear = new Date().getFullYear();
					determineYear = function(value) {
						var year = (value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) :
							(value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) :
							parseInt(value, 10)));
						return (isNaN(year) ? thisYear : year);
					};
					year = determineYear(years[0]);
					endYear = Math.max(year, determineYear(years[1] || ""));
					year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
					endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
					inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
					for (; year <= endYear; year++) {
						inst.yearshtml += "<option value='" + year + "'" +
							(year === drawYear ? " selected='selected'" : "") +
							">" + year + "</option>";
					}
					inst.yearshtml += "</select>";

					html += inst.yearshtml;
					inst.yearshtml = null;
				}
			}

			html += this._get(inst, "yearSuffix");
			if (showMonthAfterYear) {
				html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml;
			}
			html += "</div>"; // Close datepicker_header
			return html;
		},

		/* Adjust one of the date sub-fields. */
		_adjustInstDate: function(inst, offset, period) {
			var year = inst.drawYear + (period === "Y" ? offset : 0),
				month = inst.drawMonth + (period === "M" ? offset : 0),
				day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === "D" ? offset : 0),
				date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));

			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
			if (period === "M" || period === "Y") {
				this._notifyChange(inst);
			}
		},

		/* Ensure a date is within any min/max bounds. */
		_restrictMinMax: function(inst, date) {
			var minDate = this._getMinMaxDate(inst, "min"),
				maxDate = this._getMinMaxDate(inst, "max"),
				newDate = (minDate && date < minDate ? minDate : date);
			return (maxDate && newDate > maxDate ? maxDate : newDate);
		},

		/* Notify change of month/year. */
		_notifyChange: function(inst) {
			var onChange = this._get(inst, "onChangeMonthYear");
			if (onChange) {
				onChange.apply((inst.input ? inst.input[0] : null),
					[inst.selectedYear, inst.selectedMonth + 1, inst]);
			}
		},

		/* Determine the number of months to show. */
		_getNumberOfMonths: function(inst) {
			var numMonths = this._get(inst, "numberOfMonths");
			return (numMonths == null ? [1, 1] : (typeof numMonths === "number" ? [1, numMonths] : numMonths));
		},

		/* Determine the current maximum date - ensure no time components are set. */
		_getMinMaxDate: function(inst, minMax) {
			return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
		},

		/* Find the number of days in a given month. */
		_getDaysInMonth: function(year, month) {
			return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
		},

		/* Find the day of the week of the first of a month. */
		_getFirstDayOfMonth: function(year, month) {
			return new Date(year, month, 1).getDay();
		},

		/* Determines if we should allow a "next/prev" month display change. */
		_canAdjustMonth: function(inst, offset, curYear, curMonth) {
			var numMonths = this._getNumberOfMonths(inst),
				date = this._daylightSavingAdjust(new Date(curYear,
				curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));

			if (offset < 0) {
				date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
			}
			return this._isInRange(inst, date);
		},

		/* Is the given date in the accepted range? */
		_isInRange: function(inst, date) {
			var yearSplit, currentYear,
				minDate = this._getMinMaxDate(inst, "min"),
				maxDate = this._getMinMaxDate(inst, "max"),
				minYear = null,
				maxYear = null,
				years = this._get(inst, "yearRange");
				if (years){
					yearSplit = years.split(":");
					currentYear = new Date().getFullYear();
					minYear = parseInt(yearSplit[0], 10);
					maxYear = parseInt(yearSplit[1], 10);
					if ( yearSplit[0].match(/[+\-].*/) ) {
						minYear += currentYear;
					}
					if ( yearSplit[1].match(/[+\-].*/) ) {
						maxYear += currentYear;
					}
				}

			return ((!minDate || date.getTime() >= minDate.getTime()) &&
				(!maxDate || date.getTime() <= maxDate.getTime()) &&
				(!minYear || date.getFullYear() >= minYear) &&
				(!maxYear || date.getFullYear() <= maxYear));
		},

		/* Provide the configuration settings for formatting/parsing. */
		_getFormatConfig: function(inst) {
			var shortYearCutoff = this._get(inst, "shortYearCutoff");
			shortYearCutoff = (typeof shortYearCutoff !== "string" ? shortYearCutoff :
				new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
			return {shortYearCutoff: shortYearCutoff,
				dayNamesShort: this._get(inst, "dayNamesShort"), dayNames: this._get(inst, "dayNames"),
				monthNamesShort: this._get(inst, "monthNamesShort"), monthNames: this._get(inst, "monthNames")};
		},

		/* Format the given date for display. */
		_formatDate: function(inst, day, month, year) {
			if (!day) {
				inst.currentDay = inst.selectedDay;
				inst.currentMonth = inst.selectedMonth;
				inst.currentYear = inst.selectedYear;
			}
			var date = (day ? (typeof day === "object" ? day :
				this._daylightSavingAdjust(new Date(year, month, day))) :
				this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
			return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
		}
	});

	/*
	 * Bind hover events for datepicker elements.
	 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
	 * Global instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
	 */
	function bindHover(dpDiv) {
		var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
		return dpDiv.delegate(selector, "mouseout", function() {
				$(this).removeClass("ui-state-hover");
				if (this.className.indexOf("ui-datepicker-prev") !== -1) {
					$(this).removeClass("ui-datepicker-prev-hover");
				}
				if (this.className.indexOf("ui-datepicker-next") !== -1) {
					$(this).removeClass("ui-datepicker-next-hover");
				}
			})
			.delegate(selector, "mouseover", function(){
				if (!$.datepicker._isDisabledDatepicker( instActive.inline ? dpDiv.parent()[0] : instActive.input[0])) {
					$(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
					$(this).addClass("ui-state-hover");
					if (this.className.indexOf("ui-datepicker-prev") !== -1) {
						$(this).addClass("ui-datepicker-prev-hover");
					}
					if (this.className.indexOf("ui-datepicker-next") !== -1) {
						$(this).addClass("ui-datepicker-next-hover");
					}
				}
			});
	}

	/* jQuery extend now ignores nulls! */
	function extendRemove(target, props) {
		$.extend(target, props);
		for (var name in props) {
			if (props[name] == null) {
				target[name] = props[name];
			}
		}
		return target;
	}

	/* Invoke the datepicker functionality.
	   @param  options  string - a command, optionally followed by additional parameters or
						Object - settings for attaching new datepicker functionality
	   @return  jQuery object */
	$.fn.datepicker = function(options){

		/* Verify an empty collection wasn't passed - Fixes #6976 */
		if ( !this.length ) {
			return this;
		}

		/* Initialise the date picker. */
		if (!$.datepicker.initialized) {
			$(document).mousedown($.datepicker._checkExternalClick);
			$.datepicker.initialized = true;
		}

		/* Append datepicker main container to body if not exist. */
		if ($("#"+$.datepicker._mainDivId).length === 0) {
			$("body").append($.datepicker.dpDiv);
		}

		var otherArgs = Array.prototype.slice.call(arguments, 1);
		if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "widget")) {
			return $.datepicker["_" + options + "Datepicker"].
				apply($.datepicker, [this[0]].concat(otherArgs));
		}
		if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") {
			return $.datepicker["_" + options + "Datepicker"].
				apply($.datepicker, [this[0]].concat(otherArgs));
		}
		return this.each(function() {
			typeof options === "string" ?
				$.datepicker["_" + options + "Datepicker"].
					apply($.datepicker, [this].concat(otherArgs)) :
				$.datepicker._attachDatepicker(this, options);
		});
	};

	$.datepicker = new Datepicker(); // singleton instance
	$.datepicker.initialized = false;
	$.datepicker.uuid = new Date().getTime();
	$.datepicker.version = "1.10.3";

	})(jQuery);

	(function( $, undefined ) {

	var sizeRelatedOptions = {
			buttons: true,
			height: true,
			maxHeight: true,
			maxWidth: true,
			minHeight: true,
			minWidth: true,
			width: true
		},
		resizableRelatedOptions = {
			maxHeight: true,
			maxWidth: true,
			minHeight: true,
			minWidth: true
		};

	$.widget( "ui.dialog", {
		version: "1.10.3",
		options: {
			appendTo: "body",
			autoOpen: true,
			buttons: [],
			closeOnEscape: true,
			closeText: "close",
			dialogClass: "",
			draggable: true,
			hide: null,
			height: "auto",
			maxHeight: null,
			maxWidth: null,
			minHeight: 150,
			minWidth: 150,
			modal: false,
			position: {
				my: "center",
				at: "center",
				of: window,
				collision: "fit",
				// Ensure the titlebar is always visible
				using: function( pos ) {
					var topOffset = $( this ).css( pos ).offset().top;
					if ( topOffset < 0 ) {
						$( this ).css( "top", pos.top - topOffset );
					}
				}
			},
			resizable: true,
			show: null,
			title: null,
			width: 300,

			// callbacks
			beforeClose: null,
			close: null,
			drag: null,
			dragStart: null,
			dragStop: null,
			focus: null,
			open: null,
			resize: null,
			resizeStart: null,
			resizeStop: null
		},

		_create: function() {
			this.originalCss = {
				display: this.element[0].style.display,
				width: this.element[0].style.width,
				minHeight: this.element[0].style.minHeight,
				maxHeight: this.element[0].style.maxHeight,
				height: this.element[0].style.height
			};
			this.originalPosition = {
				parent: this.element.parent(),
				index: this.element.parent().children().index( this.element )
			};
			this.originalTitle = this.element.attr("title");
			this.options.title = this.options.title || this.originalTitle;

			this._createWrapper();

			this.element
				.show()
				.removeAttr("title")
				.addClass("ui-dialog-content ui-widget-content")
				.appendTo( this.uiDialog );

			this._createTitlebar();
			this._createButtonPane();

			if ( this.options.draggable && $.fn.draggable ) {
				this._makeDraggable();
			}
			if ( this.options.resizable && $.fn.resizable ) {
				this._makeResizable();
			}

			this._isOpen = false;
		},

		_init: function() {
			if ( this.options.autoOpen ) {
				this.open();
			}
		},

		_appendTo: function() {
			var element = this.options.appendTo;
			if ( element && (element.jquery || element.nodeType) ) {
				return $( element );
			}
			return this.document.find( element || "body" ).eq( 0 );
		},

		_destroy: function() {
			var next,
				originalPosition = this.originalPosition;

			this._destroyOverlay();

			this.element
				.removeUniqueId()
				.removeClass("ui-dialog-content ui-widget-content")
				.css( this.originalCss )
				// Without detaching first, the following becomes really slow
				.detach();

			this.uiDialog.stop( true, true ).remove();

			if ( this.originalTitle ) {
				this.element.attr( "title", this.originalTitle );
			}

			next = originalPosition.parent.children().eq( originalPosition.index );
			// Don't try to place the dialog next to itself (#8613)
			if ( next.length && next[0] !== this.element[0] ) {
				next.before( this.element );
			} else {
				originalPosition.parent.append( this.element );
			}
		},

		widget: function() {
			return this.uiDialog;
		},

		disable: $.noop,
		enable: $.noop,

		close: function( event ) {
			var that = this;

			if ( !this._isOpen || this._trigger( "beforeClose", event ) === false ) {
				return;
			}

			this._isOpen = false;
			this._destroyOverlay();

			if ( !this.opener.filter(":focusable").focus().length ) {
				// Hiding a focused element doesn't trigger blur in WebKit
				// so in case we have nothing to focus on, explicitly blur the active element
				// https://bugs.webkit.org/show_bug.cgi?id=47182
				$( this.document[0].activeElement ).blur();
			}

			this._hide( this.uiDialog, this.options.hide, function() {
				that._trigger( "close", event );
			});
		},

		isOpen: function() {
			return this._isOpen;
		},

		moveToTop: function() {
			this._moveToTop();
		},

		_moveToTop: function( event, silent ) {
			var moved = !!this.uiDialog.nextAll(":visible").insertBefore( this.uiDialog ).length;
			if ( moved && !silent ) {
				this._trigger( "focus", event );
			}
			return moved;
		},

		open: function() {
			var that = this;
			if ( this._isOpen ) {
				if ( this._moveToTop() ) {
					this._focusTabbable();
				}
				return;
			}

			this._isOpen = true;
			this.opener = $( this.document[0].activeElement );

			this._size();
			this._position();
			this._createOverlay();
			this._moveToTop( null, true );
			this._show( this.uiDialog, this.options.show, function() {
				that._focusTabbable();
				that._trigger("focus");
			});

			this._trigger("open");
		},

		_focusTabbable: function() {
			// Set focus to the first match:
			// 1. First element inside the dialog matching [autofocus]
			// 2. Tabbable element inside the content element
			// 3. Tabbable element inside the buttonpane
			// 4. The close button
			// 5. The dialog itself
			var hasFocus = this.element.find("[autofocus]");
			if ( !hasFocus.length ) {
				hasFocus = this.element.find(":tabbable");
			}
			if ( !hasFocus.length ) {
				hasFocus = this.uiDialogButtonPane.find(":tabbable");
			}
			if ( !hasFocus.length ) {
				hasFocus = this.uiDialogTitlebarClose.filter(":tabbable");
			}
			if ( !hasFocus.length ) {
				hasFocus = this.uiDialog;
			}
			hasFocus.eq( 0 ).focus();
		},

		_keepFocus: function( event ) {
			function checkFocus() {
				var activeElement = this.document[0].activeElement,
					isActive = this.uiDialog[0] === activeElement ||
						$.contains( this.uiDialog[0], activeElement );
				if ( !isActive ) {
					this._focusTabbable();
				}
			}
			event.preventDefault();
			checkFocus.call( this );
			// support: IE
			// IE <= 8 doesn't prevent moving focus even with event.preventDefault()
			// so we check again later
			this._delay( checkFocus );
		},

		_createWrapper: function() {
			this.uiDialog = $("<div>")
				.addClass( "ui-dialog ui-widget ui-widget-content ui-corner-all ui-front " +
					this.options.dialogClass )
				.hide()
				.attr({
					// Setting tabIndex makes the div focusable
					tabIndex: -1,
					role: "dialog"
				})
				.appendTo( this._appendTo() );

			this._on( this.uiDialog, {
				keydown: function( event ) {
					if ( this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&
							event.keyCode === $.ui.keyCode.ESCAPE ) {
						event.preventDefault();
						this.close( event );
						return;
					}

					// prevent tabbing out of dialogs
					if ( event.keyCode !== $.ui.keyCode.TAB ) {
						return;
					}
					var tabbables = this.uiDialog.find(":tabbable"),
						first = tabbables.filter(":first"),
						last  = tabbables.filter(":last");

					if ( ( event.target === last[0] || event.target === this.uiDialog[0] ) && !event.shiftKey ) {
						first.focus( 1 );
						event.preventDefault();
					} else if ( ( event.target === first[0] || event.target === this.uiDialog[0] ) && event.shiftKey ) {
						last.focus( 1 );
						event.preventDefault();
					}
				},
				mousedown: function( event ) {
					if ( this._moveToTop( event ) ) {
						this._focusTabbable();
					}
				}
			});

			// We assume that any existing aria-describedby attribute means
			// that the dialog content is marked up properly
			// otherwise we brute force the content as the description
			if ( !this.element.find("[aria-describedby]").length ) {
				this.uiDialog.attr({
					"aria-describedby": this.element.uniqueId().attr("id")
				});
			}
		},

		_createTitlebar: function() {
			var uiDialogTitle;

			this.uiDialogTitlebar = $("<div>")
				.addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix")
				.prependTo( this.uiDialog );
			this._on( this.uiDialogTitlebar, {
				mousedown: function( event ) {
					// Don't prevent click on close button (#8838)
					// Focusing a dialog that is partially scrolled out of view
					// causes the browser to scroll it into view, preventing the click event
					if ( !$( event.target ).closest(".ui-dialog-titlebar-close") ) {
						// Dialog isn't getting focus when dragging (#8063)
						this.uiDialog.focus();
					}
				}
			});

			this.uiDialogTitlebarClose = $("<button></button>")
				.button({
					label: this.options.closeText,
					icons: {
						primary: "ui-icon-closethick"
					},
					text: false
				})
				.addClass("ui-dialog-titlebar-close")
				.appendTo( this.uiDialogTitlebar );
			this._on( this.uiDialogTitlebarClose, {
				click: function( event ) {
					event.preventDefault();
					this.close( event );
				}
			});

			uiDialogTitle = $("<span>")
				.uniqueId()
				.addClass("ui-dialog-title")
				.prependTo( this.uiDialogTitlebar );
			this._title( uiDialogTitle );

			this.uiDialog.attr({
				"aria-labelledby": uiDialogTitle.attr("id")
			});
		},

		_title: function( title ) {
			if ( !this.options.title ) {
				title.html("&#160;");
			}
			title.text( this.options.title );
		},

		_createButtonPane: function() {
			this.uiDialogButtonPane = $("<div>")
				.addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix");

			this.uiButtonSet = $("<div>")
				.addClass("ui-dialog-buttonset")
				.appendTo( this.uiDialogButtonPane );

			this._createButtons();
		},

		_createButtons: function() {
			var that = this,
				buttons = this.options.buttons;

			// if we already have a button pane, remove it
			this.uiDialogButtonPane.remove();
			this.uiButtonSet.empty();

			if ( $.isEmptyObject( buttons ) || ($.isArray( buttons ) && !buttons.length) ) {
				this.uiDialog.removeClass("ui-dialog-buttons");
				return;
			}

			$.each( buttons, function( name, props ) {
				var click, buttonOptions;
				props = $.isFunction( props ) ?
					{ click: props, text: name } :
					props;
				// Default to a non-submitting button
				props = $.extend( { type: "button" }, props );
				// Change the context for the click callback to be the main element
				click = props.click;
				props.click = function() {
					click.apply( that.element[0], arguments );
				};
				buttonOptions = {
					icons: props.icons,
					text: props.showText
				};
				delete props.icons;
				delete props.showText;
				$( "<button></button>", props )
					.button( buttonOptions )
					.appendTo( that.uiButtonSet );
			});
			this.uiDialog.addClass("ui-dialog-buttons");
			this.uiDialogButtonPane.appendTo( this.uiDialog );
		},

		_makeDraggable: function() {
			var that = this,
				options = this.options;

			function filteredUi( ui ) {
				return {
					position: ui.position,
					offset: ui.offset
				};
			}

			this.uiDialog.draggable({
				cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
				handle: ".ui-dialog-titlebar",
				containment: "document",
				start: function( event, ui ) {
					$( this ).addClass("ui-dialog-dragging");
					that._blockFrames();
					that._trigger( "dragStart", event, filteredUi( ui ) );
				},
				drag: function( event, ui ) {
					that._trigger( "drag", event, filteredUi( ui ) );
				},
				stop: function( event, ui ) {
					options.position = [
						ui.position.left - that.document.scrollLeft(),
						ui.position.top - that.document.scrollTop()
					];
					$( this ).removeClass("ui-dialog-dragging");
					that._unblockFrames();
					that._trigger( "dragStop", event, filteredUi( ui ) );
				}
			});
		},

		_makeResizable: function() {
			var that = this,
				options = this.options,
				handles = options.resizable,
				// .ui-resizable has position: relative defined in the stylesheet
				// but dialogs have to use absolute or fixed positioning
				position = this.uiDialog.css("position"),
				resizeHandles = typeof handles === "string" ?
					handles	:
					"n,e,s,w,se,sw,ne,nw";

			function filteredUi( ui ) {
				return {
					originalPosition: ui.originalPosition,
					originalSize: ui.originalSize,
					position: ui.position,
					size: ui.size
				};
			}

			this.uiDialog.resizable({
				cancel: ".ui-dialog-content",
				containment: "document",
				alsoResize: this.element,
				maxWidth: options.maxWidth,
				maxHeight: options.maxHeight,
				minWidth: options.minWidth,
				minHeight: this._minHeight(),
				handles: resizeHandles,
				start: function( event, ui ) {
					$( this ).addClass("ui-dialog-resizing");
					that._blockFrames();
					that._trigger( "resizeStart", event, filteredUi( ui ) );
				},
				resize: function( event, ui ) {
					that._trigger( "resize", event, filteredUi( ui ) );
				},
				stop: function( event, ui ) {
					options.height = $( this ).height();
					options.width = $( this ).width();
					$( this ).removeClass("ui-dialog-resizing");
					that._unblockFrames();
					that._trigger( "resizeStop", event, filteredUi( ui ) );
				}
			})
			.css( "position", position );
		},

		_minHeight: function() {
			var options = this.options;

			return options.height === "auto" ?
				options.minHeight :
				Math.min( options.minHeight, options.height );
		},

		_position: function() {
			// Need to show the dialog to get the actual offset in the position plugin
			var isVisible = this.uiDialog.is(":visible");
			if ( !isVisible ) {
				this.uiDialog.show();
			}
			this.uiDialog.position( this.options.position );
			if ( !isVisible ) {
				this.uiDialog.hide();
			}
		},

		_setOptions: function( options ) {
			var that = this,
				resize = false,
				resizableOptions = {};

			$.each( options, function( key, value ) {
				that._setOption( key, value );

				if ( key in sizeRelatedOptions ) {
					resize = true;
				}
				if ( key in resizableRelatedOptions ) {
					resizableOptions[ key ] = value;
				}
			});

			if ( resize ) {
				this._size();
				this._position();
			}
			if ( this.uiDialog.is(":data(ui-resizable)") ) {
				this.uiDialog.resizable( "option", resizableOptions );
			}
		},

		_setOption: function( key, value ) {
			/*jshint maxcomplexity:15*/
			var isDraggable, isResizable,
				uiDialog = this.uiDialog;

			if ( key === "dialogClass" ) {
				uiDialog
					.removeClass( this.options.dialogClass )
					.addClass( value );
			}

			if ( key === "disabled" ) {
				return;
			}

			this._super( key, value );

			if ( key === "appendTo" ) {
				this.uiDialog.appendTo( this._appendTo() );
			}

			if ( key === "buttons" ) {
				this._createButtons();
			}

			if ( key === "closeText" ) {
				this.uiDialogTitlebarClose.button({
					// Ensure that we always pass a string
					label: "" + value
				});
			}

			if ( key === "draggable" ) {
				isDraggable = uiDialog.is(":data(ui-draggable)");
				if ( isDraggable && !value ) {
					uiDialog.draggable("destroy");
				}

				if ( !isDraggable && value ) {
					this._makeDraggable();
				}
			}

			if ( key === "position" ) {
				this._position();
			}

			if ( key === "resizable" ) {
				// currently resizable, becoming non-resizable
				isResizable = uiDialog.is(":data(ui-resizable)");
				if ( isResizable && !value ) {
					uiDialog.resizable("destroy");
				}

				// currently resizable, changing handles
				if ( isResizable && typeof value === "string" ) {
					uiDialog.resizable( "option", "handles", value );
				}

				// currently non-resizable, becoming resizable
				if ( !isResizable && value !== false ) {
					this._makeResizable();
				}
			}

			if ( key === "title" ) {
				this._title( this.uiDialogTitlebar.find(".ui-dialog-title") );
			}
		},

		_size: function() {
			// If the user has resized the dialog, the .ui-dialog and .ui-dialog-content
			// divs will both have width and height set, so we need to reset them
			var nonContentHeight, minContentHeight, maxContentHeight,
				options = this.options;

			// Reset content sizing
			this.element.show().css({
				width: "auto",
				minHeight: 0,
				maxHeight: "none",
				height: 0
			});

			if ( options.minWidth > options.width ) {
				options.width = options.minWidth;
			}

			// reset wrapper sizing
			// determine the height of all the non-content elements
			nonContentHeight = this.uiDialog.css({
					height: "auto",
					width: options.width
				})
				.outerHeight();
			minContentHeight = Math.max( 0, options.minHeight - nonContentHeight );
			maxContentHeight = typeof options.maxHeight === "number" ?
				Math.max( 0, options.maxHeight - nonContentHeight ) :
				"none";

			if ( options.height === "auto" ) {
				this.element.css({
					minHeight: minContentHeight,
					maxHeight: maxContentHeight,
					height: "auto"
				});
			} else {
				this.element.height( Math.max( 0, options.height - nonContentHeight ) );
			}

			if (this.uiDialog.is(":data(ui-resizable)") ) {
				this.uiDialog.resizable( "option", "minHeight", this._minHeight() );
			}
		},

		_blockFrames: function() {
			this.iframeBlocks = this.document.find( "iframe" ).map(function() {
				var iframe = $( this );

				return $( "<div>" )
					.css({
						position: "absolute",
						width: iframe.outerWidth(),
						height: iframe.outerHeight()
					})
					.appendTo( iframe.parent() )
					.offset( iframe.offset() )[0];
			});
		},

		_unblockFrames: function() {
			if ( this.iframeBlocks ) {
				this.iframeBlocks.remove();
				delete this.iframeBlocks;
			}
		},

		_allowInteraction: function( event ) {
			if ( $( event.target ).closest(".ui-dialog").length ) {
				return true;
			}

			// TODO: Remove hack when datepicker implements
			// the .ui-front logic (#8989)
			return !!$( event.target ).closest(".ui-datepicker").length;
		},

		_createOverlay: function() {
			if ( !this.options.modal ) {
				return;
			}

			var that = this,
				widgetFullName = this.widgetFullName;
			if ( !$.ui.dialog.overlayInstances ) {
				// Prevent use of anchors and inputs.
				// We use a delay in case the overlay is created from an
				// event that we're going to be cancelling. (#2804)
				this._delay(function() {
					// Handle .dialog().dialog("close") (#4065)
					if ( $.ui.dialog.overlayInstances ) {
						this.document.bind( "focusin.dialog", function( event ) {
							if ( !that._allowInteraction( event ) ) {
								event.preventDefault();
								$(".ui-dialog:visible:last .ui-dialog-content")
									.data( widgetFullName )._focusTabbable();
							}
						});
					}
				});
			}

			this.overlay = $("<div>")
				.addClass("ui-widget-overlay ui-front")
				.appendTo( this._appendTo() );
			this._on( this.overlay, {
				mousedown: "_keepFocus"
			});
			$.ui.dialog.overlayInstances++;
		},

		_destroyOverlay: function() {
			if ( !this.options.modal ) {
				return;
			}

			if ( this.overlay ) {
				$.ui.dialog.overlayInstances--;

				if ( !$.ui.dialog.overlayInstances ) {
					this.document.unbind( "focusin.dialog" );
				}
				this.overlay.remove();
				this.overlay = null;
			}
		}
	});

	$.ui.dialog.overlayInstances = 0;

	// DEPRECATED
	if ( $.uiBackCompat !== false ) {
		// position option with array notation
		// just override with old implementation
		$.widget( "ui.dialog", $.ui.dialog, {
			_position: function() {
				var position = this.options.position,
					myAt = [],
					offset = [ 0, 0 ],
					isVisible;

				if ( position ) {
					if ( typeof position === "string" || (typeof position === "object" && "0" in position ) ) {
						myAt = position.split ? position.split(" ") : [ position[0], position[1] ];
						if ( myAt.length === 1 ) {
							myAt[1] = myAt[0];
						}

						$.each( [ "left", "top" ], function( i, offsetPosition ) {
							if ( +myAt[ i ] === myAt[ i ] ) {
								offset[ i ] = myAt[ i ];
								myAt[ i ] = offsetPosition;
							}
						});

						position = {
							my: myAt[0] + (offset[0] < 0 ? offset[0] : "+" + offset[0]) + " " +
								myAt[1] + (offset[1] < 0 ? offset[1] : "+" + offset[1]),
							at: myAt.join(" ")
						};
					}

					position = $.extend( {}, $.ui.dialog.prototype.options.position, position );
				} else {
					position = $.ui.dialog.prototype.options.position;
				}

				// need to show the dialog to get the actual offset in the position plugin
				isVisible = this.uiDialog.is(":visible");
				if ( !isVisible ) {
					this.uiDialog.show();
				}
				this.uiDialog.position( position );
				if ( !isVisible ) {
					this.uiDialog.hide();
				}
			}
		});
	}

	}( jQuery ) );

	(function( $, undefined ) {

	var rvertical = /up|down|vertical/,
		rpositivemotion = /up|left|vertical|horizontal/;

	$.effects.effect.blind = function( o, done ) {
		// Create element
		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
			mode = $.effects.setMode( el, o.mode || "hide" ),
			direction = o.direction || "up",
			vertical = rvertical.test( direction ),
			ref = vertical ? "height" : "width",
			ref2 = vertical ? "top" : "left",
			motion = rpositivemotion.test( direction ),
			animation = {},
			show = mode === "show",
			wrapper, distance, margin;

		// if already wrapped, the wrapper's properties are my property. #6245
		if ( el.parent().is( ".ui-effects-wrapper" ) ) {
			$.effects.save( el.parent(), props );
		} else {
			$.effects.save( el, props );
		}
		el.show();
		wrapper = $.effects.createWrapper( el ).css({
			overflow: "hidden"
		});

		distance = wrapper[ ref ]();
		margin = parseFloat( wrapper.css( ref2 ) ) || 0;

		animation[ ref ] = show ? distance : 0;
		if ( !motion ) {
			el
				.css( vertical ? "bottom" : "right", 0 )
				.css( vertical ? "top" : "left", "auto" )
				.css({ position: "absolute" });

			animation[ ref2 ] = show ? margin : distance + margin;
		}

		// start at 0 if we are showing
		if ( show ) {
			wrapper.css( ref, 0 );
			if ( ! motion ) {
				wrapper.css( ref2, margin + distance );
			}
		}

		// Animate
		wrapper.animate( animation, {
			duration: o.duration,
			easing: o.easing,
			queue: false,
			complete: function() {
				if ( mode === "hide" ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			}
		});

	};

	})(jQuery);

	(function( $, undefined ) {

	$.effects.effect.bounce = function( o, done ) {
		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "height", "width" ],

			// defaults:
			mode = $.effects.setMode( el, o.mode || "effect" ),
			hide = mode === "hide",
			show = mode === "show",
			direction = o.direction || "up",
			distance = o.distance,
			times = o.times || 5,

			// number of internal animations
			anims = times * 2 + ( show || hide ? 1 : 0 ),
			speed = o.duration / anims,
			easing = o.easing,

			// utility:
			ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
			motion = ( direction === "up" || direction === "left" ),
			i,
			upAnim,
			downAnim,

			// we will need to re-assemble the queue to stack our animations in place
			queue = el.queue(),
			queuelen = queue.length;

		// Avoid touching opacity to prevent clearType and PNG issues in IE
		if ( show || hide ) {
			props.push( "opacity" );
		}

		$.effects.save( el, props );
		el.show();
		$.effects.createWrapper( el ); // Create Wrapper

		// default distance for the BIGGEST bounce is the outer Distance / 3
		if ( !distance ) {
			distance = el[ ref === "top" ? "outerHeight" : "outerWidth" ]() / 3;
		}

		if ( show ) {
			downAnim = { opacity: 1 };
			downAnim[ ref ] = 0;

			// if we are showing, force opacity 0 and set the initial position
			// then do the "first" animation
			el.css( "opacity", 0 )
				.css( ref, motion ? -distance * 2 : distance * 2 )
				.animate( downAnim, speed, easing );
		}

		// start at the smallest distance if we are hiding
		if ( hide ) {
			distance = distance / Math.pow( 2, times - 1 );
		}

		downAnim = {};
		downAnim[ ref ] = 0;
		// Bounces up/down/left/right then back to 0 -- times * 2 animations happen here
		for ( i = 0; i < times; i++ ) {
			upAnim = {};
			upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

			el.animate( upAnim, speed, easing )
				.animate( downAnim, speed, easing );

			distance = hide ? distance * 2 : distance / 2;
		}

		// Last Bounce when Hiding
		if ( hide ) {
			upAnim = { opacity: 0 };
			upAnim[ ref ] = ( motion ? "-=" : "+=" ) + distance;

			el.animate( upAnim, speed, easing );
		}

		el.queue(function() {
			if ( hide ) {
				el.hide();
			}
			$.effects.restore( el, props );
			$.effects.removeWrapper( el );
			done();
		});

		// inject all the animations we just queued to be first in line (after "inprogress")
		if ( queuelen > 1) {
			queue.splice.apply( queue,
				[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
		}
		el.dequeue();

	};

	})(jQuery);

	(function( $, undefined ) {

	$.effects.effect.clip = function( o, done ) {
		// Create element
		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
			mode = $.effects.setMode( el, o.mode || "hide" ),
			show = mode === "show",
			direction = o.direction || "vertical",
			vert = direction === "vertical",
			size = vert ? "height" : "width",
			position = vert ? "top" : "left",
			animation = {},
			wrapper, animate, distance;

		// Save & Show
		$.effects.save( el, props );
		el.show();

		// Create Wrapper
		wrapper = $.effects.createWrapper( el ).css({
			overflow: "hidden"
		});
		animate = ( el[0].tagName === "IMG" ) ? wrapper : el;
		distance = animate[ size ]();

		// Shift
		if ( show ) {
			animate.css( size, 0 );
			animate.css( position, distance / 2 );
		}

		// Create Animation Object:
		animation[ size ] = show ? distance : 0;
		animation[ position ] = show ? 0 : distance / 2;

		// Animate
		animate.animate( animation, {
			queue: false,
			duration: o.duration,
			easing: o.easing,
			complete: function() {
				if ( !show ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			}
		});

	};

	})(jQuery);

	(function( $, undefined ) {

	$.effects.effect.drop = function( o, done ) {

		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "opacity", "height", "width" ],
			mode = $.effects.setMode( el, o.mode || "hide" ),
			show = mode === "show",
			direction = o.direction || "left",
			ref = ( direction === "up" || direction === "down" ) ? "top" : "left",
			motion = ( direction === "up" || direction === "left" ) ? "pos" : "neg",
			animation = {
				opacity: show ? 1 : 0
			},
			distance;

		// Adjust
		$.effects.save( el, props );
		el.show();
		$.effects.createWrapper( el );

		distance = o.distance || el[ ref === "top" ? "outerHeight": "outerWidth" ]( true ) / 2;

		if ( show ) {
			el
				.css( "opacity", 0 )
				.css( ref, motion === "pos" ? -distance : distance );
		}

		// Animation
		animation[ ref ] = ( show ?
			( motion === "pos" ? "+=" : "-=" ) :
			( motion === "pos" ? "-=" : "+=" ) ) +
			distance;

		// Animate
		el.animate( animation, {
			queue: false,
			duration: o.duration,
			easing: o.easing,
			complete: function() {
				if ( mode === "hide" ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			}
		});
	};

	})(jQuery);

	(function( $, undefined ) {

	$.effects.effect.explode = function( o, done ) {

		var rows = o.pieces ? Math.round( Math.sqrt( o.pieces ) ) : 3,
			cells = rows,
			el = $( this ),
			mode = $.effects.setMode( el, o.mode || "hide" ),
			show = mode === "show",

			// show and then visibility:hidden the element before calculating offset
			offset = el.show().css( "visibility", "hidden" ).offset(),

			// width and height of a piece
			width = Math.ceil( el.outerWidth() / cells ),
			height = Math.ceil( el.outerHeight() / rows ),
			pieces = [],

			// loop
			i, j, left, top, mx, my;

		// children animate complete:
		function childComplete() {
			pieces.push( this );
			if ( pieces.length === rows * cells ) {
				animComplete();
			}
		}

		// clone the element for each row and cell.
		for( i = 0; i < rows ; i++ ) { // ===>
			top = offset.top + i * height;
			my = i - ( rows - 1 ) / 2 ;

			for( j = 0; j < cells ; j++ ) { // |||
				left = offset.left + j * width;
				mx = j - ( cells - 1 ) / 2 ;

				// Create a clone of the now hidden main element that will be absolute positioned
				// within a wrapper div off the -left and -top equal to size of our pieces
				el
					.clone()
					.appendTo( "body" )
					.wrap( "<div></div>" )
					.css({
						position: "absolute",
						visibility: "visible",
						left: -j * width,
						top: -i * height
					})

				// select the wrapper - make it overflow: hidden and absolute positioned based on
				// where the original was located +left and +top equal to the size of pieces
					.parent()
					.addClass( "ui-effects-explode" )
					.css({
						position: "absolute",
						overflow: "hidden",
						width: width,
						height: height,
						left: left + ( show ? mx * width : 0 ),
						top: top + ( show ? my * height : 0 ),
						opacity: show ? 0 : 1
					}).animate({
						left: left + ( show ? 0 : mx * width ),
						top: top + ( show ? 0 : my * height ),
						opacity: show ? 1 : 0
					}, o.duration || 500, o.easing, childComplete );
			}
		}

		function animComplete() {
			el.css({
				visibility: "visible"
			});
			$( pieces ).remove();
			if ( !show ) {
				el.hide();
			}
			done();
		}
	};

	})(jQuery);

	(function( $, undefined ) {

	$.effects.effect.fade = function( o, done ) {
		var el = $( this ),
			mode = $.effects.setMode( el, o.mode || "toggle" );

		el.animate({
			opacity: mode
		}, {
			queue: false,
			duration: o.duration,
			easing: o.easing,
			complete: done
		});
	};

	})( jQuery );

	(function( $, undefined ) {

	$.effects.effect.fold = function( o, done ) {

		// Create element
		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
			mode = $.effects.setMode( el, o.mode || "hide" ),
			show = mode === "show",
			hide = mode === "hide",
			size = o.size || 15,
			percent = /([0-9]+)%/.exec( size ),
			horizFirst = !!o.horizFirst,
			widthFirst = show !== horizFirst,
			ref = widthFirst ? [ "width", "height" ] : [ "height", "width" ],
			duration = o.duration / 2,
			wrapper, distance,
			animation1 = {},
			animation2 = {};

		$.effects.save( el, props );
		el.show();

		// Create Wrapper
		wrapper = $.effects.createWrapper( el ).css({
			overflow: "hidden"
		});
		distance = widthFirst ?
			[ wrapper.width(), wrapper.height() ] :
			[ wrapper.height(), wrapper.width() ];

		if ( percent ) {
			size = parseInt( percent[ 1 ], 10 ) / 100 * distance[ hide ? 0 : 1 ];
		}
		if ( show ) {
			wrapper.css( horizFirst ? {
				height: 0,
				width: size
			} : {
				height: size,
				width: 0
			});
		}

		// Animation
		animation1[ ref[ 0 ] ] = show ? distance[ 0 ] : size;
		animation2[ ref[ 1 ] ] = show ? distance[ 1 ] : 0;

		// Animate
		wrapper
			.animate( animation1, duration, o.easing )
			.animate( animation2, duration, o.easing, function() {
				if ( hide ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			});

	};

	})(jQuery);

	(function( $, undefined ) {

	$.effects.effect.highlight = function( o, done ) {
		var elem = $( this ),
			props = [ "backgroundImage", "backgroundColor", "opacity" ],
			mode = $.effects.setMode( elem, o.mode || "show" ),
			animation = {
				backgroundColor: elem.css( "backgroundColor" )
			};

		if (mode === "hide") {
			animation.opacity = 0;
		}

		$.effects.save( elem, props );

		elem
			.show()
			.css({
				backgroundImage: "none",
				backgroundColor: o.color || "#ffff99"
			})
			.animate( animation, {
				queue: false,
				duration: o.duration,
				easing: o.easing,
				complete: function() {
					if ( mode === "hide" ) {
						elem.hide();
					}
					$.effects.restore( elem, props );
					done();
				}
			});
	};

	})(jQuery);

	(function( $, undefined ) {

	$.effects.effect.pulsate = function( o, done ) {
		var elem = $( this ),
			mode = $.effects.setMode( elem, o.mode || "show" ),
			show = mode === "show",
			hide = mode === "hide",
			showhide = ( show || mode === "hide" ),

			// showing or hiding leaves of the "last" animation
			anims = ( ( o.times || 5 ) * 2 ) + ( showhide ? 1 : 0 ),
			duration = o.duration / anims,
			animateTo = 0,
			queue = elem.queue(),
			queuelen = queue.length,
			i;

		if ( show || !elem.is(":visible")) {
			elem.css( "opacity", 0 ).show();
			animateTo = 1;
		}

		// anims - 1 opacity "toggles"
		for ( i = 1; i < anims; i++ ) {
			elem.animate({
				opacity: animateTo
			}, duration, o.easing );
			animateTo = 1 - animateTo;
		}

		elem.animate({
			opacity: animateTo
		}, duration, o.easing);

		elem.queue(function() {
			if ( hide ) {
				elem.hide();
			}
			done();
		});

		// We just queued up "anims" animations, we need to put them next in the queue
		if ( queuelen > 1 ) {
			queue.splice.apply( queue,
				[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
		}
		elem.dequeue();
	};

	})(jQuery);

	(function( $, undefined ) {

	$.effects.effect.puff = function( o, done ) {
		var elem = $( this ),
			mode = $.effects.setMode( elem, o.mode || "hide" ),
			hide = mode === "hide",
			percent = parseInt( o.percent, 10 ) || 150,
			factor = percent / 100,
			original = {
				height: elem.height(),
				width: elem.width(),
				outerHeight: elem.outerHeight(),
				outerWidth: elem.outerWidth()
			};

		$.extend( o, {
			effect: "scale",
			queue: false,
			fade: true,
			mode: mode,
			complete: done,
			percent: hide ? percent : 100,
			from: hide ?
				original :
				{
					height: original.height * factor,
					width: original.width * factor,
					outerHeight: original.outerHeight * factor,
					outerWidth: original.outerWidth * factor
				}
		});

		elem.effect( o );
	};

	$.effects.effect.scale = function( o, done ) {

		// Create element
		var el = $( this ),
			options = $.extend( true, {}, o ),
			mode = $.effects.setMode( el, o.mode || "effect" ),
			percent = parseInt( o.percent, 10 ) ||
				( parseInt( o.percent, 10 ) === 0 ? 0 : ( mode === "hide" ? 0 : 100 ) ),
			direction = o.direction || "both",
			origin = o.origin,
			original = {
				height: el.height(),
				width: el.width(),
				outerHeight: el.outerHeight(),
				outerWidth: el.outerWidth()
			},
			factor = {
				y: direction !== "horizontal" ? (percent / 100) : 1,
				x: direction !== "vertical" ? (percent / 100) : 1
			};

		// We are going to pass this effect to the size effect:
		options.effect = "size";
		options.queue = false;
		options.complete = done;

		// Set default origin and restore for show/hide
		if ( mode !== "effect" ) {
			options.origin = origin || ["middle","center"];
			options.restore = true;
		}

		options.from = o.from || ( mode === "show" ? {
			height: 0,
			width: 0,
			outerHeight: 0,
			outerWidth: 0
		} : original );
		options.to = {
			height: original.height * factor.y,
			width: original.width * factor.x,
			outerHeight: original.outerHeight * factor.y,
			outerWidth: original.outerWidth * factor.x
		};

		// Fade option to support puff
		if ( options.fade ) {
			if ( mode === "show" ) {
				options.from.opacity = 0;
				options.to.opacity = 1;
			}
			if ( mode === "hide" ) {
				options.from.opacity = 1;
				options.to.opacity = 0;
			}
		}

		// Animate
		el.effect( options );

	};

	$.effects.effect.size = function( o, done ) {

		// Create element
		var original, baseline, factor,
			el = $( this ),
			props0 = [ "position", "top", "bottom", "left", "right", "width", "height", "overflow", "opacity" ],

			// Always restore
			props1 = [ "position", "top", "bottom", "left", "right", "overflow", "opacity" ],

			// Copy for children
			props2 = [ "width", "height", "overflow" ],
			cProps = [ "fontSize" ],
			vProps = [ "borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom" ],
			hProps = [ "borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight" ],

			// Set options
			mode = $.effects.setMode( el, o.mode || "effect" ),
			restore = o.restore || mode !== "effect",
			scale = o.scale || "both",
			origin = o.origin || [ "middle", "center" ],
			position = el.css( "position" ),
			props = restore ? props0 : props1,
			zero = {
				height: 0,
				width: 0,
				outerHeight: 0,
				outerWidth: 0
			};

		if ( mode === "show" ) {
			el.show();
		}
		original = {
			height: el.height(),
			width: el.width(),
			outerHeight: el.outerHeight(),
			outerWidth: el.outerWidth()
		};

		if ( o.mode === "toggle" && mode === "show" ) {
			el.from = o.to || zero;
			el.to = o.from || original;
		} else {
			el.from = o.from || ( mode === "show" ? zero : original );
			el.to = o.to || ( mode === "hide" ? zero : original );
		}

		// Set scaling factor
		factor = {
			from: {
				y: el.from.height / original.height,
				x: el.from.width / original.width
			},
			to: {
				y: el.to.height / original.height,
				x: el.to.width / original.width
			}
		};

		// Scale the css box
		if ( scale === "box" || scale === "both" ) {

			// Vertical props scaling
			if ( factor.from.y !== factor.to.y ) {
				props = props.concat( vProps );
				el.from = $.effects.setTransition( el, vProps, factor.from.y, el.from );
				el.to = $.effects.setTransition( el, vProps, factor.to.y, el.to );
			}

			// Horizontal props scaling
			if ( factor.from.x !== factor.to.x ) {
				props = props.concat( hProps );
				el.from = $.effects.setTransition( el, hProps, factor.from.x, el.from );
				el.to = $.effects.setTransition( el, hProps, factor.to.x, el.to );
			}
		}

		// Scale the content
		if ( scale === "content" || scale === "both" ) {

			// Vertical props scaling
			if ( factor.from.y !== factor.to.y ) {
				props = props.concat( cProps ).concat( props2 );
				el.from = $.effects.setTransition( el, cProps, factor.from.y, el.from );
				el.to = $.effects.setTransition( el, cProps, factor.to.y, el.to );
			}
		}

		$.effects.save( el, props );
		el.show();
		$.effects.createWrapper( el );
		el.css( "overflow", "hidden" ).css( el.from );

		// Adjust
		if (origin) { // Calculate baseline shifts
			baseline = $.effects.getBaseline( origin, original );
			el.from.top = ( original.outerHeight - el.outerHeight() ) * baseline.y;
			el.from.left = ( original.outerWidth - el.outerWidth() ) * baseline.x;
			el.to.top = ( original.outerHeight - el.to.outerHeight ) * baseline.y;
			el.to.left = ( original.outerWidth - el.to.outerWidth ) * baseline.x;
		}
		el.css( el.from ); // set top & left

		// Animate
		if ( scale === "content" || scale === "both" ) { // Scale the children

			// Add margins/font-size
			vProps = vProps.concat([ "marginTop", "marginBottom" ]).concat(cProps);
			hProps = hProps.concat([ "marginLeft", "marginRight" ]);
			props2 = props0.concat(vProps).concat(hProps);

			el.find( "*[width]" ).each( function(){
				var child = $( this ),
					c_original = {
						height: child.height(),
						width: child.width(),
						outerHeight: child.outerHeight(),
						outerWidth: child.outerWidth()
					};
				if (restore) {
					$.effects.save(child, props2);
				}

				child.from = {
					height: c_original.height * factor.from.y,
					width: c_original.width * factor.from.x,
					outerHeight: c_original.outerHeight * factor.from.y,
					outerWidth: c_original.outerWidth * factor.from.x
				};
				child.to = {
					height: c_original.height * factor.to.y,
					width: c_original.width * factor.to.x,
					outerHeight: c_original.height * factor.to.y,
					outerWidth: c_original.width * factor.to.x
				};

				// Vertical props scaling
				if ( factor.from.y !== factor.to.y ) {
					child.from = $.effects.setTransition( child, vProps, factor.from.y, child.from );
					child.to = $.effects.setTransition( child, vProps, factor.to.y, child.to );
				}

				// Horizontal props scaling
				if ( factor.from.x !== factor.to.x ) {
					child.from = $.effects.setTransition( child, hProps, factor.from.x, child.from );
					child.to = $.effects.setTransition( child, hProps, factor.to.x, child.to );
				}

				// Animate children
				child.css( child.from );
				child.animate( child.to, o.duration, o.easing, function() {

					// Restore children
					if ( restore ) {
						$.effects.restore( child, props2 );
					}
				});
			});
		}

		// Animate
		el.animate( el.to, {
			queue: false,
			duration: o.duration,
			easing: o.easing,
			complete: function() {
				if ( el.to.opacity === 0 ) {
					el.css( "opacity", el.from.opacity );
				}
				if( mode === "hide" ) {
					el.hide();
				}
				$.effects.restore( el, props );
				if ( !restore ) {

					// we need to calculate our new positioning based on the scaling
					if ( position === "static" ) {
						el.css({
							position: "relative",
							top: el.to.top,
							left: el.to.left
						});
					} else {
						$.each([ "top", "left" ], function( idx, pos ) {
							el.css( pos, function( _, str ) {
								var val = parseInt( str, 10 ),
									toRef = idx ? el.to.left : el.to.top;

								// if original was "auto", recalculate the new value from wrapper
								if ( str === "auto" ) {
									return toRef + "px";
								}

								return val + toRef + "px";
							});
						});
					}
				}

				$.effects.removeWrapper( el );
				done();
			}
		});

	};

	})(jQuery);

	(function( $, undefined ) {

	$.effects.effect.shake = function( o, done ) {

		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "height", "width" ],
			mode = $.effects.setMode( el, o.mode || "effect" ),
			direction = o.direction || "left",
			distance = o.distance || 20,
			times = o.times || 3,
			anims = times * 2 + 1,
			speed = Math.round(o.duration/anims),
			ref = (direction === "up" || direction === "down") ? "top" : "left",
			positiveMotion = (direction === "up" || direction === "left"),
			animation = {},
			animation1 = {},
			animation2 = {},
			i,

			// we will need to re-assemble the queue to stack our animations in place
			queue = el.queue(),
			queuelen = queue.length;

		$.effects.save( el, props );
		el.show();
		$.effects.createWrapper( el );

		// Animation
		animation[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance;
		animation1[ ref ] = ( positiveMotion ? "+=" : "-=" ) + distance * 2;
		animation2[ ref ] = ( positiveMotion ? "-=" : "+=" ) + distance * 2;

		// Animate
		el.animate( animation, speed, o.easing );

		// Shakes
		for ( i = 1; i < times; i++ ) {
			el.animate( animation1, speed, o.easing ).animate( animation2, speed, o.easing );
		}
		el
			.animate( animation1, speed, o.easing )
			.animate( animation, speed / 2, o.easing )
			.queue(function() {
				if ( mode === "hide" ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			});

		// inject all the animations we just queued to be first in line (after "inprogress")
		if ( queuelen > 1) {
			queue.splice.apply( queue,
				[ 1, 0 ].concat( queue.splice( queuelen, anims + 1 ) ) );
		}
		el.dequeue();

	};

	})(jQuery);

	(function( $, undefined ) {

	$.effects.effect.slide = function( o, done ) {

		// Create element
		var el = $( this ),
			props = [ "position", "top", "bottom", "left", "right", "width", "height" ],
			mode = $.effects.setMode( el, o.mode || "show" ),
			show = mode === "show",
			direction = o.direction || "left",
			ref = (direction === "up" || direction === "down") ? "top" : "left",
			positiveMotion = (direction === "up" || direction === "left"),
			distance,
			animation = {};

		// Adjust
		$.effects.save( el, props );
		el.show();
		distance = o.distance || el[ ref === "top" ? "outerHeight" : "outerWidth" ]( true );

		$.effects.createWrapper( el ).css({
			overflow: "hidden"
		});

		if ( show ) {
			el.css( ref, positiveMotion ? (isNaN(distance) ? "-" + distance : -distance) : distance );
		}

		// Animation
		animation[ ref ] = ( show ?
			( positiveMotion ? "+=" : "-=") :
			( positiveMotion ? "-=" : "+=")) +
			distance;

		// Animate
		el.animate( animation, {
			queue: false,
			duration: o.duration,
			easing: o.easing,
			complete: function() {
				if ( mode === "hide" ) {
					el.hide();
				}
				$.effects.restore( el, props );
				$.effects.removeWrapper( el );
				done();
			}
		});
	};

	})(jQuery);

	(function( $, undefined ) {

	$.effects.effect.transfer = function( o, done ) {
		var elem = $( this ),
			target = $( o.to ),
			targetFixed = target.css( "position" ) === "fixed",
			body = $("body"),
			fixTop = targetFixed ? body.scrollTop() : 0,
			fixLeft = targetFixed ? body.scrollLeft() : 0,
			endPosition = target.offset(),
			animation = {
				top: endPosition.top - fixTop ,
				left: endPosition.left - fixLeft ,
				height: target.innerHeight(),
				width: target.innerWidth()
			},
			startPosition = elem.offset(),
			transfer = $( "<div class='ui-effects-transfer'></div>" )
				.appendTo( document.body )
				.addClass( o.className )
				.css({
					top: startPosition.top - fixTop ,
					left: startPosition.left - fixLeft ,
					height: elem.innerHeight(),
					width: elem.innerWidth(),
					position: targetFixed ? "fixed" : "absolute"
				})
				.animate( animation, o.duration, o.easing, function() {
					transfer.remove();
					done();
				});
	};

	})(jQuery);

	(function( $, undefined ) {

	$.widget( "ui.menu", {
		version: "1.10.3",
		defaultElement: "<ul>",
		delay: 300,
		options: {
			icons: {
				submenu: "ui-icon-carat-1-e"
			},
			menus: "ul",
			position: {
				my: "left top",
				at: "right top"
			},
			role: "menu",

			// callbacks
			blur: null,
			focus: null,
			select: null
		},

		_create: function() {
			this.activeMenu = this.element;
			// flag used to prevent firing of the click handler
			// as the event bubbles up through nested menus
			this.mouseHandled = false;
			this.element
				.uniqueId()
				.addClass( "ui-menu ui-widget ui-widget-content ui-corner-all" )
				.toggleClass( "ui-menu-icons", !!this.element.find( ".ui-icon" ).length )
				.attr({
					role: this.options.role,
					tabIndex: 0
				})
				// need to catch all clicks on disabled menu
				// not possible through _on
				.bind( "click" + this.eventNamespace, $.proxy(function( event ) {
					if ( this.options.disabled ) {
						event.preventDefault();
					}
				}, this ));

			if ( this.options.disabled ) {
				this.element
					.addClass( "ui-state-disabled" )
					.attr( "aria-disabled", "true" );
			}

			this._on({
				// Prevent focus from sticking to links inside menu after clicking
				// them (focus should always stay on UL during navigation).
				"mousedown .ui-menu-item > a": function( event ) {
					event.preventDefault();
				},
				"click .ui-state-disabled > a": function( event ) {
					event.preventDefault();
				},
				"click .ui-menu-item:has(a)": function( event ) {
					var target = $( event.target ).closest( ".ui-menu-item" );
					if ( !this.mouseHandled && target.not( ".ui-state-disabled" ).length ) {
						this.mouseHandled = true;

						this.select( event );
						// Open submenu on click
						if ( target.has( ".ui-menu" ).length ) {
							this.expand( event );
						} else if ( !this.element.is( ":focus" ) ) {
							// Redirect focus to the menu
							this.element.trigger( "focus", [ true ] );

							// If the active item is on the top level, let it stay active.
							// Otherwise, blur the active item since it is no longer visible.
							if ( this.active && this.active.parents( ".ui-menu" ).length === 1 ) {
								clearTimeout( this.timer );
							}
						}
					}
				},
				"mouseenter .ui-menu-item": function( event ) {
					var target = $( event.currentTarget );
					// Remove ui-state-active class from siblings of the newly focused menu item
					// to avoid a jump caused by adjacent elements both having a class with a border
					target.siblings().children( ".ui-state-active" ).removeClass( "ui-state-active" );
					this.focus( event, target );
				},
				mouseleave: "collapseAll",
				"mouseleave .ui-menu": "collapseAll",
				focus: function( event, keepActiveItem ) {
					// If there's already an active item, keep it active
					// If not, activate the first item
					var item = this.active || this.element.children( ".ui-menu-item" ).eq( 0 );

					if ( !keepActiveItem ) {
						this.focus( event, item );
					}
				},
				blur: function( event ) {
					this._delay(function() {
						if ( !$.contains( this.element[0], this.document[0].activeElement ) ) {
							this.collapseAll( event );
						}
					});
				},
				keydown: "_keydown"
			});

			this.refresh();

			// Clicks outside of a menu collapse any open menus
			this._on( this.document, {
				click: function( event ) {
					if ( !$( event.target ).closest( ".ui-menu" ).length ) {
						this.collapseAll( event );
					}

					// Reset the mouseHandled flag
					this.mouseHandled = false;
				}
			});
		},

		_destroy: function() {
			// Destroy (sub)menus
			this.element
				.removeAttr( "aria-activedescendant" )
				.find( ".ui-menu" ).addBack()
					.removeClass( "ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons" )
					.removeAttr( "role" )
					.removeAttr( "tabIndex" )
					.removeAttr( "aria-labelledby" )
					.removeAttr( "aria-expanded" )
					.removeAttr( "aria-hidden" )
					.removeAttr( "aria-disabled" )
					.removeUniqueId()
					.show();

			// Destroy menu items
			this.element.find( ".ui-menu-item" )
				.removeClass( "ui-menu-item" )
				.removeAttr( "role" )
				.removeAttr( "aria-disabled" )
				.children( "a" )
					.removeUniqueId()
					.removeClass( "ui-corner-all ui-state-hover" )
					.removeAttr( "tabIndex" )
					.removeAttr( "role" )
					.removeAttr( "aria-haspopup" )
					.children().each( function() {
						var elem = $( this );
						if ( elem.data( "ui-menu-submenu-carat" ) ) {
							elem.remove();
						}
					});

			// Destroy menu dividers
			this.element.find( ".ui-menu-divider" ).removeClass( "ui-menu-divider ui-widget-content" );
		},

		_keydown: function( event ) {
			/*jshint maxcomplexity:20*/
			var match, prev, character, skip, regex,
				preventDefault = true;

			function escape( value ) {
				return value.replace( /[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&" );
			}

			switch ( event.keyCode ) {
			case $.ui.keyCode.PAGE_UP:
				this.previousPage( event );
				break;
			case $.ui.keyCode.PAGE_DOWN:
				this.nextPage( event );
				break;
			case $.ui.keyCode.HOME:
				this._move( "first", "first", event );
				break;
			case $.ui.keyCode.END:
				this._move( "last", "last", event );
				break;
			case $.ui.keyCode.UP:
				this.previous( event );
				break;
			case $.ui.keyCode.DOWN:
				this.next( event );
				break;
			case $.ui.keyCode.LEFT:
				this.collapse( event );
				break;
			case $.ui.keyCode.RIGHT:
				if ( this.active && !this.active.is( ".ui-state-disabled" ) ) {
					this.expand( event );
				}
				break;
			case $.ui.keyCode.ENTER:
			case $.ui.keyCode.SPACE:
				this._activate( event );
				break;
			case $.ui.keyCode.ESCAPE:
				this.collapse( event );
				break;
			default:
				preventDefault = false;
				prev = this.previousFilter || "";
				character = String.fromCharCode( event.keyCode );
				skip = false;

				clearTimeout( this.filterTimer );

				if ( character === prev ) {
					skip = true;
				} else {
					character = prev + character;
				}

				regex = new RegExp( "^" + escape( character ), "i" );
				match = this.activeMenu.children( ".ui-menu-item" ).filter(function() {
					return regex.test( $( this ).children( "a" ).text() );
				});
				match = skip && match.index( this.active.next() ) !== -1 ?
					this.active.nextAll( ".ui-menu-item" ) :
					match;

				// If no matches on the current filter, reset to the last character pressed
				// to move down the menu to the first item that starts with that character
				if ( !match.length ) {
					character = String.fromCharCode( event.keyCode );
					regex = new RegExp( "^" + escape( character ), "i" );
					match = this.activeMenu.children( ".ui-menu-item" ).filter(function() {
						return regex.test( $( this ).children( "a" ).text() );
					});
				}

				if ( match.length ) {
					this.focus( event, match );
					if ( match.length > 1 ) {
						this.previousFilter = character;
						this.filterTimer = this._delay(function() {
							delete this.previousFilter;
						}, 1000 );
					} else {
						delete this.previousFilter;
					}
				} else {
					delete this.previousFilter;
				}
			}

			if ( preventDefault ) {
				event.preventDefault();
			}
		},

		_activate: function( event ) {
			if ( !this.active.is( ".ui-state-disabled" ) ) {
				if ( this.active.children( "a[aria-haspopup='true']" ).length ) {
					this.expand( event );
				} else {
					this.select( event );
				}
			}
		},

		refresh: function() {
			var menus,
				icon = this.options.icons.submenu,
				submenus = this.element.find( this.options.menus );

			// Initialize nested menus
			submenus.filter( ":not(.ui-menu)" )
				.addClass( "ui-menu ui-widget ui-widget-content ui-corner-all" )
				.hide()
				.attr({
					role: this.options.role,
					"aria-hidden": "true",
					"aria-expanded": "false"
				})
				.each(function() {
					var menu = $( this ),
						item = menu.prev( "a" ),
						submenuCarat = $( "<span>" )
							.addClass( "ui-menu-icon ui-icon " + icon )
							.data( "ui-menu-submenu-carat", true );

					item
						.attr( "aria-haspopup", "true" )
						.prepend( submenuCarat );
					menu.attr( "aria-labelledby", item.attr( "id" ) );
				});

			menus = submenus.add( this.element );

			// Don't refresh list items that are already adapted
			menus.children( ":not(.ui-menu-item):has(a)" )
				.addClass( "ui-menu-item" )
				.attr( "role", "presentation" )
				.children( "a" )
					.uniqueId()
					.addClass( "ui-corner-all" )
					.attr({
						tabIndex: -1,
						role: this._itemRole()
					});

			// Initialize unlinked menu-items containing spaces and/or dashes only as dividers
			menus.children( ":not(.ui-menu-item)" ).each(function() {
				var item = $( this );
				// hyphen, em dash, en dash
				if ( !/[^\-\u2014\u2013\s]/.test( item.text() ) ) {
					item.addClass( "ui-widget-content ui-menu-divider" );
				}
			});

			// Add aria-disabled attribute to any disabled menu item
			menus.children( ".ui-state-disabled" ).attr( "aria-disabled", "true" );

			// If the active item has been removed, blur the menu
			if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {
				this.blur();
			}
		},

		_itemRole: function() {
			return {
				menu: "menuitem",
				listbox: "option"
			}[ this.options.role ];
		},

		_setOption: function( key, value ) {
			if ( key === "icons" ) {
				this.element.find( ".ui-menu-icon" )
					.removeClass( this.options.icons.submenu )
					.addClass( value.submenu );
			}
			this._super( key, value );
		},

		focus: function( event, item ) {
			var nested, focused;
			this.blur( event, event && event.type === "focus" );

			this._scrollIntoView( item );

			this.active = item.first();
			focused = this.active.children( "a" ).addClass( "ui-state-focus" );
			// Only update aria-activedescendant if there's a role
			// otherwise we assume focus is managed elsewhere
			if ( this.options.role ) {
				this.element.attr( "aria-activedescendant", focused.attr( "id" ) );
			}

			// Highlight active parent menu item, if any
			this.active
				.parent()
				.closest( ".ui-menu-item" )
				.children( "a:first" )
				.addClass( "ui-state-active" );

			if ( event && event.type === "keydown" ) {
				this._close();
			} else {
				this.timer = this._delay(function() {
					this._close();
				}, this.delay );
			}

			nested = item.children( ".ui-menu" );
			if ( nested.length && ( /^mouse/.test( event.type ) ) ) {
				this._startOpening(nested);
			}
			this.activeMenu = item.parent();

			this._trigger( "focus", event, { item: item } );
		},

		_scrollIntoView: function( item ) {
			var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
			if ( this._hasScroll() ) {
				borderTop = parseFloat( $.css( this.activeMenu[0], "borderTopWidth" ) ) || 0;
				paddingTop = parseFloat( $.css( this.activeMenu[0], "paddingTop" ) ) || 0;
				offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
				scroll = this.activeMenu.scrollTop();
				elementHeight = this.activeMenu.height();
				itemHeight = item.height();

				if ( offset < 0 ) {
					this.activeMenu.scrollTop( scroll + offset );
				} else if ( offset + itemHeight > elementHeight ) {
					this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );
				}
			}
		},

		blur: function( event, fromFocus ) {
			if ( !fromFocus ) {
				clearTimeout( this.timer );
			}

			if ( !this.active ) {
				return;
			}

			this.active.children( "a" ).removeClass( "ui-state-focus" );
			this.active = null;

			this._trigger( "blur", event, { item: this.active } );
		},

		_startOpening: function( submenu ) {
			clearTimeout( this.timer );

			// Don't open if already open fixes a Firefox bug that caused a .5 pixel
			// shift in the submenu position when mousing over the carat icon
			if ( submenu.attr( "aria-hidden" ) !== "true" ) {
				return;
			}

			this.timer = this._delay(function() {
				this._close();
				this._open( submenu );
			}, this.delay );
		},

		_open: function( submenu ) {
			var position = $.extend({
				of: this.active
			}, this.options.position );

			clearTimeout( this.timer );
			this.element.find( ".ui-menu" ).not( submenu.parents( ".ui-menu" ) )
				.hide()
				.attr( "aria-hidden", "true" );

			submenu
				.show()
				.removeAttr( "aria-hidden" )
				.attr( "aria-expanded", "true" )
				.position( position );
		},

		collapseAll: function( event, all ) {
			clearTimeout( this.timer );
			this.timer = this._delay(function() {
				// If we were passed an event, look for the submenu that contains the event
				var currentMenu = all ? this.element :
					$( event && event.target ).closest( this.element.find( ".ui-menu" ) );

				// If we found no valid submenu ancestor, use the main menu to close all sub menus anyway
				if ( !currentMenu.length ) {
					currentMenu = this.element;
				}

				this._close( currentMenu );

				this.blur( event );
				this.activeMenu = currentMenu;
			}, this.delay );
		},

		// With no arguments, closes the currently active menu - if nothing is active
		// it closes all menus.  If passed an argument, it will search for menus BELOW
		_close: function( startMenu ) {
			if ( !startMenu ) {
				startMenu = this.active ? this.active.parent() : this.element;
			}

			startMenu
				.find( ".ui-menu" )
					.hide()
					.attr( "aria-hidden", "true" )
					.attr( "aria-expanded", "false" )
				.end()
				.find( "a.ui-state-active" )
					.removeClass( "ui-state-active" );
		},

		collapse: function( event ) {
			var newItem = this.active &&
				this.active.parent().closest( ".ui-menu-item", this.element );
			if ( newItem && newItem.length ) {
				this._close();
				this.focus( event, newItem );
			}
		},

		expand: function( event ) {
			var newItem = this.active &&
				this.active
					.children( ".ui-menu " )
					.children( ".ui-menu-item" )
					.first();

			if ( newItem && newItem.length ) {
				this._open( newItem.parent() );

				// Delay so Firefox will not hide activedescendant change in expanding submenu from AT
				this._delay(function() {
					this.focus( event, newItem );
				});
			}
		},

		next: function( event ) {
			this._move( "next", "first", event );
		},

		previous: function( event ) {
			this._move( "prev", "last", event );
		},

		isFirstItem: function() {
			return this.active && !this.active.prevAll( ".ui-menu-item" ).length;
		},

		isLastItem: function() {
			return this.active && !this.active.nextAll( ".ui-menu-item" ).length;
		},

		_move: function( direction, filter, event ) {
			var next;
			if ( this.active ) {
				if ( direction === "first" || direction === "last" ) {
					next = this.active
						[ direction === "first" ? "prevAll" : "nextAll" ]( ".ui-menu-item" )
						.eq( -1 );
				} else {
					next = this.active
						[ direction + "All" ]( ".ui-menu-item" )
						.eq( 0 );
				}
			}
			if ( !next || !next.length || !this.active ) {
				next = this.activeMenu.children( ".ui-menu-item" )[ filter ]();
			}

			this.focus( event, next );
		},

		nextPage: function( event ) {
			var item, base, height;

			if ( !this.active ) {
				this.next( event );
				return;
			}
			if ( this.isLastItem() ) {
				return;
			}
			if ( this._hasScroll() ) {
				base = this.active.offset().top;
				height = this.element.height();
				this.active.nextAll( ".ui-menu-item" ).each(function() {
					item = $( this );
					return item.offset().top - base - height < 0;
				});

				this.focus( event, item );
			} else {
				this.focus( event, this.activeMenu.children( ".ui-menu-item" )
					[ !this.active ? "first" : "last" ]() );
			}
		},

		previousPage: function( event ) {
			var item, base, height;
			if ( !this.active ) {
				this.next( event );
				return;
			}
			if ( this.isFirstItem() ) {
				return;
			}
			if ( this._hasScroll() ) {
				base = this.active.offset().top;
				height = this.element.height();
				this.active.prevAll( ".ui-menu-item" ).each(function() {
					item = $( this );
					return item.offset().top - base + height > 0;
				});

				this.focus( event, item );
			} else {
				this.focus( event, this.activeMenu.children( ".ui-menu-item" ).first() );
			}
		},

		_hasScroll: function() {
			return this.element.outerHeight() < this.element.prop( "scrollHeight" );
		},

		select: function( event ) {
			// TODO: It should never be possible to not have an active item at this
			// point, but the tests don't trigger mouseenter before click.
			this.active = this.active || $( event.target ).closest( ".ui-menu-item" );
			var ui = { item: this.active };
			if ( !this.active.has( ".ui-menu" ).length ) {
				this.collapseAll( event, true );
			}
			this._trigger( "select", event, ui );
		}
	});

	}( jQuery ));

	(function( $, undefined ) {

	$.ui = $.ui || {};

	var cachedScrollbarWidth,
		max = Math.max,
		abs = Math.abs,
		round = Math.round,
		rhorizontal = /left|center|right/,
		rvertical = /top|center|bottom/,
		roffset = /[\+\-]\d+(\.[\d]+)?%?/,
		rposition = /^\w+/,
		rpercent = /%$/,
		_position = $.fn.position;

	function getOffsets( offsets, width, height ) {
		return [
			parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
			parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
		];
	}

	function parseCss( element, property ) {
		return parseInt( $.css( element, property ), 10 ) || 0;
	}

	function getDimensions( elem ) {
		var raw = elem[0];
		if ( raw.nodeType === 9 ) {
			return {
				width: elem.width(),
				height: elem.height(),
				offset: { top: 0, left: 0 }
			};
		}
		if ( $.isWindow( raw ) ) {
			return {
				width: elem.width(),
				height: elem.height(),
				offset: { top: elem.scrollTop(), left: elem.scrollLeft() }
			};
		}
		if ( raw.preventDefault ) {
			return {
				width: 0,
				height: 0,
				offset: { top: raw.pageY, left: raw.pageX }
			};
		}
		return {
			width: elem.outerWidth(),
			height: elem.outerHeight(),
			offset: elem.offset()
		};
	}

	$.position = {
		scrollbarWidth: function() {
			if ( cachedScrollbarWidth !== undefined ) {
				return cachedScrollbarWidth;
			}
			var w1, w2,
				div = $( "<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>" ),
				innerDiv = div.children()[0];

			$( "body" ).append( div );
			w1 = innerDiv.offsetWidth;
			div.css( "overflow", "scroll" );

			w2 = innerDiv.offsetWidth;

			if ( w1 === w2 ) {
				w2 = div[0].clientWidth;
			}

			div.remove();

			return (cachedScrollbarWidth = w1 - w2);
		},
		getScrollInfo: function( within ) {
			var overflowX = within.isWindow ? "" : within.element.css( "overflow-x" ),
				overflowY = within.isWindow ? "" : within.element.css( "overflow-y" ),
				hasOverflowX = overflowX === "scroll" ||
					( overflowX === "auto" && within.width < within.element[0].scrollWidth ),
				hasOverflowY = overflowY === "scroll" ||
					( overflowY === "auto" && within.height < within.element[0].scrollHeight );
			return {
				width: hasOverflowY ? $.position.scrollbarWidth() : 0,
				height: hasOverflowX ? $.position.scrollbarWidth() : 0
			};
		},
		getWithinInfo: function( element ) {
			var withinElement = $( element || window ),
				isWindow = $.isWindow( withinElement[0] );
			return {
				element: withinElement,
				isWindow: isWindow,
				offset: withinElement.offset() || { left: 0, top: 0 },
				scrollLeft: withinElement.scrollLeft(),
				scrollTop: withinElement.scrollTop(),
				width: isWindow ? withinElement.width() : withinElement.outerWidth(),
				height: isWindow ? withinElement.height() : withinElement.outerHeight()
			};
		}
	};

	$.fn.position = function( options ) {
		if ( !options || !options.of ) {
			return _position.apply( this, arguments );
		}

		// make a copy, we don't want to modify arguments
		options = $.extend( {}, options );

		var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
			target = $( options.of ),
			within = $.position.getWithinInfo( options.within ),
			scrollInfo = $.position.getScrollInfo( within ),
			collision = ( options.collision || "flip" ).split( " " ),
			offsets = {};

		dimensions = getDimensions( target );
		if ( target[0].preventDefault ) {
			// force left top to allow flipping
			options.at = "left top";
		}
		targetWidth = dimensions.width;
		targetHeight = dimensions.height;
		targetOffset = dimensions.offset;
		// clone to reuse original targetOffset later
		basePosition = $.extend( {}, targetOffset );

		// force my and at to have valid horizontal and vertical positions
		// if a value is missing or invalid, it will be converted to center
		$.each( [ "my", "at" ], function() {
			var pos = ( options[ this ] || "" ).split( " " ),
				horizontalOffset,
				verticalOffset;

			if ( pos.length === 1) {
				pos = rhorizontal.test( pos[ 0 ] ) ?
					pos.concat( [ "center" ] ) :
					rvertical.test( pos[ 0 ] ) ?
						[ "center" ].concat( pos ) :
						[ "center", "center" ];
			}
			pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
			pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

			// calculate offsets
			horizontalOffset = roffset.exec( pos[ 0 ] );
			verticalOffset = roffset.exec( pos[ 1 ] );
			offsets[ this ] = [
				horizontalOffset ? horizontalOffset[ 0 ] : 0,
				verticalOffset ? verticalOffset[ 0 ] : 0
			];

			// reduce to just the positions without the offsets
			options[ this ] = [
				rposition.exec( pos[ 0 ] )[ 0 ],
				rposition.exec( pos[ 1 ] )[ 0 ]
			];
		});

		// normalize collision option
		if ( collision.length === 1 ) {
			collision[ 1 ] = collision[ 0 ];
		}

		if ( options.at[ 0 ] === "right" ) {
			basePosition.left += targetWidth;
		} else if ( options.at[ 0 ] === "center" ) {
			basePosition.left += targetWidth / 2;
		}

		if ( options.at[ 1 ] === "bottom" ) {
			basePosition.top += targetHeight;
		} else if ( options.at[ 1 ] === "center" ) {
			basePosition.top += targetHeight / 2;
		}

		atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
		basePosition.left += atOffset[ 0 ];
		basePosition.top += atOffset[ 1 ];

		return this.each(function() {
			var collisionPosition, using,
				elem = $( this ),
				elemWidth = elem.outerWidth(),
				elemHeight = elem.outerHeight(),
				marginLeft = parseCss( this, "marginLeft" ),
				marginTop = parseCss( this, "marginTop" ),
				collisionWidth = elemWidth + marginLeft + parseCss( this, "marginRight" ) + scrollInfo.width,
				collisionHeight = elemHeight + marginTop + parseCss( this, "marginBottom" ) + scrollInfo.height,
				position = $.extend( {}, basePosition ),
				myOffset = getOffsets( offsets.my, elem.outerWidth(), elem.outerHeight() );

			if ( options.my[ 0 ] === "right" ) {
				position.left -= elemWidth;
			} else if ( options.my[ 0 ] === "center" ) {
				position.left -= elemWidth / 2;
			}

			if ( options.my[ 1 ] === "bottom" ) {
				position.top -= elemHeight;
			} else if ( options.my[ 1 ] === "center" ) {
				position.top -= elemHeight / 2;
			}

			position.left += myOffset[ 0 ];
			position.top += myOffset[ 1 ];

			// if the browser doesn't support fractions, then round for consistent results
			if ( !$.support.offsetFractions ) {
				position.left = round( position.left );
				position.top = round( position.top );
			}

			collisionPosition = {
				marginLeft: marginLeft,
				marginTop: marginTop
			};

			$.each( [ "left", "top" ], function( i, dir ) {
				if ( $.ui.position[ collision[ i ] ] ) {
					$.ui.position[ collision[ i ] ][ dir ]( position, {
						targetWidth: targetWidth,
						targetHeight: targetHeight,
						elemWidth: elemWidth,
						elemHeight: elemHeight,
						collisionPosition: collisionPosition,
						collisionWidth: collisionWidth,
						collisionHeight: collisionHeight,
						offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
						my: options.my,
						at: options.at,
						within: within,
						elem : elem
					});
				}
			});

			if ( options.using ) {
				// adds feedback as second argument to using callback, if present
				using = function( props ) {
					var left = targetOffset.left - position.left,
						right = left + targetWidth - elemWidth,
						top = targetOffset.top - position.top,
						bottom = top + targetHeight - elemHeight,
						feedback = {
							target: {
								element: target,
								left: targetOffset.left,
								top: targetOffset.top,
								width: targetWidth,
								height: targetHeight
							},
							element: {
								element: elem,
								left: position.left,
								top: position.top,
								width: elemWidth,
								height: elemHeight
							},
							horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
							vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
						};
					if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
						feedback.horizontal = "center";
					}
					if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
						feedback.vertical = "middle";
					}
					if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
						feedback.important = "horizontal";
					} else {
						feedback.important = "vertical";
					}
					options.using.call( this, props, feedback );
				};
			}

			elem.offset( $.extend( position, { using: using } ) );
		});
	};

	$.ui.position = {
		fit: {
			left: function( position, data ) {
				var within = data.within,
					withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
					outerWidth = within.width,
					collisionPosLeft = position.left - data.collisionPosition.marginLeft,
					overLeft = withinOffset - collisionPosLeft,
					overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
					newOverRight;

				// element is wider than within
				if ( data.collisionWidth > outerWidth ) {
					// element is initially over the left side of within
					if ( overLeft > 0 && overRight <= 0 ) {
						newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
						position.left += overLeft - newOverRight;
					// element is initially over right side of within
					} else if ( overRight > 0 && overLeft <= 0 ) {
						position.left = withinOffset;
					// element is initially over both left and right sides of within
					} else {
						if ( overLeft > overRight ) {
							position.left = withinOffset + outerWidth - data.collisionWidth;
						} else {
							position.left = withinOffset;
						}
					}
				// too far left -> align with left edge
				} else if ( overLeft > 0 ) {
					position.left += overLeft;
				// too far right -> align with right edge
				} else if ( overRight > 0 ) {
					position.left -= overRight;
				// adjust based on position and margin
				} else {
					position.left = max( position.left - collisionPosLeft, position.left );
				}
			},
			top: function( position, data ) {
				var within = data.within,
					withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
					outerHeight = data.within.height,
					collisionPosTop = position.top - data.collisionPosition.marginTop,
					overTop = withinOffset - collisionPosTop,
					overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
					newOverBottom;

				// element is taller than within
				if ( data.collisionHeight > outerHeight ) {
					// element is initially over the top of within
					if ( overTop > 0 && overBottom <= 0 ) {
						newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
						position.top += overTop - newOverBottom;
					// element is initially over bottom of within
					} else if ( overBottom > 0 && overTop <= 0 ) {
						position.top = withinOffset;
					// element is initially over both top and bottom of within
					} else {
						if ( overTop > overBottom ) {
							position.top = withinOffset + outerHeight - data.collisionHeight;
						} else {
							position.top = withinOffset;
						}
					}
				// too far up -> align with top
				} else if ( overTop > 0 ) {
					position.top += overTop;
				// too far down -> align with bottom edge
				} else if ( overBottom > 0 ) {
					position.top -= overBottom;
				// adjust based on position and margin
				} else {
					position.top = max( position.top - collisionPosTop, position.top );
				}
			}
		},
		flip: {
			left: function( position, data ) {
				var within = data.within,
					withinOffset = within.offset.left + within.scrollLeft,
					outerWidth = within.width,
					offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
					collisionPosLeft = position.left - data.collisionPosition.marginLeft,
					overLeft = collisionPosLeft - offsetLeft,
					overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
					myOffset = data.my[ 0 ] === "left" ?
						-data.elemWidth :
						data.my[ 0 ] === "right" ?
							data.elemWidth :
							0,
					atOffset = data.at[ 0 ] === "left" ?
						data.targetWidth :
						data.at[ 0 ] === "right" ?
							-data.targetWidth :
							0,
					offset = -2 * data.offset[ 0 ],
					newOverRight,
					newOverLeft;

				if ( overLeft < 0 ) {
					newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
					if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
						position.left += myOffset + atOffset + offset;
					}
				}
				else if ( overRight > 0 ) {
					newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
					if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
						position.left += myOffset + atOffset + offset;
					}
				}
			},
			top: function( position, data ) {
				var within = data.within,
					withinOffset = within.offset.top + within.scrollTop,
					outerHeight = within.height,
					offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
					collisionPosTop = position.top - data.collisionPosition.marginTop,
					overTop = collisionPosTop - offsetTop,
					overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
					top = data.my[ 1 ] === "top",
					myOffset = top ?
						-data.elemHeight :
						data.my[ 1 ] === "bottom" ?
							data.elemHeight :
							0,
					atOffset = data.at[ 1 ] === "top" ?
						data.targetHeight :
						data.at[ 1 ] === "bottom" ?
							-data.targetHeight :
							0,
					offset = -2 * data.offset[ 1 ],
					newOverTop,
					newOverBottom;
				if ( overTop < 0 ) {
					newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
					if ( ( position.top + myOffset + atOffset + offset) > overTop && ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) ) {
						position.top += myOffset + atOffset + offset;
					}
				}
				else if ( overBottom > 0 ) {
					newOverTop = position.top -  data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
					if ( ( position.top + myOffset + atOffset + offset) > overBottom && ( newOverTop > 0 || abs( newOverTop ) < overBottom ) ) {
						position.top += myOffset + atOffset + offset;
					}
				}
			}
		},
		flipfit: {
			left: function() {
				$.ui.position.flip.left.apply( this, arguments );
				$.ui.position.fit.left.apply( this, arguments );
			},
			top: function() {
				$.ui.position.flip.top.apply( this, arguments );
				$.ui.position.fit.top.apply( this, arguments );
			}
		}
	};

	// fraction support test
	(function () {
		var testElement, testElementParent, testElementStyle, offsetLeft, i,
			body = document.getElementsByTagName( "body" )[ 0 ],
			div = document.createElement( "div" );

		//Create a "fake body" for testing based on method used in jQuery.support
		testElement = document.createElement( body ? "div" : "body" );
		testElementStyle = {
			visibility: "hidden",
			width: 0,
			height: 0,
			border: 0,
			margin: 0,
			background: "none"
		};
		if ( body ) {
			$.extend( testElementStyle, {
				position: "absolute",
				left: "-1000px",
				top: "-1000px"
			});
		}
		for ( i in testElementStyle ) {
			testElement.style[ i ] = testElementStyle[ i ];
		}
		testElement.appendChild( div );
		testElementParent = body || document.documentElement;
		testElementParent.insertBefore( testElement, testElementParent.firstChild );

		div.style.cssText = "position: absolute; left: 10.7432222px;";

		offsetLeft = $( div ).offset().left;
		$.support.offsetFractions = offsetLeft > 10 && offsetLeft < 11;

		testElement.innerHTML = "";
		testElementParent.removeChild( testElement );
	})();

	}( jQuery ) );

	(function( $, undefined ) {

	$.widget( "ui.progressbar", {
		version: "1.10.3",
		options: {
			max: 100,
			value: 0,

			change: null,
			complete: null
		},

		min: 0,

		_create: function() {
			// Constrain initial value
			this.oldValue = this.options.value = this._constrainedValue();

			this.element
				.addClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )
				.attr({
					// Only set static values, aria-valuenow and aria-valuemax are
					// set inside _refreshValue()
					role: "progressbar",
					"aria-valuemin": this.min
				});

			this.valueDiv = $( "<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>" )
				.appendTo( this.element );

			this._refreshValue();
		},

		_destroy: function() {
			this.element
				.removeClass( "ui-progressbar ui-widget ui-widget-content ui-corner-all" )
				.removeAttr( "role" )
				.removeAttr( "aria-valuemin" )
				.removeAttr( "aria-valuemax" )
				.removeAttr( "aria-valuenow" );

			this.valueDiv.remove();
		},

		value: function( newValue ) {
			if ( newValue === undefined ) {
				return this.options.value;
			}

			this.options.value = this._constrainedValue( newValue );
			this._refreshValue();
		},

		_constrainedValue: function( newValue ) {
			if ( newValue === undefined ) {
				newValue = this.options.value;
			}

			this.indeterminate = newValue === false;

			// sanitize value
			if ( typeof newValue !== "number" ) {
				newValue = 0;
			}

			return this.indeterminate ? false :
				Math.min( this.options.max, Math.max( this.min, newValue ) );
		},

		_setOptions: function( options ) {
			// Ensure "value" option is set after other values (like max)
			var value = options.value;
			delete options.value;

			this._super( options );

			this.options.value = this._constrainedValue( value );
			this._refreshValue();
		},

		_setOption: function( key, value ) {
			if ( key === "max" ) {
				// Don't allow a max less than min
				value = Math.max( this.min, value );
			}

			this._super( key, value );
		},

		_percentage: function() {
			return this.indeterminate ? 100 : 100 * ( this.options.value - this.min ) / ( this.options.max - this.min );
		},

		_refreshValue: function() {
			var value = this.options.value,
				percentage = this._percentage();

			this.valueDiv
				.toggle( this.indeterminate || value > this.min )
				.toggleClass( "ui-corner-right", value === this.options.max )
				.width( percentage.toFixed(0) + "%" );

			this.element.toggleClass( "ui-progressbar-indeterminate", this.indeterminate );

			if ( this.indeterminate ) {
				this.element.removeAttr( "aria-valuenow" );
				if ( !this.overlayDiv ) {
					this.overlayDiv = $( "<div class='ui-progressbar-overlay'></div>" ).appendTo( this.valueDiv );
				}
			} else {
				this.element.attr({
					"aria-valuemax": this.options.max,
					"aria-valuenow": value
				});
				if ( this.overlayDiv ) {
					this.overlayDiv.remove();
					this.overlayDiv = null;
				}
			}

			if ( this.oldValue !== value ) {
				this.oldValue = value;
				this._trigger( "change" );
			}
			if ( value === this.options.max ) {
				this._trigger( "complete" );
			}
		}
	});

	})( jQuery );

	(function( $, undefined ) {

	// number of pages in a slider
	// (how many times can you page up/down to go through the whole range)
	var numPages = 5;

	$.widget( "ui.slider", $.ui.mouse, {
		version: "1.10.3",
		widgetEventPrefix: "slide",

		options: {
			animate: false,
			distance: 0,
			max: 100,
			min: 0,
			orientation: "horizontal",
			range: false,
			step: 1,
			value: 0,
			values: null,

			// callbacks
			change: null,
			slide: null,
			start: null,
			stop: null
		},

		_create: function() {
			this._keySliding = false;
			this._mouseSliding = false;
			this._animateOff = true;
			this._handleIndex = null;
			this._detectOrientation();
			this._mouseInit();

			this.element
				.addClass( "ui-slider" +
					" ui-slider-" + this.orientation +
					" ui-widget" +
					" ui-widget-content" +
					" ui-corner-all");

			this._refresh();
			this._setOption( "disabled", this.options.disabled );

			this._animateOff = false;
		},

		_refresh: function() {
			this._createRange();
			this._createHandles();
			this._setupEvents();
			this._refreshValue();
		},

		_createHandles: function() {
			var i, handleCount,
				options = this.options,
				existingHandles = this.element.find( ".ui-slider-handle" ).addClass( "ui-state-default ui-corner-all" ),
				handle = "<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>",
				handles = [];

			handleCount = ( options.values && options.values.length ) || 1;

			if ( existingHandles.length > handleCount ) {
				existingHandles.slice( handleCount ).remove();
				existingHandles = existingHandles.slice( 0, handleCount );
			}

			for ( i = existingHandles.length; i < handleCount; i++ ) {
				handles.push( handle );
			}

			this.handles = existingHandles.add( $( handles.join( "" ) ).appendTo( this.element ) );

			this.handle = this.handles.eq( 0 );

			this.handles.each(function( i ) {
				$( this ).data( "ui-slider-handle-index", i );
			});
		},

		_createRange: function() {
			var options = this.options,
				classes = "";

			if ( options.range ) {
				if ( options.range === true ) {
					if ( !options.values ) {
						options.values = [ this._valueMin(), this._valueMin() ];
					} else if ( options.values.length && options.values.length !== 2 ) {
						options.values = [ options.values[0], options.values[0] ];
					} else if ( $.isArray( options.values ) ) {
						options.values = options.values.slice(0);
					}
				}

				if ( !this.range || !this.range.length ) {
					this.range = $( "<div></div>" )
						.appendTo( this.element );

					classes = "ui-slider-range" +
					// note: this isn't the most fittingly semantic framework class for this element,
					// but worked best visually with a variety of themes
					" ui-widget-header ui-corner-all";
				} else {
					this.range.removeClass( "ui-slider-range-min ui-slider-range-max" )
						// Handle range switching from true to min/max
						.css({
							"left": "",
							"bottom": ""
						});
				}

				this.range.addClass( classes +
					( ( options.range === "min" || options.range === "max" ) ? " ui-slider-range-" + options.range : "" ) );
			} else {
				this.range = $([]);
			}
		},

		_setupEvents: function() {
			var elements = this.handles.add( this.range ).filter( "a" );
			this._off( elements );
			this._on( elements, this._handleEvents );
			this._hoverable( elements );
			this._focusable( elements );
		},

		_destroy: function() {
			this.handles.remove();
			this.range.remove();

			this.element
				.removeClass( "ui-slider" +
					" ui-slider-horizontal" +
					" ui-slider-vertical" +
					" ui-widget" +
					" ui-widget-content" +
					" ui-corner-all" );

			this._mouseDestroy();
		},

		_mouseCapture: function( event ) {
			var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle,
				that = this,
				o = this.options;

			if ( o.disabled ) {
				return false;
			}

			this.elementSize = {
				width: this.element.outerWidth(),
				height: this.element.outerHeight()
			};
			this.elementOffset = this.element.offset();

			position = { x: event.pageX, y: event.pageY };
			normValue = this._normValueFromMouse( position );
			distance = this._valueMax() - this._valueMin() + 1;
			this.handles.each(function( i ) {
				var thisDistance = Math.abs( normValue - that.values(i) );
				if (( distance > thisDistance ) ||
					( distance === thisDistance &&
						(i === that._lastChangedValue || that.values(i) === o.min ))) {
					distance = thisDistance;
					closestHandle = $( this );
					index = i;
				}
			});

			allowed = this._start( event, index );
			if ( allowed === false ) {
				return false;
			}
			this._mouseSliding = true;

			this._handleIndex = index;

			closestHandle
				.addClass( "ui-state-active" )
				.focus();

			offset = closestHandle.offset();
			mouseOverHandle = !$( event.target ).parents().addBack().is( ".ui-slider-handle" );
			this._clickOffset = mouseOverHandle ? { left: 0, top: 0 } : {
				left: event.pageX - offset.left - ( closestHandle.width() / 2 ),
				top: event.pageY - offset.top -
					( closestHandle.height() / 2 ) -
					( parseInt( closestHandle.css("borderTopWidth"), 10 ) || 0 ) -
					( parseInt( closestHandle.css("borderBottomWidth"), 10 ) || 0) +
					( parseInt( closestHandle.css("marginTop"), 10 ) || 0)
			};

			if ( !this.handles.hasClass( "ui-state-hover" ) ) {
				this._slide( event, index, normValue );
			}
			this._animateOff = true;
			return true;
		},

		_mouseStart: function() {
			return true;
		},

		_mouseDrag: function( event ) {
			var position = { x: event.pageX, y: event.pageY },
				normValue = this._normValueFromMouse( position );

			this._slide( event, this._handleIndex, normValue );

			return false;
		},

		_mouseStop: function( event ) {
			this.handles.removeClass( "ui-state-active" );
			this._mouseSliding = false;

			this._stop( event, this._handleIndex );
			this._change( event, this._handleIndex );

			this._handleIndex = null;
			this._clickOffset = null;
			this._animateOff = false;

			return false;
		},

		_detectOrientation: function() {
			this.orientation = ( this.options.orientation === "vertical" ) ? "vertical" : "horizontal";
		},

		_normValueFromMouse: function( position ) {
			var pixelTotal,
				pixelMouse,
				percentMouse,
				valueTotal,
				valueMouse;

			if ( this.orientation === "horizontal" ) {
				pixelTotal = this.elementSize.width;
				pixelMouse = position.x - this.elementOffset.left - ( this._clickOffset ? this._clickOffset.left : 0 );
			} else {
				pixelTotal = this.elementSize.height;
				pixelMouse = position.y - this.elementOffset.top - ( this._clickOffset ? this._clickOffset.top : 0 );
			}

			percentMouse = ( pixelMouse / pixelTotal );
			if ( percentMouse > 1 ) {
				percentMouse = 1;
			}
			if ( percentMouse < 0 ) {
				percentMouse = 0;
			}
			if ( this.orientation === "vertical" ) {
				percentMouse = 1 - percentMouse;
			}

			valueTotal = this._valueMax() - this._valueMin();
			valueMouse = this._valueMin() + percentMouse * valueTotal;

			return this._trimAlignValue( valueMouse );
		},

		_start: function( event, index ) {
			var uiHash = {
				handle: this.handles[ index ],
				value: this.value()
			};
			if ( this.options.values && this.options.values.length ) {
				uiHash.value = this.values( index );
				uiHash.values = this.values();
			}
			return this._trigger( "start", event, uiHash );
		},

		_slide: function( event, index, newVal ) {
			var otherVal,
				newValues,
				allowed;

			if ( this.options.values && this.options.values.length ) {
				otherVal = this.values( index ? 0 : 1 );

				if ( ( this.options.values.length === 2 && this.options.range === true ) &&
						( ( index === 0 && newVal > otherVal) || ( index === 1 && newVal < otherVal ) )
					) {
					newVal = otherVal;
				}

				if ( newVal !== this.values( index ) ) {
					newValues = this.values();
					newValues[ index ] = newVal;
					// A slide can be canceled by returning false from the slide callback
					allowed = this._trigger( "slide", event, {
						handle: this.handles[ index ],
						value: newVal,
						values: newValues
					} );
					otherVal = this.values( index ? 0 : 1 );
					if ( allowed !== false ) {
						this.values( index, newVal, true );
					}
				}
			} else {
				if ( newVal !== this.value() ) {
					// A slide can be canceled by returning false from the slide callback
					allowed = this._trigger( "slide", event, {
						handle: this.handles[ index ],
						value: newVal
					} );
					if ( allowed !== false ) {
						this.value( newVal );
					}
				}
			}
		},

		_stop: function( event, index ) {
			var uiHash = {
				handle: this.handles[ index ],
				value: this.value()
			};
			if ( this.options.values && this.options.values.length ) {
				uiHash.value = this.values( index );
				uiHash.values = this.values();
			}

			this._trigger( "stop", event, uiHash );
		},

		_change: function( event, index ) {
			if ( !this._keySliding && !this._mouseSliding ) {
				var uiHash = {
					handle: this.handles[ index ],
					value: this.value()
				};
				if ( this.options.values && this.options.values.length ) {
					uiHash.value = this.values( index );
					uiHash.values = this.values();
				}

				//store the last changed value index for reference when handles overlap
				this._lastChangedValue = index;

				this._trigger( "change", event, uiHash );
			}
		},

		value: function( newValue ) {
			if ( arguments.length ) {
				this.options.value = this._trimAlignValue( newValue );
				this._refreshValue();
				this._change( null, 0 );
				return;
			}

			return this._value();
		},

		values: function( index, newValue ) {
			var vals,
				newValues,
				i;

			if ( arguments.length > 1 ) {
				this.options.values[ index ] = this._trimAlignValue( newValue );
				this._refreshValue();
				this._change( null, index );
				return;
			}

			if ( arguments.length ) {
				if ( $.isArray( arguments[ 0 ] ) ) {
					vals = this.options.values;
					newValues = arguments[ 0 ];
					for ( i = 0; i < vals.length; i += 1 ) {
						vals[ i ] = this._trimAlignValue( newValues[ i ] );
						this._change( null, i );
					}
					this._refreshValue();
				} else {
					if ( this.options.values && this.options.values.length ) {
						return this._values( index );
					} else {
						return this.value();
					}
				}
			} else {
				return this._values();
			}
		},

		_setOption: function( key, value ) {
			var i,
				valsLength = 0;

			if ( key === "range" && this.options.range === true ) {
				if ( value === "min" ) {
					this.options.value = this._values( 0 );
					this.options.values = null;
				} else if ( value === "max" ) {
					this.options.value = this._values( this.options.values.length-1 );
					this.options.values = null;
				}
			}

			if ( $.isArray( this.options.values ) ) {
				valsLength = this.options.values.length;
			}

			$.Widget.prototype._setOption.apply( this, arguments );

			switch ( key ) {
				case "orientation":
					this._detectOrientation();
					this.element
						.removeClass( "ui-slider-horizontal ui-slider-vertical" )
						.addClass( "ui-slider-" + this.orientation );
					this._refreshValue();
					break;
				case "value":
					this._animateOff = true;
					this._refreshValue();
					this._change( null, 0 );
					this._animateOff = false;
					break;
				case "values":
					this._animateOff = true;
					this._refreshValue();
					for ( i = 0; i < valsLength; i += 1 ) {
						this._change( null, i );
					}
					this._animateOff = false;
					break;
				case "min":
				case "max":
					this._animateOff = true;
					this._refreshValue();
					this._animateOff = false;
					break;
				case "range":
					this._animateOff = true;
					this._refresh();
					this._animateOff = false;
					break;
			}
		},

		//internal value getter
		// _value() returns value trimmed by min and max, aligned by step
		_value: function() {
			var val = this.options.value;
			val = this._trimAlignValue( val );

			return val;
		},

		//internal values getter
		// _values() returns array of values trimmed by min and max, aligned by step
		// _values( index ) returns single value trimmed by min and max, aligned by step
		_values: function( index ) {
			var val,
				vals,
				i;

			if ( arguments.length ) {
				val = this.options.values[ index ];
				val = this._trimAlignValue( val );

				return val;
			} else if ( this.options.values && this.options.values.length ) {
				// .slice() creates a copy of the array
				// this copy gets trimmed by min and max and then returned
				vals = this.options.values.slice();
				for ( i = 0; i < vals.length; i+= 1) {
					vals[ i ] = this._trimAlignValue( vals[ i ] );
				}

				return vals;
			} else {
				return [];
			}
		},

		// returns the step-aligned value that val is closest to, between (inclusive) min and max
		_trimAlignValue: function( val ) {
			if ( val <= this._valueMin() ) {
				return this._valueMin();
			}
			if ( val >= this._valueMax() ) {
				return this._valueMax();
			}
			var step = ( this.options.step > 0 ) ? this.options.step : 1,
				valModStep = (val - this._valueMin()) % step,
				alignValue = val - valModStep;

			if ( Math.abs(valModStep) * 2 >= step ) {
				alignValue += ( valModStep > 0 ) ? step : ( -step );
			}

			// Since JavaScript has problems with large floats, round
			// the final value to 5 digits after the decimal point (see #4124)
			return parseFloat( alignValue.toFixed(5) );
		},

		_valueMin: function() {
			return this.options.min;
		},

		_valueMax: function() {
			return this.options.max;
		},

		_refreshValue: function() {
			var lastValPercent, valPercent, value, valueMin, valueMax,
				oRange = this.options.range,
				o = this.options,
				that = this,
				animate = ( !this._animateOff ) ? o.animate : false,
				_set = {};

			if ( this.options.values && this.options.values.length ) {
				this.handles.each(function( i ) {
					valPercent = ( that.values(i) - that._valueMin() ) / ( that._valueMax() - that._valueMin() ) * 100;
					_set[ that.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
					$( this ).stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );
					if ( that.options.range === true ) {
						if ( that.orientation === "horizontal" ) {
							if ( i === 0 ) {
								that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { left: valPercent + "%" }, o.animate );
							}
							if ( i === 1 ) {
								that.range[ animate ? "animate" : "css" ]( { width: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
							}
						} else {
							if ( i === 0 ) {
								that.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { bottom: ( valPercent ) + "%" }, o.animate );
							}
							if ( i === 1 ) {
								that.range[ animate ? "animate" : "css" ]( { height: ( valPercent - lastValPercent ) + "%" }, { queue: false, duration: o.animate } );
							}
						}
					}
					lastValPercent = valPercent;
				});
			} else {
				value = this.value();
				valueMin = this._valueMin();
				valueMax = this._valueMax();
				valPercent = ( valueMax !== valueMin ) ?
						( value - valueMin ) / ( valueMax - valueMin ) * 100 :
						0;
				_set[ this.orientation === "horizontal" ? "left" : "bottom" ] = valPercent + "%";
				this.handle.stop( 1, 1 )[ animate ? "animate" : "css" ]( _set, o.animate );

				if ( oRange === "min" && this.orientation === "horizontal" ) {
					this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { width: valPercent + "%" }, o.animate );
				}
				if ( oRange === "max" && this.orientation === "horizontal" ) {
					this.range[ animate ? "animate" : "css" ]( { width: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
				}
				if ( oRange === "min" && this.orientation === "vertical" ) {
					this.range.stop( 1, 1 )[ animate ? "animate" : "css" ]( { height: valPercent + "%" }, o.animate );
				}
				if ( oRange === "max" && this.orientation === "vertical" ) {
					this.range[ animate ? "animate" : "css" ]( { height: ( 100 - valPercent ) + "%" }, { queue: false, duration: o.animate } );
				}
			}
		},

		_handleEvents: {
			keydown: function( event ) {
				/*jshint maxcomplexity:25*/
				var allowed, curVal, newVal, step,
					index = $( event.target ).data( "ui-slider-handle-index" );

				switch ( event.keyCode ) {
					case $.ui.keyCode.HOME:
					case $.ui.keyCode.END:
					case $.ui.keyCode.PAGE_UP:
					case $.ui.keyCode.PAGE_DOWN:
					case $.ui.keyCode.UP:
					case $.ui.keyCode.RIGHT:
					case $.ui.keyCode.DOWN:
					case $.ui.keyCode.LEFT:
						event.preventDefault();
						if ( !this._keySliding ) {
							this._keySliding = true;
							$( event.target ).addClass( "ui-state-active" );
							allowed = this._start( event, index );
							if ( allowed === false ) {
								return;
							}
						}
						break;
				}

				step = this.options.step;
				if ( this.options.values && this.options.values.length ) {
					curVal = newVal = this.values( index );
				} else {
					curVal = newVal = this.value();
				}

				switch ( event.keyCode ) {
					case $.ui.keyCode.HOME:
						newVal = this._valueMin();
						break;
					case $.ui.keyCode.END:
						newVal = this._valueMax();
						break;
					case $.ui.keyCode.PAGE_UP:
						newVal = this._trimAlignValue( curVal + ( (this._valueMax() - this._valueMin()) / numPages ) );
						break;
					case $.ui.keyCode.PAGE_DOWN:
						newVal = this._trimAlignValue( curVal - ( (this._valueMax() - this._valueMin()) / numPages ) );
						break;
					case $.ui.keyCode.UP:
					case $.ui.keyCode.RIGHT:
						if ( curVal === this._valueMax() ) {
							return;
						}
						newVal = this._trimAlignValue( curVal + step );
						break;
					case $.ui.keyCode.DOWN:
					case $.ui.keyCode.LEFT:
						if ( curVal === this._valueMin() ) {
							return;
						}
						newVal = this._trimAlignValue( curVal - step );
						break;
				}

				this._slide( event, index, newVal );
			},
			click: function( event ) {
				event.preventDefault();
			},
			keyup: function( event ) {
				var index = $( event.target ).data( "ui-slider-handle-index" );

				if ( this._keySliding ) {
					this._keySliding = false;
					this._stop( event, index );
					this._change( event, index );
					$( event.target ).removeClass( "ui-state-active" );
				}
			}
		}

	});

	}(jQuery));

	(function( $ ) {

	function modifier( fn ) {
		return function() {
			var previous = this.element.val();
			fn.apply( this, arguments );
			this._refresh();
			if ( previous !== this.element.val() ) {
				this._trigger( "change" );
			}
		};
	}

	$.widget( "ui.spinner", {
		version: "1.10.3",
		defaultElement: "<input>",
		widgetEventPrefix: "spin",
		options: {
			culture: null,
			icons: {
				down: "ui-icon-triangle-1-s",
				up: "ui-icon-triangle-1-n"
			},
			incremental: true,
			max: null,
			min: null,
			numberFormat: null,
			page: 10,
			step: 1,

			change: null,
			spin: null,
			start: null,
			stop: null
		},

		_create: function() {
			// handle string values that need to be parsed
			this._setOption( "max", this.options.max );
			this._setOption( "min", this.options.min );
			this._setOption( "step", this.options.step );

			// format the value, but don't constrain
			this._value( this.element.val(), true );

			this._draw();
			this._on( this._events );
			this._refresh();

			// turning off autocomplete prevents the browser from remembering the
			// value when navigating through history, so we re-enable autocomplete
			// if the page is unloaded before the widget is destroyed. #7790
			this._on( this.window, {
				beforeunload: function() {
					this.element.removeAttr( "autocomplete" );
				}
			});
		},

		_getCreateOptions: function() {
			var options = {},
				element = this.element;

			$.each( [ "min", "max", "step" ], function( i, option ) {
				var value = element.attr( option );
				if ( value !== undefined && value.length ) {
					options[ option ] = value;
				}
			});

			return options;
		},

		_events: {
			keydown: function( event ) {
				if ( this._start( event ) && this._keydown( event ) ) {
					event.preventDefault();
				}
			},
			keyup: "_stop",
			focus: function() {
				this.previous = this.element.val();
			},
			blur: function( event ) {
				if ( this.cancelBlur ) {
					delete this.cancelBlur;
					return;
				}

				this._stop();
				this._refresh();
				if ( this.previous !== this.element.val() ) {
					this._trigger( "change", event );
				}
			},
			mousewheel: function( event, delta ) {
				if ( !delta ) {
					return;
				}
				if ( !this.spinning && !this._start( event ) ) {
					return false;
				}

				this._spin( (delta > 0 ? 1 : -1) * this.options.step, event );
				clearTimeout( this.mousewheelTimer );
				this.mousewheelTimer = this._delay(function() {
					if ( this.spinning ) {
						this._stop( event );
					}
				}, 100 );
				event.preventDefault();
			},
			"mousedown .ui-spinner-button": function( event ) {
				var previous;

				// We never want the buttons to have focus; whenever the user is
				// interacting with the spinner, the focus should be on the input.
				// If the input is focused then this.previous is properly set from
				// when the input first received focus. If the input is not focused
				// then we need to set this.previous based on the value before spinning.
				previous = this.element[0] === this.document[0].activeElement ?
					this.previous : this.element.val();
				function checkFocus() {
					var isActive = this.element[0] === this.document[0].activeElement;
					if ( !isActive ) {
						this.element.focus();
						this.previous = previous;
						// support: IE
						// IE sets focus asynchronously, so we need to check if focus
						// moved off of the input because the user clicked on the button.
						this._delay(function() {
							this.previous = previous;
						});
					}
				}

				// ensure focus is on (or stays on) the text field
				event.preventDefault();
				checkFocus.call( this );

				// support: IE
				// IE doesn't prevent moving focus even with event.preventDefault()
				// so we set a flag to know when we should ignore the blur event
				// and check (again) if focus moved off of the input.
				this.cancelBlur = true;
				this._delay(function() {
					delete this.cancelBlur;
					checkFocus.call( this );
				});

				if ( this._start( event ) === false ) {
					return;
				}

				this._repeat( null, $( event.currentTarget ).hasClass( "ui-spinner-up" ) ? 1 : -1, event );
			},
			"mouseup .ui-spinner-button": "_stop",
			"mouseenter .ui-spinner-button": function( event ) {
				// button will add ui-state-active if mouse was down while mouseleave and kept down
				if ( !$( event.currentTarget ).hasClass( "ui-state-active" ) ) {
					return;
				}

				if ( this._start( event ) === false ) {
					return false;
				}
				this._repeat( null, $( event.currentTarget ).hasClass( "ui-spinner-up" ) ? 1 : -1, event );
			},
			// TODO: do we really want to consider this a stop?
			// shouldn't we just stop the repeater and wait until mouseup before
			// we trigger the stop event?
			"mouseleave .ui-spinner-button": "_stop"
		},

		_draw: function() {
			var uiSpinner = this.uiSpinner = this.element
				.addClass( "ui-spinner-input" )
				.attr( "autocomplete", "off" )
				.wrap( this._uiSpinnerHtml() )
				.parent()
					// add buttons
					.append( this._buttonHtml() );

			this.element.attr( "role", "spinbutton" );

			// button bindings
			this.buttons = uiSpinner.find( ".ui-spinner-button" )
				.attr( "tabIndex", -1 )
				.button()
				.removeClass( "ui-corner-all" );

			// IE 6 doesn't understand height: 50% for the buttons
			// unless the wrapper has an explicit height
			if ( this.buttons.height() > Math.ceil( uiSpinner.height() * 0.5 ) &&
					uiSpinner.height() > 0 ) {
				uiSpinner.height( uiSpinner.height() );
			}

			// disable spinner if element was already disabled
			if ( this.options.disabled ) {
				this.disable();
			}
		},

		_keydown: function( event ) {
			var options = this.options,
				keyCode = $.ui.keyCode;

			switch ( event.keyCode ) {
			case keyCode.UP:
				this._repeat( null, 1, event );
				return true;
			case keyCode.DOWN:
				this._repeat( null, -1, event );
				return true;
			case keyCode.PAGE_UP:
				this._repeat( null, options.page, event );
				return true;
			case keyCode.PAGE_DOWN:
				this._repeat( null, -options.page, event );
				return true;
			}

			return false;
		},

		_uiSpinnerHtml: function() {
			return "<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>";
		},

		_buttonHtml: function() {
			return "" +
				"<a class='ui-spinner-button ui-spinner-up ui-corner-tr'>" +
					"<span class='ui-icon " + this.options.icons.up + "'>&#9650;</span>" +
				"</a>" +
				"<a class='ui-spinner-button ui-spinner-down ui-corner-br'>" +
					"<span class='ui-icon " + this.options.icons.down + "'>&#9660;</span>" +
				"</a>";
		},

		_start: function( event ) {
			if ( !this.spinning && this._trigger( "start", event ) === false ) {
				return false;
			}

			if ( !this.counter ) {
				this.counter = 1;
			}
			this.spinning = true;
			return true;
		},

		_repeat: function( i, steps, event ) {
			i = i || 500;

			clearTimeout( this.timer );
			this.timer = this._delay(function() {
				this._repeat( 40, steps, event );
			}, i );

			this._spin( steps * this.options.step, event );
		},

		_spin: function( step, event ) {
			var value = this.value() || 0;

			if ( !this.counter ) {
				this.counter = 1;
			}

			value = this._adjustValue( value + step * this._increment( this.counter ) );

			if ( !this.spinning || this._trigger( "spin", event, { value: value } ) !== false) {
				this._value( value );
				this.counter++;
			}
		},

		_increment: function( i ) {
			var incremental = this.options.incremental;

			if ( incremental ) {
				return $.isFunction( incremental ) ?
					incremental( i ) :
					Math.floor( i*i*i/50000 - i*i/500 + 17*i/200 + 1 );
			}

			return 1;
		},

		_precision: function() {
			var precision = this._precisionOf( this.options.step );
			if ( this.options.min !== null ) {
				precision = Math.max( precision, this._precisionOf( this.options.min ) );
			}
			return precision;
		},

		_precisionOf: function( num ) {
			var str = num.toString(),
				decimal = str.indexOf( "." );
			return decimal === -1 ? 0 : str.length - decimal - 1;
		},

		_adjustValue: function( value ) {
			var base, aboveMin,
				options = this.options;

			// make sure we're at a valid step
			// - find out where we are relative to the base (min or 0)
			base = options.min !== null ? options.min : 0;
			aboveMin = value - base;
			// - round to the nearest step
			aboveMin = Math.round(aboveMin / options.step) * options.step;
			// - rounding is based on 0, so adjust back to our base
			value = base + aboveMin;

			// fix precision from bad JS floating point math
			value = parseFloat( value.toFixed( this._precision() ) );

			// clamp the value
			if ( options.max !== null && value > options.max) {
				return options.max;
			}
			if ( options.min !== null && value < options.min ) {
				return options.min;
			}

			return value;
		},

		_stop: function( event ) {
			if ( !this.spinning ) {
				return;
			}

			clearTimeout( this.timer );
			clearTimeout( this.mousewheelTimer );
			this.counter = 0;
			this.spinning = false;
			this._trigger( "stop", event );
		},

		_setOption: function( key, value ) {
			if ( key === "culture" || key === "numberFormat" ) {
				var prevValue = this._parse( this.element.val() );
				this.options[ key ] = value;
				this.element.val( this._format( prevValue ) );
				return;
			}

			if ( key === "max" || key === "min" || key === "step" ) {
				if ( typeof value === "string" ) {
					value = this._parse( value );
				}
			}
			if ( key === "icons" ) {
				this.buttons.first().find( ".ui-icon" )
					.removeClass( this.options.icons.up )
					.addClass( value.up );
				this.buttons.last().find( ".ui-icon" )
					.removeClass( this.options.icons.down )
					.addClass( value.down );
			}

			this._super( key, value );

			if ( key === "disabled" ) {
				if ( value ) {
					this.element.prop( "disabled", true );
					this.buttons.button( "disable" );
				} else {
					this.element.prop( "disabled", false );
					this.buttons.button( "enable" );
				}
			}
		},

		_setOptions: modifier(function( options ) {
			this._super( options );
			this._value( this.element.val() );
		}),

		_parse: function( val ) {
			if ( typeof val === "string" && val !== "" ) {
				val = window.Globalize && this.options.numberFormat ?
					Globalize.parseFloat( val, 10, this.options.culture ) : +val;
			}
			return val === "" || isNaN( val ) ? null : val;
		},

		_format: function( value ) {
			if ( value === "" ) {
				return "";
			}
			return window.Globalize && this.options.numberFormat ?
				Globalize.format( value, this.options.numberFormat, this.options.culture ) :
				value;
		},

		_refresh: function() {
			this.element.attr({
				"aria-valuemin": this.options.min,
				"aria-valuemax": this.options.max,
				// TODO: what should we do with values that can't be parsed?
				"aria-valuenow": this._parse( this.element.val() )
			});
		},

		// update the value without triggering change
		_value: function( value, allowAny ) {
			var parsed;
			if ( value !== "" ) {
				parsed = this._parse( value );
				if ( parsed !== null ) {
					if ( !allowAny ) {
						parsed = this._adjustValue( parsed );
					}
					value = this._format( parsed );
				}
			}
			this.element.val( value );
			this._refresh();
		},

		_destroy: function() {
			this.element
				.removeClass( "ui-spinner-input" )
				.prop( "disabled", false )
				.removeAttr( "autocomplete" )
				.removeAttr( "role" )
				.removeAttr( "aria-valuemin" )
				.removeAttr( "aria-valuemax" )
				.removeAttr( "aria-valuenow" );
			this.uiSpinner.replaceWith( this.element );
		},

		stepUp: modifier(function( steps ) {
			this._stepUp( steps );
		}),
		_stepUp: function( steps ) {
			if ( this._start() ) {
				this._spin( (steps || 1) * this.options.step );
				this._stop();
			}
		},

		stepDown: modifier(function( steps ) {
			this._stepDown( steps );
		}),
		_stepDown: function( steps ) {
			if ( this._start() ) {
				this._spin( (steps || 1) * -this.options.step );
				this._stop();
			}
		},

		pageUp: modifier(function( pages ) {
			this._stepUp( (pages || 1) * this.options.page );
		}),

		pageDown: modifier(function( pages ) {
			this._stepDown( (pages || 1) * this.options.page );
		}),

		value: function( newVal ) {
			if ( !arguments.length ) {
				return this._parse( this.element.val() );
			}
			modifier( this._value ).call( this, newVal );
		},

		widget: function() {
			return this.uiSpinner;
		}
	});

	}( jQuery ) );

	(function( $, undefined ) {

	var tabId = 0,
		rhash = /#.*$/;

	function getNextTabId() {
		return ++tabId;
	}

	function isLocal( anchor ) {
		return anchor.hash.length > 1 &&
			decodeURIComponent( anchor.href.replace( rhash, "" ) ) ===
				decodeURIComponent( location.href.replace( rhash, "" ) );
	}

	$.widget( "ui.tabs", {
		version: "1.10.3",
		delay: 300,
		options: {
			active: null,
			collapsible: false,
			event: "click",
			heightStyle: "content",
			hide: null,
			show: null,

			// callbacks
			activate: null,
			beforeActivate: null,
			beforeLoad: null,
			load: null
		},

		_create: function() {
			var that = this,
				options = this.options;

			this.running = false;

			this.element
				.addClass( "ui-tabs ui-widget ui-widget-content ui-corner-all" )
				.toggleClass( "ui-tabs-collapsible", options.collapsible )
				// Prevent users from focusing disabled tabs via click
				.delegate( ".ui-tabs-nav > li", "mousedown" + this.eventNamespace, function( event ) {
					if ( $( this ).is( ".ui-state-disabled" ) ) {
						event.preventDefault();
					}
				})
				// support: IE <9
				// Preventing the default action in mousedown doesn't prevent IE
				// from focusing the element, so if the anchor gets focused, blur.
				// We don't have to worry about focusing the previously focused
				// element since clicking on a non-focusable element should focus
				// the body anyway.
				.delegate( ".ui-tabs-anchor", "focus" + this.eventNamespace, function() {
					if ( $( this ).closest( "li" ).is( ".ui-state-disabled" ) ) {
						this.blur();
					}
				});

			this._processTabs();
			options.active = this._initialActive();

			// Take disabling tabs via class attribute from HTML
			// into account and update option properly.
			if ( $.isArray( options.disabled ) ) {
				options.disabled = $.unique( options.disabled.concat(
					$.map( this.tabs.filter( ".ui-state-disabled" ), function( li ) {
						return that.tabs.index( li );
					})
				) ).sort();
			}

			// check for length avoids error when initializing empty list
			if ( this.options.active !== false && this.anchors.length ) {
				this.active = this._findActive( options.active );
			} else {
				this.active = $();
			}

			this._refresh();

			if ( this.active.length ) {
				this.load( options.active );
			}
		},

		_initialActive: function() {
			var active = this.options.active,
				collapsible = this.options.collapsible,
				locationHash = location.hash.substring( 1 );

			if ( active === null ) {
				// check the fragment identifier in the URL
				if ( locationHash ) {
					this.tabs.each(function( i, tab ) {
						if ( $( tab ).attr( "aria-controls" ) === locationHash ) {
							active = i;
							return false;
						}
					});
				}

				// check for a tab marked active via a class
				if ( active === null ) {
					active = this.tabs.index( this.tabs.filter( ".ui-tabs-active" ) );
				}

				// no active tab, set to false
				if ( active === null || active === -1 ) {
					active = this.tabs.length ? 0 : false;
				}
			}

			// handle numbers: negative, out of range
			if ( active !== false ) {
				active = this.tabs.index( this.tabs.eq( active ) );
				if ( active === -1 ) {
					active = collapsible ? false : 0;
				}
			}

			// don't allow collapsible: false and active: false
			if ( !collapsible && active === false && this.anchors.length ) {
				active = 0;
			}

			return active;
		},

		_getCreateEventData: function() {
			return {
				tab: this.active,
				panel: !this.active.length ? $() : this._getPanelForTab( this.active )
			};
		},

		_tabKeydown: function( event ) {
			/*jshint maxcomplexity:15*/
			var focusedTab = $( this.document[0].activeElement ).closest( "li" ),
				selectedIndex = this.tabs.index( focusedTab ),
				goingForward = true;

			if ( this._handlePageNav( event ) ) {
				return;
			}

			switch ( event.keyCode ) {
				case $.ui.keyCode.RIGHT:
				case $.ui.keyCode.DOWN:
					selectedIndex++;
					break;
				case $.ui.keyCode.UP:
				case $.ui.keyCode.LEFT:
					goingForward = false;
					selectedIndex--;
					break;
				case $.ui.keyCode.END:
					selectedIndex = this.anchors.length - 1;
					break;
				case $.ui.keyCode.HOME:
					selectedIndex = 0;
					break;
				case $.ui.keyCode.SPACE:
					// Activate only, no collapsing
					event.preventDefault();
					clearTimeout( this.activating );
					this._activate( selectedIndex );
					return;
				case $.ui.keyCode.ENTER:
					// Toggle (cancel delayed activation, allow collapsing)
					event.preventDefault();
					clearTimeout( this.activating );
					// Determine if we should collapse or activate
					this._activate( selectedIndex === this.options.active ? false : selectedIndex );
					return;
				default:
					return;
			}

			// Focus the appropriate tab, based on which key was pressed
			event.preventDefault();
			clearTimeout( this.activating );
			selectedIndex = this._focusNextTab( selectedIndex, goingForward );

			// Navigating with control key will prevent automatic activation
			if ( !event.ctrlKey ) {
				// Update aria-selected immediately so that AT think the tab is already selected.
				// Otherwise AT may confuse the user by stating that they need to activate the tab,
				// but the tab will already be activated by the time the announcement finishes.
				focusedTab.attr( "aria-selected", "false" );
				this.tabs.eq( selectedIndex ).attr( "aria-selected", "true" );

				this.activating = this._delay(function() {
					this.option( "active", selectedIndex );
				}, this.delay );
			}
		},

		_panelKeydown: function( event ) {
			if ( this._handlePageNav( event ) ) {
				return;
			}

			// Ctrl+up moves focus to the current tab
			if ( event.ctrlKey && event.keyCode === $.ui.keyCode.UP ) {
				event.preventDefault();
				this.active.focus();
			}
		},

		// Alt+page up/down moves focus to the previous/next tab (and activates)
		_handlePageNav: function( event ) {
			if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP ) {
				this._activate( this._focusNextTab( this.options.active - 1, false ) );
				return true;
			}
			if ( event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN ) {
				this._activate( this._focusNextTab( this.options.active + 1, true ) );
				return true;
			}
		},

		_findNextTab: function( index, goingForward ) {
			var lastTabIndex = this.tabs.length - 1;

			function constrain() {
				if ( index > lastTabIndex ) {
					index = 0;
				}
				if ( index < 0 ) {
					index = lastTabIndex;
				}
				return index;
			}

			while ( $.inArray( constrain(), this.options.disabled ) !== -1 ) {
				index = goingForward ? index + 1 : index - 1;
			}

			return index;
		},

		_focusNextTab: function( index, goingForward ) {
			index = this._findNextTab( index, goingForward );
			this.tabs.eq( index ).focus();
			return index;
		},

		_setOption: function( key, value ) {
			if ( key === "active" ) {
				// _activate() will handle invalid values and update this.options
				this._activate( value );
				return;
			}

			if ( key === "disabled" ) {
				// don't use the widget factory's disabled handling
				this._setupDisabled( value );
				return;
			}

			this._super( key, value);

			if ( key === "collapsible" ) {
				this.element.toggleClass( "ui-tabs-collapsible", value );
				// Setting collapsible: false while collapsed; open first panel
				if ( !value && this.options.active === false ) {
					this._activate( 0 );
				}
			}

			if ( key === "event" ) {
				this._setupEvents( value );
			}

			if ( key === "heightStyle" ) {
				this._setupHeightStyle( value );
			}
		},

		_tabId: function( tab ) {
			return tab.attr( "aria-controls" ) || "ui-tabs-" + getNextTabId();
		},

		_sanitizeSelector: function( hash ) {
			return hash ? hash.replace( /[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&" ) : "";
		},

		refresh: function() {
			var options = this.options,
				lis = this.tablist.children( ":has(a[href])" );

			// get disabled tabs from class attribute from HTML
			// this will get converted to a boolean if needed in _refresh()
			options.disabled = $.map( lis.filter( ".ui-state-disabled" ), function( tab ) {
				return lis.index( tab );
			});

			this._processTabs();

			// was collapsed or no tabs
			if ( options.active === false || !this.anchors.length ) {
				options.active = false;
				this.active = $();
			// was active, but active tab is gone
			} else if ( this.active.length && !$.contains( this.tablist[ 0 ], this.active[ 0 ] ) ) {
				// all remaining tabs are disabled
				if ( this.tabs.length === options.disabled.length ) {
					options.active = false;
					this.active = $();
				// activate previous tab
				} else {
					this._activate( this._findNextTab( Math.max( 0, options.active - 1 ), false ) );
				}
			// was active, active tab still exists
			} else {
				// make sure active index is correct
				options.active = this.tabs.index( this.active );
			}

			this._refresh();
		},

		_refresh: function() {
			this._setupDisabled( this.options.disabled );
			this._setupEvents( this.options.event );
			this._setupHeightStyle( this.options.heightStyle );

			this.tabs.not( this.active ).attr({
				"aria-selected": "false",
				tabIndex: -1
			});
			this.panels.not( this._getPanelForTab( this.active ) )
				.hide()
				.attr({
					"aria-expanded": "false",
					"aria-hidden": "true"
				});

			// Make sure one tab is in the tab order
			if ( !this.active.length ) {
				this.tabs.eq( 0 ).attr( "tabIndex", 0 );
			} else {
				this.active
					.addClass( "ui-tabs-active ui-state-active" )
					.attr({
						"aria-selected": "true",
						tabIndex: 0
					});
				this._getPanelForTab( this.active )
					.show()
					.attr({
						"aria-expanded": "true",
						"aria-hidden": "false"
					});
			}
		},

		_processTabs: function() {
			var that = this;

			this.tablist = this._getList()
				.addClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" )
				.attr( "role", "tablist" );

			this.tabs = this.tablist.find( "> li:has(a[href])" )
				.addClass( "ui-state-default ui-corner-top" )
				.attr({
					role: "tab",
					tabIndex: -1
				});

			this.anchors = this.tabs.map(function() {
					return $( "a", this )[ 0 ];
				})
				.addClass( "ui-tabs-anchor" )
				.attr({
					role: "presentation",
					tabIndex: -1
				});

			this.panels = $();

			this.anchors.each(function( i, anchor ) {
				var selector, panel, panelId,
					anchorId = $( anchor ).uniqueId().attr( "id" ),
					tab = $( anchor ).closest( "li" ),
					originalAriaControls = tab.attr( "aria-controls" );

				// inline tab
				if ( isLocal( anchor ) ) {
					selector = anchor.hash;
					panel = that.element.find( that._sanitizeSelector( selector ) );
				// remote tab
				} else {
					panelId = that._tabId( tab );
					selector = "#" + panelId;
					panel = that.element.find( selector );
					if ( !panel.length ) {
						panel = that._createPanel( panelId );
						panel.insertAfter( that.panels[ i - 1 ] || that.tablist );
					}
					panel.attr( "aria-live", "polite" );
				}

				if ( panel.length) {
					that.panels = that.panels.add( panel );
				}
				if ( originalAriaControls ) {
					tab.data( "ui-tabs-aria-controls", originalAriaControls );
				}
				tab.attr({
					"aria-controls": selector.substring( 1 ),
					"aria-labelledby": anchorId
				});
				panel.attr( "aria-labelledby", anchorId );
			});

			this.panels
				.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )
				.attr( "role", "tabpanel" );
		},

		// allow overriding how to find the list for rare usage scenarios (#7715)
		_getList: function() {
			return this.element.find( "ol,ul" ).eq( 0 );
		},

		_createPanel: function( id ) {
			return $( "<div>" )
				.attr( "id", id )
				.addClass( "ui-tabs-panel ui-widget-content ui-corner-bottom" )
				.data( "ui-tabs-destroy", true );
		},

		_setupDisabled: function( disabled ) {
			if ( $.isArray( disabled ) ) {
				if ( !disabled.length ) {
					disabled = false;
				} else if ( disabled.length === this.anchors.length ) {
					disabled = true;
				}
			}

			// disable tabs
			for ( var i = 0, li; ( li = this.tabs[ i ] ); i++ ) {
				if ( disabled === true || $.inArray( i, disabled ) !== -1 ) {
					$( li )
						.addClass( "ui-state-disabled" )
						.attr( "aria-disabled", "true" );
				} else {
					$( li )
						.removeClass( "ui-state-disabled" )
						.removeAttr( "aria-disabled" );
				}
			}

			this.options.disabled = disabled;
		},

		_setupEvents: function( event ) {
			var events = {
				click: function( event ) {
					event.preventDefault();
				}
			};
			if ( event ) {
				$.each( event.split(" "), function( index, eventName ) {
					events[ eventName ] = "_eventHandler";
				});
			}

			this._off( this.anchors.add( this.tabs ).add( this.panels ) );
			this._on( this.anchors, events );
			this._on( this.tabs, { keydown: "_tabKeydown" } );
			this._on( this.panels, { keydown: "_panelKeydown" } );

			this._focusable( this.tabs );
			this._hoverable( this.tabs );
		},

		_setupHeightStyle: function( heightStyle ) {
			var maxHeight,
				parent = this.element.parent();

			if ( heightStyle === "fill" ) {
				maxHeight = parent.height();
				maxHeight -= this.element.outerHeight() - this.element.height();

				this.element.siblings( ":visible" ).each(function() {
					var elem = $( this ),
						position = elem.css( "position" );

					if ( position === "absolute" || position === "fixed" ) {
						return;
					}
					maxHeight -= elem.outerHeight( true );
				});

				this.element.children().not( this.panels ).each(function() {
					maxHeight -= $( this ).outerHeight( true );
				});

				this.panels.each(function() {
					$( this ).height( Math.max( 0, maxHeight -
						$( this ).innerHeight() + $( this ).height() ) );
				})
				.css( "overflow", "auto" );
			} else if ( heightStyle === "auto" ) {
				maxHeight = 0;
				this.panels.each(function() {
					maxHeight = Math.max( maxHeight, $( this ).height( "" ).height() );
				}).height( maxHeight );
			}
		},

		_eventHandler: function( event ) {
			var options = this.options,
				active = this.active,
				anchor = $( event.currentTarget ),
				tab = anchor.closest( "li" ),
				clickedIsActive = tab[ 0 ] === active[ 0 ],
				collapsing = clickedIsActive && options.collapsible,
				toShow = collapsing ? $() : this._getPanelForTab( tab ),
				toHide = !active.length ? $() : this._getPanelForTab( active ),
				eventData = {
					oldTab: active,
					oldPanel: toHide,
					newTab: collapsing ? $() : tab,
					newPanel: toShow
				};

			event.preventDefault();

			if ( tab.hasClass( "ui-state-disabled" ) ||
					// tab is already loading
					tab.hasClass( "ui-tabs-loading" ) ||
					// can't switch durning an animation
					this.running ||
					// click on active header, but not collapsible
					( clickedIsActive && !options.collapsible ) ||
					// allow canceling activation
					( this._trigger( "beforeActivate", event, eventData ) === false ) ) {
				return;
			}

			options.active = collapsing ? false : this.tabs.index( tab );

			this.active = clickedIsActive ? $() : tab;
			if ( this.xhr ) {
				this.xhr.abort();
			}

			if ( !toHide.length && !toShow.length ) {
				$.error( "jQuery UI Tabs: Mismatching fragment identifier." );
			}

			if ( toShow.length ) {
				this.load( this.tabs.index( tab ), event );
			}
			this._toggle( event, eventData );
		},

		// handles show/hide for selecting tabs
		_toggle: function( event, eventData ) {
			var that = this,
				toShow = eventData.newPanel,
				toHide = eventData.oldPanel;

			this.running = true;

			function complete() {
				that.running = false;
				that._trigger( "activate", event, eventData );
			}

			function show() {
				eventData.newTab.closest( "li" ).addClass( "ui-tabs-active ui-state-active" );

				if ( toShow.length && that.options.show ) {
					that._show( toShow, that.options.show, complete );
				} else {
					toShow.show();
					complete();
				}
			}

			// start out by hiding, then showing, then completing
			if ( toHide.length && this.options.hide ) {
				this._hide( toHide, this.options.hide, function() {
					eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );
					show();
				});
			} else {
				eventData.oldTab.closest( "li" ).removeClass( "ui-tabs-active ui-state-active" );
				toHide.hide();
				show();
			}

			toHide.attr({
				"aria-expanded": "false",
				"aria-hidden": "true"
			});
			eventData.oldTab.attr( "aria-selected", "false" );
			// If we're switching tabs, remove the old tab from the tab order.
			// If we're opening from collapsed state, remove the previous tab from the tab order.
			// If we're collapsing, then keep the collapsing tab in the tab order.
			if ( toShow.length && toHide.length ) {
				eventData.oldTab.attr( "tabIndex", -1 );
			} else if ( toShow.length ) {
				this.tabs.filter(function() {
					return $( this ).attr( "tabIndex" ) === 0;
				})
				.attr( "tabIndex", -1 );
			}

			toShow.attr({
				"aria-expanded": "true",
				"aria-hidden": "false"
			});
			eventData.newTab.attr({
				"aria-selected": "true",
				tabIndex: 0
			});
		},

		_activate: function( index ) {
			var anchor,
				active = this._findActive( index );

			// trying to activate the already active panel
			if ( active[ 0 ] === this.active[ 0 ] ) {
				return;
			}

			// trying to collapse, simulate a click on the current active header
			if ( !active.length ) {
				active = this.active;
			}

			anchor = active.find( ".ui-tabs-anchor" )[ 0 ];
			this._eventHandler({
				target: anchor,
				currentTarget: anchor,
				preventDefault: $.noop
			});
		},

		_findActive: function( index ) {
			return index === false ? $() : this.tabs.eq( index );
		},

		_getIndex: function( index ) {
			// meta-function to give users option to provide a href string instead of a numerical index.
			if ( typeof index === "string" ) {
				index = this.anchors.index( this.anchors.filter( "[href$='" + index + "']" ) );
			}

			return index;
		},

		_destroy: function() {
			if ( this.xhr ) {
				this.xhr.abort();
			}

			this.element.removeClass( "ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible" );

			this.tablist
				.removeClass( "ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" )
				.removeAttr( "role" );

			this.anchors
				.removeClass( "ui-tabs-anchor" )
				.removeAttr( "role" )
				.removeAttr( "tabIndex" )
				.removeUniqueId();

			this.tabs.add( this.panels ).each(function() {
				if ( $.data( this, "ui-tabs-destroy" ) ) {
					$( this ).remove();
				} else {
					$( this )
						.removeClass( "ui-state-default ui-state-active ui-state-disabled " +
							"ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel" )
						.removeAttr( "tabIndex" )
						.removeAttr( "aria-live" )
						.removeAttr( "aria-busy" )
						.removeAttr( "aria-selected" )
						.removeAttr( "aria-labelledby" )
						.removeAttr( "aria-hidden" )
						.removeAttr( "aria-expanded" )
						.removeAttr( "role" );
				}
			});

			this.tabs.each(function() {
				var li = $( this ),
					prev = li.data( "ui-tabs-aria-controls" );
				if ( prev ) {
					li
						.attr( "aria-controls", prev )
						.removeData( "ui-tabs-aria-controls" );
				} else {
					li.removeAttr( "aria-controls" );
				}
			});

			this.panels.show();

			if ( this.options.heightStyle !== "content" ) {
				this.panels.css( "height", "" );
			}
		},

		enable: function( index ) {
			var disabled = this.options.disabled;
			if ( disabled === false ) {
				return;
			}

			if ( index === undefined ) {
				disabled = false;
			} else {
				index = this._getIndex( index );
				if ( $.isArray( disabled ) ) {
					disabled = $.map( disabled, function( num ) {
						return num !== index ? num : null;
					});
				} else {
					disabled = $.map( this.tabs, function( li, num ) {
						return num !== index ? num : null;
					});
				}
			}
			this._setupDisabled( disabled );
		},

		disable: function( index ) {
			var disabled = this.options.disabled;
			if ( disabled === true ) {
				return;
			}

			if ( index === undefined ) {
				disabled = true;
			} else {
				index = this._getIndex( index );
				if ( $.inArray( index, disabled ) !== -1 ) {
					return;
				}
				if ( $.isArray( disabled ) ) {
					disabled = $.merge( [ index ], disabled ).sort();
				} else {
					disabled = [ index ];
				}
			}
			this._setupDisabled( disabled );
		},

		load: function( index, event ) {
			index = this._getIndex( index );
			var that = this,
				tab = this.tabs.eq( index ),
				anchor = tab.find( ".ui-tabs-anchor" ),
				panel = this._getPanelForTab( tab ),
				eventData = {
					tab: tab,
					panel: panel
				};

			// not remote
			if ( isLocal( anchor[ 0 ] ) ) {
				return;
			}

			this.xhr = $.ajax( this._ajaxSettings( anchor, event, eventData ) );

			// support: jQuery <1.8
			// jQuery <1.8 returns false if the request is canceled in beforeSend,
			// but as of 1.8, $.ajax() always returns a jqXHR object.
			if ( this.xhr && this.xhr.statusText !== "canceled" ) {
				tab.addClass( "ui-tabs-loading" );
				panel.attr( "aria-busy", "true" );

				this.xhr
					.success(function( response ) {
						// support: jQuery <1.8
						// http://bugs.jquery.com/ticket/11778
						setTimeout(function() {
							panel.html( response );
							that._trigger( "load", event, eventData );
						}, 1 );
					})
					.complete(function( jqXHR, status ) {
						// support: jQuery <1.8
						// http://bugs.jquery.com/ticket/11778
						setTimeout(function() {
							if ( status === "abort" ) {
								that.panels.stop( false, true );
							}

							tab.removeClass( "ui-tabs-loading" );
							panel.removeAttr( "aria-busy" );

							if ( jqXHR === that.xhr ) {
								delete that.xhr;
							}
						}, 1 );
					});
			}
		},

		_ajaxSettings: function( anchor, event, eventData ) {
			var that = this;
			return {
				url: anchor.attr( "href" ),
				beforeSend: function( jqXHR, settings ) {
					return that._trigger( "beforeLoad", event,
						$.extend( { jqXHR : jqXHR, ajaxSettings: settings }, eventData ) );
				}
			};
		},

		_getPanelForTab: function( tab ) {
			var id = $( tab ).attr( "aria-controls" );
			return this.element.find( this._sanitizeSelector( "#" + id ) );
		}
	});

	})( jQuery );

	(function( $ ) {

	var increments = 0;

	function addDescribedBy( elem, id ) {
		var describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ );
		describedby.push( id );
		elem
			.data( "ui-tooltip-id", id )
			.attr( "aria-describedby", $.trim( describedby.join( " " ) ) );
	}

	function removeDescribedBy( elem ) {
		var id = elem.data( "ui-tooltip-id" ),
			describedby = (elem.attr( "aria-describedby" ) || "").split( /\s+/ ),
			index = $.inArray( id, describedby );
		if ( index !== -1 ) {
			describedby.splice( index, 1 );
		}

		elem.removeData( "ui-tooltip-id" );
		describedby = $.trim( describedby.join( " " ) );
		if ( describedby ) {
			elem.attr( "aria-describedby", describedby );
		} else {
			elem.removeAttr( "aria-describedby" );
		}
	}

	$.widget( "ui.tooltip", {
		version: "1.10.3",
		options: {
			content: function() {
				// support: IE<9, Opera in jQuery <1.7
				// .text() can't accept undefined, so coerce to a string
				var title = $( this ).attr( "title" ) || "";
				// Escape title, since we're going from an attribute to raw HTML
				return $( "<a>" ).text( title ).html();
			},
			hide: true,
			// Disabled elements have inconsistent behavior across browsers (#8661)
			items: "[title]:not([disabled])",
			position: {
				my: "left top+15",
				at: "left bottom",
				collision: "flipfit flip"
			},
			show: true,
			tooltipClass: null,
			track: false,

			// callbacks
			close: null,
			open: null
		},

		_create: function() {
			this._on({
				mouseover: "open",
				focusin: "open"
			});

			// IDs of generated tooltips, needed for destroy
			this.tooltips = {};
			// IDs of parent tooltips where we removed the title attribute
			this.parents = {};

			if ( this.options.disabled ) {
				this._disable();
			}
		},

		_setOption: function( key, value ) {
			var that = this;

			if ( key === "disabled" ) {
				this[ value ? "_disable" : "_enable" ]();
				this.options[ key ] = value;
				// disable element style changes
				return;
			}

			this._super( key, value );

			if ( key === "content" ) {
				$.each( this.tooltips, function( id, element ) {
					that._updateContent( element );
				});
			}
		},

		_disable: function() {
			var that = this;

			// close open tooltips
			$.each( this.tooltips, function( id, element ) {
				var event = $.Event( "blur" );
				event.target = event.currentTarget = element[0];
				that.close( event, true );
			});

			// remove title attributes to prevent native tooltips
			this.element.find( this.options.items ).addBack().each(function() {
				var element = $( this );
				if ( element.is( "[title]" ) ) {
					element
						.data( "ui-tooltip-title", element.attr( "title" ) )
						.attr( "title", "" );
				}
			});
		},

		_enable: function() {
			// restore title attributes
			this.element.find( this.options.items ).addBack().each(function() {
				var element = $( this );
				if ( element.data( "ui-tooltip-title" ) ) {
					element.attr( "title", element.data( "ui-tooltip-title" ) );
				}
			});
		},

		open: function( event ) {
			var that = this,
				target = $( event ? event.target : this.element )
					// we need closest here due to mouseover bubbling,
					// but always pointing at the same event target
					.closest( this.options.items );

			// No element to show a tooltip for or the tooltip is already open
			if ( !target.length || target.data( "ui-tooltip-id" ) ) {
				return;
			}

			if ( target.attr( "title" ) ) {
				target.data( "ui-tooltip-title", target.attr( "title" ) );
			}

			target.data( "ui-tooltip-open", true );

			// kill parent tooltips, custom or native, for hover
			if ( event && event.type === "mouseover" ) {
				target.parents().each(function() {
					var parent = $( this ),
						blurEvent;
					if ( parent.data( "ui-tooltip-open" ) ) {
						blurEvent = $.Event( "blur" );
						blurEvent.target = blurEvent.currentTarget = this;
						that.close( blurEvent, true );
					}
					if ( parent.attr( "title" ) ) {
						parent.uniqueId();
						that.parents[ this.id ] = {
							element: this,
							title: parent.attr( "title" )
						};
						parent.attr( "title", "" );
					}
				});
			}

			this._updateContent( target, event );
		},

		_updateContent: function( target, event ) {
			var content,
				contentOption = this.options.content,
				that = this,
				eventType = event ? event.type : null;

			if ( typeof contentOption === "string" ) {
				return this._open( event, target, contentOption );
			}

			content = contentOption.call( target[0], function( response ) {
				// ignore async response if tooltip was closed already
				if ( !target.data( "ui-tooltip-open" ) ) {
					return;
				}
				// IE may instantly serve a cached response for ajax requests
				// delay this call to _open so the other call to _open runs first
				that._delay(function() {
					// jQuery creates a special event for focusin when it doesn't
					// exist natively. To improve performance, the native event
					// object is reused and the type is changed. Therefore, we can't
					// rely on the type being correct after the event finished
					// bubbling, so we set it back to the previous value. (#8740)
					if ( event ) {
						event.type = eventType;
					}
					this._open( event, target, response );
				});
			});
			if ( content ) {
				this._open( event, target, content );
			}
		},

		_open: function( event, target, content ) {
			var tooltip, events, delayedShow,
				positionOption = $.extend( {}, this.options.position );

			if ( !content ) {
				return;
			}

			// Content can be updated multiple times. If the tooltip already
			// exists, then just update the content and bail.
			tooltip = this._find( target );
			if ( tooltip.length ) {
				tooltip.find( ".ui-tooltip-content" ).html( content );
				return;
			}

			// if we have a title, clear it to prevent the native tooltip
			// we have to check first to avoid defining a title if none exists
			// (we don't want to cause an element to start matching [title])
			//
			// We use removeAttr only for key events, to allow IE to export the correct
			// accessible attributes. For mouse events, set to empty string to avoid
			// native tooltip showing up (happens only when removing inside mouseover).
			if ( target.is( "[title]" ) ) {
				if ( event && event.type === "mouseover" ) {
					target.attr( "title", "" );
				} else {
					target.removeAttr( "title" );
				}
			}

			tooltip = this._tooltip( target );
			addDescribedBy( target, tooltip.attr( "id" ) );
			tooltip.find( ".ui-tooltip-content" ).html( content );

			function position( event ) {
				positionOption.of = event;
				if ( tooltip.is( ":hidden" ) ) {
					return;
				}
				tooltip.position( positionOption );
			}
			if ( this.options.track && event && /^mouse/.test( event.type ) ) {
				this._on( this.document, {
					mousemove: position
				});
				// trigger once to override element-relative positioning
				position( event );
			} else {
				tooltip.position( $.extend({
					of: target
				}, this.options.position ) );
			}

			tooltip.hide();

			this._show( tooltip, this.options.show );
			// Handle tracking tooltips that are shown with a delay (#8644). As soon
			// as the tooltip is visible, position the tooltip using the most recent
			// event.
			if ( this.options.show && this.options.show.delay ) {
				delayedShow = this.delayedShow = setInterval(function() {
					if ( tooltip.is( ":visible" ) ) {
						position( positionOption.of );
						clearInterval( delayedShow );
					}
				}, $.fx.interval );
			}

			this._trigger( "open", event, { tooltip: tooltip } );

			events = {
				keyup: function( event ) {
					if ( event.keyCode === $.ui.keyCode.ESCAPE ) {
						var fakeEvent = $.Event(event);
						fakeEvent.currentTarget = target[0];
						this.close( fakeEvent, true );
					}
				},
				remove: function() {
					this._removeTooltip( tooltip );
				}
			};
			if ( !event || event.type === "mouseover" ) {
				events.mouseleave = "close";
			}
			if ( !event || event.type === "focusin" ) {
				events.focusout = "close";
			}
			this._on( true, target, events );
		},

		close: function( event ) {
			var that = this,
				target = $( event ? event.currentTarget : this.element ),
				tooltip = this._find( target );

			// disabling closes the tooltip, so we need to track when we're closing
			// to avoid an infinite loop in case the tooltip becomes disabled on close
			if ( this.closing ) {
				return;
			}

			// Clear the interval for delayed tracking tooltips
			clearInterval( this.delayedShow );

			// only set title if we had one before (see comment in _open())
			if ( target.data( "ui-tooltip-title" ) ) {
				target.attr( "title", target.data( "ui-tooltip-title" ) );
			}

			removeDescribedBy( target );

			tooltip.stop( true );
			this._hide( tooltip, this.options.hide, function() {
				that._removeTooltip( $( this ) );
			});

			target.removeData( "ui-tooltip-open" );
			this._off( target, "mouseleave focusout keyup" );
			// Remove 'remove' binding only on delegated targets
			if ( target[0] !== this.element[0] ) {
				this._off( target, "remove" );
			}
			this._off( this.document, "mousemove" );

			if ( event && event.type === "mouseleave" ) {
				$.each( this.parents, function( id, parent ) {
					$( parent.element ).attr( "title", parent.title );
					delete that.parents[ id ];
				});
			}

			this.closing = true;
			this._trigger( "close", event, { tooltip: tooltip } );
			this.closing = false;
		},

		_tooltip: function( element ) {
			var id = "ui-tooltip-" + increments++,
				tooltip = $( "<div>" )
					.attr({
						id: id,
						role: "tooltip"
					})
					.addClass( "ui-tooltip ui-widget ui-corner-all ui-widget-content " +
						( this.options.tooltipClass || "" ) );
			$( "<div>" )
				.addClass( "ui-tooltip-content" )
				.appendTo( tooltip );
			tooltip.appendTo( this.document[0].body );
			this.tooltips[ id ] = element;
			return tooltip;
		},

		_find: function( target ) {
			var id = target.data( "ui-tooltip-id" );
			return id ? $( "#" + id ) : $();
		},

		_removeTooltip: function( tooltip ) {
			tooltip.remove();
			delete this.tooltips[ tooltip.attr( "id" ) ];
		},

		_destroy: function() {
			var that = this;

			// close open tooltips
			$.each( this.tooltips, function( id, element ) {
				// Delegate to close method to handle common cleanup
				var event = $.Event( "blur" );
				event.target = event.currentTarget = element[0];
				that.close( event, true );

				// Remove immediately; destroying an open tooltip doesn't use the
				// hide animation
				$( "#" + id ).remove();

				// Restore the title
				if ( element.data( "ui-tooltip-title" ) ) {
					element.attr( "title", element.data( "ui-tooltip-title" ) );
					element.removeData( "ui-tooltip-title" );
				}
			});
		}
	});

	}( jQuery ) );


/***/ },

/***/ 366:
/***/ function(module, exports) {

	module.exports = jQuery;

/***/ },

/***/ 367:
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["$"] = __webpack_require__(368);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ 368:
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["screenfull"] = __webpack_require__(369);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ 369:
/***/ function(module, exports) {

	/*!
	* screenfull
	* v3.0.0 - 2015-11-24
	* (c) Sindre Sorhus; MIT License
	*/
	(function () {
		'use strict';

		var isCommonjs = typeof module !== 'undefined' && module.exports;
		var keyboardAllowed = typeof Element !== 'undefined' && 'ALLOW_KEYBOARD_INPUT' in Element;

		var fn = (function () {
			var val;
			var valLength;

			var fnMap = [
				[
					'requestFullscreen',
					'exitFullscreen',
					'fullscreenElement',
					'fullscreenEnabled',
					'fullscreenchange',
					'fullscreenerror'
				],
				// new WebKit
				[
					'webkitRequestFullscreen',
					'webkitExitFullscreen',
					'webkitFullscreenElement',
					'webkitFullscreenEnabled',
					'webkitfullscreenchange',
					'webkitfullscreenerror'

				],
				// old WebKit (Safari 5.1)
				[
					'webkitRequestFullScreen',
					'webkitCancelFullScreen',
					'webkitCurrentFullScreenElement',
					'webkitCancelFullScreen',
					'webkitfullscreenchange',
					'webkitfullscreenerror'

				],
				[
					'mozRequestFullScreen',
					'mozCancelFullScreen',
					'mozFullScreenElement',
					'mozFullScreenEnabled',
					'mozfullscreenchange',
					'mozfullscreenerror'
				],
				[
					'msRequestFullscreen',
					'msExitFullscreen',
					'msFullscreenElement',
					'msFullscreenEnabled',
					'MSFullscreenChange',
					'MSFullscreenError'
				]
			];

			var i = 0;
			var l = fnMap.length;
			var ret = {};

			for (; i < l; i++) {
				val = fnMap[i];
				if (val && val[1] in document) {
					for (i = 0, valLength = val.length; i < valLength; i++) {
						ret[fnMap[0][i]] = val[i];
					}
					return ret;
				}
			}

			return false;
		})();

		var screenfull = {
			request: function (elem) {
				var request = fn.requestFullscreen;

				elem = elem || document.documentElement;

				// Work around Safari 5.1 bug: reports support for
				// keyboard in fullscreen even though it doesn't.
				// Browser sniffing, since the alternative with
				// setTimeout is even worse.
				if (/5\.1[\.\d]* Safari/.test(navigator.userAgent)) {
					elem[request]();
				} else {
					elem[request](keyboardAllowed && Element.ALLOW_KEYBOARD_INPUT);
				}
			},
			exit: function () {
				document[fn.exitFullscreen]();
			},
			toggle: function (elem) {
				if (this.isFullscreen) {
					this.exit();
				} else {
					this.request(elem);
				}
			},
			raw: fn
		};

		if (!fn) {
			if (isCommonjs) {
				module.exports = false;
			} else {
				window.screenfull = false;
			}

			return;
		}

		Object.defineProperties(screenfull, {
			isFullscreen: {
				get: function () {
					return Boolean(document[fn.fullscreenElement]);
				}
			},
			element: {
				enumerable: true,
				get: function () {
					return document[fn.fullscreenElement];
				}
			},
			enabled: {
				enumerable: true,
				get: function () {
					// Coerce to boolean in case of old WebKit
					return Boolean(document[fn.fullscreenEnabled]);
				}
			}
		});

		if (isCommonjs) {
			module.exports = screenfull;
		} else {
			window.screenfull = screenfull;
		}
	})();


/***/ },

/***/ 370:
/***/ function(module, exports) {

	/* global angular */
	(function() {
	    angular.module('angularScreenfull', []);
	})();

	/* global angular, screenfull */
	(function() {
	    'use strict';

	    angular
	        .module('angularScreenfull')
	        .directive('ngsfFullscreen', ngsfFullscreenDirective);

	    /**
	     * @ngdoc directive
	     * @name angularScreenfull.directive:ngsfFullscreen
	     * @restrict A
	     *
	     * @description
	     * Marks the element that is going to be fullscreen
	     *
	     * @param {string=}  ngsfFullscreen  An optional expression to store the fullscreen controller
	     *
	     * @example
	   <example  module="myApp">
	     <file name="app.js">
	        angular.module('myApp', ['angularScreenfull']);
	     </file>
	     <file name="index.html">
	        <div ngsf-fullscreen>
	            <p>This is a fullscreen element</p>
	            <button ngsf-toggle-fullscreen>Toggle fullscreen</button>
	        </div>
	     </file>
	   </example>
	     */

	    ngsfFullscreenDirective.$inject = ['$parse'];
	    function ngsfFullscreenDirective ($parse) {
	        return {
	            restrict: 'A',
	            require: 'ngsfFullscreen',
	            controller: NgsfFullscreenController,
	            link: link
	        };

	        function link (scope, elm, attrs, ctrl) {
	            // If the directive has a value, add the controller to the scope under that name
	            if (attrs.ngsfFullscreen && attrs.ngsfFullscreen !== '') {
	                var p = $parse(attrs.ngsfFullscreen);
	                p.assign(scope, ctrl);
	            }
	        }
	    }

	    NgsfFullscreenController.$inject = ['$scope', '$document', '$element', '$animate'];
	    function NgsfFullscreenController ($scope, $document, $elm, $animate) {
	        var ctrl = this;

	        ctrl.onFullscreenChange = onFullscreenChange;
	        ctrl.requestFullscreen = requestFullscreen;
	        ctrl.removeFullscreen = removeFullscreen;
	        ctrl.toggleFullscreen = toggleFullscreen;
	        ctrl.isFullscreen = isFullscreen;
	        ctrl.fullscreenEnabled = fullscreenEnabled;

	        function subscribeToEvents () {
	            var fullscreenchange = function () {
	                $animate[ctrl.isFullscreen() ? 'addClass' : 'removeClass']($elm, 'fullscreen');
	                // TODO: document using ngdoc
	                $scope.$emit('fullscreenchange');
	                $scope.$apply();
	            };

	            $document[0].addEventListener(screenfull.raw.fullscreenchange, fullscreenchange);
	            $scope.$on('$destroy', function() {
	                $document[0].removeEventListener(screenfull.raw.fullscreenchange, fullscreenchange);
	            });
	        }
	        if (ctrl.fullscreenEnabled()) {
	            subscribeToEvents();
	        }

	        ////////////////////////////////////////

	        function onFullscreenChange (handler) {
	            return $scope.$on('fullscreenchange', handler);
	        }

	        function requestFullscreen () {
	            if (ctrl.fullscreenEnabled()) {
	                screenfull.request($elm[0]);
	                $scope.$emit('fullscreenEnabled');
	                return true;
	            }
	            return false;
	        }

	        function removeFullscreen () {
	            if (ctrl.fullscreenEnabled()) {
	                if (ctrl.isFullscreen()) {
	                    ctrl.toggleFullscreen();
	                }
	            }
	        }

	        function toggleFullscreen () {
	            if (ctrl.fullscreenEnabled()) {
	                var isFullscreen = screenfull.isFullscreen;
	                screenfull.toggle($elm[0]);
	                if (isFullscreen) {
	                    $scope.$emit('fullscreenDisabled');
	                } else {
	                    $scope.$emit('fullscreenEnabled');
	                }
	                return true;
	            }
	            return false;
	        }

	        function isFullscreen () {
	            if (ctrl.fullscreenEnabled()) {
	                return screenfull.isFullscreen;
	            }
	            return false;
	        }

	        function fullscreenEnabled () {
	            if (typeof screenfull !== 'undefined') {
	                return screenfull.enabled;
	            }
	            return false;
	        }
	    }
	})();


	/* global angular */
	(function() {
	    'use strict';

	    angular
	        .module('angularScreenfull')
	        .directive('showIfFullscreenEnabled', showIfFullscreenEnabledDirective);

	    /**
	     * @ngdoc directive
	     * @name angularScreenfull.directive:showIfFullscreenEnabled
	     * @restrict A
	     *
	     * @description
	     * Shows or hides the element (using ng-hide) if the browser has fullscreen
	     * capabilities.
	     *
	     */

	    showIfFullscreenEnabledDirective.$inject = ['$animate'];

	    function showIfFullscreenEnabledDirective ($animate) {
	        // Directive definition
	        return {
	            restrict: 'A',
	            require: '^ngsfFullscreen',
	            link: link
	        };

	        function link (scope, elm, attrs, fullScreenCtrl) {
	            if (fullScreenCtrl.fullscreenEnabled()) {
	                $animate.removeClass(elm, 'ng-hide');
	            } else {
	                $animate.addClass(elm, 'ng-hide');
	            }
	        }
	    }
	})();

	/* global angular */
	(function() {
	    'use strict';

	    angular
	        .module('angularScreenfull')
	        .directive('showIfFullscreen', showIfFullscreenDirective);

	    /**
	     * @ngdoc directive
	     * @name angularScreenfull.directive:showIfFullscreen
	     * @restrict A
	     *
	     * @description
	     * Shows or hides the element (using ng-hide) if the closest
	     * parent that has the ngsf-fullscreen directive is in fullscreen mode.
	     *
	     * By default the element shows itself if its fullscreen or hides otherwise, but you can
	     * change this behaviour by passing false to the directive
	     *
	     * @param {boolean=}  showIfFullscreen   If false it inverts the show/hide behaviour. Defaults to true.
	     *
	     */

	    showIfFullscreenDirective.$inject = ['$animate'];

	    function showIfFullscreenDirective ($animate) {
	        // Directive definition
	        return {
	            restrict: 'A',
	            require: '^ngsfFullscreen',
	            link: link
	        };

	        function link (scope, elm, attrs, fullScreenCtrl) {
	            var hideOrShow = function () {

	                var show = fullScreenCtrl.isFullscreen();
	                if (attrs.showIfFullscreen === 'false' || attrs.showIfFullscreen === false) {
	                    show = !show;
	                }

	                if (show) {
	                    $animate.removeClass(elm, 'ng-hide');
	                } else {
	                    $animate.addClass(elm, 'ng-hide');
	                }
	            };
	            hideOrShow();
	            var unwatch = fullScreenCtrl.onFullscreenChange(hideOrShow);
	            scope.$on('$destroy', unwatch);
	        }
	    }
	})();

	/* global angular */
	(function() {
	    'use strict';

	    angular
	        .module('angularScreenfull')
	        .directive('ngsfToggleFullscreen', ngsfToggleFullscreenDirective);

	    /**
	     * @ngdoc directive
	     * @name angularScreenfull.directive:ngsfToggleFullscreen
	     * @restrict A
	     *
	     * @description
	     * Adds a click handler to the element that toggles the nearest ngsf-fullscreen element
	     *
	     */

	    function ngsfToggleFullscreenDirective () {
	        // Directive definition
	        return {
	            restrict: 'A',
	            require: '^ngsfFullscreen',
	            link: link
	        };

	        function link (scope, elm, attr, fullScreenCtrl) {
	            elm.on('click', function() {
	                fullScreenCtrl.toggleFullscreen();
	            });
	        }
	    }
	})();


/***/ },

/***/ 371:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(372);
	module.exports = 'ngSanitize';


/***/ },

/***/ 372:
/***/ function(module, exports) {

	/**
	 * @license AngularJS v1.4.9
	 * (c) 2010-2015 Google, Inc. http://angularjs.org
	 * License: MIT
	 */
	(function(window, angular, undefined) {'use strict';

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	var $sanitizeMinErr = angular.$$minErr('$sanitize');

	/**
	 * @ngdoc module
	 * @name ngSanitize
	 * @description
	 *
	 * # ngSanitize
	 *
	 * The `ngSanitize` module provides functionality to sanitize HTML.
	 *
	 *
	 * <div doc-module-components="ngSanitize"></div>
	 *
	 * See {@link ngSanitize.$sanitize `$sanitize`} for usage.
	 */

	/*
	 * HTML Parser By Misko Hevery (misko@hevery.com)
	 * based on:  HTML Parser By John Resig (ejohn.org)
	 * Original code by Erik Arvidsson, Mozilla Public License
	 * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
	 *
	 * // Use like so:
	 * htmlParser(htmlString, {
	 *     start: function(tag, attrs, unary) {},
	 *     end: function(tag) {},
	 *     chars: function(text) {},
	 *     comment: function(text) {}
	 * });
	 *
	 */


	/**
	 * @ngdoc service
	 * @name $sanitize
	 * @kind function
	 *
	 * @description
	 *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are
	 *   then serialized back to properly escaped html string. This means that no unsafe input can make
	 *   it into the returned string, however, since our parser is more strict than a typical browser
	 *   parser, it's possible that some obscure input, which would be recognized as valid HTML by a
	 *   browser, won't make it through the sanitizer. The input may also contain SVG markup.
	 *   The whitelist is configured using the functions `aHrefSanitizationWhitelist` and
	 *   `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider `$compileProvider`}.
	 *
	 * @param {string} html HTML input.
	 * @returns {string} Sanitized HTML.
	 *
	 * @example
	   <example module="sanitizeExample" deps="angular-sanitize.js">
	   <file name="index.html">
	     <script>
	         angular.module('sanitizeExample', ['ngSanitize'])
	           .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {
	             $scope.snippet =
	               '<p style="color:blue">an html\n' +
	               '<em onmouseover="this.textContent=\'PWN3D!\'">click here</em>\n' +
	               'snippet</p>';
	             $scope.deliberatelyTrustDangerousSnippet = function() {
	               return $sce.trustAsHtml($scope.snippet);
	             };
	           }]);
	     </script>
	     <div ng-controller="ExampleController">
	        Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
	       <table>
	         <tr>
	           <td>Directive</td>
	           <td>How</td>
	           <td>Source</td>
	           <td>Rendered</td>
	         </tr>
	         <tr id="bind-html-with-sanitize">
	           <td>ng-bind-html</td>
	           <td>Automatically uses $sanitize</td>
	           <td><pre>&lt;div ng-bind-html="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
	           <td><div ng-bind-html="snippet"></div></td>
	         </tr>
	         <tr id="bind-html-with-trust">
	           <td>ng-bind-html</td>
	           <td>Bypass $sanitize by explicitly trusting the dangerous value</td>
	           <td>
	           <pre>&lt;div ng-bind-html="deliberatelyTrustDangerousSnippet()"&gt;
	&lt;/div&gt;</pre>
	           </td>
	           <td><div ng-bind-html="deliberatelyTrustDangerousSnippet()"></div></td>
	         </tr>
	         <tr id="bind-default">
	           <td>ng-bind</td>
	           <td>Automatically escapes</td>
	           <td><pre>&lt;div ng-bind="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
	           <td><div ng-bind="snippet"></div></td>
	         </tr>
	       </table>
	       </div>
	   </file>
	   <file name="protractor.js" type="protractor">
	     it('should sanitize the html snippet by default', function() {
	       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).
	         toBe('<p>an html\n<em>click here</em>\nsnippet</p>');
	     });

	     it('should inline raw snippet if bound to a trusted value', function() {
	       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).
	         toBe("<p style=\"color:blue\">an html\n" +
	              "<em onmouseover=\"this.textContent='PWN3D!'\">click here</em>\n" +
	              "snippet</p>");
	     });

	     it('should escape snippet without any filter', function() {
	       expect(element(by.css('#bind-default div')).getInnerHtml()).
	         toBe("&lt;p style=\"color:blue\"&gt;an html\n" +
	              "&lt;em onmouseover=\"this.textContent='PWN3D!'\"&gt;click here&lt;/em&gt;\n" +
	              "snippet&lt;/p&gt;");
	     });

	     it('should update', function() {
	       element(by.model('snippet')).clear();
	       element(by.model('snippet')).sendKeys('new <b onclick="alert(1)">text</b>');
	       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).
	         toBe('new <b>text</b>');
	       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).toBe(
	         'new <b onclick="alert(1)">text</b>');
	       expect(element(by.css('#bind-default div')).getInnerHtml()).toBe(
	         "new &lt;b onclick=\"alert(1)\"&gt;text&lt;/b&gt;");
	     });
	   </file>
	   </example>
	 */
	function $SanitizeProvider() {
	  this.$get = ['$$sanitizeUri', function($$sanitizeUri) {
	    return function(html) {
	      var buf = [];
	      htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {
	        return !/^unsafe/.test($$sanitizeUri(uri, isImage));
	      }));
	      return buf.join('');
	    };
	  }];
	}

	function sanitizeText(chars) {
	  var buf = [];
	  var writer = htmlSanitizeWriter(buf, angular.noop);
	  writer.chars(chars);
	  return buf.join('');
	}


	// Regular Expressions for parsing tags and attributes
	var START_TAG_REGEXP =
	       /^<((?:[a-zA-Z])[\w:-]*)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*(>?)/,
	  END_TAG_REGEXP = /^<\/\s*([\w:-]+)[^>]*>/,
	  ATTR_REGEXP = /([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g,
	  BEGIN_TAG_REGEXP = /^</,
	  BEGING_END_TAGE_REGEXP = /^<\//,
	  COMMENT_REGEXP = /<!--(.*?)-->/g,
	  DOCTYPE_REGEXP = /<!DOCTYPE([^>]*?)>/i,
	  CDATA_REGEXP = /<!\[CDATA\[(.*?)]]>/g,
	  SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
	  // Match everything outside of normal chars and " (quote character)
	  NON_ALPHANUMERIC_REGEXP = /([^\#-~| |!])/g;


	// Good source of info about elements and attributes
	// http://dev.w3.org/html5/spec/Overview.html#semantics
	// http://simon.html5.org/html-elements

	// Safe Void Elements - HTML5
	// http://dev.w3.org/html5/spec/Overview.html#void-elements
	var voidElements = makeMap("area,br,col,hr,img,wbr");

	// Elements that you can, intentionally, leave open (and which close themselves)
	// http://dev.w3.org/html5/spec/Overview.html#optional-tags
	var optionalEndTagBlockElements = makeMap("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),
	    optionalEndTagInlineElements = makeMap("rp,rt"),
	    optionalEndTagElements = angular.extend({},
	                                            optionalEndTagInlineElements,
	                                            optionalEndTagBlockElements);

	// Safe Block Elements - HTML5
	var blockElements = angular.extend({}, optionalEndTagBlockElements, makeMap("address,article," +
	        "aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5," +
	        "h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul"));

	// Inline Elements - HTML5
	var inlineElements = angular.extend({}, optionalEndTagInlineElements, makeMap("a,abbr,acronym,b," +
	        "bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s," +
	        "samp,small,span,strike,strong,sub,sup,time,tt,u,var"));

	// SVG Elements
	// https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements
	// Note: the elements animate,animateColor,animateMotion,animateTransform,set are intentionally omitted.
	// They can potentially allow for arbitrary javascript to be executed. See #11290
	var svgElements = makeMap("circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph," +
	        "hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline," +
	        "radialGradient,rect,stop,svg,switch,text,title,tspan,use");

	// Special Elements (can contain anything)
	var specialElements = makeMap("script,style");

	var validElements = angular.extend({},
	                                   voidElements,
	                                   blockElements,
	                                   inlineElements,
	                                   optionalEndTagElements,
	                                   svgElements);

	//Attributes that have href and hence need to be sanitized
	var uriAttrs = makeMap("background,cite,href,longdesc,src,usemap,xlink:href");

	var htmlAttrs = makeMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' +
	    'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' +
	    'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' +
	    'scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,' +
	    'valign,value,vspace,width');

	// SVG attributes (without "id" and "name" attributes)
	// https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes
	var svgAttrs = makeMap('accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' +
	    'baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,' +
	    'cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,' +
	    'font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,' +
	    'height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,' +
	    'marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,' +
	    'max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,' +
	    'path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,' +
	    'requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,' +
	    'stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,' +
	    'stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,' +
	    'stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,' +
	    'underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,' +
	    'width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,' +
	    'xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan', true);

	var validAttrs = angular.extend({},
	                                uriAttrs,
	                                svgAttrs,
	                                htmlAttrs);

	function makeMap(str, lowercaseKeys) {
	  var obj = {}, items = str.split(','), i;
	  for (i = 0; i < items.length; i++) {
	    obj[lowercaseKeys ? angular.lowercase(items[i]) : items[i]] = true;
	  }
	  return obj;
	}


	/**
	 * @example
	 * htmlParser(htmlString, {
	 *     start: function(tag, attrs, unary) {},
	 *     end: function(tag) {},
	 *     chars: function(text) {},
	 *     comment: function(text) {}
	 * });
	 *
	 * @param {string} html string
	 * @param {object} handler
	 */
	function htmlParser(html, handler) {
	  if (typeof html !== 'string') {
	    if (html === null || typeof html === 'undefined') {
	      html = '';
	    } else {
	      html = '' + html;
	    }
	  }
	  var index, chars, match, stack = [], last = html, text;
	  stack.last = function() { return stack[stack.length - 1]; };

	  while (html) {
	    text = '';
	    chars = true;

	    // Make sure we're not in a script or style element
	    if (!stack.last() || !specialElements[stack.last()]) {

	      // Comment
	      if (html.indexOf("<!--") === 0) {
	        // comments containing -- are not allowed unless they terminate the comment
	        index = html.indexOf("--", 4);

	        if (index >= 0 && html.lastIndexOf("-->", index) === index) {
	          if (handler.comment) handler.comment(html.substring(4, index));
	          html = html.substring(index + 3);
	          chars = false;
	        }
	      // DOCTYPE
	      } else if (DOCTYPE_REGEXP.test(html)) {
	        match = html.match(DOCTYPE_REGEXP);

	        if (match) {
	          html = html.replace(match[0], '');
	          chars = false;
	        }
	      // end tag
	      } else if (BEGING_END_TAGE_REGEXP.test(html)) {
	        match = html.match(END_TAG_REGEXP);

	        if (match) {
	          html = html.substring(match[0].length);
	          match[0].replace(END_TAG_REGEXP, parseEndTag);
	          chars = false;
	        }

	      // start tag
	      } else if (BEGIN_TAG_REGEXP.test(html)) {
	        match = html.match(START_TAG_REGEXP);

	        if (match) {
	          // We only have a valid start-tag if there is a '>'.
	          if (match[4]) {
	            html = html.substring(match[0].length);
	            match[0].replace(START_TAG_REGEXP, parseStartTag);
	          }
	          chars = false;
	        } else {
	          // no ending tag found --- this piece should be encoded as an entity.
	          text += '<';
	          html = html.substring(1);
	        }
	      }

	      if (chars) {
	        index = html.indexOf("<");

	        text += index < 0 ? html : html.substring(0, index);
	        html = index < 0 ? "" : html.substring(index);

	        if (handler.chars) handler.chars(decodeEntities(text));
	      }

	    } else {
	      // IE versions 9 and 10 do not understand the regex '[^]', so using a workaround with [\W\w].
	      html = html.replace(new RegExp("([\\W\\w]*)<\\s*\\/\\s*" + stack.last() + "[^>]*>", 'i'),
	        function(all, text) {
	          text = text.replace(COMMENT_REGEXP, "$1").replace(CDATA_REGEXP, "$1");

	          if (handler.chars) handler.chars(decodeEntities(text));

	          return "";
	      });

	      parseEndTag("", stack.last());
	    }

	    if (html == last) {
	      throw $sanitizeMinErr('badparse', "The sanitizer was unable to parse the following block " +
	                                        "of html: {0}", html);
	    }
	    last = html;
	  }

	  // Clean up any remaining tags
	  parseEndTag();

	  function parseStartTag(tag, tagName, rest, unary) {
	    tagName = angular.lowercase(tagName);
	    if (blockElements[tagName]) {
	      while (stack.last() && inlineElements[stack.last()]) {
	        parseEndTag("", stack.last());
	      }
	    }

	    if (optionalEndTagElements[tagName] && stack.last() == tagName) {
	      parseEndTag("", tagName);
	    }

	    unary = voidElements[tagName] || !!unary;

	    if (!unary) {
	      stack.push(tagName);
	    }

	    var attrs = {};

	    rest.replace(ATTR_REGEXP,
	      function(match, name, doubleQuotedValue, singleQuotedValue, unquotedValue) {
	        var value = doubleQuotedValue
	          || singleQuotedValue
	          || unquotedValue
	          || '';

	        attrs[name] = decodeEntities(value);
	    });
	    if (handler.start) handler.start(tagName, attrs, unary);
	  }

	  function parseEndTag(tag, tagName) {
	    var pos = 0, i;
	    tagName = angular.lowercase(tagName);
	    if (tagName) {
	      // Find the closest opened tag of the same type
	      for (pos = stack.length - 1; pos >= 0; pos--) {
	        if (stack[pos] == tagName) break;
	      }
	    }

	    if (pos >= 0) {
	      // Close all the open elements, up the stack
	      for (i = stack.length - 1; i >= pos; i--)
	        if (handler.end) handler.end(stack[i]);

	      // Remove the open elements from the stack
	      stack.length = pos;
	    }
	  }
	}

	var hiddenPre=document.createElement("pre");
	/**
	 * decodes all entities into regular string
	 * @param value
	 * @returns {string} A string with decoded entities.
	 */
	function decodeEntities(value) {
	  if (!value) { return ''; }

	  hiddenPre.innerHTML = value.replace(/</g,"&lt;");
	  // innerText depends on styling as it doesn't display hidden elements.
	  // Therefore, it's better to use textContent not to cause unnecessary reflows.
	  return hiddenPre.textContent;
	}

	/**
	 * Escapes all potentially dangerous characters, so that the
	 * resulting string can be safely inserted into attribute or
	 * element text.
	 * @param value
	 * @returns {string} escaped text
	 */
	function encodeEntities(value) {
	  return value.
	    replace(/&/g, '&amp;').
	    replace(SURROGATE_PAIR_REGEXP, function(value) {
	      var hi = value.charCodeAt(0);
	      var low = value.charCodeAt(1);
	      return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
	    }).
	    replace(NON_ALPHANUMERIC_REGEXP, function(value) {
	      return '&#' + value.charCodeAt(0) + ';';
	    }).
	    replace(/</g, '&lt;').
	    replace(/>/g, '&gt;');
	}

	/**
	 * create an HTML/XML writer which writes to buffer
	 * @param {Array} buf use buf.jain('') to get out sanitized html string
	 * @returns {object} in the form of {
	 *     start: function(tag, attrs, unary) {},
	 *     end: function(tag) {},
	 *     chars: function(text) {},
	 *     comment: function(text) {}
	 * }
	 */
	function htmlSanitizeWriter(buf, uriValidator) {
	  var ignore = false;
	  var out = angular.bind(buf, buf.push);
	  return {
	    start: function(tag, attrs, unary) {
	      tag = angular.lowercase(tag);
	      if (!ignore && specialElements[tag]) {
	        ignore = tag;
	      }
	      if (!ignore && validElements[tag] === true) {
	        out('<');
	        out(tag);
	        angular.forEach(attrs, function(value, key) {
	          var lkey=angular.lowercase(key);
	          var isImage = (tag === 'img' && lkey === 'src') || (lkey === 'background');
	          if (validAttrs[lkey] === true &&
	            (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {
	            out(' ');
	            out(key);
	            out('="');
	            out(encodeEntities(value));
	            out('"');
	          }
	        });
	        out(unary ? '/>' : '>');
	      }
	    },
	    end: function(tag) {
	        tag = angular.lowercase(tag);
	        if (!ignore && validElements[tag] === true) {
	          out('</');
	          out(tag);
	          out('>');
	        }
	        if (tag == ignore) {
	          ignore = false;
	        }
	      },
	    chars: function(chars) {
	        if (!ignore) {
	          out(encodeEntities(chars));
	        }
	      }
	  };
	}


	// define ngSanitize module and register $sanitize service
	angular.module('ngSanitize', []).provider('$sanitize', $SanitizeProvider);

	/* global sanitizeText: false */

	/**
	 * @ngdoc filter
	 * @name linky
	 * @kind function
	 *
	 * @description
	 * Finds links in text input and turns them into html links. Supports http/https/ftp/mailto and
	 * plain email address links.
	 *
	 * Requires the {@link ngSanitize `ngSanitize`} module to be installed.
	 *
	 * @param {string} text Input text.
	 * @param {string} target Window (_blank|_self|_parent|_top) or named frame to open links in.
	 * @returns {string} Html-linkified text.
	 *
	 * @usage
	   <span ng-bind-html="linky_expression | linky"></span>
	 *
	 * @example
	   <example module="linkyExample" deps="angular-sanitize.js">
	     <file name="index.html">
	       <script>
	         angular.module('linkyExample', ['ngSanitize'])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.snippet =
	               'Pretty text with some links:\n'+
	               'http://angularjs.org/,\n'+
	               'mailto:us@somewhere.org,\n'+
	               'another@somewhere.org,\n'+
	               'and one more: ftp://127.0.0.1/.';
	             $scope.snippetWithTarget = 'http://angularjs.org/';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	       Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
	       <table>
	         <tr>
	           <td>Filter</td>
	           <td>Source</td>
	           <td>Rendered</td>
	         </tr>
	         <tr id="linky-filter">
	           <td>linky filter</td>
	           <td>
	             <pre>&lt;div ng-bind-html="snippet | linky"&gt;<br>&lt;/div&gt;</pre>
	           </td>
	           <td>
	             <div ng-bind-html="snippet | linky"></div>
	           </td>
	         </tr>
	         <tr id="linky-target">
	          <td>linky target</td>
	          <td>
	            <pre>&lt;div ng-bind-html="snippetWithTarget | linky:'_blank'"&gt;<br>&lt;/div&gt;</pre>
	          </td>
	          <td>
	            <div ng-bind-html="snippetWithTarget | linky:'_blank'"></div>
	          </td>
	         </tr>
	         <tr id="escaped-html">
	           <td>no filter</td>
	           <td><pre>&lt;div ng-bind="snippet"&gt;<br>&lt;/div&gt;</pre></td>
	           <td><div ng-bind="snippet"></div></td>
	         </tr>
	       </table>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should linkify the snippet with urls', function() {
	         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
	             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +
	                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');
	         expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);
	       });

	       it('should not linkify snippet without the linky filter', function() {
	         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).
	             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +
	                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');
	         expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);
	       });

	       it('should update', function() {
	         element(by.model('snippet')).clear();
	         element(by.model('snippet')).sendKeys('new http://link.');
	         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
	             toBe('new http://link.');
	         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);
	         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())
	             .toBe('new http://link.');
	       });

	       it('should work with the target property', function() {
	        expect(element(by.id('linky-target')).
	            element(by.binding("snippetWithTarget | linky:'_blank'")).getText()).
	            toBe('http://angularjs.org/');
	        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');
	       });
	     </file>
	   </example>
	 */
	angular.module('ngSanitize').filter('linky', ['$sanitize', function($sanitize) {
	  var LINKY_URL_REGEXP =
	        /((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i,
	      MAILTO_REGEXP = /^mailto:/i;

	  return function(text, target) {
	    if (!text) return text;
	    var match;
	    var raw = text;
	    var html = [];
	    var url;
	    var i;
	    while ((match = raw.match(LINKY_URL_REGEXP))) {
	      // We can not end in these as they are sometimes found at the end of the sentence
	      url = match[0];
	      // if we did not match ftp/http/www/mailto then assume mailto
	      if (!match[2] && !match[4]) {
	        url = (match[3] ? 'http://' : 'mailto:') + url;
	      }
	      i = match.index;
	      addText(raw.substr(0, i));
	      addLink(url, match[0].replace(MAILTO_REGEXP, ''));
	      raw = raw.substring(i + match[0].length);
	    }
	    addText(raw);
	    return $sanitize(html.join(''));

	    function addText(text) {
	      if (!text) {
	        return;
	      }
	      html.push(sanitizeText(text));
	    }

	    function addLink(url, text) {
	      html.push('<a ');
	      if (angular.isDefined(target)) {
	        html.push('target="',
	                  target,
	                  '" ');
	      }
	      html.push('href="',
	                url.replace(/"/g, '&quot;'),
	                '">');
	      addText(text);
	      html.push('</a>');
	    }
	  };
	}]);


	})(window, window.angular);


/***/ },

/***/ 373:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(374);
	module.exports = 'ngMessages';


/***/ },

/***/ 374:
/***/ function(module, exports) {

	/**
	 * @license AngularJS v1.5.0
	 * (c) 2010-2016 Google, Inc. http://angularjs.org
	 * License: MIT
	 */
	(function(window, angular, undefined) {'use strict';

	/* jshint ignore:start */
	// this code is in the core, but not in angular-messages.js
	var isArray = angular.isArray;
	var forEach = angular.forEach;
	var isString = angular.isString;
	var jqLite = angular.element;
	/* jshint ignore:end */

	/**
	 * @ngdoc module
	 * @name ngMessages
	 * @description
	 *
	 * The `ngMessages` module provides enhanced support for displaying messages within templates
	 * (typically within forms or when rendering message objects that return key/value data).
	 * Instead of relying on JavaScript code and/or complex ng-if statements within your form template to
	 * show and hide error messages specific to the state of an input field, the `ngMessages` and
	 * `ngMessage` directives are designed to handle the complexity, inheritance and priority
	 * sequencing based on the order of how the messages are defined in the template.
	 *
	 * Currently, the ngMessages module only contains the code for the `ngMessages`, `ngMessagesInclude`
	 * `ngMessage` and `ngMessageExp` directives.
	 *
	 * # Usage
	 * The `ngMessages` directive listens on a key/value collection which is set on the ngMessages attribute.
	 * Since the {@link ngModel ngModel} directive exposes an `$error` object, this error object can be
	 * used with `ngMessages` to display control error messages in an easier way than with just regular angular
	 * template directives.
	 *
	 * ```html
	 * <form name="myForm">
	 *   <label>
	 *     Enter text:
	 *     <input type="text" ng-model="field" name="myField" required minlength="5" />
	 *   </label>
	 *   <div ng-messages="myForm.myField.$error" role="alert">
	 *     <div ng-message="required">You did not enter a field</div>
	 *     <div ng-message="minlength, maxlength">
	 *       Your email must be between 5 and 100 characters long
	 *     </div>
	 *   </div>
	 * </form>
	 * ```
	 *
	 * Now whatever key/value entries are present within the provided object (in this case `$error`) then
	 * the ngMessages directive will render the inner first ngMessage directive (depending if the key values
	 * match the attribute value present on each ngMessage directive). In other words, if your errors
	 * object contains the following data:
	 *
	 * ```javascript
	 * <!-- keep in mind that ngModel automatically sets these error flags -->
	 * myField.$error = { minlength : true, required : true };
	 * ```
	 *
	 * Then the `required` message will be displayed first. When required is false then the `minlength` message
	 * will be displayed right after (since these messages are ordered this way in the template HTML code).
	 * The prioritization of each message is determined by what order they're present in the DOM.
	 * Therefore, instead of having custom JavaScript code determine the priority of what errors are
	 * present before others, the presentation of the errors are handled within the template.
	 *
	 * By default, ngMessages will only display one error at a time. However, if you wish to display all
	 * messages then the `ng-messages-multiple` attribute flag can be used on the element containing the
	 * ngMessages directive to make this happen.
	 *
	 * ```html
	 * <!-- attribute-style usage -->
	 * <div ng-messages="myForm.myField.$error" ng-messages-multiple>...</div>
	 *
	 * <!-- element-style usage -->
	 * <ng-messages for="myForm.myField.$error" multiple>...</ng-messages>
	 * ```
	 *
	 * ## Reusing and Overriding Messages
	 * In addition to prioritization, ngMessages also allows for including messages from a remote or an inline
	 * template. This allows for generic collection of messages to be reused across multiple parts of an
	 * application.
	 *
	 * ```html
	 * <script type="text/ng-template" id="error-messages">
	 *   <div ng-message="required">This field is required</div>
	 *   <div ng-message="minlength">This field is too short</div>
	 * </script>
	 *
	 * <div ng-messages="myForm.myField.$error" role="alert">
	 *   <div ng-messages-include="error-messages"></div>
	 * </div>
	 * ```
	 *
	 * However, including generic messages may not be useful enough to match all input fields, therefore,
	 * `ngMessages` provides the ability to override messages defined in the remote template by redefining
	 * them within the directive container.
	 *
	 * ```html
	 * <!-- a generic template of error messages known as "my-custom-messages" -->
	 * <script type="text/ng-template" id="my-custom-messages">
	 *   <div ng-message="required">This field is required</div>
	 *   <div ng-message="minlength">This field is too short</div>
	 * </script>
	 *
	 * <form name="myForm">
	 *   <label>
	 *     Email address
	 *     <input type="email"
	 *            id="email"
	 *            name="myEmail"
	 *            ng-model="email"
	 *            minlength="5"
	 *            required />
	 *   </label>
	 *   <!-- any ng-message elements that appear BEFORE the ng-messages-include will
	 *        override the messages present in the ng-messages-include template -->
	 *   <div ng-messages="myForm.myEmail.$error" role="alert">
	 *     <!-- this required message has overridden the template message -->
	 *     <div ng-message="required">You did not enter your email address</div>
	 *
	 *     <!-- this is a brand new message and will appear last in the prioritization -->
	 *     <div ng-message="email">Your email address is invalid</div>
	 *
	 *     <!-- and here are the generic error messages -->
	 *     <div ng-messages-include="my-custom-messages"></div>
	 *   </div>
	 * </form>
	 * ```
	 *
	 * In the example HTML code above the message that is set on required will override the corresponding
	 * required message defined within the remote template. Therefore, with particular input fields (such
	 * email addresses, date fields, autocomplete inputs, etc...), specialized error messages can be applied
	 * while more generic messages can be used to handle other, more general input errors.
	 *
	 * ## Dynamic Messaging
	 * ngMessages also supports using expressions to dynamically change key values. Using arrays and
	 * repeaters to list messages is also supported. This means that the code below will be able to
	 * fully adapt itself and display the appropriate message when any of the expression data changes:
	 *
	 * ```html
	 * <form name="myForm">
	 *   <label>
	 *     Email address
	 *     <input type="email"
	 *            name="myEmail"
	 *            ng-model="email"
	 *            minlength="5"
	 *            required />
	 *   </label>
	 *   <div ng-messages="myForm.myEmail.$error" role="alert">
	 *     <div ng-message="required">You did not enter your email address</div>
	 *     <div ng-repeat="errorMessage in errorMessages">
	 *       <!-- use ng-message-exp for a message whose key is given by an expression -->
	 *       <div ng-message-exp="errorMessage.type">{{ errorMessage.text }}</div>
	 *     </div>
	 *   </div>
	 * </form>
	 * ```
	 *
	 * The `errorMessage.type` expression can be a string value or it can be an array so
	 * that multiple errors can be associated with a single error message:
	 *
	 * ```html
	 *   <label>
	 *     Email address
	 *     <input type="email"
	 *            ng-model="data.email"
	 *            name="myEmail"
	 *            ng-minlength="5"
	 *            ng-maxlength="100"
	 *            required />
	 *   </label>
	 *   <div ng-messages="myForm.myEmail.$error" role="alert">
	 *     <div ng-message-exp="'required'">You did not enter your email address</div>
	 *     <div ng-message-exp="['minlength', 'maxlength']">
	 *       Your email must be between 5 and 100 characters long
	 *     </div>
	 *   </div>
	 * ```
	 *
	 * Feel free to use other structural directives such as ng-if and ng-switch to further control
	 * what messages are active and when. Be careful, if you place ng-message on the same element
	 * as these structural directives, Angular may not be able to determine if a message is active
	 * or not. Therefore it is best to place the ng-message on a child element of the structural
	 * directive.
	 *
	 * ```html
	 * <div ng-messages="myForm.myEmail.$error" role="alert">
	 *   <div ng-if="showRequiredError">
	 *     <div ng-message="required">Please enter something</div>
	 *   </div>
	 * </div>
	 * ```
	 *
	 * ## Animations
	 * If the `ngAnimate` module is active within the application then the `ngMessages`, `ngMessage` and
	 * `ngMessageExp` directives will trigger animations whenever any messages are added and removed from
	 * the DOM by the `ngMessages` directive.
	 *
	 * Whenever the `ngMessages` directive contains one or more visible messages then the `.ng-active` CSS
	 * class will be added to the element. The `.ng-inactive` CSS class will be applied when there are no
	 * messages present. Therefore, CSS transitions and keyframes as well as JavaScript animations can
	 * hook into the animations whenever these classes are added/removed.
	 *
	 * Let's say that our HTML code for our messages container looks like so:
	 *
	 * ```html
	 * <div ng-messages="myMessages" class="my-messages" role="alert">
	 *   <div ng-message="alert" class="some-message">...</div>
	 *   <div ng-message="fail" class="some-message">...</div>
	 * </div>
	 * ```
	 *
	 * Then the CSS animation code for the message container looks like so:
	 *
	 * ```css
	 * .my-messages {
	 *   transition:1s linear all;
	 * }
	 * .my-messages.ng-active {
	 *   // messages are visible
	 * }
	 * .my-messages.ng-inactive {
	 *   // messages are hidden
	 * }
	 * ```
	 *
	 * Whenever an inner message is attached (becomes visible) or removed (becomes hidden) then the enter
	 * and leave animation is triggered for each particular element bound to the `ngMessage` directive.
	 *
	 * Therefore, the CSS code for the inner messages looks like so:
	 *
	 * ```css
	 * .some-message {
	 *   transition:1s linear all;
	 * }
	 *
	 * .some-message.ng-enter {}
	 * .some-message.ng-enter.ng-enter-active {}
	 *
	 * .some-message.ng-leave {}
	 * .some-message.ng-leave.ng-leave-active {}
	 * ```
	 *
	 * {@link ngAnimate Click here} to learn how to use JavaScript animations or to learn more about ngAnimate.
	 */
	angular.module('ngMessages', [])

	   /**
	    * @ngdoc directive
	    * @module ngMessages
	    * @name ngMessages
	    * @restrict AE
	    *
	    * @description
	    * `ngMessages` is a directive that is designed to show and hide messages based on the state
	    * of a key/value object that it listens on. The directive itself complements error message
	    * reporting with the `ngModel` $error object (which stores a key/value state of validation errors).
	    *
	    * `ngMessages` manages the state of internal messages within its container element. The internal
	    * messages use the `ngMessage` directive and will be inserted/removed from the page depending
	    * on if they're present within the key/value object. By default, only one message will be displayed
	    * at a time and this depends on the prioritization of the messages within the template. (This can
	    * be changed by using the `ng-messages-multiple` or `multiple` attribute on the directive container.)
	    *
	    * A remote template can also be used to promote message reusability and messages can also be
	    * overridden.
	    *
	    * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.
	    *
	    * @usage
	    * ```html
	    * <!-- using attribute directives -->
	    * <ANY ng-messages="expression" role="alert">
	    *   <ANY ng-message="stringValue">...</ANY>
	    *   <ANY ng-message="stringValue1, stringValue2, ...">...</ANY>
	    *   <ANY ng-message-exp="expressionValue">...</ANY>
	    * </ANY>
	    *
	    * <!-- or by using element directives -->
	    * <ng-messages for="expression" role="alert">
	    *   <ng-message when="stringValue">...</ng-message>
	    *   <ng-message when="stringValue1, stringValue2, ...">...</ng-message>
	    *   <ng-message when-exp="expressionValue">...</ng-message>
	    * </ng-messages>
	    * ```
	    *
	    * @param {string} ngMessages an angular expression evaluating to a key/value object
	    *                 (this is typically the $error object on an ngModel instance).
	    * @param {string=} ngMessagesMultiple|multiple when set, all messages will be displayed with true
	    *
	    * @example
	    * <example name="ngMessages-directive" module="ngMessagesExample"
	    *          deps="angular-messages.js"
	    *          animations="true" fixBase="true">
	    *   <file name="index.html">
	    *     <form name="myForm">
	    *       <label>
	    *         Enter your name:
	    *         <input type="text"
	    *                name="myName"
	    *                ng-model="name"
	    *                ng-minlength="5"
	    *                ng-maxlength="20"
	    *                required />
	    *       </label>
	    *       <pre>myForm.myName.$error = {{ myForm.myName.$error | json }}</pre>
	    *
	    *       <div ng-messages="myForm.myName.$error" style="color:maroon" role="alert">
	    *         <div ng-message="required">You did not enter a field</div>
	    *         <div ng-message="minlength">Your field is too short</div>
	    *         <div ng-message="maxlength">Your field is too long</div>
	    *       </div>
	    *     </form>
	    *   </file>
	    *   <file name="script.js">
	    *     angular.module('ngMessagesExample', ['ngMessages']);
	    *   </file>
	    * </example>
	    */
	   .directive('ngMessages', ['$animate', function($animate) {
	     var ACTIVE_CLASS = 'ng-active';
	     var INACTIVE_CLASS = 'ng-inactive';

	     return {
	       require: 'ngMessages',
	       restrict: 'AE',
	       controller: ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {
	         var ctrl = this;
	         var latestKey = 0;
	         var nextAttachId = 0;

	         this.getAttachId = function getAttachId() { return nextAttachId++; };

	         var messages = this.messages = {};
	         var renderLater, cachedCollection;

	         this.render = function(collection) {
	           collection = collection || {};

	           renderLater = false;
	           cachedCollection = collection;

	           // this is true if the attribute is empty or if the attribute value is truthy
	           var multiple = isAttrTruthy($scope, $attrs.ngMessagesMultiple) ||
	                          isAttrTruthy($scope, $attrs.multiple);

	           var unmatchedMessages = [];
	           var matchedKeys = {};
	           var messageItem = ctrl.head;
	           var messageFound = false;
	           var totalMessages = 0;

	           // we use != instead of !== to allow for both undefined and null values
	           while (messageItem != null) {
	             totalMessages++;
	             var messageCtrl = messageItem.message;

	             var messageUsed = false;
	             if (!messageFound) {
	               forEach(collection, function(value, key) {
	                 if (!messageUsed && truthy(value) && messageCtrl.test(key)) {
	                   // this is to prevent the same error name from showing up twice
	                   if (matchedKeys[key]) return;
	                   matchedKeys[key] = true;

	                   messageUsed = true;
	                   messageCtrl.attach();
	                 }
	               });
	             }

	             if (messageUsed) {
	               // unless we want to display multiple messages then we should
	               // set a flag here to avoid displaying the next message in the list
	               messageFound = !multiple;
	             } else {
	               unmatchedMessages.push(messageCtrl);
	             }

	             messageItem = messageItem.next;
	           }

	           forEach(unmatchedMessages, function(messageCtrl) {
	             messageCtrl.detach();
	           });

	           unmatchedMessages.length !== totalMessages
	              ? $animate.setClass($element, ACTIVE_CLASS, INACTIVE_CLASS)
	              : $animate.setClass($element, INACTIVE_CLASS, ACTIVE_CLASS);
	         };

	         $scope.$watchCollection($attrs.ngMessages || $attrs['for'], ctrl.render);

	         this.reRender = function() {
	           if (!renderLater) {
	             renderLater = true;
	             $scope.$evalAsync(function() {
	               if (renderLater) {
	                 cachedCollection && ctrl.render(cachedCollection);
	               }
	             });
	           }
	         };

	         this.register = function(comment, messageCtrl) {
	           var nextKey = latestKey.toString();
	           messages[nextKey] = {
	             message: messageCtrl
	           };
	           insertMessageNode($element[0], comment, nextKey);
	           comment.$$ngMessageNode = nextKey;
	           latestKey++;

	           ctrl.reRender();
	         };

	         this.deregister = function(comment) {
	           var key = comment.$$ngMessageNode;
	           delete comment.$$ngMessageNode;
	           removeMessageNode($element[0], comment, key);
	           delete messages[key];
	           ctrl.reRender();
	         };

	         function findPreviousMessage(parent, comment) {
	           var prevNode = comment;
	           var parentLookup = [];
	           while (prevNode && prevNode !== parent) {
	             var prevKey = prevNode.$$ngMessageNode;
	             if (prevKey && prevKey.length) {
	               return messages[prevKey];
	             }

	             // dive deeper into the DOM and examine its children for any ngMessage
	             // comments that may be in an element that appears deeper in the list
	             if (prevNode.childNodes.length && parentLookup.indexOf(prevNode) == -1) {
	               parentLookup.push(prevNode);
	               prevNode = prevNode.childNodes[prevNode.childNodes.length - 1];
	             } else {
	               prevNode = prevNode.previousSibling || prevNode.parentNode;
	             }
	           }
	         }

	         function insertMessageNode(parent, comment, key) {
	           var messageNode = messages[key];
	           if (!ctrl.head) {
	             ctrl.head = messageNode;
	           } else {
	             var match = findPreviousMessage(parent, comment);
	             if (match) {
	               messageNode.next = match.next;
	               match.next = messageNode;
	             } else {
	               messageNode.next = ctrl.head;
	               ctrl.head = messageNode;
	             }
	           }
	         }

	         function removeMessageNode(parent, comment, key) {
	           var messageNode = messages[key];

	           var match = findPreviousMessage(parent, comment);
	           if (match) {
	             match.next = messageNode.next;
	           } else {
	             ctrl.head = messageNode.next;
	           }
	         }
	       }]
	     };

	     function isAttrTruthy(scope, attr) {
	      return (isString(attr) && attr.length === 0) || //empty attribute
	             truthy(scope.$eval(attr));
	     }

	     function truthy(val) {
	       return isString(val) ? val.length : !!val;
	     }
	   }])

	   /**
	    * @ngdoc directive
	    * @name ngMessagesInclude
	    * @restrict AE
	    * @scope
	    *
	    * @description
	    * `ngMessagesInclude` is a directive with the purpose to import existing ngMessage template
	    * code from a remote template and place the downloaded template code into the exact spot
	    * that the ngMessagesInclude directive is placed within the ngMessages container. This allows
	    * for a series of pre-defined messages to be reused and also allows for the developer to
	    * determine what messages are overridden due to the placement of the ngMessagesInclude directive.
	    *
	    * @usage
	    * ```html
	    * <!-- using attribute directives -->
	    * <ANY ng-messages="expression" role="alert">
	    *   <ANY ng-messages-include="remoteTplString">...</ANY>
	    * </ANY>
	    *
	    * <!-- or by using element directives -->
	    * <ng-messages for="expression" role="alert">
	    *   <ng-messages-include src="expressionValue1">...</ng-messages-include>
	    * </ng-messages>
	    * ```
	    *
	    * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.
	    *
	    * @param {string} ngMessagesInclude|src a string value corresponding to the remote template.
	    */
	   .directive('ngMessagesInclude',
	     ['$templateRequest', '$document', '$compile', function($templateRequest, $document, $compile) {

	     return {
	       restrict: 'AE',
	       require: '^^ngMessages', // we only require this for validation sake
	       link: function($scope, element, attrs) {
	         var src = attrs.ngMessagesInclude || attrs.src;
	         $templateRequest(src).then(function(html) {
	           $compile(html)($scope, function(contents) {
	             element.after(contents);

	             // the anchor is placed for debugging purposes
	             var anchor = jqLite($document[0].createComment(' ngMessagesInclude: ' + src + ' '));
	             element.after(anchor);

	             // we don't want to pollute the DOM anymore by keeping an empty directive element
	             element.remove();
	           });
	         });
	       }
	     };
	   }])

	   /**
	    * @ngdoc directive
	    * @name ngMessage
	    * @restrict AE
	    * @scope
	    *
	    * @description
	    * `ngMessage` is a directive with the purpose to show and hide a particular message.
	    * For `ngMessage` to operate, a parent `ngMessages` directive on a parent DOM element
	    * must be situated since it determines which messages are visible based on the state
	    * of the provided key/value map that `ngMessages` listens on.
	    *
	    * More information about using `ngMessage` can be found in the
	    * {@link module:ngMessages `ngMessages` module documentation}.
	    *
	    * @usage
	    * ```html
	    * <!-- using attribute directives -->
	    * <ANY ng-messages="expression" role="alert">
	    *   <ANY ng-message="stringValue">...</ANY>
	    *   <ANY ng-message="stringValue1, stringValue2, ...">...</ANY>
	    * </ANY>
	    *
	    * <!-- or by using element directives -->
	    * <ng-messages for="expression" role="alert">
	    *   <ng-message when="stringValue">...</ng-message>
	    *   <ng-message when="stringValue1, stringValue2, ...">...</ng-message>
	    * </ng-messages>
	    * ```
	    *
	    * @param {expression} ngMessage|when a string value corresponding to the message key.
	    */
	  .directive('ngMessage', ngMessageDirectiveFactory())


	   /**
	    * @ngdoc directive
	    * @name ngMessageExp
	    * @restrict AE
	    * @priority 1
	    * @scope
	    *
	    * @description
	    * `ngMessageExp` is a directive with the purpose to show and hide a particular message.
	    * For `ngMessageExp` to operate, a parent `ngMessages` directive on a parent DOM element
	    * must be situated since it determines which messages are visible based on the state
	    * of the provided key/value map that `ngMessages` listens on.
	    *
	    * @usage
	    * ```html
	    * <!-- using attribute directives -->
	    * <ANY ng-messages="expression">
	    *   <ANY ng-message-exp="expressionValue">...</ANY>
	    * </ANY>
	    *
	    * <!-- or by using element directives -->
	    * <ng-messages for="expression">
	    *   <ng-message when-exp="expressionValue">...</ng-message>
	    * </ng-messages>
	    * ```
	    *
	    * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.
	    *
	    * @param {expression} ngMessageExp|whenExp an expression value corresponding to the message key.
	    */
	  .directive('ngMessageExp', ngMessageDirectiveFactory());

	function ngMessageDirectiveFactory() {
	  return ['$animate', function($animate) {
	    return {
	      restrict: 'AE',
	      transclude: 'element',
	      priority: 1, // must run before ngBind, otherwise the text is set on the comment
	      terminal: true,
	      require: '^^ngMessages',
	      link: function(scope, element, attrs, ngMessagesCtrl, $transclude) {
	        var commentNode = element[0];

	        var records;
	        var staticExp = attrs.ngMessage || attrs.when;
	        var dynamicExp = attrs.ngMessageExp || attrs.whenExp;
	        var assignRecords = function(items) {
	          records = items
	              ? (isArray(items)
	                    ? items
	                    : items.split(/[\s,]+/))
	              : null;
	          ngMessagesCtrl.reRender();
	        };

	        if (dynamicExp) {
	          assignRecords(scope.$eval(dynamicExp));
	          scope.$watchCollection(dynamicExp, assignRecords);
	        } else {
	          assignRecords(staticExp);
	        }

	        var currentElement, messageCtrl;
	        ngMessagesCtrl.register(commentNode, messageCtrl = {
	          test: function(name) {
	            return contains(records, name);
	          },
	          attach: function() {
	            if (!currentElement) {
	              $transclude(scope, function(elm) {
	                $animate.enter(elm, null, element);
	                currentElement = elm;

	                // Each time we attach this node to a message we get a new id that we can match
	                // when we are destroying the node later.
	                var $$attachId = currentElement.$$attachId = ngMessagesCtrl.getAttachId();

	                // in the event that the parent element is destroyed
	                // by any other structural directive then it's time
	                // to deregister the message from the controller
	                currentElement.on('$destroy', function() {
	                  if (currentElement && currentElement.$$attachId === $$attachId) {
	                    ngMessagesCtrl.deregister(commentNode);
	                    messageCtrl.detach();
	                  }
	                });
	              });
	            }
	          },
	          detach: function() {
	            if (currentElement) {
	              var elm = currentElement;
	              currentElement = null;
	              $animate.leave(elm);
	            }
	          }
	        });
	      }
	    };
	  }];

	  function contains(collection, key) {
	    if (collection) {
	      return isArray(collection)
	          ? collection.indexOf(key) >= 0
	          : collection.hasOwnProperty(key);
	    }
	  }
	}


	})(window, window.angular);


/***/ },

/***/ 375:
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },

/***/ 377:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(378);
	module.exports = 'angular-loading-bar';


/***/ },

/***/ 378:
/***/ function(module, exports) {

	/*! 
	 * angular-loading-bar v0.8.0
	 * https://chieffancypants.github.io/angular-loading-bar
	 * Copyright (c) 2015 Wes Cruver
	 * License: MIT
	 */
	/*
	 * angular-loading-bar
	 *
	 * intercepts XHR requests and creates a loading bar.
	 * Based on the excellent nprogress work by rstacruz (more info in readme)
	 *
	 * (c) 2013 Wes Cruver
	 * License: MIT
	 */


	(function() {

	'use strict';

	// Alias the loading bar for various backwards compatibilities since the project has matured:
	angular.module('angular-loading-bar', ['cfp.loadingBarInterceptor']);
	angular.module('chieffancypants.loadingBar', ['cfp.loadingBarInterceptor']);


	/**
	 * loadingBarInterceptor service
	 *
	 * Registers itself as an Angular interceptor and listens for XHR requests.
	 */
	angular.module('cfp.loadingBarInterceptor', ['cfp.loadingBar'])
	  .config(['$httpProvider', function ($httpProvider) {

	    var interceptor = ['$q', '$cacheFactory', '$timeout', '$rootScope', '$log', 'cfpLoadingBar', function ($q, $cacheFactory, $timeout, $rootScope, $log, cfpLoadingBar) {

	      /**
	       * The total number of requests made
	       */
	      var reqsTotal = 0;

	      /**
	       * The number of requests completed (either successfully or not)
	       */
	      var reqsCompleted = 0;

	      /**
	       * The amount of time spent fetching before showing the loading bar
	       */
	      var latencyThreshold = cfpLoadingBar.latencyThreshold;

	      /**
	       * $timeout handle for latencyThreshold
	       */
	      var startTimeout;


	      /**
	       * calls cfpLoadingBar.complete() which removes the
	       * loading bar from the DOM.
	       */
	      function setComplete() {
	        $timeout.cancel(startTimeout);
	        cfpLoadingBar.complete();
	        reqsCompleted = 0;
	        reqsTotal = 0;
	      }

	      /**
	       * Determine if the response has already been cached
	       * @param  {Object}  config the config option from the request
	       * @return {Boolean} retrns true if cached, otherwise false
	       */
	      function isCached(config) {
	        var cache;
	        var defaultCache = $cacheFactory.get('$http');
	        var defaults = $httpProvider.defaults;

	        // Choose the proper cache source. Borrowed from angular: $http service
	        if ((config.cache || defaults.cache) && config.cache !== false &&
	          (config.method === 'GET' || config.method === 'JSONP')) {
	            cache = angular.isObject(config.cache) ? config.cache
	              : angular.isObject(defaults.cache) ? defaults.cache
	              : defaultCache;
	        }

	        var cached = cache !== undefined ?
	          cache.get(config.url) !== undefined : false;

	        if (config.cached !== undefined && cached !== config.cached) {
	          return config.cached;
	        }
	        config.cached = cached;
	        return cached;
	      }


	      return {
	        'request': function(config) {
	          // Check to make sure this request hasn't already been cached and that
	          // the requester didn't explicitly ask us to ignore this request:
	          if (!config.ignoreLoadingBar && !isCached(config)) {
	            $rootScope.$broadcast('cfpLoadingBar:loading', {url: config.url});
	            if (reqsTotal === 0) {
	              startTimeout = $timeout(function() {
	                cfpLoadingBar.start();
	              }, latencyThreshold);
	            }
	            reqsTotal++;
	            cfpLoadingBar.set(reqsCompleted / reqsTotal);
	          }
	          return config;
	        },

	        'response': function(response) {
	          if (!response || !response.config) {
	            $log.error('Broken interceptor detected: Config object not supplied in response:\n https://github.com/chieffancypants/angular-loading-bar/pull/50');
	            return response;
	          }

	          if (!response.config.ignoreLoadingBar && !isCached(response.config)) {
	            reqsCompleted++;
	            $rootScope.$broadcast('cfpLoadingBar:loaded', {url: response.config.url, result: response});
	            if (reqsCompleted >= reqsTotal) {
	              setComplete();
	            } else {
	              cfpLoadingBar.set(reqsCompleted / reqsTotal);
	            }
	          }
	          return response;
	        },

	        'responseError': function(rejection) {
	          if (!rejection || !rejection.config) {
	            $log.error('Broken interceptor detected: Config object not supplied in rejection:\n https://github.com/chieffancypants/angular-loading-bar/pull/50');
	            return $q.reject(rejection);
	          }

	          if (!rejection.config.ignoreLoadingBar && !isCached(rejection.config)) {
	            reqsCompleted++;
	            $rootScope.$broadcast('cfpLoadingBar:loaded', {url: rejection.config.url, result: rejection});
	            if (reqsCompleted >= reqsTotal) {
	              setComplete();
	            } else {
	              cfpLoadingBar.set(reqsCompleted / reqsTotal);
	            }
	          }
	          return $q.reject(rejection);
	        }
	      };
	    }];

	    $httpProvider.interceptors.push(interceptor);
	  }]);


	/**
	 * Loading Bar
	 *
	 * This service handles adding and removing the actual element in the DOM.
	 * Generally, best practices for DOM manipulation is to take place in a
	 * directive, but because the element itself is injected in the DOM only upon
	 * XHR requests, and it's likely needed on every view, the best option is to
	 * use a service.
	 */
	angular.module('cfp.loadingBar', [])
	  .provider('cfpLoadingBar', function() {

	    this.autoIncrement = true;
	    this.includeSpinner = true;
	    this.includeBar = true;
	    this.latencyThreshold = 100;
	    this.startSize = 0.02;
	    this.parentSelector = 'body';
	    this.spinnerTemplate = '<div id="loading-bar-spinner"><div class="spinner-icon"></div></div>';
	    this.loadingBarTemplate = '<div id="loading-bar"><div class="bar"><div class="peg"></div></div></div>';

	    this.$get = ['$injector', '$document', '$timeout', '$rootScope', function ($injector, $document, $timeout, $rootScope) {
	      var $animate;
	      var $parentSelector = this.parentSelector,
	        loadingBarContainer = angular.element(this.loadingBarTemplate),
	        loadingBar = loadingBarContainer.find('div').eq(0),
	        spinner = angular.element(this.spinnerTemplate);

	      var incTimeout,
	        completeTimeout,
	        started = false,
	        status = 0;

	      var autoIncrement = this.autoIncrement;
	      var includeSpinner = this.includeSpinner;
	      var includeBar = this.includeBar;
	      var startSize = this.startSize;

	      /**
	       * Inserts the loading bar element into the dom, and sets it to 2%
	       */
	      function _start() {
	        if (!$animate) {
	          $animate = $injector.get('$animate');
	        }

	        var $parent = $document.find($parentSelector).eq(0);
	        $timeout.cancel(completeTimeout);

	        // do not continually broadcast the started event:
	        if (started) {
	          return;
	        }

	        $rootScope.$broadcast('cfpLoadingBar:started');
	        started = true;

	        if (includeBar) {
	          $animate.enter(loadingBarContainer, $parent, angular.element($parent[0].lastChild));
	        }

	        if (includeSpinner) {
	          $animate.enter(spinner, $parent, angular.element($parent[0].lastChild));
	        }

	        _set(startSize);
	      }

	      /**
	       * Set the loading bar's width to a certain percent.
	       *
	       * @param n any value between 0 and 1
	       */
	      function _set(n) {
	        if (!started) {
	          return;
	        }
	        var pct = (n * 100) + '%';
	        loadingBar.css('width', pct);
	        status = n;

	        // increment loadingbar to give the illusion that there is always
	        // progress but make sure to cancel the previous timeouts so we don't
	        // have multiple incs running at the same time.
	        if (autoIncrement) {
	          $timeout.cancel(incTimeout);
	          incTimeout = $timeout(function() {
	            _inc();
	          }, 250);
	        }
	      }

	      /**
	       * Increments the loading bar by a random amount
	       * but slows down as it progresses
	       */
	      function _inc() {
	        if (_status() >= 1) {
	          return;
	        }

	        var rnd = 0;

	        // TODO: do this mathmatically instead of through conditions

	        var stat = _status();
	        if (stat >= 0 && stat < 0.25) {
	          // Start out between 3 - 6% increments
	          rnd = (Math.random() * (5 - 3 + 1) + 3) / 100;
	        } else if (stat >= 0.25 && stat < 0.65) {
	          // increment between 0 - 3%
	          rnd = (Math.random() * 3) / 100;
	        } else if (stat >= 0.65 && stat < 0.9) {
	          // increment between 0 - 2%
	          rnd = (Math.random() * 2) / 100;
	        } else if (stat >= 0.9 && stat < 0.99) {
	          // finally, increment it .5 %
	          rnd = 0.005;
	        } else {
	          // after 99%, don't increment:
	          rnd = 0;
	        }

	        var pct = _status() + rnd;
	        _set(pct);
	      }

	      function _status() {
	        return status;
	      }

	      function _completeAnimation() {
	        status = 0;
	        started = false;
	      }

	      function _complete() {
	        if (!$animate) {
	          $animate = $injector.get('$animate');
	        }

	        $rootScope.$broadcast('cfpLoadingBar:completed');
	        _set(1);

	        $timeout.cancel(completeTimeout);

	        // Attempt to aggregate any start/complete calls within 500ms:
	        completeTimeout = $timeout(function() {
	          var promise = $animate.leave(loadingBarContainer, _completeAnimation);
	          if (promise && promise.then) {
	            promise.then(_completeAnimation);
	          }
	          $animate.leave(spinner);
	        }, 500);
	      }

	      return {
	        start            : _start,
	        set              : _set,
	        status           : _status,
	        inc              : _inc,
	        complete         : _complete,
	        autoIncrement    : this.autoIncrement,
	        includeSpinner   : this.includeSpinner,
	        latencyThreshold : this.latencyThreshold,
	        parentSelector   : this.parentSelector,
	        startSize        : this.startSize
	      };


	    }];     //
	  });       // wtf javascript. srsly
	})();       //


/***/ },

/***/ 379:
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },

/***/ 381:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(382);
	module.exports = "toaster";


/***/ },

/***/ 382:
/***/ function(module, exports) {

	/* global angular */
	(function (window, document) {
	    'use strict';

	    /*
	     * AngularJS Toaster
	     * Version: 1.0.0
	     *
	     * Copyright 2013-2016 Jiri Kavulak.
	     * All Rights Reserved.
	     * Use, reproduction, distribution, and modification of this code is subject to the terms and
	     * conditions of the MIT license, available at http://www.opensource.org/licenses/mit-license.php
	     *
	     * Author: Jiri Kavulak
	     * Related to project of John Papa, Hans Fjällemark and Nguyễn Thiện Hùng (thienhung1989)
	     */

	    angular.module('toaster', []).constant(
	        'toasterConfig', {
	            'limit': 0,                   // limits max number of toasts
	            'tap-to-dismiss': true,

	            /* Options:
	             - Boolean false/true
	             'close-button': true
	             - object if not a boolean that allows you to
	             override showing the close button for each
	             icon-class value
	             'close-button': { 'toast-error': true, 'toast-info': false }
	             */
	            'close-button': false,
	            'close-html': '<button class="toast-close-button" type="button">&times;</button>',
	            'newest-on-top': true, 
	            //'fade-in': 1000,            // done in css
	            //'on-fade-in': undefined,    // not implemented
	            //'fade-out': 1000,           // done in css
	            //'on-fade-out': undefined,   // not implemented
	            //'extended-time-out': 1000,  // not implemented
	            'time-out': 5000, // Set timeOut and extendedTimeout to 0 to make it sticky
	            'icon-classes': {
	                error: 'toast-error',
	                info: 'toast-info',
	                wait: 'toast-wait',
	                success: 'toast-success',
	                warning: 'toast-warning'
	            },
	            'body-output-type': '', // Options: '', 'trustedHtml', 'template', 'templateWithData', 'directive'
	            'body-template': 'toasterBodyTmpl.html',
	            'icon-class': 'toast-info',
	            'position-class': 'toast-top-right', // Options (see CSS):
	            // 'toast-top-full-width', 'toast-bottom-full-width', 'toast-center',
	            // 'toast-top-left', 'toast-top-center', 'toast-top-right',
	            // 'toast-bottom-left', 'toast-bottom-center', 'toast-bottom-right',
	            'title-class': 'toast-title',
	            'message-class': 'toast-message',
	            'prevent-duplicates': false,
	            'mouseover-timer-stop': true // stop timeout on mouseover and restart timer on mouseout
	        }
	        ).service(
	        'toaster', [
	            '$rootScope', 'toasterConfig', function ($rootScope, toasterConfig) {
	                this.pop = function (type, title, body, timeout, bodyOutputType, clickHandler, toasterId, showCloseButton, toastId, onHideCallback) {
	                    if (angular.isObject(type)) {
	                        var params = type; // Enable named parameters as pop argument
	                        this.toast = {
	                            type: params.type,
	                            title: params.title,
	                            body: params.body,
	                            timeout: params.timeout,
	                            bodyOutputType: params.bodyOutputType,
	                            clickHandler: params.clickHandler,
	                            showCloseButton: params.showCloseButton,
	                            closeHtml: params.closeHtml,
	                            uid: params.toastId,
	                            onHideCallback: params.onHideCallback,
	                            directiveData: params.directiveData
	                        };
	                        toastId = params.toastId;
	                        toasterId = params.toasterId;
	                    } else {
	                        this.toast = {
	                            type: type,
	                            title: title,
	                            body: body,
	                            timeout: timeout,
	                            bodyOutputType: bodyOutputType,
	                            clickHandler: clickHandler,
	                            showCloseButton: showCloseButton,
	                            uid: toastId,
	                            onHideCallback: onHideCallback
	                        };
	                    }
	                    $rootScope.$emit('toaster-newToast', toasterId, toastId);
	                };

	                this.clear = function (toasterId, toastId) {
	                    $rootScope.$emit('toaster-clearToasts', toasterId, toastId);
	                };

	                // Create one method per icon class, to allow to call toaster.info() and similar
	                for (var type in toasterConfig['icon-classes']) {
	                    this[type] = createTypeMethod(type);
	                }

	                function createTypeMethod(toasterType) {
	                    return function (title, body, timeout, bodyOutputType, clickHandler, toasterId, showCloseButton, toastId, onHideCallback) {
	                        if (angular.isString(title)) {
	                            this.pop(
	                                toasterType,
	                                title,
	                                body,
	                                timeout,
	                                bodyOutputType,
	                                clickHandler,
	                                toasterId,
	                                showCloseButton,
	                                toastId,
	                                onHideCallback);
	                        } else { // 'title' is actually an object with options
	                            this.pop(angular.extend(title, { type: toasterType }));
	                        }
	                    };
	                }
	            }]
	        ).factory(
	        'toasterEventRegistry', [
	            '$rootScope', function ($rootScope) {
	                var deregisterNewToast = null, deregisterClearToasts = null, newToastEventSubscribers = [], clearToastsEventSubscribers = [], toasterFactory;

	                toasterFactory = {
	                    setup: function () {
	                        if (!deregisterNewToast) {
	                            deregisterNewToast = $rootScope.$on(
	                                'toaster-newToast', function (event, toasterId, toastId) {
	                                    for (var i = 0, len = newToastEventSubscribers.length; i < len; i++) {
	                                        newToastEventSubscribers[i](event, toasterId, toastId);
	                                    }
	                                });
	                        }

	                        if (!deregisterClearToasts) {
	                            deregisterClearToasts = $rootScope.$on(
	                                'toaster-clearToasts', function (event, toasterId, toastId) {
	                                    for (var i = 0, len = clearToastsEventSubscribers.length; i < len; i++) {
	                                        clearToastsEventSubscribers[i](event, toasterId, toastId);
	                                    }
	                                });
	                        }
	                    },

	                    subscribeToNewToastEvent: function (onNewToast) {
	                        newToastEventSubscribers.push(onNewToast);
	                    },
	                    subscribeToClearToastsEvent: function (onClearToasts) {
	                        clearToastsEventSubscribers.push(onClearToasts);
	                    },
	                    unsubscribeToNewToastEvent: function (onNewToast) {
	                        var index = newToastEventSubscribers.indexOf(onNewToast);
	                        if (index >= 0) {
	                            newToastEventSubscribers.splice(index, 1);
	                        }

	                        if (newToastEventSubscribers.length === 0) {
	                            deregisterNewToast();
	                            deregisterNewToast = null;
	                        }
	                    },
	                    unsubscribeToClearToastsEvent: function (onClearToasts) {
	                        var index = clearToastsEventSubscribers.indexOf(onClearToasts);
	                        if (index >= 0) {
	                            clearToastsEventSubscribers.splice(index, 1);
	                        }

	                        if (clearToastsEventSubscribers.length === 0) {
	                            deregisterClearToasts();
	                            deregisterClearToasts = null;
	                        }
	                    }
	                };
	                return {
	                    setup: toasterFactory.setup,
	                    subscribeToNewToastEvent: toasterFactory.subscribeToNewToastEvent,
	                    subscribeToClearToastsEvent: toasterFactory.subscribeToClearToastsEvent,
	                    unsubscribeToNewToastEvent: toasterFactory.unsubscribeToNewToastEvent,
	                    unsubscribeToClearToastsEvent: toasterFactory.unsubscribeToClearToastsEvent
	                };
	            }]
	        )
	        .directive('directiveTemplate', ['$compile', '$injector', function($compile, $injector) {
	            return {
	                restrict: 'A',
	                scope: {
	                    directiveName: '@directiveName',
	                    directiveData: '@directiveData'
	                },
	                replace: true,   
	                link: function (scope, elm, attrs) {
	                    scope.$watch('directiveName', function (directiveName) {
	                        if (angular.isUndefined(directiveName) || directiveName.length <= 0)
	                            throw new Error('A valid directive name must be provided via the toast body argument when using bodyOutputType: directive');
	                        
	                        var directiveExists = $injector.has(attrs.$normalize(directiveName) + 'Directive');
	                        
	                        if (!directiveExists)
	                            throw new Error(directiveName + ' could not be found.');
	                        
	                        if (scope.directiveData)
	                            scope.directiveData = angular.fromJson(scope.directiveData);
	                        
	                        var template = $compile('<div ' + directiveName + '></div>')(scope);

	                        elm.append(template);
	                    });
	                }
	            }
	        }])
	        .directive(
	        'toasterContainer', [
	            '$parse', '$rootScope', '$interval', '$sce', 'toasterConfig', 'toaster', 'toasterEventRegistry',
	            function ($parse, $rootScope, $interval, $sce, toasterConfig, toaster, toasterEventRegistry) {
	                return {
	                    replace: true,
	                    restrict: 'EA',
	                    scope: true, // creates an internal scope for this directive (one per directive instance)
	                    link: function (scope, elm, attrs) {
	                        var id = 0, mergedConfig;

	                        // Merges configuration set in directive with default one
	                        mergedConfig = angular.extend({}, toasterConfig, scope.$eval(attrs.toasterOptions));

	                        scope.config = {
	                            toasterId: mergedConfig['toaster-id'],
	                            position: mergedConfig['position-class'],
	                            title: mergedConfig['title-class'],
	                            message: mergedConfig['message-class'],
	                            tap: mergedConfig['tap-to-dismiss'],
	                            closeButton: mergedConfig['close-button'],
	                            closeHtml: mergedConfig['close-html'],
	                            animation: mergedConfig['animation-class'],
	                            mouseoverTimer: mergedConfig['mouseover-timer-stop']
	                        };

	                        scope.$on(
	                            "$destroy", function () {
	                                toasterEventRegistry.unsubscribeToNewToastEvent(scope._onNewToast);
	                                toasterEventRegistry.unsubscribeToClearToastsEvent(scope._onClearToasts);
	                            }
	                            );

	                        function setTimeout(toast, time) {
	                            toast.timeoutPromise = $interval(
	                                function () {
	                                    scope.removeToast(toast.id);
	                                }, time, 1
	                                );
	                        }

	                        scope.configureTimer = function (toast) {
	                            var timeout = angular.isNumber(toast.timeout) ? toast.timeout : mergedConfig['time-out'];
	                            if (typeof timeout === "object") timeout = timeout[toast.type];
	                            if (timeout > 0) {
	                                setTimeout(toast, timeout);
	                            }
	                        };

	                        function addToast(toast, toastId) {
	                            toast.type = mergedConfig['icon-classes'][toast.type];
	                            if (!toast.type) {
	                                toast.type = mergedConfig['icon-class'];
	                            }

	                            if (mergedConfig['prevent-duplicates'] === true) {
	                                // Prevent adding duplicate toasts if it's set
	                                if (isUndefinedOrNull(toastId)) {
	                                    if (scope.toasters.length > 0 && scope.toasters[scope.toasters.length - 1].body === toast.body) {
	                                        return;
	                                    }
	                                } else {
	                                    var i, len;
	                                    for (i = 0, len = scope.toasters.length; i < len; i++) {
	                                        if (scope.toasters[i].uid === toastId) {
	                                            removeToast(i);
	                                            // update loop
	                                            i--;
	                                            len = scope.toasters.length;
	                                        }
	                                    }
	                                }
	                            }

	                            toast.id = ++id;
	                            // Sure uid defined
	                            if (!isUndefinedOrNull(toastId)) {
	                                toast.uid = toastId;
	                            }

	                            // set the showCloseButton property on the toast so that
	                            // each template can bind directly to the property to show/hide
	                            // the close button
	                            var closeButton = mergedConfig['close-button'];

	                            // if toast.showCloseButton is a boolean value,
	                            // it was specifically overriden in the pop arguments
	                            if (typeof toast.showCloseButton === "boolean") {

	                            } else if (typeof closeButton === "boolean") {
	                                toast.showCloseButton = closeButton;
	                            } else if (typeof closeButton === "object") {
	                                var closeButtonForType = closeButton[toast.type];

	                                if (typeof closeButtonForType !== "undefined" && closeButtonForType !== null) {
	                                    toast.showCloseButton = closeButtonForType;
	                                }
	                            } else {
	                                // if an option was not set, default to false.
	                                toast.showCloseButton = false;
	                            }
	                            
	                            if (toast.showCloseButton) {
	                                toast.closeHtml = $sce.trustAsHtml(toast.closeHtml || scope.config.closeHtml);
	                            }
	                             
	                            // Set the toast.bodyOutputType to the default if it isn't set
	                            toast.bodyOutputType = toast.bodyOutputType || mergedConfig['body-output-type'];
	                            switch (toast.bodyOutputType) {
	                                case 'trustedHtml':
	                                    toast.html = $sce.trustAsHtml(toast.body);
	                                    break;
	                                case 'template':
	                                    toast.bodyTemplate = toast.body || mergedConfig['body-template'];
	                                    break;
	                                case 'templateWithData':
	                                    var fcGet = $parse(toast.body || mergedConfig['body-template']);
	                                    var templateWithData = fcGet(scope);
	                                    toast.bodyTemplate = templateWithData.template;
	                                    toast.data = templateWithData.data;
	                                    break;
	                                case 'directive':
	                                    toast.html = toast.body;
	                                    break;
	                            }

	                            scope.configureTimer(toast);
	                            
	                            if (mergedConfig['newest-on-top'] === true) {
	                                scope.toasters.unshift(toast);
	                                if (mergedConfig['limit'] > 0 && scope.toasters.length > mergedConfig['limit']) {
	                                    scope.toasters.pop();
	                                }
	                            } else {
	                                scope.toasters.push(toast);
	                                if (mergedConfig['limit'] > 0 && scope.toasters.length > mergedConfig['limit']) {
	                                    scope.toasters.shift();
	                                }
	                            }
	                        }

	                        scope.removeToast = function (id) {
	                            var i, len;
	                            for (i = 0, len = scope.toasters.length; i < len; i++) {
	                                if (scope.toasters[i].id === id) {
	                                    removeToast(i);
	                                    break;
	                                }
	                            }
	                        };

	                        function removeToast(toastIndex) {
	                            var toast = scope.toasters[toastIndex];
	                            
	                            // toast is always defined since the index always has a match
	                            if (toast.timeoutPromise) {
	                                $interval.cancel(toast.timeoutPromise);
	                            }
	                            scope.toasters.splice(toastIndex, 1);

	                            if (angular.isFunction(toast.onHideCallback)) {
	                                toast.onHideCallback();
	                            }
	                        }

	                        function removeAllToasts(toastId) {
	                            for (var i = scope.toasters.length - 1; i >= 0; i--) {
	                                if (isUndefinedOrNull(toastId)) {
	                                    removeToast(i);
	                                } else {
	                                    if (scope.toasters[i].uid == toastId) {
	                                        removeToast(i);
	                                    }
	                                }
	                            }
	                        }

	                        scope.toasters = [];

	                        function isUndefinedOrNull(val) {
	                            return angular.isUndefined(val) || val === null;
	                        }

	                        scope._onNewToast = function (event, toasterId, toastId) {
	                            // Compatibility: if toaster has no toasterId defined, and if call to display
	                            // hasn't either, then the request is for us

	                            if ((isUndefinedOrNull(scope.config.toasterId) && isUndefinedOrNull(toasterId)) || (!isUndefinedOrNull(scope.config.toasterId) && !isUndefinedOrNull(toasterId) && scope.config.toasterId == toasterId)) {
	                                addToast(toaster.toast, toastId);
	                            }
	                        };
	                        scope._onClearToasts = function (event, toasterId, toastId) {
	                            // Compatibility: if toaster has no toasterId defined, and if call to display
	                            // hasn't either, then the request is for us
	                            if (toasterId == '*' || (isUndefinedOrNull(scope.config.toasterId) && isUndefinedOrNull(toasterId)) || (!isUndefinedOrNull(scope.config.toasterId) && !isUndefinedOrNull(toasterId) && scope.config.toasterId == toasterId)) {
	                                removeAllToasts(toastId);
	                            }
	                        };

	                        toasterEventRegistry.setup();

	                        toasterEventRegistry.subscribeToNewToastEvent(scope._onNewToast);
	                        toasterEventRegistry.subscribeToClearToastsEvent(scope._onClearToasts);
	                    },
	                    controller: [
	                        '$scope', '$element', '$attrs', function ($scope, $element, $attrs) {
	                            // Called on mouseover
	                            $scope.stopTimer = function (toast) {
	                                if ($scope.config.mouseoverTimer === true) {
	                                    if (toast.timeoutPromise) {
	                                        $interval.cancel(toast.timeoutPromise);
	                                        toast.timeoutPromise = null;
	                                    }
	                                }
	                            };

	                            // Called on mouseout
	                            $scope.restartTimer = function (toast) {
	                                if ($scope.config.mouseoverTimer === true) {
	                                    if (!toast.timeoutPromise) {
	                                        $scope.configureTimer(toast);
	                                    }
	                                } else if (toast.timeoutPromise === null) {
	                                    $scope.removeToast(toast.id);
	                                }
	                            };

	                            $scope.click = function (toast, isCloseButton) {
	                                if ($scope.config.tap === true || (toast.showCloseButton === true && isCloseButton === true)) {
	                                    var removeToast = true;
	                                    if (toast.clickHandler) {
	                                        if (angular.isFunction(toast.clickHandler)) {
	                                            removeToast = toast.clickHandler(toast, isCloseButton);
	                                        } else if (angular.isFunction($scope.$parent.$eval(toast.clickHandler))) {
	                                            removeToast = $scope.$parent.$eval(toast.clickHandler)(toast, isCloseButton);
	                                        } else {
	                                            console.log("TOAST-NOTE: Your click handler is not inside a parent scope of toaster-container.");
	                                        }
	                                    }
	                                    if (removeToast) {
	                                        $scope.removeToast(toast.id);
	                                    }
	                                }
	                            };
	                        }],
	                    template: 
	                        '<div id="toast-container" ng-class="[config.position, config.animation]">' + 
	                            '<div ng-repeat="toaster in toasters" class="toast" ng-class="toaster.type" ng-click="click(toaster)" ng-mouseover="stopTimer(toaster)" ng-mouseout="restartTimer(toaster)">' + 
	                                '<div ng-if="toaster.showCloseButton" ng-click="click(toaster, true)" ng-bind-html="toaster.closeHtml"></div>' + 
	                                '<div ng-class="config.title">{{toaster.title}}</div>' + 
	                                '<div ng-class="config.message" ng-switch on="toaster.bodyOutputType">' + 
	                                    '<div ng-switch-when="trustedHtml" ng-bind-html="toaster.html"></div>' + 
	                                    '<div ng-switch-when="template"><div ng-include="toaster.bodyTemplate"></div></div>' + 
	                                    '<div ng-switch-when="templateWithData"><div ng-include="toaster.bodyTemplate"></div></div>' +
	                                    '<div ng-switch-when="directive"><div directive-template directive-name="{{toaster.html}}" directive-data="{{toaster.directiveData}}"></div></div>' + 
	                                    '<div ng-switch-default >{{toaster.body}}</div>' + 
	                                '</div>' + 
	                            '</div>' + 
	                        '</div>'
	                };
	            }]
	        );
	})(window, document);

/***/ },

/***/ 383:
/***/ function(module, exports) {

	'use strict';
	/**
	 * Capitalize Filter
	 * Capitalizes all the words of a given sentence.
	 * If the format parameter is set to 'team', uppercase the team abbreviation.
	 * i.e. CLUB DEPORTIVO LOGROÑÉS => Club Deportivo Logroñés
	 * i.e. sd logroñés => SD Logroñés
	 * @author Pablo Villoslada Puigcerber <pablo85@gmail.com>
	 *
	 * @param {string} input The string to be formatted.
	 * @param {string} [format] The format to be applied being the options 'all', 'first' or 'team'.
	 * If not specified, 'all' is used.
	 * @param {string} [separator] The character(s) to be used for separating the string.
	 * If not specified, space is used.
	 * @returns {string} Formatted string.
	 */
	angular.module('angular-capitalize-filter',[])
	  .filter('capitalize', function () {
	    return function (input, format, separator) {
	      if (!input) {
	        return input;
	      }
	      format = format || 'all';
	      separator = separator || ' ';
	      if (format === 'first') {
	        // Capitalize the first letter of a sentence
	        var output = input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();
	        if (separator === ' ') {
	          return output;
	        } else {
	          return output.split(separator).join(' ');
	        }
	      } else {
	        return input.split(separator).map(function(word) {
	          if (word.length === 2 && format === 'team') {
	            // Uppercase team abbreviations like FC, CD, SD
	            return word.toUpperCase();
	          } else {
	            return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
	          }
	        }).join(' ');
	      }
	    };
	  });


/***/ },

/***/ 384:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
	  'use strict';

	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(385)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (root.hasOwnProperty('angular')) {
	    // Browser globals (root is window), we don't register it.
	    factory(root.angular);
	  } else if (typeof exports === 'object') {
	    module.exports = factory(require('angular'));
	  }
	}(this , function (angular) {
	    'use strict';

	    // In cases where Angular does not get passed or angular is a truthy value
	    // but misses .module we can fall back to using window.
	    angular = (angular && angular.module ) ? angular : window.angular;

	    /**
	     * @ngdoc overview
	     * @name ngStorage
	     */

	    return angular.module('ngStorage', [])

	    /**
	     * @ngdoc object
	     * @name ngStorage.$localStorage
	     * @requires $rootScope
	     * @requires $window
	     */

	    .provider('$localStorage', _storageProvider('localStorage'))

	    /**
	     * @ngdoc object
	     * @name ngStorage.$sessionStorage
	     * @requires $rootScope
	     * @requires $window
	     */

	    .provider('$sessionStorage', _storageProvider('sessionStorage'));

	    function _storageProvider(storageType) {
	        return function () {
	          var storageKeyPrefix = 'ngStorage-';

	          this.setKeyPrefix = function (prefix) {
	            if (typeof prefix !== 'string') {
	              throw new TypeError('[ngStorage] - ' + storageType + 'Provider.setKeyPrefix() expects a String.');
	            }
	            storageKeyPrefix = prefix;
	          };

	          var serializer = angular.toJson;
	          var deserializer = angular.fromJson;

	          this.setSerializer = function (s) {
	            if (typeof s !== 'function') {
	              throw new TypeError('[ngStorage] - ' + storageType + 'Provider.setSerializer expects a function.');
	            }

	            serializer = s;
	          };

	          this.setDeserializer = function (d) {
	            if (typeof d !== 'function') {
	              throw new TypeError('[ngStorage] - ' + storageType + 'Provider.setDeserializer expects a function.');
	            }

	            deserializer = d;
	          };

	          // Note: This is not very elegant at all.
	          this.get = function (key) {
	            return deserializer(window[storageType].getItem(storageKeyPrefix + key));
	          };

	          // Note: This is not very elegant at all.
	          this.set = function (key, value) {
	            return window[storageType].setItem(storageKeyPrefix + key, serializer(value));
	          };

	          this.$get = [
	              '$rootScope',
	              '$window',
	              '$log',
	              '$timeout',
	              '$document',

	              function(
	                  $rootScope,
	                  $window,
	                  $log,
	                  $timeout,
	                  $document
	              ){
	                function isStorageSupported(storageType) {

	                    // Some installations of IE, for an unknown reason, throw "SCRIPT5: Error: Access is denied"
	                    // when accessing window.localStorage. This happens before you try to do anything with it. Catch
	                    // that error and allow execution to continue.

	                    // fix 'SecurityError: DOM Exception 18' exception in Desktop Safari, Mobile Safari
	                    // when "Block cookies": "Always block" is turned on
	                    var supported;
	                    try {
	                        supported = $window[storageType];
	                    }
	                    catch (err) {
	                        supported = false;
	                    }

	                    // When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage
	                    // is available, but trying to call .setItem throws an exception below:
	                    // "QUOTA_EXCEEDED_ERR: DOM Exception 22: An attempt was made to add something to storage that exceeded the quota."
	                    if (supported && storageType === 'localStorage') {
	                        var key = '__' + Math.round(Math.random() * 1e7);

	                        try {
	                            localStorage.setItem(key, key);
	                            localStorage.removeItem(key);
	                        }
	                        catch (err) {
	                            supported = false;
	                        }
	                    }

	                    return supported;
	                }

	                // The magic number 10 is used which only works for some keyPrefixes...
	                // See https://github.com/gsklee/ngStorage/issues/137
	                var prefixLength = storageKeyPrefix.length;

	                // #9: Assign a placeholder object if Web Storage is unavailable to prevent breaking the entire AngularJS app
	                var webStorage = isStorageSupported(storageType) || ($log.warn('This browser does not support Web Storage!'), {setItem: angular.noop, getItem: angular.noop, removeItem: angular.noop}),
	                    $storage = {
	                        $default: function(items) {
	                            for (var k in items) {
	                                angular.isDefined($storage[k]) || ($storage[k] = angular.copy(items[k]) );
	                            }

	                            $storage.$sync();
	                            return $storage;
	                        },
	                        $reset: function(items) {
	                            for (var k in $storage) {
	                                '$' === k[0] || (delete $storage[k] && webStorage.removeItem(storageKeyPrefix + k));
	                            }

	                            return $storage.$default(items);
	                        },
	                        $sync: function () {
	                            for (var i = 0, l = webStorage.length, k; i < l; i++) {
	                                // #8, #10: `webStorage.key(i)` may be an empty string (or throw an exception in IE9 if `webStorage` is empty)
	                                (k = webStorage.key(i)) && storageKeyPrefix === k.slice(0, prefixLength) && ($storage[k.slice(prefixLength)] = deserializer(webStorage.getItem(k)));
	                            }
	                        },
	                        $apply: function() {
	                            var temp$storage;

	                            _debounce = null;

	                            if (!angular.equals($storage, _last$storage)) {
	                                temp$storage = angular.copy(_last$storage);
	                                angular.forEach($storage, function(v, k) {
	                                    if (angular.isDefined(v) && '$' !== k[0]) {
	                                        webStorage.setItem(storageKeyPrefix + k, serializer(v));
	                                        delete temp$storage[k];
	                                    }
	                                });

	                                for (var k in temp$storage) {
	                                    webStorage.removeItem(storageKeyPrefix + k);
	                                }

	                                _last$storage = angular.copy($storage);
	                            }
	                        }
	                    },
	                    _last$storage,
	                    _debounce;

	                $storage.$sync();

	                _last$storage = angular.copy($storage);

	                $rootScope.$watch(function() {
	                    _debounce || (_debounce = $timeout($storage.$apply, 100, false));
	                });

	                // #6: Use `$window.addEventListener` instead of `angular.element` to avoid the jQuery-specific `event.originalEvent`
	                $window.addEventListener && $window.addEventListener('storage', function(event) {
	                    if (!event.key) {
	                      return;
	                    }

	                    // Reference doc.
	                    var doc = $document[0];

	                    if ( (!doc.hasFocus || !doc.hasFocus()) && storageKeyPrefix === event.key.slice(0, prefixLength) ) {
	                        event.newValue ? $storage[event.key.slice(prefixLength)] = deserializer(event.newValue) : delete $storage[event.key.slice(prefixLength)];

	                        _last$storage = angular.copy($storage);

	                        $rootScope.$apply();
	                    }
	                });

	                $window.addEventListener && $window.addEventListener('beforeunload', function() {
	                    $storage.$apply();
	                });

	                return $storage;
	              }
	          ];
	      };
	    }

	}));


/***/ },

/***/ 385:
/***/ function(module, exports) {

	module.exports = angular;

/***/ },

/***/ 386:
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(387);
	module.exports = 'ngAnimate';


/***/ },

/***/ 387:
/***/ function(module, exports) {

	/**
	 * @license AngularJS v1.4.9
	 * (c) 2010-2015 Google, Inc. http://angularjs.org
	 * License: MIT
	 */
	(function(window, angular, undefined) {'use strict';

	/* jshint ignore:start */
	var noop        = angular.noop;
	var copy        = angular.copy;
	var extend      = angular.extend;
	var jqLite      = angular.element;
	var forEach     = angular.forEach;
	var isArray     = angular.isArray;
	var isString    = angular.isString;
	var isObject    = angular.isObject;
	var isUndefined = angular.isUndefined;
	var isDefined   = angular.isDefined;
	var isFunction  = angular.isFunction;
	var isElement   = angular.isElement;

	var ELEMENT_NODE = 1;
	var COMMENT_NODE = 8;

	var ADD_CLASS_SUFFIX = '-add';
	var REMOVE_CLASS_SUFFIX = '-remove';
	var EVENT_CLASS_PREFIX = 'ng-';
	var ACTIVE_CLASS_SUFFIX = '-active';

	var NG_ANIMATE_CLASSNAME = 'ng-animate';
	var NG_ANIMATE_CHILDREN_DATA = '$$ngAnimateChildren';

	// Detect proper transitionend/animationend event names.
	var CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;

	// If unprefixed events are not supported but webkit-prefixed are, use the latter.
	// Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.
	// Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`
	// but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.
	// Register both events in case `window.onanimationend` is not supported because of that,
	// do the same for `transitionend` as Safari is likely to exhibit similar behavior.
	// Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit
	// therefore there is no reason to test anymore for other vendor prefixes:
	// http://caniuse.com/#search=transition
	if (isUndefined(window.ontransitionend) && isDefined(window.onwebkittransitionend)) {
	  CSS_PREFIX = '-webkit-';
	  TRANSITION_PROP = 'WebkitTransition';
	  TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';
	} else {
	  TRANSITION_PROP = 'transition';
	  TRANSITIONEND_EVENT = 'transitionend';
	}

	if (isUndefined(window.onanimationend) && isDefined(window.onwebkitanimationend)) {
	  CSS_PREFIX = '-webkit-';
	  ANIMATION_PROP = 'WebkitAnimation';
	  ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';
	} else {
	  ANIMATION_PROP = 'animation';
	  ANIMATIONEND_EVENT = 'animationend';
	}

	var DURATION_KEY = 'Duration';
	var PROPERTY_KEY = 'Property';
	var DELAY_KEY = 'Delay';
	var TIMING_KEY = 'TimingFunction';
	var ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';
	var ANIMATION_PLAYSTATE_KEY = 'PlayState';
	var SAFE_FAST_FORWARD_DURATION_VALUE = 9999;

	var ANIMATION_DELAY_PROP = ANIMATION_PROP + DELAY_KEY;
	var ANIMATION_DURATION_PROP = ANIMATION_PROP + DURATION_KEY;
	var TRANSITION_DELAY_PROP = TRANSITION_PROP + DELAY_KEY;
	var TRANSITION_DURATION_PROP = TRANSITION_PROP + DURATION_KEY;

	var isPromiseLike = function(p) {
	  return p && p.then ? true : false;
	};

	var ngMinErr = angular.$$minErr('ng');
	function assertArg(arg, name, reason) {
	  if (!arg) {
	    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
	  }
	  return arg;
	}

	function mergeClasses(a,b) {
	  if (!a && !b) return '';
	  if (!a) return b;
	  if (!b) return a;
	  if (isArray(a)) a = a.join(' ');
	  if (isArray(b)) b = b.join(' ');
	  return a + ' ' + b;
	}

	function packageStyles(options) {
	  var styles = {};
	  if (options && (options.to || options.from)) {
	    styles.to = options.to;
	    styles.from = options.from;
	  }
	  return styles;
	}

	function pendClasses(classes, fix, isPrefix) {
	  var className = '';
	  classes = isArray(classes)
	      ? classes
	      : classes && isString(classes) && classes.length
	          ? classes.split(/\s+/)
	          : [];
	  forEach(classes, function(klass, i) {
	    if (klass && klass.length > 0) {
	      className += (i > 0) ? ' ' : '';
	      className += isPrefix ? fix + klass
	                            : klass + fix;
	    }
	  });
	  return className;
	}

	function removeFromArray(arr, val) {
	  var index = arr.indexOf(val);
	  if (val >= 0) {
	    arr.splice(index, 1);
	  }
	}

	function stripCommentsFromElement(element) {
	  if (element instanceof jqLite) {
	    switch (element.length) {
	      case 0:
	        return [];
	        break;

	      case 1:
	        // there is no point of stripping anything if the element
	        // is the only element within the jqLite wrapper.
	        // (it's important that we retain the element instance.)
	        if (element[0].nodeType === ELEMENT_NODE) {
	          return element;
	        }
	        break;

	      default:
	        return jqLite(extractElementNode(element));
	        break;
	    }
	  }

	  if (element.nodeType === ELEMENT_NODE) {
	    return jqLite(element);
	  }
	}

	function extractElementNode(element) {
	  if (!element[0]) return element;
	  for (var i = 0; i < element.length; i++) {
	    var elm = element[i];
	    if (elm.nodeType == ELEMENT_NODE) {
	      return elm;
	    }
	  }
	}

	function $$addClass($$jqLite, element, className) {
	  forEach(element, function(elm) {
	    $$jqLite.addClass(elm, className);
	  });
	}

	function $$removeClass($$jqLite, element, className) {
	  forEach(element, function(elm) {
	    $$jqLite.removeClass(elm, className);
	  });
	}

	function applyAnimationClassesFactory($$jqLite) {
	  return function(element, options) {
	    if (options.addClass) {
	      $$addClass($$jqLite, element, options.addClass);
	      options.addClass = null;
	    }
	    if (options.removeClass) {
	      $$removeClass($$jqLite, element, options.removeClass);
	      options.removeClass = null;
	    }
	  }
	}

	function prepareAnimationOptions(options) {
	  options = options || {};
	  if (!options.$$prepared) {
	    var domOperation = options.domOperation || noop;
	    options.domOperation = function() {
	      options.$$domOperationFired = true;
	      domOperation();
	      domOperation = noop;
	    };
	    options.$$prepared = true;
	  }
	  return options;
	}

	function applyAnimationStyles(element, options) {
	  applyAnimationFromStyles(element, options);
	  applyAnimationToStyles(element, options);
	}

	function applyAnimationFromStyles(element, options) {
	  if (options.from) {
	    element.css(options.from);
	    options.from = null;
	  }
	}

	function applyAnimationToStyles(element, options) {
	  if (options.to) {
	    element.css(options.to);
	    options.to = null;
	  }
	}

	function mergeAnimationOptions(element, target, newOptions) {
	  var toAdd = (target.addClass || '') + ' ' + (newOptions.addClass || '');
	  var toRemove = (target.removeClass || '') + ' ' + (newOptions.removeClass || '');
	  var classes = resolveElementClasses(element.attr('class'), toAdd, toRemove);

	  if (newOptions.preparationClasses) {
	    target.preparationClasses = concatWithSpace(newOptions.preparationClasses, target.preparationClasses);
	    delete newOptions.preparationClasses;
	  }

	  // noop is basically when there is no callback; otherwise something has been set
	  var realDomOperation = target.domOperation !== noop ? target.domOperation : null;

	  extend(target, newOptions);

	  // TODO(matsko or sreeramu): proper fix is to maintain all animation callback in array and call at last,but now only leave has the callback so no issue with this.
	  if (realDomOperation) {
	    target.domOperation = realDomOperation;
	  }

	  if (classes.addClass) {
	    target.addClass = classes.addClass;
	  } else {
	    target.addClass = null;
	  }

	  if (classes.removeClass) {
	    target.removeClass = classes.removeClass;
	  } else {
	    target.removeClass = null;
	  }

	  return target;
	}

	function resolveElementClasses(existing, toAdd, toRemove) {
	  var ADD_CLASS = 1;
	  var REMOVE_CLASS = -1;

	  var flags = {};
	  existing = splitClassesToLookup(existing);

	  toAdd = splitClassesToLookup(toAdd);
	  forEach(toAdd, function(value, key) {
	    flags[key] = ADD_CLASS;
	  });

	  toRemove = splitClassesToLookup(toRemove);
	  forEach(toRemove, function(value, key) {
	    flags[key] = flags[key] === ADD_CLASS ? null : REMOVE_CLASS;
	  });

	  var classes = {
	    addClass: '',
	    removeClass: ''
	  };

	  forEach(flags, function(val, klass) {
	    var prop, allow;
	    if (val === ADD_CLASS) {
	      prop = 'addClass';
	      allow = !existing[klass];
	    } else if (val === REMOVE_CLASS) {
	      prop = 'removeClass';
	      allow = existing[klass];
	    }
	    if (allow) {
	      if (classes[prop].length) {
	        classes[prop] += ' ';
	      }
	      classes[prop] += klass;
	    }
	  });

	  function splitClassesToLookup(classes) {
	    if (isString(classes)) {
	      classes = classes.split(' ');
	    }

	    var obj = {};
	    forEach(classes, function(klass) {
	      // sometimes the split leaves empty string values
	      // incase extra spaces were applied to the options
	      if (klass.length) {
	        obj[klass] = true;
	      }
	    });
	    return obj;
	  }

	  return classes;
	}

	function getDomNode(element) {
	  return (element instanceof angular.element) ? element[0] : element;
	}

	function applyGeneratedPreparationClasses(element, event, options) {
	  var classes = '';
	  if (event) {
	    classes = pendClasses(event, EVENT_CLASS_PREFIX, true);
	  }
	  if (options.addClass) {
	    classes = concatWithSpace(classes, pendClasses(options.addClass, ADD_CLASS_SUFFIX));
	  }
	  if (options.removeClass) {
	    classes = concatWithSpace(classes, pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX));
	  }
	  if (classes.length) {
	    options.preparationClasses = classes;
	    element.addClass(classes);
	  }
	}

	function clearGeneratedClasses(element, options) {
	  if (options.preparationClasses) {
	    element.removeClass(options.preparationClasses);
	    options.preparationClasses = null;
	  }
	  if (options.activeClasses) {
	    element.removeClass(options.activeClasses);
	    options.activeClasses = null;
	  }
	}

	function blockTransitions(node, duration) {
	  // we use a negative delay value since it performs blocking
	  // yet it doesn't kill any existing transitions running on the
	  // same element which makes this safe for class-based animations
	  var value = duration ? '-' + duration + 's' : '';
	  applyInlineStyle(node, [TRANSITION_DELAY_PROP, value]);
	  return [TRANSITION_DELAY_PROP, value];
	}

	function blockKeyframeAnimations(node, applyBlock) {
	  var value = applyBlock ? 'paused' : '';
	  var key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;
	  applyInlineStyle(node, [key, value]);
	  return [key, value];
	}

	function applyInlineStyle(node, styleTuple) {
	  var prop = styleTuple[0];
	  var value = styleTuple[1];
	  node.style[prop] = value;
	}

	function concatWithSpace(a,b) {
	  if (!a) return b;
	  if (!b) return a;
	  return a + ' ' + b;
	}

	var $$rAFSchedulerFactory = ['$$rAF', function($$rAF) {
	  var queue, cancelFn;

	  function scheduler(tasks) {
	    // we make a copy since RAFScheduler mutates the state
	    // of the passed in array variable and this would be difficult
	    // to track down on the outside code
	    queue = queue.concat(tasks);
	    nextTick();
	  }

	  queue = scheduler.queue = [];

	  /* waitUntilQuiet does two things:
	   * 1. It will run the FINAL `fn` value only when an uncancelled RAF has passed through
	   * 2. It will delay the next wave of tasks from running until the quiet `fn` has run.
	   *
	   * The motivation here is that animation code can request more time from the scheduler
	   * before the next wave runs. This allows for certain DOM properties such as classes to
	   * be resolved in time for the next animation to run.
	   */
	  scheduler.waitUntilQuiet = function(fn) {
	    if (cancelFn) cancelFn();

	    cancelFn = $$rAF(function() {
	      cancelFn = null;
	      fn();
	      nextTick();
	    });
	  };

	  return scheduler;

	  function nextTick() {
	    if (!queue.length) return;

	    var items = queue.shift();
	    for (var i = 0; i < items.length; i++) {
	      items[i]();
	    }

	    if (!cancelFn) {
	      $$rAF(function() {
	        if (!cancelFn) nextTick();
	      });
	    }
	  }
	}];

	var $$AnimateChildrenDirective = [function() {
	  return function(scope, element, attrs) {
	    var val = attrs.ngAnimateChildren;
	    if (angular.isString(val) && val.length === 0) { //empty attribute
	      element.data(NG_ANIMATE_CHILDREN_DATA, true);
	    } else {
	      attrs.$observe('ngAnimateChildren', function(value) {
	        value = value === 'on' || value === 'true';
	        element.data(NG_ANIMATE_CHILDREN_DATA, value);
	      });
	    }
	  };
	}];

	var ANIMATE_TIMER_KEY = '$$animateCss';

	/**
	 * @ngdoc service
	 * @name $animateCss
	 * @kind object
	 *
	 * @description
	 * The `$animateCss` service is a useful utility to trigger customized CSS-based transitions/keyframes
	 * from a JavaScript-based animation or directly from a directive. The purpose of `$animateCss` is NOT
	 * to side-step how `$animate` and ngAnimate work, but the goal is to allow pre-existing animations or
	 * directives to create more complex animations that can be purely driven using CSS code.
	 *
	 * Note that only browsers that support CSS transitions and/or keyframe animations are capable of
	 * rendering animations triggered via `$animateCss` (bad news for IE9 and lower).
	 *
	 * ## Usage
	 * Once again, `$animateCss` is designed to be used inside of a registered JavaScript animation that
	 * is powered by ngAnimate. It is possible to use `$animateCss` directly inside of a directive, however,
	 * any automatic control over cancelling animations and/or preventing animations from being run on
	 * child elements will not be handled by Angular. For this to work as expected, please use `$animate` to
	 * trigger the animation and then setup a JavaScript animation that injects `$animateCss` to trigger
	 * the CSS animation.
	 *
	 * The example below shows how we can create a folding animation on an element using `ng-if`:
	 *
	 * ```html
	 * <!-- notice the `fold-animation` CSS class -->
	 * <div ng-if="onOff" class="fold-animation">
	 *   This element will go BOOM
	 * </div>
	 * <button ng-click="onOff=true">Fold In</button>
	 * ```
	 *
	 * Now we create the **JavaScript animation** that will trigger the CSS transition:
	 *
	 * ```js
	 * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {
	 *   return {
	 *     enter: function(element, doneFn) {
	 *       var height = element[0].offsetHeight;
	 *       return $animateCss(element, {
	 *         from: { height:'0px' },
	 *         to: { height:height + 'px' },
	 *         duration: 1 // one second
	 *       });
	 *     }
	 *   }
	 * }]);
	 * ```
	 *
	 * ## More Advanced Uses
	 *
	 * `$animateCss` is the underlying code that ngAnimate uses to power **CSS-based animations** behind the scenes. Therefore CSS hooks
	 * like `.ng-EVENT`, `.ng-EVENT-active`, `.ng-EVENT-stagger` are all features that can be triggered using `$animateCss` via JavaScript code.
	 *
	 * This also means that just about any combination of adding classes, removing classes, setting styles, dynamically setting a keyframe animation,
	 * applying a hardcoded duration or delay value, changing the animation easing or applying a stagger animation are all options that work with
	 * `$animateCss`. The service itself is smart enough to figure out the combination of options and examine the element styling properties in order
	 * to provide a working animation that will run in CSS.
	 *
	 * The example below showcases a more advanced version of the `.fold-animation` from the example above:
	 *
	 * ```js
	 * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {
	 *   return {
	 *     enter: function(element, doneFn) {
	 *       var height = element[0].offsetHeight;
	 *       return $animateCss(element, {
	 *         addClass: 'red large-text pulse-twice',
	 *         easing: 'ease-out',
	 *         from: { height:'0px' },
	 *         to: { height:height + 'px' },
	 *         duration: 1 // one second
	 *       });
	 *     }
	 *   }
	 * }]);
	 * ```
	 *
	 * Since we're adding/removing CSS classes then the CSS transition will also pick those up:
	 *
	 * ```css
	 * /&#42; since a hardcoded duration value of 1 was provided in the JavaScript animation code,
	 * the CSS classes below will be transitioned despite them being defined as regular CSS classes &#42;/
	 * .red { background:red; }
	 * .large-text { font-size:20px; }
	 *
	 * /&#42; we can also use a keyframe animation and $animateCss will make it work alongside the transition &#42;/
	 * .pulse-twice {
	 *   animation: 0.5s pulse linear 2;
	 *   -webkit-animation: 0.5s pulse linear 2;
	 * }
	 *
	 * @keyframes pulse {
	 *   from { transform: scale(0.5); }
	 *   to { transform: scale(1.5); }
	 * }
	 *
	 * @-webkit-keyframes pulse {
	 *   from { -webkit-transform: scale(0.5); }
	 *   to { -webkit-transform: scale(1.5); }
	 * }
	 * ```
	 *
	 * Given this complex combination of CSS classes, styles and options, `$animateCss` will figure everything out and make the animation happen.
	 *
	 * ## How the Options are handled
	 *
	 * `$animateCss` is very versatile and intelligent when it comes to figuring out what configurations to apply to the element to ensure the animation
	 * works with the options provided. Say for example we were adding a class that contained a keyframe value and we wanted to also animate some inline
	 * styles using the `from` and `to` properties.
	 *
	 * ```js
	 * var animator = $animateCss(element, {
	 *   from: { background:'red' },
	 *   to: { background:'blue' }
	 * });
	 * animator.start();
	 * ```
	 *
	 * ```css
	 * .rotating-animation {
	 *   animation:0.5s rotate linear;
	 *   -webkit-animation:0.5s rotate linear;
	 * }
	 *
	 * @keyframes rotate {
	 *   from { transform: rotate(0deg); }
	 *   to { transform: rotate(360deg); }
	 * }
	 *
	 * @-webkit-keyframes rotate {
	 *   from { -webkit-transform: rotate(0deg); }
	 *   to { -webkit-transform: rotate(360deg); }
	 * }
	 * ```
	 *
	 * The missing pieces here are that we do not have a transition set (within the CSS code nor within the `$animateCss` options) and the duration of the animation is
	 * going to be detected from what the keyframe styles on the CSS class are. In this event, `$animateCss` will automatically create an inline transition
	 * style matching the duration detected from the keyframe style (which is present in the CSS class that is being added) and then prepare both the transition
	 * and keyframe animations to run in parallel on the element. Then when the animation is underway the provided `from` and `to` CSS styles will be applied
	 * and spread across the transition and keyframe animation.
	 *
	 * ## What is returned
	 *
	 * `$animateCss` works in two stages: a preparation phase and an animation phase. Therefore when `$animateCss` is first called it will NOT actually
	 * start the animation. All that is going on here is that the element is being prepared for the animation (which means that the generated CSS classes are
	 * added and removed on the element). Once `$animateCss` is called it will return an object with the following properties:
	 *
	 * ```js
	 * var animator = $animateCss(element, { ... });
	 * ```
	 *
	 * Now what do the contents of our `animator` variable look like:
	 *
	 * ```js
	 * {
	 *   // starts the animation
	 *   start: Function,
	 *
	 *   // ends (aborts) the animation
	 *   end: Function
	 * }
	 * ```
	 *
	 * To actually start the animation we need to run `animation.start()` which will then return a promise that we can hook into to detect when the animation ends.
	 * If we choose not to run the animation then we MUST run `animation.end()` to perform a cleanup on the element (since some CSS classes and stlyes may have been
	 * applied to the element during the preparation phase). Note that all other properties such as duration, delay, transitions and keyframes are just properties
	 * and that changing them will not reconfigure the parameters of the animation.
	 *
	 * ### runner.done() vs runner.then()
	 * It is documented that `animation.start()` will return a promise object and this is true, however, there is also an additional method available on the
	 * runner called `.done(callbackFn)`. The done method works the same as `.finally(callbackFn)`, however, it does **not trigger a digest to occur**.
	 * Therefore, for performance reasons, it's always best to use `runner.done(callback)` instead of `runner.then()`, `runner.catch()` or `runner.finally()`
	 * unless you really need a digest to kick off afterwards.
	 *
	 * Keep in mind that, to make this easier, ngAnimate has tweaked the JS animations API to recognize when a runner instance is returned from $animateCss
	 * (so there is no need to call `runner.done(doneFn)` inside of your JavaScript animation code).
	 * Check the {@link ngAnimate.$animateCss#usage animation code above} to see how this works.
	 *
	 * @param {DOMElement} element the element that will be animated
	 * @param {object} options the animation-related options that will be applied during the animation
	 *
	 * * `event` - The DOM event (e.g. enter, leave, move). When used, a generated CSS class of `ng-EVENT` and `ng-EVENT-active` will be applied
	 * to the element during the animation. Multiple events can be provided when spaces are used as a separator. (Note that this will not perform any DOM operation.)
	 * * `structural` - Indicates that the `ng-` prefix will be added to the event class. Setting to `false` or omitting will turn `ng-EVENT` and
	 * `ng-EVENT-active` in `EVENT` and `EVENT-active`. Unused if `event` is omitted.
	 * * `easing` - The CSS easing value that will be applied to the transition or keyframe animation (or both).
	 * * `transitionStyle` - The raw CSS transition style that will be used (e.g. `1s linear all`).
	 * * `keyframeStyle` - The raw CSS keyframe animation style that will be used (e.g. `1s my_animation linear`).
	 * * `from` - The starting CSS styles (a key/value object) that will be applied at the start of the animation.
	 * * `to` - The ending CSS styles (a key/value object) that will be applied across the animation via a CSS transition.
	 * * `addClass` - A space separated list of CSS classes that will be added to the element and spread across the animation.
	 * * `removeClass` - A space separated list of CSS classes that will be removed from the element and spread across the animation.
	 * * `duration` - A number value representing the total duration of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `0`
	 * is provided then the animation will be skipped entirely.
	 * * `delay` - A number value representing the total delay of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `true` is
	 * used then whatever delay value is detected from the CSS classes will be mirrored on the elements styles (e.g. by setting delay true then the style value
	 * of the element will be `transition-delay: DETECTED_VALUE`). Using `true` is useful when you want the CSS classes and inline styles to all share the same
	 * CSS delay value.
	 * * `stagger` - A numeric time value representing the delay between successively animated elements
	 * ({@link ngAnimate#css-staggering-animations Click here to learn how CSS-based staggering works in ngAnimate.})
	 * * `staggerIndex` - The numeric index representing the stagger item (e.g. a value of 5 is equal to the sixth item in the stagger; therefore when a
	 * * `stagger` option value of `0.1` is used then there will be a stagger delay of `600ms`)
	 * * `applyClassesEarly` - Whether or not the classes being added or removed will be used when detecting the animation. This is set by `$animate` when enter/leave/move animations are fired to ensure that the CSS classes are resolved in time. (Note that this will prevent any transitions from occuring on the classes being added and removed.)
	 * * `cleanupStyles` - Whether or not the provided `from` and `to` styles will be removed once
	 *    the animation is closed. This is useful for when the styles are used purely for the sake of
	 *    the animation and do not have a lasting visual effect on the element (e.g. a colapse and open animation).
	 *    By default this value is set to `false`.
	 *
	 * @return {object} an object with start and end methods and details about the animation.
	 *
	 * * `start` - The method to start the animation. This will return a `Promise` when called.
	 * * `end` - This method will cancel the animation and remove all applied CSS classes and styles.
	 */
	var ONE_SECOND = 1000;
	var BASE_TEN = 10;

	var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
	var CLOSING_TIME_BUFFER = 1.5;

	var DETECT_CSS_PROPERTIES = {
	  transitionDuration:      TRANSITION_DURATION_PROP,
	  transitionDelay:         TRANSITION_DELAY_PROP,
	  transitionProperty:      TRANSITION_PROP + PROPERTY_KEY,
	  animationDuration:       ANIMATION_DURATION_PROP,
	  animationDelay:          ANIMATION_DELAY_PROP,
	  animationIterationCount: ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY
	};

	var DETECT_STAGGER_CSS_PROPERTIES = {
	  transitionDuration:      TRANSITION_DURATION_PROP,
	  transitionDelay:         TRANSITION_DELAY_PROP,
	  animationDuration:       ANIMATION_DURATION_PROP,
	  animationDelay:          ANIMATION_DELAY_PROP
	};

	function getCssKeyframeDurationStyle(duration) {
	  return [ANIMATION_DURATION_PROP, duration + 's'];
	}

	function getCssDelayStyle(delay, isKeyframeAnimation) {
	  var prop = isKeyframeAnimation ? ANIMATION_DELAY_PROP : TRANSITION_DELAY_PROP;
	  return [prop, delay + 's'];
	}

	function computeCssStyles($window, element, properties) {
	  var styles = Object.create(null);
	  var detectedStyles = $window.getComputedStyle(element) || {};
	  forEach(properties, function(formalStyleName, actualStyleName) {
	    var val = detectedStyles[formalStyleName];
	    if (val) {
	      var c = val.charAt(0);

	      // only numerical-based values have a negative sign or digit as the first value
	      if (c === '-' || c === '+' || c >= 0) {
	        val = parseMaxTime(val);
	      }

	      // by setting this to null in the event that the delay is not set or is set directly as 0
	      // then we can still allow for zegative values to be used later on and not mistake this
	      // value for being greater than any other negative value.
	      if (val === 0) {
	        val = null;
	      }
	      styles[actualStyleName] = val;
	    }
	  });

	  return styles;
	}

	function parseMaxTime(str) {
	  var maxValue = 0;
	  var values = str.split(/\s*,\s*/);
	  forEach(values, function(value) {
	    // it's always safe to consider only second values and omit `ms` values since
	    // getComputedStyle will always handle the conversion for us
	    if (value.charAt(value.length - 1) == 's') {
	      value = value.substring(0, value.length - 1);
	    }
	    value = parseFloat(value) || 0;
	    maxValue = maxValue ? Math.max(value, maxValue) : value;
	  });
	  return maxValue;
	}

	function truthyTimingValue(val) {
	  return val === 0 || val != null;
	}

	function getCssTransitionDurationStyle(duration, applyOnlyDuration) {
	  var style = TRANSITION_PROP;
	  var value = duration + 's';
	  if (applyOnlyDuration) {
	    style += DURATION_KEY;
	  } else {
	    value += ' linear all';
	  }
	  return [style, value];
	}

	function createLocalCacheLookup() {
	  var cache = Object.create(null);
	  return {
	    flush: function() {
	      cache = Object.create(null);
	    },

	    count: function(key) {
	      var entry = cache[key];
	      return entry ? entry.total : 0;
	    },

	    get: function(key) {
	      var entry = cache[key];
	      return entry && entry.value;
	    },

	    put: function(key, value) {
	      if (!cache[key]) {
	        cache[key] = { total: 1, value: value };
	      } else {
	        cache[key].total++;
	      }
	    }
	  };
	}

	// we do not reassign an already present style value since
	// if we detect the style property value again we may be
	// detecting styles that were added via the `from` styles.
	// We make use of `isDefined` here since an empty string
	// or null value (which is what getPropertyValue will return
	// for a non-existing style) will still be marked as a valid
	// value for the style (a falsy value implies that the style
	// is to be removed at the end of the animation). If we had a simple
	// "OR" statement then it would not be enough to catch that.
	function registerRestorableStyles(backup, node, properties) {
	  forEach(properties, function(prop) {
	    backup[prop] = isDefined(backup[prop])
	        ? backup[prop]
	        : node.style.getPropertyValue(prop);
	  });
	}

	var $AnimateCssProvider = ['$animateProvider', function($animateProvider) {
	  var gcsLookup = createLocalCacheLookup();
	  var gcsStaggerLookup = createLocalCacheLookup();

	  this.$get = ['$window', '$$jqLite', '$$AnimateRunner', '$timeout',
	               '$$forceReflow', '$sniffer', '$$rAFScheduler', '$$animateQueue',
	       function($window,   $$jqLite,   $$AnimateRunner,   $timeout,
	                $$forceReflow,   $sniffer,   $$rAFScheduler, $$animateQueue) {

	    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

	    var parentCounter = 0;
	    function gcsHashFn(node, extraClasses) {
	      var KEY = "$$ngAnimateParentKey";
	      var parentNode = node.parentNode;
	      var parentID = parentNode[KEY] || (parentNode[KEY] = ++parentCounter);
	      return parentID + '-' + node.getAttribute('class') + '-' + extraClasses;
	    }

	    function computeCachedCssStyles(node, className, cacheKey, properties) {
	      var timings = gcsLookup.get(cacheKey);

	      if (!timings) {
	        timings = computeCssStyles($window, node, properties);
	        if (timings.animationIterationCount === 'infinite') {
	          timings.animationIterationCount = 1;
	        }
	      }

	      // we keep putting this in multiple times even though the value and the cacheKey are the same
	      // because we're keeping an interal tally of how many duplicate animations are detected.
	      gcsLookup.put(cacheKey, timings);
	      return timings;
	    }

	    function computeCachedCssStaggerStyles(node, className, cacheKey, properties) {
	      var stagger;

	      // if we have one or more existing matches of matching elements
	      // containing the same parent + CSS styles (which is how cacheKey works)
	      // then staggering is possible
	      if (gcsLookup.count(cacheKey) > 0) {
	        stagger = gcsStaggerLookup.get(cacheKey);

	        if (!stagger) {
	          var staggerClassName = pendClasses(className, '-stagger');

	          $$jqLite.addClass(node, staggerClassName);

	          stagger = computeCssStyles($window, node, properties);

	          // force the conversion of a null value to zero incase not set
	          stagger.animationDuration = Math.max(stagger.animationDuration, 0);
	          stagger.transitionDuration = Math.max(stagger.transitionDuration, 0);

	          $$jqLite.removeClass(node, staggerClassName);

	          gcsStaggerLookup.put(cacheKey, stagger);
	        }
	      }

	      return stagger || {};
	    }

	    var cancelLastRAFRequest;
	    var rafWaitQueue = [];
	    function waitUntilQuiet(callback) {
	      rafWaitQueue.push(callback);
	      $$rAFScheduler.waitUntilQuiet(function() {
	        gcsLookup.flush();
	        gcsStaggerLookup.flush();

	        // DO NOT REMOVE THIS LINE OR REFACTOR OUT THE `pageWidth` variable.
	        // PLEASE EXAMINE THE `$$forceReflow` service to understand why.
	        var pageWidth = $$forceReflow();

	        // we use a for loop to ensure that if the queue is changed
	        // during this looping then it will consider new requests
	        for (var i = 0; i < rafWaitQueue.length; i++) {
	          rafWaitQueue[i](pageWidth);
	        }
	        rafWaitQueue.length = 0;
	      });
	    }

	    function computeTimings(node, className, cacheKey) {
	      var timings = computeCachedCssStyles(node, className, cacheKey, DETECT_CSS_PROPERTIES);
	      var aD = timings.animationDelay;
	      var tD = timings.transitionDelay;
	      timings.maxDelay = aD && tD
	          ? Math.max(aD, tD)
	          : (aD || tD);
	      timings.maxDuration = Math.max(
	          timings.animationDuration * timings.animationIterationCount,
	          timings.transitionDuration);

	      return timings;
	    }

	    return function init(element, initialOptions) {
	      // all of the animation functions should create
	      // a copy of the options data, however, if a
	      // parent service has already created a copy then
	      // we should stick to using that
	      var options = initialOptions || {};
	      if (!options.$$prepared) {
	        options = prepareAnimationOptions(copy(options));
	      }

	      var restoreStyles = {};
	      var node = getDomNode(element);
	      if (!node
	          || !node.parentNode
	          || !$$animateQueue.enabled()) {
	        return closeAndReturnNoopAnimator();
	      }

	      var temporaryStyles = [];
	      var classes = element.attr('class');
	      var styles = packageStyles(options);
	      var animationClosed;
	      var animationPaused;
	      var animationCompleted;
	      var runner;
	      var runnerHost;
	      var maxDelay;
	      var maxDelayTime;
	      var maxDuration;
	      var maxDurationTime;
	      var startTime;
	      var events = [];

	      if (options.duration === 0 || (!$sniffer.animations && !$sniffer.transitions)) {
	        return closeAndReturnNoopAnimator();
	      }

	      var method = options.event && isArray(options.event)
	            ? options.event.join(' ')
	            : options.event;

	      var isStructural = method && options.structural;
	      var structuralClassName = '';
	      var addRemoveClassName = '';

	      if (isStructural) {
	        structuralClassName = pendClasses(method, EVENT_CLASS_PREFIX, true);
	      } else if (method) {
	        structuralClassName = method;
	      }

	      if (options.addClass) {
	        addRemoveClassName += pendClasses(options.addClass, ADD_CLASS_SUFFIX);
	      }

	      if (options.removeClass) {
	        if (addRemoveClassName.length) {
	          addRemoveClassName += ' ';
	        }
	        addRemoveClassName += pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX);
	      }

	      // there may be a situation where a structural animation is combined together
	      // with CSS classes that need to resolve before the animation is computed.
	      // However this means that there is no explicit CSS code to block the animation
	      // from happening (by setting 0s none in the class name). If this is the case
	      // we need to apply the classes before the first rAF so we know to continue if
	      // there actually is a detected transition or keyframe animation
	      if (options.applyClassesEarly && addRemoveClassName.length) {
	        applyAnimationClasses(element, options);
	      }

	      var preparationClasses = [structuralClassName, addRemoveClassName].join(' ').trim();
	      var fullClassName = classes + ' ' + preparationClasses;
	      var activeClasses = pendClasses(preparationClasses, ACTIVE_CLASS_SUFFIX);
	      var hasToStyles = styles.to && Object.keys(styles.to).length > 0;
	      var containsKeyframeAnimation = (options.keyframeStyle || '').length > 0;

	      // there is no way we can trigger an animation if no styles and
	      // no classes are being applied which would then trigger a transition,
	      // unless there a is raw keyframe value that is applied to the element.
	      if (!containsKeyframeAnimation
	           && !hasToStyles
	           && !preparationClasses) {
	        return closeAndReturnNoopAnimator();
	      }

	      var cacheKey, stagger;
	      if (options.stagger > 0) {
	        var staggerVal = parseFloat(options.stagger);
	        stagger = {
	          transitionDelay: staggerVal,
	          animationDelay: staggerVal,
	          transitionDuration: 0,
	          animationDuration: 0
	        };
	      } else {
	        cacheKey = gcsHashFn(node, fullClassName);
	        stagger = computeCachedCssStaggerStyles(node, preparationClasses, cacheKey, DETECT_STAGGER_CSS_PROPERTIES);
	      }

	      if (!options.$$skipPreparationClasses) {
	        $$jqLite.addClass(element, preparationClasses);
	      }

	      var applyOnlyDuration;

	      if (options.transitionStyle) {
	        var transitionStyle = [TRANSITION_PROP, options.transitionStyle];
	        applyInlineStyle(node, transitionStyle);
	        temporaryStyles.push(transitionStyle);
	      }

	      if (options.duration >= 0) {
	        applyOnlyDuration = node.style[TRANSITION_PROP].length > 0;
	        var durationStyle = getCssTransitionDurationStyle(options.duration, applyOnlyDuration);

	        // we set the duration so that it will be picked up by getComputedStyle later
	        applyInlineStyle(node, durationStyle);
	        temporaryStyles.push(durationStyle);
	      }

	      if (options.keyframeStyle) {
	        var keyframeStyle = [ANIMATION_PROP, options.keyframeStyle];
	        applyInlineStyle(node, keyframeStyle);
	        temporaryStyles.push(keyframeStyle);
	      }

	      var itemIndex = stagger
	          ? options.staggerIndex >= 0
	              ? options.staggerIndex
	              : gcsLookup.count(cacheKey)
	          : 0;

	      var isFirst = itemIndex === 0;

	      // this is a pre-emptive way of forcing the setup classes to be added and applied INSTANTLY
	      // without causing any combination of transitions to kick in. By adding a negative delay value
	      // it forces the setup class' transition to end immediately. We later then remove the negative
	      // transition delay to allow for the transition to naturally do it's thing. The beauty here is
	      // that if there is no transition defined then nothing will happen and this will also allow
	      // other transitions to be stacked on top of each other without any chopping them out.
	      if (isFirst && !options.skipBlocking) {
	        blockTransitions(node, SAFE_FAST_FORWARD_DURATION_VALUE);
	      }

	      var timings = computeTimings(node, fullClassName, cacheKey);
	      var relativeDelay = timings.maxDelay;
	      maxDelay = Math.max(relativeDelay, 0);
	      maxDuration = timings.maxDuration;

	      var flags = {};
	      flags.hasTransitions          = timings.transitionDuration > 0;
	      flags.hasAnimations           = timings.animationDuration > 0;
	      flags.hasTransitionAll        = flags.hasTransitions && timings.transitionProperty == 'all';
	      flags.applyTransitionDuration = hasToStyles && (
	                                        (flags.hasTransitions && !flags.hasTransitionAll)
	                                         || (flags.hasAnimations && !flags.hasTransitions));
	      flags.applyAnimationDuration  = options.duration && flags.hasAnimations;
	      flags.applyTransitionDelay    = truthyTimingValue(options.delay) && (flags.applyTransitionDuration || flags.hasTransitions);
	      flags.applyAnimationDelay     = truthyTimingValue(options.delay) && flags.hasAnimations;
	      flags.recalculateTimingStyles = addRemoveClassName.length > 0;

	      if (flags.applyTransitionDuration || flags.applyAnimationDuration) {
	        maxDuration = options.duration ? parseFloat(options.duration) : maxDuration;

	        if (flags.applyTransitionDuration) {
	          flags.hasTransitions = true;
	          timings.transitionDuration = maxDuration;
	          applyOnlyDuration = node.style[TRANSITION_PROP + PROPERTY_KEY].length > 0;
	          temporaryStyles.push(getCssTransitionDurationStyle(maxDuration, applyOnlyDuration));
	        }

	        if (flags.applyAnimationDuration) {
	          flags.hasAnimations = true;
	          timings.animationDuration = maxDuration;
	          temporaryStyles.push(getCssKeyframeDurationStyle(maxDuration));
	        }
	      }

	      if (maxDuration === 0 && !flags.recalculateTimingStyles) {
	        return closeAndReturnNoopAnimator();
	      }

	      if (options.delay != null) {
	        var delayStyle;
	        if (typeof options.delay !== "boolean") {
	          delayStyle = parseFloat(options.delay);
	          // number in options.delay means we have to recalculate the delay for the closing timeout
	          maxDelay = Math.max(delayStyle, 0);
	        }

	        if (flags.applyTransitionDelay) {
	          temporaryStyles.push(getCssDelayStyle(delayStyle));
	        }

	        if (flags.applyAnimationDelay) {
	          temporaryStyles.push(getCssDelayStyle(delayStyle, true));
	        }
	      }

	      // we need to recalculate the delay value since we used a pre-emptive negative
	      // delay value and the delay value is required for the final event checking. This
	      // property will ensure that this will happen after the RAF phase has passed.
	      if (options.duration == null && timings.transitionDuration > 0) {
	        flags.recalculateTimingStyles = flags.recalculateTimingStyles || isFirst;
	      }

	      maxDelayTime = maxDelay * ONE_SECOND;
	      maxDurationTime = maxDuration * ONE_SECOND;
	      if (!options.skipBlocking) {
	        flags.blockTransition = timings.transitionDuration > 0;
	        flags.blockKeyframeAnimation = timings.animationDuration > 0 &&
	                                       stagger.animationDelay > 0 &&
	                                       stagger.animationDuration === 0;
	      }

	      if (options.from) {
	        if (options.cleanupStyles) {
	          registerRestorableStyles(restoreStyles, node, Object.keys(options.from));
	        }
	        applyAnimationFromStyles(element, options);
	      }

	      if (flags.blockTransition || flags.blockKeyframeAnimation) {
	        applyBlocking(maxDuration);
	      } else if (!options.skipBlocking) {
	        blockTransitions(node, false);
	      }

	      // TODO(matsko): for 1.5 change this code to have an animator object for better debugging
	      return {
	        $$willAnimate: true,
	        end: endFn,
	        start: function() {
	          if (animationClosed) return;

	          runnerHost = {
	            end: endFn,
	            cancel: cancelFn,
	            resume: null, //this will be set during the start() phase
	            pause: null
	          };

	          runner = new $$AnimateRunner(runnerHost);

	          waitUntilQuiet(start);

	          // we don't have access to pause/resume the animation
	          // since it hasn't run yet. AnimateRunner will therefore
	          // set noop functions for resume and pause and they will
	          // later be overridden once the animation is triggered
	          return runner;
	        }
	      };

	      function endFn() {
	        close();
	      }

	      function cancelFn() {
	        close(true);
	      }

	      function close(rejected) { // jshint ignore:line
	        // if the promise has been called already then we shouldn't close
	        // the animation again
	        if (animationClosed || (animationCompleted && animationPaused)) return;
	        animationClosed = true;
	        animationPaused = false;

	        if (!options.$$skipPreparationClasses) {
	          $$jqLite.removeClass(element, preparationClasses);
	        }
	        $$jqLite.removeClass(element, activeClasses);

	        blockKeyframeAnimations(node, false);
	        blockTransitions(node, false);

	        forEach(temporaryStyles, function(entry) {
	          // There is only one way to remove inline style properties entirely from elements.
	          // By using `removeProperty` this works, but we need to convert camel-cased CSS
	          // styles down to hyphenated values.
	          node.style[entry[0]] = '';
	        });

	        applyAnimationClasses(element, options);
	        applyAnimationStyles(element, options);

	        if (Object.keys(restoreStyles).length) {
	          forEach(restoreStyles, function(value, prop) {
	            value ? node.style.setProperty(prop, value)
	                  : node.style.removeProperty(prop);
	          });
	        }

	        // the reason why we have this option is to allow a synchronous closing callback
	        // that is fired as SOON as the animation ends (when the CSS is removed) or if
	        // the animation never takes off at all. A good example is a leave animation since
	        // the element must be removed just after the animation is over or else the element
	        // will appear on screen for one animation frame causing an overbearing flicker.
	        if (options.onDone) {
	          options.onDone();
	        }

	        if (events && events.length) {
	          // Remove the transitionend / animationend listener(s)
	          element.off(events.join(' '), onAnimationProgress);
	        }

	        // if the preparation function fails then the promise is not setup
	        if (runner) {
	          runner.complete(!rejected);
	        }
	      }

	      function applyBlocking(duration) {
	        if (flags.blockTransition) {
	          blockTransitions(node, duration);
	        }

	        if (flags.blockKeyframeAnimation) {
	          blockKeyframeAnimations(node, !!duration);
	        }
	      }

	      function closeAndReturnNoopAnimator() {
	        runner = new $$AnimateRunner({
	          end: endFn,
	          cancel: cancelFn
	        });

	        // should flush the cache animation
	        waitUntilQuiet(noop);
	        close();

	        return {
	          $$willAnimate: false,
	          start: function() {
	            return runner;
	          },
	          end: endFn
	        };
	      }

	      function onAnimationProgress(event) {
	        event.stopPropagation();
	        var ev = event.originalEvent || event;

	        // we now always use `Date.now()` due to the recent changes with
	        // event.timeStamp in Firefox, Webkit and Chrome (see #13494 for more info)
	        var timeStamp = ev.$manualTimeStamp || Date.now();

	        /* Firefox (or possibly just Gecko) likes to not round values up
	         * when a ms measurement is used for the animation */
	        var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));

	        /* $manualTimeStamp is a mocked timeStamp value which is set
	         * within browserTrigger(). This is only here so that tests can
	         * mock animations properly. Real events fallback to event.timeStamp,
	         * or, if they don't, then a timeStamp is automatically created for them.
	         * We're checking to see if the timeStamp surpasses the expected delay,
	         * but we're using elapsedTime instead of the timeStamp on the 2nd
	         * pre-condition since animationPauseds sometimes close off early */
	        if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {
	          // we set this flag to ensure that if the transition is paused then, when resumed,
	          // the animation will automatically close itself since transitions cannot be paused.
	          animationCompleted = true;
	          close();
	        }
	      }

	      function start() {
	        if (animationClosed) return;
	        if (!node.parentNode) {
	          close();
	          return;
	        }

	        // even though we only pause keyframe animations here the pause flag
	        // will still happen when transitions are used. Only the transition will
	        // not be paused since that is not possible. If the animation ends when
	        // paused then it will not complete until unpaused or cancelled.
	        var playPause = function(playAnimation) {
	          if (!animationCompleted) {
	            animationPaused = !playAnimation;
	            if (timings.animationDuration) {
	              var value = blockKeyframeAnimations(node, animationPaused);
	              animationPaused
	                  ? temporaryStyles.push(value)
	                  : removeFromArray(temporaryStyles, value);
	            }
	          } else if (animationPaused && playAnimation) {
	            animationPaused = false;
	            close();
	          }
	        };

	        // checking the stagger duration prevents an accidently cascade of the CSS delay style
	        // being inherited from the parent. If the transition duration is zero then we can safely
	        // rely that the delay value is an intential stagger delay style.
	        var maxStagger = itemIndex > 0
	                         && ((timings.transitionDuration && stagger.transitionDuration === 0) ||
	                            (timings.animationDuration && stagger.animationDuration === 0))
	                         && Math.max(stagger.animationDelay, stagger.transitionDelay);
	        if (maxStagger) {
	          $timeout(triggerAnimationStart,
	                   Math.floor(maxStagger * itemIndex * ONE_SECOND),
	                   false);
	        } else {
	          triggerAnimationStart();
	        }

	        // this will decorate the existing promise runner with pause/resume methods
	        runnerHost.resume = function() {
	          playPause(true);
	        };

	        runnerHost.pause = function() {
	          playPause(false);
	        };

	        function triggerAnimationStart() {
	          // just incase a stagger animation kicks in when the animation
	          // itself was cancelled entirely
	          if (animationClosed) return;

	          applyBlocking(false);

	          forEach(temporaryStyles, function(entry) {
	            var key = entry[0];
	            var value = entry[1];
	            node.style[key] = value;
	          });

	          applyAnimationClasses(element, options);
	          $$jqLite.addClass(element, activeClasses);

	          if (flags.recalculateTimingStyles) {
	            fullClassName = node.className + ' ' + preparationClasses;
	            cacheKey = gcsHashFn(node, fullClassName);

	            timings = computeTimings(node, fullClassName, cacheKey);
	            relativeDelay = timings.maxDelay;
	            maxDelay = Math.max(relativeDelay, 0);
	            maxDuration = timings.maxDuration;

	            if (maxDuration === 0) {
	              close();
	              return;
	            }

	            flags.hasTransitions = timings.transitionDuration > 0;
	            flags.hasAnimations = timings.animationDuration > 0;
	          }

	          if (flags.applyAnimationDelay) {
	            relativeDelay = typeof options.delay !== "boolean" && truthyTimingValue(options.delay)
	                  ? parseFloat(options.delay)
	                  : relativeDelay;

	            maxDelay = Math.max(relativeDelay, 0);
	            timings.animationDelay = relativeDelay;
	            delayStyle = getCssDelayStyle(relativeDelay, true);
	            temporaryStyles.push(delayStyle);
	            node.style[delayStyle[0]] = delayStyle[1];
	          }

	          maxDelayTime = maxDelay * ONE_SECOND;
	          maxDurationTime = maxDuration * ONE_SECOND;

	          if (options.easing) {
	            var easeProp, easeVal = options.easing;
	            if (flags.hasTransitions) {
	              easeProp = TRANSITION_PROP + TIMING_KEY;
	              temporaryStyles.push([easeProp, easeVal]);
	              node.style[easeProp] = easeVal;
	            }
	            if (flags.hasAnimations) {
	              easeProp = ANIMATION_PROP + TIMING_KEY;
	              temporaryStyles.push([easeProp, easeVal]);
	              node.style[easeProp] = easeVal;
	            }
	          }

	          if (timings.transitionDuration) {
	            events.push(TRANSITIONEND_EVENT);
	          }

	          if (timings.animationDuration) {
	            events.push(ANIMATIONEND_EVENT);
	          }

	          startTime = Date.now();
	          var timerTime = maxDelayTime + CLOSING_TIME_BUFFER * maxDurationTime;
	          var endTime = startTime + timerTime;

	          var animationsData = element.data(ANIMATE_TIMER_KEY) || [];
	          var setupFallbackTimer = true;
	          if (animationsData.length) {
	            var currentTimerData = animationsData[0];
	            setupFallbackTimer = endTime > currentTimerData.expectedEndTime;
	            if (setupFallbackTimer) {
	              $timeout.cancel(currentTimerData.timer);
	            } else {
	              animationsData.push(close);
	            }
	          }

	          if (setupFallbackTimer) {
	            var timer = $timeout(onAnimationExpired, timerTime, false);
	            animationsData[0] = {
	              timer: timer,
	              expectedEndTime: endTime
	            };
	            animationsData.push(close);
	            element.data(ANIMATE_TIMER_KEY, animationsData);
	          }

	          if (events.length) {
	            element.on(events.join(' '), onAnimationProgress);
	          }

	          if (options.to) {
	            if (options.cleanupStyles) {
	              registerRestorableStyles(restoreStyles, node, Object.keys(options.to));
	            }
	            applyAnimationToStyles(element, options);
	          }
	        }

	        function onAnimationExpired() {
	          var animationsData = element.data(ANIMATE_TIMER_KEY);

	          // this will be false in the event that the element was
	          // removed from the DOM (via a leave animation or something
	          // similar)
	          if (animationsData) {
	            for (var i = 1; i < animationsData.length; i++) {
	              animationsData[i]();
	            }
	            element.removeData(ANIMATE_TIMER_KEY);
	          }
	        }
	      }
	    };
	  }];
	}];

	var $$AnimateCssDriverProvider = ['$$animationProvider', function($$animationProvider) {
	  $$animationProvider.drivers.push('$$animateCssDriver');

	  var NG_ANIMATE_SHIM_CLASS_NAME = 'ng-animate-shim';
	  var NG_ANIMATE_ANCHOR_CLASS_NAME = 'ng-anchor';

	  var NG_OUT_ANCHOR_CLASS_NAME = 'ng-anchor-out';
	  var NG_IN_ANCHOR_CLASS_NAME = 'ng-anchor-in';

	  function isDocumentFragment(node) {
	    return node.parentNode && node.parentNode.nodeType === 11;
	  }

	  this.$get = ['$animateCss', '$rootScope', '$$AnimateRunner', '$rootElement', '$sniffer', '$$jqLite', '$document',
	       function($animateCss,   $rootScope,   $$AnimateRunner,   $rootElement,   $sniffer,   $$jqLite,   $document) {

	    // only browsers that support these properties can render animations
	    if (!$sniffer.animations && !$sniffer.transitions) return noop;

	    var bodyNode = $document[0].body;
	    var rootNode = getDomNode($rootElement);

	    var rootBodyElement = jqLite(
	      // this is to avoid using something that exists outside of the body
	      // we also special case the doc fragement case because our unit test code
	      // appends the $rootElement to the body after the app has been bootstrapped
	      isDocumentFragment(rootNode) || bodyNode.contains(rootNode) ? rootNode : bodyNode
	    );

	    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

	    return function initDriverFn(animationDetails) {
	      return animationDetails.from && animationDetails.to
	          ? prepareFromToAnchorAnimation(animationDetails.from,
	                                         animationDetails.to,
	                                         animationDetails.classes,
	                                         animationDetails.anchors)
	          : prepareRegularAnimation(animationDetails);
	    };

	    function filterCssClasses(classes) {
	      //remove all the `ng-` stuff
	      return classes.replace(/\bng-\S+\b/g, '');
	    }

	    function getUniqueValues(a, b) {
	      if (isString(a)) a = a.split(' ');
	      if (isString(b)) b = b.split(' ');
	      return a.filter(function(val) {
	        return b.indexOf(val) === -1;
	      }).join(' ');
	    }

	    function prepareAnchoredAnimation(classes, outAnchor, inAnchor) {
	      var clone = jqLite(getDomNode(outAnchor).cloneNode(true));
	      var startingClasses = filterCssClasses(getClassVal(clone));

	      outAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);
	      inAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);

	      clone.addClass(NG_ANIMATE_ANCHOR_CLASS_NAME);

	      rootBodyElement.append(clone);

	      var animatorIn, animatorOut = prepareOutAnimation();

	      // the user may not end up using the `out` animation and
	      // only making use of the `in` animation or vice-versa.
	      // In either case we should allow this and not assume the
	      // animation is over unless both animations are not used.
	      if (!animatorOut) {
	        animatorIn = prepareInAnimation();
	        if (!animatorIn) {
	          return end();
	        }
	      }

	      var startingAnimator = animatorOut || animatorIn;

	      return {
	        start: function() {
	          var runner;

	          var currentAnimation = startingAnimator.start();
	          currentAnimation.done(function() {
	            currentAnimation = null;
	            if (!animatorIn) {
	              animatorIn = prepareInAnimation();
	              if (animatorIn) {
	                currentAnimation = animatorIn.start();
	                currentAnimation.done(function() {
	                  currentAnimation = null;
	                  end();
	                  runner.complete();
	                });
	                return currentAnimation;
	              }
	            }
	            // in the event that there is no `in` animation
	            end();
	            runner.complete();
	          });

	          runner = new $$AnimateRunner({
	            end: endFn,
	            cancel: endFn
	          });

	          return runner;

	          function endFn() {
	            if (currentAnimation) {
	              currentAnimation.end();
	            }
	          }
	        }
	      };

	      function calculateAnchorStyles(anchor) {
	        var styles = {};

	        var coords = getDomNode(anchor).getBoundingClientRect();

	        // we iterate directly since safari messes up and doesn't return
	        // all the keys for the coods object when iterated
	        forEach(['width','height','top','left'], function(key) {
	          var value = coords[key];
	          switch (key) {
	            case 'top':
	              value += bodyNode.scrollTop;
	              break;
	            case 'left':
	              value += bodyNode.scrollLeft;
	              break;
	          }
	          styles[key] = Math.floor(value) + 'px';
	        });
	        return styles;
	      }

	      function prepareOutAnimation() {
	        var animator = $animateCss(clone, {
	          addClass: NG_OUT_ANCHOR_CLASS_NAME,
	          delay: true,
	          from: calculateAnchorStyles(outAnchor)
	        });

	        // read the comment within `prepareRegularAnimation` to understand
	        // why this check is necessary
	        return animator.$$willAnimate ? animator : null;
	      }

	      function getClassVal(element) {
	        return element.attr('class') || '';
	      }

	      function prepareInAnimation() {
	        var endingClasses = filterCssClasses(getClassVal(inAnchor));
	        var toAdd = getUniqueValues(endingClasses, startingClasses);
	        var toRemove = getUniqueValues(startingClasses, endingClasses);

	        var animator = $animateCss(clone, {
	          to: calculateAnchorStyles(inAnchor),
	          addClass: NG_IN_ANCHOR_CLASS_NAME + ' ' + toAdd,
	          removeClass: NG_OUT_ANCHOR_CLASS_NAME + ' ' + toRemove,
	          delay: true
	        });

	        // read the comment within `prepareRegularAnimation` to understand
	        // why this check is necessary
	        return animator.$$willAnimate ? animator : null;
	      }

	      function end() {
	        clone.remove();
	        outAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
	        inAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
	      }
	    }

	    function prepareFromToAnchorAnimation(from, to, classes, anchors) {
	      var fromAnimation = prepareRegularAnimation(from, noop);
	      var toAnimation = prepareRegularAnimation(to, noop);

	      var anchorAnimations = [];
	      forEach(anchors, function(anchor) {
	        var outElement = anchor['out'];
	        var inElement = anchor['in'];
	        var animator = prepareAnchoredAnimation(classes, outElement, inElement);
	        if (animator) {
	          anchorAnimations.push(animator);
	        }
	      });

	      // no point in doing anything when there are no elements to animate
	      if (!fromAnimation && !toAnimation && anchorAnimations.length === 0) return;

	      return {
	        start: function() {
	          var animationRunners = [];

	          if (fromAnimation) {
	            animationRunners.push(fromAnimation.start());
	          }

	          if (toAnimation) {
	            animationRunners.push(toAnimation.start());
	          }

	          forEach(anchorAnimations, function(animation) {
	            animationRunners.push(animation.start());
	          });

	          var runner = new $$AnimateRunner({
	            end: endFn,
	            cancel: endFn // CSS-driven animations cannot be cancelled, only ended
	          });

	          $$AnimateRunner.all(animationRunners, function(status) {
	            runner.complete(status);
	          });

	          return runner;

	          function endFn() {
	            forEach(animationRunners, function(runner) {
	              runner.end();
	            });
	          }
	        }
	      };
	    }

	    function prepareRegularAnimation(animationDetails) {
	      var element = animationDetails.element;
	      var options = animationDetails.options || {};

	      if (animationDetails.structural) {
	        options.event = animationDetails.event;
	        options.structural = true;
	        options.applyClassesEarly = true;

	        // we special case the leave animation since we want to ensure that
	        // the element is removed as soon as the animation is over. Otherwise
	        // a flicker might appear or the element may not be removed at all
	        if (animationDetails.event === 'leave') {
	          options.onDone = options.domOperation;
	        }
	      }

	      // We assign the preparationClasses as the actual animation event since
	      // the internals of $animateCss will just suffix the event token values
	      // with `-active` to trigger the animation.
	      if (options.preparationClasses) {
	        options.event = concatWithSpace(options.event, options.preparationClasses);
	      }

	      var animator = $animateCss(element, options);

	      // the driver lookup code inside of $$animation attempts to spawn a
	      // driver one by one until a driver returns a.$$willAnimate animator object.
	      // $animateCss will always return an object, however, it will pass in
	      // a flag as a hint as to whether an animation was detected or not
	      return animator.$$willAnimate ? animator : null;
	    }
	  }];
	}];

	// TODO(matsko): use caching here to speed things up for detection
	// TODO(matsko): add documentation
	//  by the time...

	var $$AnimateJsProvider = ['$animateProvider', function($animateProvider) {
	  this.$get = ['$injector', '$$AnimateRunner', '$$jqLite',
	       function($injector,   $$AnimateRunner,   $$jqLite) {

	    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);
	         // $animateJs(element, 'enter');
	    return function(element, event, classes, options) {
	      var animationClosed = false;

	      // the `classes` argument is optional and if it is not used
	      // then the classes will be resolved from the element's className
	      // property as well as options.addClass/options.removeClass.
	      if (arguments.length === 3 && isObject(classes)) {
	        options = classes;
	        classes = null;
	      }

	      options = prepareAnimationOptions(options);
	      if (!classes) {
	        classes = element.attr('class') || '';
	        if (options.addClass) {
	          classes += ' ' + options.addClass;
	        }
	        if (options.removeClass) {
	          classes += ' ' + options.removeClass;
	        }
	      }

	      var classesToAdd = options.addClass;
	      var classesToRemove = options.removeClass;

	      // the lookupAnimations function returns a series of animation objects that are
	      // matched up with one or more of the CSS classes. These animation objects are
	      // defined via the module.animation factory function. If nothing is detected then
	      // we don't return anything which then makes $animation query the next driver.
	      var animations = lookupAnimations(classes);
	      var before, after;
	      if (animations.length) {
	        var afterFn, beforeFn;
	        if (event == 'leave') {
	          beforeFn = 'leave';
	          afterFn = 'afterLeave'; // TODO(matsko): get rid of this
	        } else {
	          beforeFn = 'before' + event.charAt(0).toUpperCase() + event.substr(1);
	          afterFn = event;
	        }

	        if (event !== 'enter' && event !== 'move') {
	          before = packageAnimations(element, event, options, animations, beforeFn);
	        }
	        after  = packageAnimations(element, event, options, animations, afterFn);
	      }

	      // no matching animations
	      if (!before && !after) return;

	      function applyOptions() {
	        options.domOperation();
	        applyAnimationClasses(element, options);
	      }

	      function close() {
	        animationClosed = true;
	        applyOptions();
	        applyAnimationStyles(element, options);
	      }

	      var runner;

	      return {
	        $$willAnimate: true,
	        end: function() {
	          if (runner) {
	            runner.end();
	          } else {
	            close();
	            runner = new $$AnimateRunner();
	            runner.complete(true);
	          }
	          return runner;
	        },
	        start: function() {
	          if (runner) {
	            return runner;
	          }

	          runner = new $$AnimateRunner();
	          var closeActiveAnimations;
	          var chain = [];

	          if (before) {
	            chain.push(function(fn) {
	              closeActiveAnimations = before(fn);
	            });
	          }

	          if (chain.length) {
	            chain.push(function(fn) {
	              applyOptions();
	              fn(true);
	            });
	          } else {
	            applyOptions();
	          }

	          if (after) {
	            chain.push(function(fn) {
	              closeActiveAnimations = after(fn);
	            });
	          }

	          runner.setHost({
	            end: function() {
	              endAnimations();
	            },
	            cancel: function() {
	              endAnimations(true);
	            }
	          });

	          $$AnimateRunner.chain(chain, onComplete);
	          return runner;

	          function onComplete(success) {
	            close(success);
	            runner.complete(success);
	          }

	          function endAnimations(cancelled) {
	            if (!animationClosed) {
	              (closeActiveAnimations || noop)(cancelled);
	              onComplete(cancelled);
	            }
	          }
	        }
	      };

	      function executeAnimationFn(fn, element, event, options, onDone) {
	        var args;
	        switch (event) {
	          case 'animate':
	            args = [element, options.from, options.to, onDone];
	            break;

	          case 'setClass':
	            args = [element, classesToAdd, classesToRemove, onDone];
	            break;

	          case 'addClass':
	            args = [element, classesToAdd, onDone];
	            break;

	          case 'removeClass':
	            args = [element, classesToRemove, onDone];
	            break;

	          default:
	            args = [element, onDone];
	            break;
	        }

	        args.push(options);

	        var value = fn.apply(fn, args);
	        if (value) {
	          if (isFunction(value.start)) {
	            value = value.start();
	          }

	          if (value instanceof $$AnimateRunner) {
	            value.done(onDone);
	          } else if (isFunction(value)) {
	            // optional onEnd / onCancel callback
	            return value;
	          }
	        }

	        return noop;
	      }

	      function groupEventedAnimations(element, event, options, animations, fnName) {
	        var operations = [];
	        forEach(animations, function(ani) {
	          var animation = ani[fnName];
	          if (!animation) return;

	          // note that all of these animations will run in parallel
	          operations.push(function() {
	            var runner;
	            var endProgressCb;

	            var resolved = false;
	            var onAnimationComplete = function(rejected) {
	              if (!resolved) {
	                resolved = true;
	                (endProgressCb || noop)(rejected);
	                runner.complete(!rejected);
	              }
	            };

	            runner = new $$AnimateRunner({
	              end: function() {
	                onAnimationComplete();
	              },
	              cancel: function() {
	                onAnimationComplete(true);
	              }
	            });

	            endProgressCb = executeAnimationFn(animation, element, event, options, function(result) {
	              var cancelled = result === false;
	              onAnimationComplete(cancelled);
	            });

	            return runner;
	          });
	        });

	        return operations;
	      }

	      function packageAnimations(element, event, options, animations, fnName) {
	        var operations = groupEventedAnimations(element, event, options, animations, fnName);
	        if (operations.length === 0) {
	          var a,b;
	          if (fnName === 'beforeSetClass') {
	            a = groupEventedAnimations(element, 'removeClass', options, animations, 'beforeRemoveClass');
	            b = groupEventedAnimations(element, 'addClass', options, animations, 'beforeAddClass');
	          } else if (fnName === 'setClass') {
	            a = groupEventedAnimations(element, 'removeClass', options, animations, 'removeClass');
	            b = groupEventedAnimations(element, 'addClass', options, animations, 'addClass');
	          }

	          if (a) {
	            operations = operations.concat(a);
	          }
	          if (b) {
	            operations = operations.concat(b);
	          }
	        }

	        if (operations.length === 0) return;

	        // TODO(matsko): add documentation
	        return function startAnimation(callback) {
	          var runners = [];
	          if (operations.length) {
	            forEach(operations, function(animateFn) {
	              runners.push(animateFn());
	            });
	          }

	          runners.length ? $$AnimateRunner.all(runners, callback) : callback();

	          return function endFn(reject) {
	            forEach(runners, function(runner) {
	              reject ? runner.cancel() : runner.end();
	            });
	          };
	        };
	      }
	    };

	    function lookupAnimations(classes) {
	      classes = isArray(classes) ? classes : classes.split(' ');
	      var matches = [], flagMap = {};
	      for (var i=0; i < classes.length; i++) {
	        var klass = classes[i],
	            animationFactory = $animateProvider.$$registeredAnimations[klass];
	        if (animationFactory && !flagMap[klass]) {
	          matches.push($injector.get(animationFactory));
	          flagMap[klass] = true;
	        }
	      }
	      return matches;
	    }
	  }];
	}];

	var $$AnimateJsDriverProvider = ['$$animationProvider', function($$animationProvider) {
	  $$animationProvider.drivers.push('$$animateJsDriver');
	  this.$get = ['$$animateJs', '$$AnimateRunner', function($$animateJs, $$AnimateRunner) {
	    return function initDriverFn(animationDetails) {
	      if (animationDetails.from && animationDetails.to) {
	        var fromAnimation = prepareAnimation(animationDetails.from);
	        var toAnimation = prepareAnimation(animationDetails.to);
	        if (!fromAnimation && !toAnimation) return;

	        return {
	          start: function() {
	            var animationRunners = [];

	            if (fromAnimation) {
	              animationRunners.push(fromAnimation.start());
	            }

	            if (toAnimation) {
	              animationRunners.push(toAnimation.start());
	            }

	            $$AnimateRunner.all(animationRunners, done);

	            var runner = new $$AnimateRunner({
	              end: endFnFactory(),
	              cancel: endFnFactory()
	            });

	            return runner;

	            function endFnFactory() {
	              return function() {
	                forEach(animationRunners, function(runner) {
	                  // at this point we cannot cancel animations for groups just yet. 1.5+
	                  runner.end();
	                });
	              };
	            }

	            function done(status) {
	              runner.complete(status);
	            }
	          }
	        };
	      } else {
	        return prepareAnimation(animationDetails);
	      }
	    };

	    function prepareAnimation(animationDetails) {
	      // TODO(matsko): make sure to check for grouped animations and delegate down to normal animations
	      var element = animationDetails.element;
	      var event = animationDetails.event;
	      var options = animationDetails.options;
	      var classes = animationDetails.classes;
	      return $$animateJs(element, event, classes, options);
	    }
	  }];
	}];

	var NG_ANIMATE_ATTR_NAME = 'data-ng-animate';
	var NG_ANIMATE_PIN_DATA = '$ngAnimatePin';
	var $$AnimateQueueProvider = ['$animateProvider', function($animateProvider) {
	  var PRE_DIGEST_STATE = 1;
	  var RUNNING_STATE = 2;
	  var ONE_SPACE = ' ';

	  var rules = this.rules = {
	    skip: [],
	    cancel: [],
	    join: []
	  };

	  function makeTruthyCssClassMap(classString) {
	    if (!classString) {
	      return null;
	    }

	    var keys = classString.split(ONE_SPACE);
	    var map = Object.create(null);

	    forEach(keys, function(key) {
	      map[key] = true;
	    });
	    return map;
	  }

	  function hasMatchingClasses(newClassString, currentClassString) {
	    if (newClassString && currentClassString) {
	      var currentClassMap = makeTruthyCssClassMap(currentClassString);
	      return newClassString.split(ONE_SPACE).some(function(className) {
	        return currentClassMap[className];
	      });
	    }
	  }

	  function isAllowed(ruleType, element, currentAnimation, previousAnimation) {
	    return rules[ruleType].some(function(fn) {
	      return fn(element, currentAnimation, previousAnimation);
	    });
	  }

	  function hasAnimationClasses(options, and) {
	    options = options || {};
	    var a = (options.addClass || '').length > 0;
	    var b = (options.removeClass || '').length > 0;
	    return and ? a && b : a || b;
	  }

	  rules.join.push(function(element, newAnimation, currentAnimation) {
	    // if the new animation is class-based then we can just tack that on
	    return !newAnimation.structural && hasAnimationClasses(newAnimation.options);
	  });

	  rules.skip.push(function(element, newAnimation, currentAnimation) {
	    // there is no need to animate anything if no classes are being added and
	    // there is no structural animation that will be triggered
	    return !newAnimation.structural && !hasAnimationClasses(newAnimation.options);
	  });

	  rules.skip.push(function(element, newAnimation, currentAnimation) {
	    // why should we trigger a new structural animation if the element will
	    // be removed from the DOM anyway?
	    return currentAnimation.event == 'leave' && newAnimation.structural;
	  });

	  rules.skip.push(function(element, newAnimation, currentAnimation) {
	    // if there is an ongoing current animation then don't even bother running the class-based animation
	    return currentAnimation.structural && currentAnimation.state === RUNNING_STATE && !newAnimation.structural;
	  });

	  rules.cancel.push(function(element, newAnimation, currentAnimation) {
	    // there can never be two structural animations running at the same time
	    return currentAnimation.structural && newAnimation.structural;
	  });

	  rules.cancel.push(function(element, newAnimation, currentAnimation) {
	    // if the previous animation is already running, but the new animation will
	    // be triggered, but the new animation is structural
	    return currentAnimation.state === RUNNING_STATE && newAnimation.structural;
	  });

	  rules.cancel.push(function(element, newAnimation, currentAnimation) {


	    var nA = newAnimation.options.addClass;
	    var nR = newAnimation.options.removeClass;
	    var cA = currentAnimation.options.addClass;
	    var cR = currentAnimation.options.removeClass;

	    // early detection to save the global CPU shortage :)
	    if ((isUndefined(nA) && isUndefined(nR)) || (isUndefined(cA) && isUndefined(cR))) {
	      return false;
	    }

	    return (hasMatchingClasses(nA, cR)) || (hasMatchingClasses(nR, cA));
	  });

	  this.$get = ['$$rAF', '$rootScope', '$rootElement', '$document', '$$HashMap',
	               '$$animation', '$$AnimateRunner', '$templateRequest', '$$jqLite', '$$forceReflow',
	       function($$rAF,   $rootScope,   $rootElement,   $document,   $$HashMap,
	                $$animation,   $$AnimateRunner,   $templateRequest,   $$jqLite,   $$forceReflow) {

	    var activeAnimationsLookup = new $$HashMap();
	    var disabledElementsLookup = new $$HashMap();
	    var animationsEnabled = null;

	    function postDigestTaskFactory() {
	      var postDigestCalled = false;
	      return function(fn) {
	        // we only issue a call to postDigest before
	        // it has first passed. This prevents any callbacks
	        // from not firing once the animation has completed
	        // since it will be out of the digest cycle.
	        if (postDigestCalled) {
	          fn();
	        } else {
	          $rootScope.$$postDigest(function() {
	            postDigestCalled = true;
	            fn();
	          });
	        }
	      };
	    }

	    // Wait until all directive and route-related templates are downloaded and
	    // compiled. The $templateRequest.totalPendingRequests variable keeps track of
	    // all of the remote templates being currently downloaded. If there are no
	    // templates currently downloading then the watcher will still fire anyway.
	    var deregisterWatch = $rootScope.$watch(
	      function() { return $templateRequest.totalPendingRequests === 0; },
	      function(isEmpty) {
	        if (!isEmpty) return;
	        deregisterWatch();

	        // Now that all templates have been downloaded, $animate will wait until
	        // the post digest queue is empty before enabling animations. By having two
	        // calls to $postDigest calls we can ensure that the flag is enabled at the
	        // very end of the post digest queue. Since all of the animations in $animate
	        // use $postDigest, it's important that the code below executes at the end.
	        // This basically means that the page is fully downloaded and compiled before
	        // any animations are triggered.
	        $rootScope.$$postDigest(function() {
	          $rootScope.$$postDigest(function() {
	            // we check for null directly in the event that the application already called
	            // .enabled() with whatever arguments that it provided it with
	            if (animationsEnabled === null) {
	              animationsEnabled = true;
	            }
	          });
	        });
	      }
	    );

	    var callbackRegistry = {};

	    // remember that the classNameFilter is set during the provider/config
	    // stage therefore we can optimize here and setup a helper function
	    var classNameFilter = $animateProvider.classNameFilter();
	    var isAnimatableClassName = !classNameFilter
	              ? function() { return true; }
	              : function(className) {
	                return classNameFilter.test(className);
	              };

	    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

	    function normalizeAnimationOptions(element, options) {
	      return mergeAnimationOptions(element, options, {});
	    }

	    // IE9-11 has no method "contains" in SVG element and in Node.prototype. Bug #10259.
	    var contains = Node.prototype.contains || function(arg) {
	      // jshint bitwise: false
	      return this === arg || !!(this.compareDocumentPosition(arg) & 16);
	      // jshint bitwise: true
	    };

	    function findCallbacks(parent, element, event) {
	      var targetNode = getDomNode(element);
	      var targetParentNode = getDomNode(parent);

	      var matches = [];
	      var entries = callbackRegistry[event];
	      if (entries) {
	        forEach(entries, function(entry) {
	          if (contains.call(entry.node, targetNode)) {
	            matches.push(entry.callback);
	          } else if (event === 'leave' && contains.call(entry.node, targetParentNode)) {
	            matches.push(entry.callback);
	          }
	        });
	      }

	      return matches;
	    }

	    return {
	      on: function(event, container, callback) {
	        var node = extractElementNode(container);
	        callbackRegistry[event] = callbackRegistry[event] || [];
	        callbackRegistry[event].push({
	          node: node,
	          callback: callback
	        });
	      },

	      off: function(event, container, callback) {
	        var entries = callbackRegistry[event];
	        if (!entries) return;

	        callbackRegistry[event] = arguments.length === 1
	            ? null
	            : filterFromRegistry(entries, container, callback);

	        function filterFromRegistry(list, matchContainer, matchCallback) {
	          var containerNode = extractElementNode(matchContainer);
	          return list.filter(function(entry) {
	            var isMatch = entry.node === containerNode &&
	                            (!matchCallback || entry.callback === matchCallback);
	            return !isMatch;
	          });
	        }
	      },

	      pin: function(element, parentElement) {
	        assertArg(isElement(element), 'element', 'not an element');
	        assertArg(isElement(parentElement), 'parentElement', 'not an element');
	        element.data(NG_ANIMATE_PIN_DATA, parentElement);
	      },

	      push: function(element, event, options, domOperation) {
	        options = options || {};
	        options.domOperation = domOperation;
	        return queueAnimation(element, event, options);
	      },

	      // this method has four signatures:
	      //  () - global getter
	      //  (bool) - global setter
	      //  (element) - element getter
	      //  (element, bool) - element setter<F37>
	      enabled: function(element, bool) {
	        var argCount = arguments.length;

	        if (argCount === 0) {
	          // () - Global getter
	          bool = !!animationsEnabled;
	        } else {
	          var hasElement = isElement(element);

	          if (!hasElement) {
	            // (bool) - Global setter
	            bool = animationsEnabled = !!element;
	          } else {
	            var node = getDomNode(element);
	            var recordExists = disabledElementsLookup.get(node);

	            if (argCount === 1) {
	              // (element) - Element getter
	              bool = !recordExists;
	            } else {
	              // (element, bool) - Element setter
	              disabledElementsLookup.put(node, !bool);
	            }
	          }
	        }

	        return bool;
	      }
	    };

	    function queueAnimation(element, event, initialOptions) {
	      // we always make a copy of the options since
	      // there should never be any side effects on
	      // the input data when running `$animateCss`.
	      var options = copy(initialOptions);

	      var node, parent;
	      element = stripCommentsFromElement(element);
	      if (element) {
	        node = getDomNode(element);
	        parent = element.parent();
	      }

	      options = prepareAnimationOptions(options);

	      // we create a fake runner with a working promise.
	      // These methods will become available after the digest has passed
	      var runner = new $$AnimateRunner();

	      // this is used to trigger callbacks in postDigest mode
	      var runInNextPostDigestOrNow = postDigestTaskFactory();

	      if (isArray(options.addClass)) {
	        options.addClass = options.addClass.join(' ');
	      }

	      if (options.addClass && !isString(options.addClass)) {
	        options.addClass = null;
	      }

	      if (isArray(options.removeClass)) {
	        options.removeClass = options.removeClass.join(' ');
	      }

	      if (options.removeClass && !isString(options.removeClass)) {
	        options.removeClass = null;
	      }

	      if (options.from && !isObject(options.from)) {
	        options.from = null;
	      }

	      if (options.to && !isObject(options.to)) {
	        options.to = null;
	      }

	      // there are situations where a directive issues an animation for
	      // a jqLite wrapper that contains only comment nodes... If this
	      // happens then there is no way we can perform an animation
	      if (!node) {
	        close();
	        return runner;
	      }

	      var className = [node.className, options.addClass, options.removeClass].join(' ');
	      if (!isAnimatableClassName(className)) {
	        close();
	        return runner;
	      }

	      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;

	      // this is a hard disable of all animations for the application or on
	      // the element itself, therefore  there is no need to continue further
	      // past this point if not enabled
	      // Animations are also disabled if the document is currently hidden (page is not visible
	      // to the user), because browsers slow down or do not flush calls to requestAnimationFrame
	      var skipAnimations = !animationsEnabled || $document[0].hidden || disabledElementsLookup.get(node);
	      var existingAnimation = (!skipAnimations && activeAnimationsLookup.get(node)) || {};
	      var hasExistingAnimation = !!existingAnimation.state;

	      // there is no point in traversing the same collection of parent ancestors if a followup
	      // animation will be run on the same element that already did all that checking work
	      if (!skipAnimations && (!hasExistingAnimation || existingAnimation.state != PRE_DIGEST_STATE)) {
	        skipAnimations = !areAnimationsAllowed(element, parent, event);
	      }

	      if (skipAnimations) {
	        close();
	        return runner;
	      }

	      if (isStructural) {
	        closeChildAnimations(element);
	      }

	      var newAnimation = {
	        structural: isStructural,
	        element: element,
	        event: event,
	        close: close,
	        options: options,
	        runner: runner
	      };

	      if (hasExistingAnimation) {
	        var skipAnimationFlag = isAllowed('skip', element, newAnimation, existingAnimation);
	        if (skipAnimationFlag) {
	          if (existingAnimation.state === RUNNING_STATE) {
	            close();
	            return runner;
	          } else {
	            mergeAnimationOptions(element, existingAnimation.options, options);
	            return existingAnimation.runner;
	          }
	        }

	        var cancelAnimationFlag = isAllowed('cancel', element, newAnimation, existingAnimation);
	        if (cancelAnimationFlag) {
	          if (existingAnimation.state === RUNNING_STATE) {
	            // this will end the animation right away and it is safe
	            // to do so since the animation is already running and the
	            // runner callback code will run in async
	            existingAnimation.runner.end();
	          } else if (existingAnimation.structural) {
	            // this means that the animation is queued into a digest, but
	            // hasn't started yet. Therefore it is safe to run the close
	            // method which will call the runner methods in async.
	            existingAnimation.close();
	          } else {
	            // this will merge the new animation options into existing animation options
	            mergeAnimationOptions(element, existingAnimation.options, newAnimation.options);
	            return existingAnimation.runner;
	          }
	        } else {
	          // a joined animation means that this animation will take over the existing one
	          // so an example would involve a leave animation taking over an enter. Then when
	          // the postDigest kicks in the enter will be ignored.
	          var joinAnimationFlag = isAllowed('join', element, newAnimation, existingAnimation);
	          if (joinAnimationFlag) {
	            if (existingAnimation.state === RUNNING_STATE) {
	              normalizeAnimationOptions(element, options);
	            } else {
	              applyGeneratedPreparationClasses(element, isStructural ? event : null, options);

	              event = newAnimation.event = existingAnimation.event;
	              options = mergeAnimationOptions(element, existingAnimation.options, newAnimation.options);

	              //we return the same runner since only the option values of this animation will
	              //be fed into the `existingAnimation`.
	              return existingAnimation.runner;
	            }
	          }
	        }
	      } else {
	        // normalization in this case means that it removes redundant CSS classes that
	        // already exist (addClass) or do not exist (removeClass) on the element
	        normalizeAnimationOptions(element, options);
	      }

	      // when the options are merged and cleaned up we may end up not having to do
	      // an animation at all, therefore we should check this before issuing a post
	      // digest callback. Structural animations will always run no matter what.
	      var isValidAnimation = newAnimation.structural;
	      if (!isValidAnimation) {
	        // animate (from/to) can be quickly checked first, otherwise we check if any classes are present
	        isValidAnimation = (newAnimation.event === 'animate' && Object.keys(newAnimation.options.to || {}).length > 0)
	                            || hasAnimationClasses(newAnimation.options);
	      }

	      if (!isValidAnimation) {
	        close();
	        clearElementAnimationState(element);
	        return runner;
	      }

	      // the counter keeps track of cancelled animations
	      var counter = (existingAnimation.counter || 0) + 1;
	      newAnimation.counter = counter;

	      markElementAnimationState(element, PRE_DIGEST_STATE, newAnimation);

	      $rootScope.$$postDigest(function() {
	        var animationDetails = activeAnimationsLookup.get(node);
	        var animationCancelled = !animationDetails;
	        animationDetails = animationDetails || {};

	        // if addClass/removeClass is called before something like enter then the
	        // registered parent element may not be present. The code below will ensure
	        // that a final value for parent element is obtained
	        var parentElement = element.parent() || [];

	        // animate/structural/class-based animations all have requirements. Otherwise there
	        // is no point in performing an animation. The parent node must also be set.
	        var isValidAnimation = parentElement.length > 0
	                                && (animationDetails.event === 'animate'
	                                    || animationDetails.structural
	                                    || hasAnimationClasses(animationDetails.options));

	        // this means that the previous animation was cancelled
	        // even if the follow-up animation is the same event
	        if (animationCancelled || animationDetails.counter !== counter || !isValidAnimation) {
	          // if another animation did not take over then we need
	          // to make sure that the domOperation and options are
	          // handled accordingly
	          if (animationCancelled) {
	            applyAnimationClasses(element, options);
	            applyAnimationStyles(element, options);
	          }

	          // if the event changed from something like enter to leave then we do
	          // it, otherwise if it's the same then the end result will be the same too
	          if (animationCancelled || (isStructural && animationDetails.event !== event)) {
	            options.domOperation();
	            runner.end();
	          }

	          // in the event that the element animation was not cancelled or a follow-up animation
	          // isn't allowed to animate from here then we need to clear the state of the element
	          // so that any future animations won't read the expired animation data.
	          if (!isValidAnimation) {
	            clearElementAnimationState(element);
	          }

	          return;
	        }

	        // this combined multiple class to addClass / removeClass into a setClass event
	        // so long as a structural event did not take over the animation
	        event = !animationDetails.structural && hasAnimationClasses(animationDetails.options, true)
	            ? 'setClass'
	            : animationDetails.event;

	        markElementAnimationState(element, RUNNING_STATE);
	        var realRunner = $$animation(element, event, animationDetails.options);

	        realRunner.done(function(status) {
	          close(!status);
	          var animationDetails = activeAnimationsLookup.get(node);
	          if (animationDetails && animationDetails.counter === counter) {
	            clearElementAnimationState(getDomNode(element));
	          }
	          notifyProgress(runner, event, 'close', {});
	        });

	        // this will update the runner's flow-control events based on
	        // the `realRunner` object.
	        runner.setHost(realRunner);
	        notifyProgress(runner, event, 'start', {});
	      });

	      return runner;

	      function notifyProgress(runner, event, phase, data) {
	        runInNextPostDigestOrNow(function() {
	          var callbacks = findCallbacks(parent, element, event);
	          if (callbacks.length) {
	            // do not optimize this call here to RAF because
	            // we don't know how heavy the callback code here will
	            // be and if this code is buffered then this can
	            // lead to a performance regression.
	            $$rAF(function() {
	              forEach(callbacks, function(callback) {
	                callback(element, phase, data);
	              });
	            });
	          }
	        });
	        runner.progress(event, phase, data);
	      }

	      function close(reject) { // jshint ignore:line
	        clearGeneratedClasses(element, options);
	        applyAnimationClasses(element, options);
	        applyAnimationStyles(element, options);
	        options.domOperation();
	        runner.complete(!reject);
	      }
	    }

	    function closeChildAnimations(element) {
	      var node = getDomNode(element);
	      var children = node.querySelectorAll('[' + NG_ANIMATE_ATTR_NAME + ']');
	      forEach(children, function(child) {
	        var state = parseInt(child.getAttribute(NG_ANIMATE_ATTR_NAME));
	        var animationDetails = activeAnimationsLookup.get(child);
	        if (animationDetails) {
	          switch (state) {
	            case RUNNING_STATE:
	              animationDetails.runner.end();
	              /* falls through */
	            case PRE_DIGEST_STATE:
	              activeAnimationsLookup.remove(child);
	              break;
	          }
	        }
	      });
	    }

	    function clearElementAnimationState(element) {
	      var node = getDomNode(element);
	      node.removeAttribute(NG_ANIMATE_ATTR_NAME);
	      activeAnimationsLookup.remove(node);
	    }

	    function isMatchingElement(nodeOrElmA, nodeOrElmB) {
	      return getDomNode(nodeOrElmA) === getDomNode(nodeOrElmB);
	    }

	    /**
	     * This fn returns false if any of the following is true:
	     * a) animations on any parent element are disabled, and animations on the element aren't explicitly allowed
	     * b) a parent element has an ongoing structural animation, and animateChildren is false
	     * c) the element is not a child of the body
	     * d) the element is not a child of the $rootElement
	     */
	    function areAnimationsAllowed(element, parentElement, event) {
	      var bodyElement = jqLite($document[0].body);
	      var bodyElementDetected = isMatchingElement(element, bodyElement) || element[0].nodeName === 'HTML';
	      var rootElementDetected = isMatchingElement(element, $rootElement);
	      var parentAnimationDetected = false;
	      var animateChildren;
	      var elementDisabled = disabledElementsLookup.get(getDomNode(element));

	      var parentHost = element.data(NG_ANIMATE_PIN_DATA);
	      if (parentHost) {
	        parentElement = parentHost;
	      }

	      while (parentElement && parentElement.length) {
	        if (!rootElementDetected) {
	          // angular doesn't want to attempt to animate elements outside of the application
	          // therefore we need to ensure that the rootElement is an ancestor of the current element
	          rootElementDetected = isMatchingElement(parentElement, $rootElement);
	        }

	        var parentNode = parentElement[0];
	        if (parentNode.nodeType !== ELEMENT_NODE) {
	          // no point in inspecting the #document element
	          break;
	        }

	        var details = activeAnimationsLookup.get(parentNode) || {};
	        // either an enter, leave or move animation will commence
	        // therefore we can't allow any animations to take place
	        // but if a parent animation is class-based then that's ok
	        if (!parentAnimationDetected) {
	          var parentElementDisabled = disabledElementsLookup.get(parentNode);

	          if (parentElementDisabled === true && elementDisabled !== false) {
	            // disable animations if the user hasn't explicitly enabled animations on the
	            // current element
	            elementDisabled = true;
	            // element is disabled via parent element, no need to check anything else
	            break;
	          } else if (parentElementDisabled === false) {
	            elementDisabled = false;
	          }
	          parentAnimationDetected = details.structural;
	        }

	        if (isUndefined(animateChildren) || animateChildren === true) {
	          var value = parentElement.data(NG_ANIMATE_CHILDREN_DATA);
	          if (isDefined(value)) {
	            animateChildren = value;
	          }
	        }

	        // there is no need to continue traversing at this point
	        if (parentAnimationDetected && animateChildren === false) break;

	        if (!bodyElementDetected) {
	          // we also need to ensure that the element is or will be a part of the body element
	          // otherwise it is pointless to even issue an animation to be rendered
	          bodyElementDetected = isMatchingElement(parentElement, bodyElement);
	        }

	        if (bodyElementDetected && rootElementDetected) {
	          // If both body and root have been found, any other checks are pointless,
	          // as no animation data should live outside the application
	          break;
	        }

	        if (!rootElementDetected) {
	          // If no rootElement is detected, check if the parentElement is pinned to another element
	          parentHost = parentElement.data(NG_ANIMATE_PIN_DATA);
	          if (parentHost) {
	            // The pin target element becomes the next parent element
	            parentElement = parentHost;
	            continue;
	          }
	        }

	        parentElement = parentElement.parent();
	      }

	      var allowAnimation = (!parentAnimationDetected || animateChildren) && elementDisabled !== true;
	      return allowAnimation && rootElementDetected && bodyElementDetected;
	    }

	    function markElementAnimationState(element, state, details) {
	      details = details || {};
	      details.state = state;

	      var node = getDomNode(element);
	      node.setAttribute(NG_ANIMATE_ATTR_NAME, state);

	      var oldValue = activeAnimationsLookup.get(node);
	      var newValue = oldValue
	          ? extend(oldValue, details)
	          : details;
	      activeAnimationsLookup.put(node, newValue);
	    }
	  }];
	}];

	var $$AnimationProvider = ['$animateProvider', function($animateProvider) {
	  var NG_ANIMATE_REF_ATTR = 'ng-animate-ref';

	  var drivers = this.drivers = [];

	  var RUNNER_STORAGE_KEY = '$$animationRunner';

	  function setRunner(element, runner) {
	    element.data(RUNNER_STORAGE_KEY, runner);
	  }

	  function removeRunner(element) {
	    element.removeData(RUNNER_STORAGE_KEY);
	  }

	  function getRunner(element) {
	    return element.data(RUNNER_STORAGE_KEY);
	  }

	  this.$get = ['$$jqLite', '$rootScope', '$injector', '$$AnimateRunner', '$$HashMap', '$$rAFScheduler',
	       function($$jqLite,   $rootScope,   $injector,   $$AnimateRunner,   $$HashMap,   $$rAFScheduler) {

	    var animationQueue = [];
	    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

	    function sortAnimations(animations) {
	      var tree = { children: [] };
	      var i, lookup = new $$HashMap();

	      // this is done first beforehand so that the hashmap
	      // is filled with a list of the elements that will be animated
	      for (i = 0; i < animations.length; i++) {
	        var animation = animations[i];
	        lookup.put(animation.domNode, animations[i] = {
	          domNode: animation.domNode,
	          fn: animation.fn,
	          children: []
	        });
	      }

	      for (i = 0; i < animations.length; i++) {
	        processNode(animations[i]);
	      }

	      return flatten(tree);

	      function processNode(entry) {
	        if (entry.processed) return entry;
	        entry.processed = true;

	        var elementNode = entry.domNode;
	        var parentNode = elementNode.parentNode;
	        lookup.put(elementNode, entry);

	        var parentEntry;
	        while (parentNode) {
	          parentEntry = lookup.get(parentNode);
	          if (parentEntry) {
	            if (!parentEntry.processed) {
	              parentEntry = processNode(parentEntry);
	            }
	            break;
	          }
	          parentNode = parentNode.parentNode;
	        }

	        (parentEntry || tree).children.push(entry);
	        return entry;
	      }

	      function flatten(tree) {
	        var result = [];
	        var queue = [];
	        var i;

	        for (i = 0; i < tree.children.length; i++) {
	          queue.push(tree.children[i]);
	        }

	        var remainingLevelEntries = queue.length;
	        var nextLevelEntries = 0;
	        var row = [];

	        for (i = 0; i < queue.length; i++) {
	          var entry = queue[i];
	          if (remainingLevelEntries <= 0) {
	            remainingLevelEntries = nextLevelEntries;
	            nextLevelEntries = 0;
	            result.push(row);
	            row = [];
	          }
	          row.push(entry.fn);
	          entry.children.forEach(function(childEntry) {
	            nextLevelEntries++;
	            queue.push(childEntry);
	          });
	          remainingLevelEntries--;
	        }

	        if (row.length) {
	          result.push(row);
	        }

	        return result;
	      }
	    }

	    // TODO(matsko): document the signature in a better way
	    return function(element, event, options) {
	      options = prepareAnimationOptions(options);
	      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;

	      // there is no animation at the current moment, however
	      // these runner methods will get later updated with the
	      // methods leading into the driver's end/cancel methods
	      // for now they just stop the animation from starting
	      var runner = new $$AnimateRunner({
	        end: function() { close(); },
	        cancel: function() { close(true); }
	      });

	      if (!drivers.length) {
	        close();
	        return runner;
	      }

	      setRunner(element, runner);

	      var classes = mergeClasses(element.attr('class'), mergeClasses(options.addClass, options.removeClass));
	      var tempClasses = options.tempClasses;
	      if (tempClasses) {
	        classes += ' ' + tempClasses;
	        options.tempClasses = null;
	      }

	      animationQueue.push({
	        // this data is used by the postDigest code and passed into
	        // the driver step function
	        element: element,
	        classes: classes,
	        event: event,
	        structural: isStructural,
	        options: options,
	        beforeStart: beforeStart,
	        close: close
	      });

	      element.on('$destroy', handleDestroyedElement);

	      // we only want there to be one function called within the post digest
	      // block. This way we can group animations for all the animations that
	      // were apart of the same postDigest flush call.
	      if (animationQueue.length > 1) return runner;

	      $rootScope.$$postDigest(function() {
	        var animations = [];
	        forEach(animationQueue, function(entry) {
	          // the element was destroyed early on which removed the runner
	          // form its storage. This means we can't animate this element
	          // at all and it already has been closed due to destruction.
	          if (getRunner(entry.element)) {
	            animations.push(entry);
	          } else {
	            entry.close();
	          }
	        });

	        // now any future animations will be in another postDigest
	        animationQueue.length = 0;

	        var groupedAnimations = groupAnimations(animations);
	        var toBeSortedAnimations = [];

	        forEach(groupedAnimations, function(animationEntry) {
	          toBeSortedAnimations.push({
	            domNode: getDomNode(animationEntry.from ? animationEntry.from.element : animationEntry.element),
	            fn: function triggerAnimationStart() {
	              // it's important that we apply the `ng-animate` CSS class and the
	              // temporary classes before we do any driver invoking since these
	              // CSS classes may be required for proper CSS detection.
	              animationEntry.beforeStart();

	              var startAnimationFn, closeFn = animationEntry.close;

	              // in the event that the element was removed before the digest runs or
	              // during the RAF sequencing then we should not trigger the animation.
	              var targetElement = animationEntry.anchors
	                  ? (animationEntry.from.element || animationEntry.to.element)
	                  : animationEntry.element;

	              if (getRunner(targetElement)) {
	                var operation = invokeFirstDriver(animationEntry);
	                if (operation) {
	                  startAnimationFn = operation.start;
	                }
	              }

	              if (!startAnimationFn) {
	                closeFn();
	              } else {
	                var animationRunner = startAnimationFn();
	                animationRunner.done(function(status) {
	                  closeFn(!status);
	                });
	                updateAnimationRunners(animationEntry, animationRunner);
	              }
	            }
	          });
	        });

	        // we need to sort each of the animations in order of parent to child
	        // relationships. This ensures that the child classes are applied at the
	        // right time.
	        $$rAFScheduler(sortAnimations(toBeSortedAnimations));
	      });

	      return runner;

	      // TODO(matsko): change to reference nodes
	      function getAnchorNodes(node) {
	        var SELECTOR = '[' + NG_ANIMATE_REF_ATTR + ']';
	        var items = node.hasAttribute(NG_ANIMATE_REF_ATTR)
	              ? [node]
	              : node.querySelectorAll(SELECTOR);
	        var anchors = [];
	        forEach(items, function(node) {
	          var attr = node.getAttribute(NG_ANIMATE_REF_ATTR);
	          if (attr && attr.length) {
	            anchors.push(node);
	          }
	        });
	        return anchors;
	      }

	      function groupAnimations(animations) {
	        var preparedAnimations = [];
	        var refLookup = {};
	        forEach(animations, function(animation, index) {
	          var element = animation.element;
	          var node = getDomNode(element);
	          var event = animation.event;
	          var enterOrMove = ['enter', 'move'].indexOf(event) >= 0;
	          var anchorNodes = animation.structural ? getAnchorNodes(node) : [];

	          if (anchorNodes.length) {
	            var direction = enterOrMove ? 'to' : 'from';

	            forEach(anchorNodes, function(anchor) {
	              var key = anchor.getAttribute(NG_ANIMATE_REF_ATTR);
	              refLookup[key] = refLookup[key] || {};
	              refLookup[key][direction] = {
	                animationID: index,
	                element: jqLite(anchor)
	              };
	            });
	          } else {
	            preparedAnimations.push(animation);
	          }
	        });

	        var usedIndicesLookup = {};
	        var anchorGroups = {};
	        forEach(refLookup, function(operations, key) {
	          var from = operations.from;
	          var to = operations.to;

	          if (!from || !to) {
	            // only one of these is set therefore we can't have an
	            // anchor animation since all three pieces are required
	            var index = from ? from.animationID : to.animationID;
	            var indexKey = index.toString();
	            if (!usedIndicesLookup[indexKey]) {
	              usedIndicesLookup[indexKey] = true;
	              preparedAnimations.push(animations[index]);
	            }
	            return;
	          }

	          var fromAnimation = animations[from.animationID];
	          var toAnimation = animations[to.animationID];
	          var lookupKey = from.animationID.toString();
	          if (!anchorGroups[lookupKey]) {
	            var group = anchorGroups[lookupKey] = {
	              structural: true,
	              beforeStart: function() {
	                fromAnimation.beforeStart();
	                toAnimation.beforeStart();
	              },
	              close: function() {
	                fromAnimation.close();
	                toAnimation.close();
	              },
	              classes: cssClassesIntersection(fromAnimation.classes, toAnimation.classes),
	              from: fromAnimation,
	              to: toAnimation,
	              anchors: [] // TODO(matsko): change to reference nodes
	            };

	            // the anchor animations require that the from and to elements both have at least
	            // one shared CSS class which effictively marries the two elements together to use
	            // the same animation driver and to properly sequence the anchor animation.
	            if (group.classes.length) {
	              preparedAnimations.push(group);
	            } else {
	              preparedAnimations.push(fromAnimation);
	              preparedAnimations.push(toAnimation);
	            }
	          }

	          anchorGroups[lookupKey].anchors.push({
	            'out': from.element, 'in': to.element
	          });
	        });

	        return preparedAnimations;
	      }

	      function cssClassesIntersection(a,b) {
	        a = a.split(' ');
	        b = b.split(' ');
	        var matches = [];

	        for (var i = 0; i < a.length; i++) {
	          var aa = a[i];
	          if (aa.substring(0,3) === 'ng-') continue;

	          for (var j = 0; j < b.length; j++) {
	            if (aa === b[j]) {
	              matches.push(aa);
	              break;
	            }
	          }
	        }

	        return matches.join(' ');
	      }

	      function invokeFirstDriver(animationDetails) {
	        // we loop in reverse order since the more general drivers (like CSS and JS)
	        // may attempt more elements, but custom drivers are more particular
	        for (var i = drivers.length - 1; i >= 0; i--) {
	          var driverName = drivers[i];
	          if (!$injector.has(driverName)) continue; // TODO(matsko): remove this check

	          var factory = $injector.get(driverName);
	          var driver = factory(animationDetails);
	          if (driver) {
	            return driver;
	          }
	        }
	      }

	      function beforeStart() {
	        element.addClass(NG_ANIMATE_CLASSNAME);
	        if (tempClasses) {
	          $$jqLite.addClass(element, tempClasses);
	        }
	      }

	      function updateAnimationRunners(animation, newRunner) {
	        if (animation.from && animation.to) {
	          update(animation.from.element);
	          update(animation.to.element);
	        } else {
	          update(animation.element);
	        }

	        function update(element) {
	          getRunner(element).setHost(newRunner);
	        }
	      }

	      function handleDestroyedElement() {
	        var runner = getRunner(element);
	        if (runner && (event !== 'leave' || !options.$$domOperationFired)) {
	          runner.end();
	        }
	      }

	      function close(rejected) { // jshint ignore:line
	        element.off('$destroy', handleDestroyedElement);
	        removeRunner(element);

	        applyAnimationClasses(element, options);
	        applyAnimationStyles(element, options);
	        options.domOperation();

	        if (tempClasses) {
	          $$jqLite.removeClass(element, tempClasses);
	        }

	        element.removeClass(NG_ANIMATE_CLASSNAME);
	        runner.complete(!rejected);
	      }
	    };
	  }];
	}];

	/* global angularAnimateModule: true,

	   $$AnimateAsyncRunFactory,
	   $$rAFSchedulerFactory,
	   $$AnimateChildrenDirective,
	   $$AnimateQueueProvider,
	   $$AnimationProvider,
	   $AnimateCssProvider,
	   $$AnimateCssDriverProvider,
	   $$AnimateJsProvider,
	   $$AnimateJsDriverProvider,
	*/

	/**
	 * @ngdoc module
	 * @name ngAnimate
	 * @description
	 *
	 * The `ngAnimate` module provides support for CSS-based animations (keyframes and transitions) as well as JavaScript-based animations via
	 * callback hooks. Animations are not enabled by default, however, by including `ngAnimate` the animation hooks are enabled for an Angular app.
	 *
	 * <div doc-module-components="ngAnimate"></div>
	 *
	 * # Usage
	 * Simply put, there are two ways to make use of animations when ngAnimate is used: by using **CSS** and **JavaScript**. The former works purely based
	 * using CSS (by using matching CSS selectors/styles) and the latter triggers animations that are registered via `module.animation()`. For
	 * both CSS and JS animations the sole requirement is to have a matching `CSS class` that exists both in the registered animation and within
	 * the HTML element that the animation will be triggered on.
	 *
	 * ## Directive Support
	 * The following directives are "animation aware":
	 *
	 * | Directive                                                                                                | Supported Animations                                                     |
	 * |----------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|
	 * | {@link ng.directive:ngRepeat#animations ngRepeat}                                                        | enter, leave and move                                                    |
	 * | {@link ngRoute.directive:ngView#animations ngView}                                                       | enter and leave                                                          |
	 * | {@link ng.directive:ngInclude#animations ngInclude}                                                      | enter and leave                                                          |
	 * | {@link ng.directive:ngSwitch#animations ngSwitch}                                                        | enter and leave                                                          |
	 * | {@link ng.directive:ngIf#animations ngIf}                                                                | enter and leave                                                          |
	 * | {@link ng.directive:ngClass#animations ngClass}                                                          | add and remove (the CSS class(es) present)                               |
	 * | {@link ng.directive:ngShow#animations ngShow} & {@link ng.directive:ngHide#animations ngHide}            | add and remove (the ng-hide class value)                                 |
	 * | {@link ng.directive:form#animation-hooks form} & {@link ng.directive:ngModel#animation-hooks ngModel}    | add and remove (dirty, pristine, valid, invalid & all other validations) |
	 * | {@link module:ngMessages#animations ngMessages}                                                          | add and remove (ng-active & ng-inactive)                                 |
	 * | {@link module:ngMessages#animations ngMessage}                                                           | enter and leave                                                          |
	 *
	 * (More information can be found by visiting each the documentation associated with each directive.)
	 *
	 * ## CSS-based Animations
	 *
	 * CSS-based animations with ngAnimate are unique since they require no JavaScript code at all. By using a CSS class that we reference between our HTML
	 * and CSS code we can create an animation that will be picked up by Angular when an the underlying directive performs an operation.
	 *
	 * The example below shows how an `enter` animation can be made possible on an element using `ng-if`:
	 *
	 * ```html
	 * <div ng-if="bool" class="fade">
	 *    Fade me in out
	 * </div>
	 * <button ng-click="bool=true">Fade In!</button>
	 * <button ng-click="bool=false">Fade Out!</button>
	 * ```
	 *
	 * Notice the CSS class **fade**? We can now create the CSS transition code that references this class:
	 *
	 * ```css
	 * /&#42; The starting CSS styles for the enter animation &#42;/
	 * .fade.ng-enter {
	 *   transition:0.5s linear all;
	 *   opacity:0;
	 * }
	 *
	 * /&#42; The finishing CSS styles for the enter animation &#42;/
	 * .fade.ng-enter.ng-enter-active {
	 *   opacity:1;
	 * }
	 * ```
	 *
	 * The key thing to remember here is that, depending on the animation event (which each of the directives above trigger depending on what's going on) two
	 * generated CSS classes will be applied to the element; in the example above we have `.ng-enter` and `.ng-enter-active`. For CSS transitions, the transition
	 * code **must** be defined within the starting CSS class (in this case `.ng-enter`). The destination class is what the transition will animate towards.
	 *
	 * If for example we wanted to create animations for `leave` and `move` (ngRepeat triggers move) then we can do so using the same CSS naming conventions:
	 *
	 * ```css
	 * /&#42; now the element will fade out before it is removed from the DOM &#42;/
	 * .fade.ng-leave {
	 *   transition:0.5s linear all;
	 *   opacity:1;
	 * }
	 * .fade.ng-leave.ng-leave-active {
	 *   opacity:0;
	 * }
	 * ```
	 *
	 * We can also make use of **CSS Keyframes** by referencing the keyframe animation within the starting CSS class:
	 *
	 * ```css
	 * /&#42; there is no need to define anything inside of the destination
	 * CSS class since the keyframe will take charge of the animation &#42;/
	 * .fade.ng-leave {
	 *   animation: my_fade_animation 0.5s linear;
	 *   -webkit-animation: my_fade_animation 0.5s linear;
	 * }
	 *
	 * @keyframes my_fade_animation {
	 *   from { opacity:1; }
	 *   to { opacity:0; }
	 * }
	 *
	 * @-webkit-keyframes my_fade_animation {
	 *   from { opacity:1; }
	 *   to { opacity:0; }
	 * }
	 * ```
	 *
	 * Feel free also mix transitions and keyframes together as well as any other CSS classes on the same element.
	 *
	 * ### CSS Class-based Animations
	 *
	 * Class-based animations (animations that are triggered via `ngClass`, `ngShow`, `ngHide` and some other directives) have a slightly different
	 * naming convention. Class-based animations are basic enough that a standard transition or keyframe can be referenced on the class being added
	 * and removed.
	 *
	 * For example if we wanted to do a CSS animation for `ngHide` then we place an animation on the `.ng-hide` CSS class:
	 *
	 * ```html
	 * <div ng-show="bool" class="fade">
	 *   Show and hide me
	 * </div>
	 * <button ng-click="bool=true">Toggle</button>
	 *
	 * <style>
	 * .fade.ng-hide {
	 *   transition:0.5s linear all;
	 *   opacity:0;
	 * }
	 * </style>
	 * ```
	 *
	 * All that is going on here with ngShow/ngHide behind the scenes is the `.ng-hide` class is added/removed (when the hidden state is valid). Since
	 * ngShow and ngHide are animation aware then we can match up a transition and ngAnimate handles the rest.
	 *
	 * In addition the addition and removal of the CSS class, ngAnimate also provides two helper methods that we can use to further decorate the animation
	 * with CSS styles.
	 *
	 * ```html
	 * <div ng-class="{on:onOff}" class="highlight">
	 *   Highlight this box
	 * </div>
	 * <button ng-click="onOff=!onOff">Toggle</button>
	 *
	 * <style>
	 * .highlight {
	 *   transition:0.5s linear all;
	 * }
	 * .highlight.on-add {
	 *   background:white;
	 * }
	 * .highlight.on {
	 *   background:yellow;
	 * }
	 * .highlight.on-remove {
	 *   background:black;
	 * }
	 * </style>
	 * ```
	 *
	 * We can also make use of CSS keyframes by placing them within the CSS classes.
	 *
	 *
	 * ### CSS Staggering Animations
	 * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a
	 * curtain-like effect. The ngAnimate module (versions >=1.2) supports staggering animations and the stagger effect can be
	 * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for
	 * the animation. The style property expected within the stagger class can either be a **transition-delay** or an
	 * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).
	 *
	 * ```css
	 * .my-animation.ng-enter {
	 *   /&#42; standard transition code &#42;/
	 *   transition: 1s linear all;
	 *   opacity:0;
	 * }
	 * .my-animation.ng-enter-stagger {
	 *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/
	 *   transition-delay: 0.1s;
	 *
	 *   /&#42; As of 1.4.4, this must always be set: it signals ngAnimate
	 *     to not accidentally inherit a delay property from another CSS class &#42;/
	 *   transition-duration: 0s;
	 * }
	 * .my-animation.ng-enter.ng-enter-active {
	 *   /&#42; standard transition styles &#42;/
	 *   opacity:1;
	 * }
	 * ```
	 *
	 * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations
	 * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this
	 * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation
	 * will also be reset if one or more animation frames have passed since the multiple calls to `$animate` were fired.
	 *
	 * The following code will issue the **ng-leave-stagger** event on the element provided:
	 *
	 * ```js
	 * var kids = parent.children();
	 *
	 * $animate.leave(kids[0]); //stagger index=0
	 * $animate.leave(kids[1]); //stagger index=1
	 * $animate.leave(kids[2]); //stagger index=2
	 * $animate.leave(kids[3]); //stagger index=3
	 * $animate.leave(kids[4]); //stagger index=4
	 *
	 * window.requestAnimationFrame(function() {
	 *   //stagger has reset itself
	 *   $animate.leave(kids[5]); //stagger index=0
	 *   $animate.leave(kids[6]); //stagger index=1
	 *
	 *   $scope.$digest();
	 * });
	 * ```
	 *
	 * Stagger animations are currently only supported within CSS-defined animations.
	 *
	 * ### The `ng-animate` CSS class
	 *
	 * When ngAnimate is animating an element it will apply the `ng-animate` CSS class to the element for the duration of the animation.
	 * This is a temporary CSS class and it will be removed once the animation is over (for both JavaScript and CSS-based animations).
	 *
	 * Therefore, animations can be applied to an element using this temporary class directly via CSS.
	 *
	 * ```css
	 * .zipper.ng-animate {
	 *   transition:0.5s linear all;
	 * }
	 * .zipper.ng-enter {
	 *   opacity:0;
	 * }
	 * .zipper.ng-enter.ng-enter-active {
	 *   opacity:1;
	 * }
	 * .zipper.ng-leave {
	 *   opacity:1;
	 * }
	 * .zipper.ng-leave.ng-leave-active {
	 *   opacity:0;
	 * }
	 * ```
	 *
	 * (Note that the `ng-animate` CSS class is reserved and it cannot be applied on an element directly since ngAnimate will always remove
	 * the CSS class once an animation has completed.)
	 *
	 *
	 * ## JavaScript-based Animations
	 *
	 * ngAnimate also allows for animations to be consumed by JavaScript code. The approach is similar to CSS-based animations (where there is a shared
	 * CSS class that is referenced in our HTML code) but in addition we need to register the JavaScript animation on the module. By making use of the
	 * `module.animation()` module function we can register the ainmation.
	 *
	 * Let's see an example of a enter/leave animation using `ngRepeat`:
	 *
	 * ```html
	 * <div ng-repeat="item in items" class="slide">
	 *   {{ item }}
	 * </div>
	 * ```
	 *
	 * See the **slide** CSS class? Let's use that class to define an animation that we'll structure in our module code by using `module.animation`:
	 *
	 * ```js
	 * myModule.animation('.slide', [function() {
	 *   return {
	 *     // make note that other events (like addClass/removeClass)
	 *     // have different function input parameters
	 *     enter: function(element, doneFn) {
	 *       jQuery(element).fadeIn(1000, doneFn);
	 *
	 *       // remember to call doneFn so that angular
	 *       // knows that the animation has concluded
	 *     },
	 *
	 *     move: function(element, doneFn) {
	 *       jQuery(element).fadeIn(1000, doneFn);
	 *     },
	 *
	 *     leave: function(element, doneFn) {
	 *       jQuery(element).fadeOut(1000, doneFn);
	 *     }
	 *   }
	 * }]);
	 * ```
	 *
	 * The nice thing about JS-based animations is that we can inject other services and make use of advanced animation libraries such as
	 * greensock.js and velocity.js.
	 *
	 * If our animation code class-based (meaning that something like `ngClass`, `ngHide` and `ngShow` triggers it) then we can still define
	 * our animations inside of the same registered animation, however, the function input arguments are a bit different:
	 *
	 * ```html
	 * <div ng-class="color" class="colorful">
	 *   this box is moody
	 * </div>
	 * <button ng-click="color='red'">Change to red</button>
	 * <button ng-click="color='blue'">Change to blue</button>
	 * <button ng-click="color='green'">Change to green</button>
	 * ```
	 *
	 * ```js
	 * myModule.animation('.colorful', [function() {
	 *   return {
	 *     addClass: function(element, className, doneFn) {
	 *       // do some cool animation and call the doneFn
	 *     },
	 *     removeClass: function(element, className, doneFn) {
	 *       // do some cool animation and call the doneFn
	 *     },
	 *     setClass: function(element, addedClass, removedClass, doneFn) {
	 *       // do some cool animation and call the doneFn
	 *     }
	 *   }
	 * }]);
	 * ```
	 *
	 * ## CSS + JS Animations Together
	 *
	 * AngularJS 1.4 and higher has taken steps to make the amalgamation of CSS and JS animations more flexible. However, unlike earlier versions of Angular,
	 * defining CSS and JS animations to work off of the same CSS class will not work anymore. Therefore the example below will only result in **JS animations taking
	 * charge of the animation**:
	 *
	 * ```html
	 * <div ng-if="bool" class="slide">
	 *   Slide in and out
	 * </div>
	 * ```
	 *
	 * ```js
	 * myModule.animation('.slide', [function() {
	 *   return {
	 *     enter: function(element, doneFn) {
	 *       jQuery(element).slideIn(1000, doneFn);
	 *     }
	 *   }
	 * }]);
	 * ```
	 *
	 * ```css
	 * .slide.ng-enter {
	 *   transition:0.5s linear all;
	 *   transform:translateY(-100px);
	 * }
	 * .slide.ng-enter.ng-enter-active {
	 *   transform:translateY(0);
	 * }
	 * ```
	 *
	 * Does this mean that CSS and JS animations cannot be used together? Do JS-based animations always have higher priority? We can make up for the
	 * lack of CSS animations by using the `$animateCss` service to trigger our own tweaked-out, CSS-based animations directly from
	 * our own JS-based animation code:
	 *
	 * ```js
	 * myModule.animation('.slide', ['$animateCss', function($animateCss) {
	 *   return {
	 *     enter: function(element) {
	*        // this will trigger `.slide.ng-enter` and `.slide.ng-enter-active`.
	 *       return $animateCss(element, {
	 *         event: 'enter',
	 *         structural: true
	 *       });
	 *     }
	 *   }
	 * }]);
	 * ```
	 *
	 * The nice thing here is that we can save bandwidth by sticking to our CSS-based animation code and we don't need to rely on a 3rd-party animation framework.
	 *
	 * The `$animateCss` service is very powerful since we can feed in all kinds of extra properties that will be evaluated and fed into a CSS transition or
	 * keyframe animation. For example if we wanted to animate the height of an element while adding and removing classes then we can do so by providing that
	 * data into `$animateCss` directly:
	 *
	 * ```js
	 * myModule.animation('.slide', ['$animateCss', function($animateCss) {
	 *   return {
	 *     enter: function(element) {
	 *       return $animateCss(element, {
	 *         event: 'enter',
	 *         structural: true,
	 *         addClass: 'maroon-setting',
	 *         from: { height:0 },
	 *         to: { height: 200 }
	 *       });
	 *     }
	 *   }
	 * }]);
	 * ```
	 *
	 * Now we can fill in the rest via our transition CSS code:
	 *
	 * ```css
	 * /&#42; the transition tells ngAnimate to make the animation happen &#42;/
	 * .slide.ng-enter { transition:0.5s linear all; }
	 *
	 * /&#42; this extra CSS class will be absorbed into the transition
	 * since the $animateCss code is adding the class &#42;/
	 * .maroon-setting { background:red; }
	 * ```
	 *
	 * And `$animateCss` will figure out the rest. Just make sure to have the `done()` callback fire the `doneFn` function to signal when the animation is over.
	 *
	 * To learn more about what's possible be sure to visit the {@link ngAnimate.$animateCss $animateCss service}.
	 *
	 * ## Animation Anchoring (via `ng-animate-ref`)
	 *
	 * ngAnimate in AngularJS 1.4 comes packed with the ability to cross-animate elements between
	 * structural areas of an application (like views) by pairing up elements using an attribute
	 * called `ng-animate-ref`.
	 *
	 * Let's say for example we have two views that are managed by `ng-view` and we want to show
	 * that there is a relationship between two components situated in within these views. By using the
	 * `ng-animate-ref` attribute we can identify that the two components are paired together and we
	 * can then attach an animation, which is triggered when the view changes.
	 *
	 * Say for example we have the following template code:
	 *
	 * ```html
	 * <!-- index.html -->
	 * <div ng-view class="view-animation">
	 * </div>
	 *
	 * <!-- home.html -->
	 * <a href="#/banner-page">
	 *   <img src="./banner.jpg" class="banner" ng-animate-ref="banner">
	 * </a>
	 *
	 * <!-- banner-page.html -->
	 * <img src="./banner.jpg" class="banner" ng-animate-ref="banner">
	 * ```
	 *
	 * Now, when the view changes (once the link is clicked), ngAnimate will examine the
	 * HTML contents to see if there is a match reference between any components in the view
	 * that is leaving and the view that is entering. It will scan both the view which is being
	 * removed (leave) and inserted (enter) to see if there are any paired DOM elements that
	 * contain a matching ref value.
	 *
	 * The two images match since they share the same ref value. ngAnimate will now create a
	 * transport element (which is a clone of the first image element) and it will then attempt
	 * to animate to the position of the second image element in the next view. For the animation to
	 * work a special CSS class called `ng-anchor` will be added to the transported element.
	 *
	 * We can now attach a transition onto the `.banner.ng-anchor` CSS class and then
	 * ngAnimate will handle the entire transition for us as well as the addition and removal of
	 * any changes of CSS classes between the elements:
	 *
	 * ```css
	 * .banner.ng-anchor {
	 *   /&#42; this animation will last for 1 second since there are
	 *          two phases to the animation (an `in` and an `out` phase) &#42;/
	 *   transition:0.5s linear all;
	 * }
	 * ```
	 *
	 * We also **must** include animations for the views that are being entered and removed
	 * (otherwise anchoring wouldn't be possible since the new view would be inserted right away).
	 *
	 * ```css
	 * .view-animation.ng-enter, .view-animation.ng-leave {
	 *   transition:0.5s linear all;
	 *   position:fixed;
	 *   left:0;
	 *   top:0;
	 *   width:100%;
	 * }
	 * .view-animation.ng-enter {
	 *   transform:translateX(100%);
	 * }
	 * .view-animation.ng-leave,
	 * .view-animation.ng-enter.ng-enter-active {
	 *   transform:translateX(0%);
	 * }
	 * .view-animation.ng-leave.ng-leave-active {
	 *   transform:translateX(-100%);
	 * }
	 * ```
	 *
	 * Now we can jump back to the anchor animation. When the animation happens, there are two stages that occur:
	 * an `out` and an `in` stage. The `out` stage happens first and that is when the element is animated away
	 * from its origin. Once that animation is over then the `in` stage occurs which animates the
	 * element to its destination. The reason why there are two animations is to give enough time
	 * for the enter animation on the new element to be ready.
	 *
	 * The example above sets up a transition for both the in and out phases, but we can also target the out or
	 * in phases directly via `ng-anchor-out` and `ng-anchor-in`.
	 *
	 * ```css
	 * .banner.ng-anchor-out {
	 *   transition: 0.5s linear all;
	 *
	 *   /&#42; the scale will be applied during the out animation,
	 *          but will be animated away when the in animation runs &#42;/
	 *   transform: scale(1.2);
	 * }
	 *
	 * .banner.ng-anchor-in {
	 *   transition: 1s linear all;
	 * }
	 * ```
	 *
	 *
	 *
	 *
	 * ### Anchoring Demo
	 *
	  <example module="anchoringExample"
	           name="anchoringExample"
	           id="anchoringExample"
	           deps="angular-animate.js;angular-route.js"
	           animations="true">
	    <file name="index.html">
	      <a href="#/">Home</a>
	      <hr />
	      <div class="view-container">
	        <div ng-view class="view"></div>
	      </div>
	    </file>
	    <file name="script.js">
	      angular.module('anchoringExample', ['ngAnimate', 'ngRoute'])
	        .config(['$routeProvider', function($routeProvider) {
	          $routeProvider.when('/', {
	            templateUrl: 'home.html',
	            controller: 'HomeController as home'
	          });
	          $routeProvider.when('/profile/:id', {
	            templateUrl: 'profile.html',
	            controller: 'ProfileController as profile'
	          });
	        }])
	        .run(['$rootScope', function($rootScope) {
	          $rootScope.records = [
	            { id:1, title: "Miss Beulah Roob" },
	            { id:2, title: "Trent Morissette" },
	            { id:3, title: "Miss Ava Pouros" },
	            { id:4, title: "Rod Pouros" },
	            { id:5, title: "Abdul Rice" },
	            { id:6, title: "Laurie Rutherford Sr." },
	            { id:7, title: "Nakia McLaughlin" },
	            { id:8, title: "Jordon Blanda DVM" },
	            { id:9, title: "Rhoda Hand" },
	            { id:10, title: "Alexandrea Sauer" }
	          ];
	        }])
	        .controller('HomeController', [function() {
	          //empty
	        }])
	        .controller('ProfileController', ['$rootScope', '$routeParams', function($rootScope, $routeParams) {
	          var index = parseInt($routeParams.id, 10);
	          var record = $rootScope.records[index - 1];

	          this.title = record.title;
	          this.id = record.id;
	        }]);
	    </file>
	    <file name="home.html">
	      <h2>Welcome to the home page</h1>
	      <p>Please click on an element</p>
	      <a class="record"
	         ng-href="#/profile/{{ record.id }}"
	         ng-animate-ref="{{ record.id }}"
	         ng-repeat="record in records">
	        {{ record.title }}
	      </a>
	    </file>
	    <file name="profile.html">
	      <div class="profile record" ng-animate-ref="{{ profile.id }}">
	        {{ profile.title }}
	      </div>
	    </file>
	    <file name="animations.css">
	      .record {
	        display:block;
	        font-size:20px;
	      }
	      .profile {
	        background:black;
	        color:white;
	        font-size:100px;
	      }
	      .view-container {
	        position:relative;
	      }
	      .view-container > .view.ng-animate {
	        position:absolute;
	        top:0;
	        left:0;
	        width:100%;
	        min-height:500px;
	      }
	      .view.ng-enter, .view.ng-leave,
	      .record.ng-anchor {
	        transition:0.5s linear all;
	      }
	      .view.ng-enter {
	        transform:translateX(100%);
	      }
	      .view.ng-enter.ng-enter-active, .view.ng-leave {
	        transform:translateX(0%);
	      }
	      .view.ng-leave.ng-leave-active {
	        transform:translateX(-100%);
	      }
	      .record.ng-anchor-out {
	        background:red;
	      }
	    </file>
	  </example>
	 *
	 * ### How is the element transported?
	 *
	 * When an anchor animation occurs, ngAnimate will clone the starting element and position it exactly where the starting
	 * element is located on screen via absolute positioning. The cloned element will be placed inside of the root element
	 * of the application (where ng-app was defined) and all of the CSS classes of the starting element will be applied. The
	 * element will then animate into the `out` and `in` animations and will eventually reach the coordinates and match
	 * the dimensions of the destination element. During the entire animation a CSS class of `.ng-animate-shim` will be applied
	 * to both the starting and destination elements in order to hide them from being visible (the CSS styling for the class
	 * is: `visibility:hidden`). Once the anchor reaches its destination then it will be removed and the destination element
	 * will become visible since the shim class will be removed.
	 *
	 * ### How is the morphing handled?
	 *
	 * CSS Anchoring relies on transitions and keyframes and the internal code is intelligent enough to figure out
	 * what CSS classes differ between the starting element and the destination element. These different CSS classes
	 * will be added/removed on the anchor element and a transition will be applied (the transition that is provided
	 * in the anchor class). Long story short, ngAnimate will figure out what classes to add and remove which will
	 * make the transition of the element as smooth and automatic as possible. Be sure to use simple CSS classes that
	 * do not rely on DOM nesting structure so that the anchor element appears the same as the starting element (since
	 * the cloned element is placed inside of root element which is likely close to the body element).
	 *
	 * Note that if the root element is on the `<html>` element then the cloned node will be placed inside of body.
	 *
	 *
	 * ## Using $animate in your directive code
	 *
	 * So far we've explored how to feed in animations into an Angular application, but how do we trigger animations within our own directives in our application?
	 * By injecting the `$animate` service into our directive code, we can trigger structural and class-based hooks which can then be consumed by animations. Let's
	 * imagine we have a greeting box that shows and hides itself when the data changes
	 *
	 * ```html
	 * <greeting-box active="onOrOff">Hi there</greeting-box>
	 * ```
	 *
	 * ```js
	 * ngModule.directive('greetingBox', ['$animate', function($animate) {
	 *   return function(scope, element, attrs) {
	 *     attrs.$observe('active', function(value) {
	 *       value ? $animate.addClass(element, 'on') : $animate.removeClass(element, 'on');
	 *     });
	 *   });
	 * }]);
	 * ```
	 *
	 * Now the `on` CSS class is added and removed on the greeting box component. Now if we add a CSS class on top of the greeting box element
	 * in our HTML code then we can trigger a CSS or JS animation to happen.
	 *
	 * ```css
	 * /&#42; normally we would create a CSS class to reference on the element &#42;/
	 * greeting-box.on { transition:0.5s linear all; background:green; color:white; }
	 * ```
	 *
	 * The `$animate` service contains a variety of other methods like `enter`, `leave`, `animate` and `setClass`. To learn more about what's
	 * possible be sure to visit the {@link ng.$animate $animate service API page}.
	 *
	 *
	 * ### Preventing Collisions With Third Party Libraries
	 *
	 * Some third-party frameworks place animation duration defaults across many element or className
	 * selectors in order to make their code small and reuseable. This can lead to issues with ngAnimate, which
	 * is expecting actual animations on these elements and has to wait for their completion.
	 *
	 * You can prevent this unwanted behavior by using a prefix on all your animation classes:
	 *
	 * ```css
	 * /&#42; prefixed with animate- &#42;/
	 * .animate-fade-add.animate-fade-add-active {
	 *   transition:1s linear all;
	 *   opacity:0;
	 * }
	 * ```
	 *
	 * You then configure `$animate` to enforce this prefix:
	 *
	 * ```js
	 * $animateProvider.classNameFilter(/animate-/);
	 * ```
	 *
	 * This also may provide your application with a speed boost since only specific elements containing CSS class prefix
	 * will be evaluated for animation when any DOM changes occur in the application.
	 *
	 * ## Callbacks and Promises
	 *
	 * When `$animate` is called it returns a promise that can be used to capture when the animation has ended. Therefore if we were to trigger
	 * an animation (within our directive code) then we can continue performing directive and scope related activities after the animation has
	 * ended by chaining onto the returned promise that animation method returns.
	 *
	 * ```js
	 * // somewhere within the depths of the directive
	 * $animate.enter(element, parent).then(function() {
	 *   //the animation has completed
	 * });
	 * ```
	 *
	 * (Note that earlier versions of Angular prior to v1.4 required the promise code to be wrapped using `$scope.$apply(...)`. This is not the case
	 * anymore.)
	 *
	 * In addition to the animation promise, we can also make use of animation-related callbacks within our directives and controller code by registering
	 * an event listener using the `$animate` service. Let's say for example that an animation was triggered on our view
	 * routing controller to hook into that:
	 *
	 * ```js
	 * ngModule.controller('HomePageController', ['$animate', function($animate) {
	 *   $animate.on('enter', ngViewElement, function(element) {
	 *     // the animation for this route has completed
	 *   }]);
	 * }])
	 * ```
	 *
	 * (Note that you will need to trigger a digest within the callback to get angular to notice any scope-related changes.)
	 */

	/**
	 * @ngdoc service
	 * @name $animate
	 * @kind object
	 *
	 * @description
	 * The ngAnimate `$animate` service documentation is the same for the core `$animate` service.
	 *
	 * Click here {@link ng.$animate to learn more about animations with `$animate`}.
	 */
	angular.module('ngAnimate', [])
	  .directive('ngAnimateChildren', $$AnimateChildrenDirective)
	  .factory('$$rAFScheduler', $$rAFSchedulerFactory)

	  .provider('$$animateQueue', $$AnimateQueueProvider)
	  .provider('$$animation', $$AnimationProvider)

	  .provider('$animateCss', $AnimateCssProvider)
	  .provider('$$animateCssDriver', $$AnimateCssDriverProvider)

	  .provider('$$animateJs', $$AnimateJsProvider)
	  .provider('$$animateJsDriver', $$AnimateJsDriverProvider);


	})(window, window.angular);


/***/ },

/***/ 388:
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },

/***/ 390:
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },

/***/ 396:
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(366), __webpack_require__(385), __webpack_require__(397));
		else if(typeof define === 'function' && define.amd)
			define(["jquery", "angular", "jquery-ui/datepicker"], factory);
		else if(typeof exports === 'object')
			exports["angularUiDate"] = factory(require("jquery"), require("angular"), require("jquery-ui/datepicker"));
		else
			root["angularUiDate"] = factory(root["jQuery"], root["angular"], root["jquery-ui/datepicker"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "assets";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});

		var _jquery = __webpack_require__(1);

		var _jquery2 = _interopRequireDefault(_jquery);

		var _angular = __webpack_require__(2);

		var _angular2 = _interopRequireDefault(_angular);

		var _datepicker = __webpack_require__(3);

		var _datepicker2 = _interopRequireDefault(_datepicker);

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

		// sets up jQuery with the datepicker plugin

		exports.default = _angular2.default.module('ui.date', []).constant('uiDateConfig', {}).constant('uiDateFormatConfig', '').factory('uiDateConverter', ['uiDateFormatConfig', function (uiDateFormatConfig) {
		  return {
		    stringToDate: stringToDate,
		    dateToString: dateToString
		  };

		  function dateToString(uiDateFormat, value) {
		    var dateFormat = uiDateFormat || uiDateFormatConfig;
		    if (value) {
		      if (dateFormat) {
		        try {
		          return _jquery2.default.datepicker.formatDate(dateFormat, value);
		        } catch (formatException) {
		          return undefined;
		        }
		      }

		      if (value.toISOString) {
		        return value.toISOString();
		      }
		    }
		    return null;
		  }

		  function stringToDate(dateFormat, valueToParse) {
		    dateFormat = dateFormat || uiDateFormatConfig;

		    if (_angular2.default.isDate(valueToParse) && !isNaN(valueToParse)) {
		      return valueToParse;
		    }

		    if (_angular2.default.isString(valueToParse)) {
		      if (dateFormat) {
		        return _jquery2.default.datepicker.parseDate(dateFormat, valueToParse);
		      }

		      var isoDate = new Date(valueToParse);
		      return isNaN(isoDate.getTime()) ? null : isoDate;
		    }

		    if (_angular2.default.isNumber(valueToParse)) {
		      // presumably timestamp to date object
		      return new Date(valueToParse);
		    }

		    return null;
		  }
		}]).directive('uiDate', ['uiDateConfig', 'uiDateConverter', function uiDateDirective(uiDateConfig, uiDateConverter) {

		  return {
		    require: '?ngModel',
		    link: function link(scope, element, attrs, controller) {

		      var $element = (0, _jquery2.default)(element);

		      var getOptions = function getOptions() {
		        return _angular2.default.extend({}, uiDateConfig, scope.$eval(attrs.uiDate));
		      };
		      var initDateWidget = function initDateWidget() {
		        var showing = false;
		        var opts = getOptions();

		        function setVal(forcedUpdate) {
		          var keys = ['Hours', 'Minutes', 'Seconds', 'Milliseconds'];
		          var isDate = _angular2.default.isDate(controller.$modelValue);
		          var preserve = {};

		          if (!forcedUpdate && isDate && controller.$modelValue.toDateString() === $element.datepicker('getDate').toDateString()) {
		            return;
		          }

		          if (isDate) {
		            _angular2.default.forEach(keys, function (key) {
		              preserve[key] = controller.$modelValue['get' + key]();
		            });
		          }

		          var newViewValue = $element.datepicker('getDate');

		          if (isDate) {
		            _angular2.default.forEach(keys, function (key) {
		              newViewValue['set' + key](preserve[key]);
		            });
		          }

		          controller.$setViewValue(newViewValue);
		        }

		        // If we have a controller (i.e. ngModelController) then wire it up
		        if (controller) {
		          // Set the view value in a $apply block when users selects
		          // (calling directive user's function too if provided)
		          var _onSelect = opts.onSelect || _angular2.default.noop;
		          opts.onSelect = function (value, picker) {
		            scope.$apply(function () {
		              showing = true;
		              setVal();
		              $element.blur();
		              _onSelect(value, picker, $element);
		            });
		          };

		          var _beforeShow = opts.beforeShow || _angular2.default.noop;
		          opts.beforeShow = function (input, picker) {
		            showing = true;
		            _beforeShow(input, picker, $element);
		          };

		          var _onClose = opts.onClose || _angular2.default.noop;
		          opts.onClose = function (value, picker) {
		            showing = false;
		            _onClose(value, picker, $element);
		          };

		          element.on('focus', function (focusEvent) {
		            if (attrs.readonly) {
		              focusEvent.stopImmediatePropagation();
		            }
		          });

		          $element.off('blur.datepicker').on('blur.datepicker', function () {
		            if (!showing) {
		              scope.$apply(function () {
		                $element.datepicker('setDate', $element.datepicker('getDate'));
		                setVal();
		              });
		            }
		          });

		          controller.$validators.uiDateValidator = function uiDateValidator(modelValue, viewValue) {
		            return viewValue === null || viewValue === '' || _angular2.default.isDate(uiDateConverter.stringToDate(attrs.uiDateFormat, viewValue));
		          };

		          controller.$parsers.push(function uiDateParser(valueToParse) {
		            return uiDateConverter.stringToDate(attrs.uiDateFormat, valueToParse);
		          });

		          // Update the date picker when the model changes
		          controller.$render = function () {
		            // Force a render to override whatever is in the input text box
		            if (_angular2.default.isDate(controller.$modelValue) === false && _angular2.default.isString(controller.$modelValue)) {
		              controller.$modelValue = uiDateConverter.stringToDate(attrs.uiDateFormat, controller.$modelValue);
		            }
		            $element.datepicker('setDate', controller.$modelValue);
		          };
		        }
		        // Check if the $element already has a datepicker.
		        //

		        if ($element.data('datepicker')) {
		          // Updates the datepicker options
		          $element.datepicker('option', opts);
		          $element.datepicker('refresh');
		        } else {
		          // Creates the new datepicker widget
		          $element.datepicker(opts);

		          // Cleanup on destroy, prevent memory leaking
		          $element.on('$destroy', function () {
		            $element.datepicker('hide');
		            $element.datepicker('destroy');
		          });
		        }

		        if (controller) {
		          controller.$render();
		          // Update the model with the value from the datepicker after parsed
		          setVal(true);
		        }
		      };

		      // Watch for changes to the directives options
		      scope.$watch(getOptions, initDateWidget, true);
		    }
		  };
		}]).directive('uiDateFormat', ['uiDateConverter', function (uiDateConverter) {
		  return {
		    require: 'ngModel',
		    link: function link(scope, element, attrs, modelCtrl) {
		      var dateFormat = attrs.uiDateFormat;

		      // Use the datepicker with the attribute value as the dateFormat string to convert to and from a string
		      modelCtrl.$formatters.unshift(function (value) {
		        return uiDateConverter.stringToDate(dateFormat, value);
		      });

		      modelCtrl.$parsers.push(function (value) {
		        return uiDateConverter.dateToString(dateFormat, value);
		      });
		    }
		  };
		}]);

	/***/ },
	/* 1 */
	/***/ function(module, exports) {

		module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

	/***/ },
	/* 2 */
	/***/ function(module, exports) {

		module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

	/***/ },
	/* 3 */
	/***/ function(module, exports) {

		module.exports = __WEBPACK_EXTERNAL_MODULE_3__;

	/***/ }
	/******/ ])
	});
	;
	//# sourceMappingURL=date.js.map

/***/ },

/***/ 397:
/***/ function(module, exports, __webpack_require__) {

	var jQuery = __webpack_require__(366);
	__webpack_require__(398);

	/*!
	 * jQuery UI Datepicker 1.10.4
	 * http://jqueryui.com
	 *
	 * Copyright 2014 jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/datepicker/
	 *
	 * Depends:
	 *	jquery.ui.core.js
	 */
	(function( $, undefined ) {

	$.extend($.ui, { datepicker: { version: "1.10.4" } });

	var PROP_NAME = "datepicker",
		instActive;

	/* Date picker manager.
	   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
	   Settings for (groups of) date pickers are maintained in an instance object,
	   allowing multiple different settings on the same page. */

	function Datepicker() {
		this._curInst = null; // The current instance in use
		this._keyEvent = false; // If the last event was a key event
		this._disabledInputs = []; // List of date picker inputs that have been disabled
		this._datepickerShowing = false; // True if the popup picker is showing , false if not
		this._inDialog = false; // True if showing within a "dialog", false if not
		this._mainDivId = "ui-datepicker-div"; // The ID of the main datepicker division
		this._inlineClass = "ui-datepicker-inline"; // The name of the inline marker class
		this._appendClass = "ui-datepicker-append"; // The name of the append marker class
		this._triggerClass = "ui-datepicker-trigger"; // The name of the trigger marker class
		this._dialogClass = "ui-datepicker-dialog"; // The name of the dialog marker class
		this._disableClass = "ui-datepicker-disabled"; // The name of the disabled covering marker class
		this._unselectableClass = "ui-datepicker-unselectable"; // The name of the unselectable cell marker class
		this._currentClass = "ui-datepicker-current-day"; // The name of the current day marker class
		this._dayOverClass = "ui-datepicker-days-cell-over"; // The name of the day hover marker class
		this.regional = []; // Available regional settings, indexed by language code
		this.regional[""] = { // Default regional settings
			closeText: "Done", // Display text for close link
			prevText: "Prev", // Display text for previous month link
			nextText: "Next", // Display text for next month link
			currentText: "Today", // Display text for current month link
			monthNames: ["January","February","March","April","May","June",
				"July","August","September","October","November","December"], // Names of months for drop-down and formatting
			monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], // For formatting
			dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], // For formatting
			dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], // For formatting
			dayNamesMin: ["Su","Mo","Tu","We","Th","Fr","Sa"], // Column headings for days starting at Sunday
			weekHeader: "Wk", // Column header for week of the year
			dateFormat: "mm/dd/yy", // See format options on parseDate
			firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
			isRTL: false, // True if right-to-left language, false if left-to-right
			showMonthAfterYear: false, // True if the year select precedes month, false for month then year
			yearSuffix: "" // Additional text to append to the year in the month headers
		};
		this._defaults = { // Global defaults for all the date picker instances
			showOn: "focus", // "focus" for popup on focus,
				// "button" for trigger button, or "both" for either
			showAnim: "fadeIn", // Name of jQuery animation for popup
			showOptions: {}, // Options for enhanced animations
			defaultDate: null, // Used when field is blank: actual date,
				// +/-number for offset from today, null for today
			appendText: "", // Display text following the input box, e.g. showing the format
			buttonText: "...", // Text for trigger button
			buttonImage: "", // URL for trigger button image
			buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
			hideIfNoPrevNext: false, // True to hide next/previous month links
				// if not applicable, false to just disable them
			navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
			gotoCurrent: false, // True if today link goes back to current selection instead
			changeMonth: false, // True if month can be selected directly, false if only prev/next
			changeYear: false, // True if year can be selected directly, false if only prev/next
			yearRange: "c-10:c+10", // Range of years to display in drop-down,
				// either relative to today's year (-nn:+nn), relative to currently displayed year
				// (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
			showOtherMonths: false, // True to show dates in other months, false to leave blank
			selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
			showWeek: false, // True to show week of the year, false to not show it
			calculateWeek: this.iso8601Week, // How to calculate the week of the year,
				// takes a Date and returns the number of the week for it
			shortYearCutoff: "+10", // Short year values < this are in the current century,
				// > this are in the previous century,
				// string value starting with "+" for current year + value
			minDate: null, // The earliest selectable date, or null for no limit
			maxDate: null, // The latest selectable date, or null for no limit
			duration: "fast", // Duration of display/closure
			beforeShowDay: null, // Function that takes a date and returns an array with
				// [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
				// [2] = cell title (optional), e.g. $.datepicker.noWeekends
			beforeShow: null, // Function that takes an input field and
				// returns a set of custom settings for the date picker
			onSelect: null, // Define a callback function when a date is selected
			onChangeMonthYear: null, // Define a callback function when the month or year is changed
			onClose: null, // Define a callback function when the datepicker is closed
			numberOfMonths: 1, // Number of months to show at a time
			showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
			stepMonths: 1, // Number of months to step back/forward
			stepBigMonths: 12, // Number of months to step back/forward for the big links
			altField: "", // Selector for an alternate field to store selected dates into
			altFormat: "", // The date format to use for the alternate field
			constrainInput: true, // The input is constrained by the current date format
			showButtonPanel: false, // True to show button panel, false to not show it
			autoSize: false, // True to size the input for the date format, false to leave as is
			disabled: false // The initial disabled state
		};
		$.extend(this._defaults, this.regional[""]);
		this.dpDiv = bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
	}

	$.extend(Datepicker.prototype, {
		/* Class name added to elements to indicate already configured with a date picker. */
		markerClassName: "hasDatepicker",

		//Keep track of the maximum number of rows displayed (see #7043)
		maxRows: 4,

		// TODO rename to "widget" when switching to widget factory
		_widgetDatepicker: function() {
			return this.dpDiv;
		},

		/* Override the default settings for all instances of the date picker.
		 * @param  settings  object - the new settings to use as defaults (anonymous object)
		 * @return the manager object
		 */
		setDefaults: function(settings) {
			extendRemove(this._defaults, settings || {});
			return this;
		},

		/* Attach the date picker to a jQuery selection.
		 * @param  target	element - the target input field or division or span
		 * @param  settings  object - the new settings to use for this date picker instance (anonymous)
		 */
		_attachDatepicker: function(target, settings) {
			var nodeName, inline, inst;
			nodeName = target.nodeName.toLowerCase();
			inline = (nodeName === "div" || nodeName === "span");
			if (!target.id) {
				this.uuid += 1;
				target.id = "dp" + this.uuid;
			}
			inst = this._newInst($(target), inline);
			inst.settings = $.extend({}, settings || {});
			if (nodeName === "input") {
				this._connectDatepicker(target, inst);
			} else if (inline) {
				this._inlineDatepicker(target, inst);
			}
		},

		/* Create a new instance object. */
		_newInst: function(target, inline) {
			var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"); // escape jQuery meta chars
			return {id: id, input: target, // associated target
				selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
				drawMonth: 0, drawYear: 0, // month being drawn
				inline: inline, // is datepicker inline or not
				dpDiv: (!inline ? this.dpDiv : // presentation div
				bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")))};
		},

		/* Attach the date picker to an input field. */
		_connectDatepicker: function(target, inst) {
			var input = $(target);
			inst.append = $([]);
			inst.trigger = $([]);
			if (input.hasClass(this.markerClassName)) {
				return;
			}
			this._attachments(input, inst);
			input.addClass(this.markerClassName).keydown(this._doKeyDown).
				keypress(this._doKeyPress).keyup(this._doKeyUp);
			this._autoSize(inst);
			$.data(target, PROP_NAME, inst);
			//If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
			if( inst.settings.disabled ) {
				this._disableDatepicker( target );
			}
		},

		/* Make attachments based on settings. */
		_attachments: function(input, inst) {
			var showOn, buttonText, buttonImage,
				appendText = this._get(inst, "appendText"),
				isRTL = this._get(inst, "isRTL");

			if (inst.append) {
				inst.append.remove();
			}
			if (appendText) {
				inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
				input[isRTL ? "before" : "after"](inst.append);
			}

			input.unbind("focus", this._showDatepicker);

			if (inst.trigger) {
				inst.trigger.remove();
			}

			showOn = this._get(inst, "showOn");
			if (showOn === "focus" || showOn === "both") { // pop-up date picker when in the marked field
				input.focus(this._showDatepicker);
			}
			if (showOn === "button" || showOn === "both") { // pop-up date picker when button clicked
				buttonText = this._get(inst, "buttonText");
				buttonImage = this._get(inst, "buttonImage");
				inst.trigger = $(this._get(inst, "buttonImageOnly") ?
					$("<img/>").addClass(this._triggerClass).
						attr({ src: buttonImage, alt: buttonText, title: buttonText }) :
					$("<button type='button'></button>").addClass(this._triggerClass).
						html(!buttonImage ? buttonText : $("<img/>").attr(
						{ src:buttonImage, alt:buttonText, title:buttonText })));
				input[isRTL ? "before" : "after"](inst.trigger);
				inst.trigger.click(function() {
					if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {
						$.datepicker._hideDatepicker();
					} else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
						$.datepicker._hideDatepicker();
						$.datepicker._showDatepicker(input[0]);
					} else {
						$.datepicker._showDatepicker(input[0]);
					}
					return false;
				});
			}
		},

		/* Apply the maximum length for the date format. */
		_autoSize: function(inst) {
			if (this._get(inst, "autoSize") && !inst.inline) {
				var findMax, max, maxI, i,
					date = new Date(2009, 12 - 1, 20), // Ensure double digits
					dateFormat = this._get(inst, "dateFormat");

				if (dateFormat.match(/[DM]/)) {
					findMax = function(names) {
						max = 0;
						maxI = 0;
						for (i = 0; i < names.length; i++) {
							if (names[i].length > max) {
								max = names[i].length;
								maxI = i;
							}
						}
						return maxI;
					};
					date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?
						"monthNames" : "monthNamesShort"))));
					date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?
						"dayNames" : "dayNamesShort"))) + 20 - date.getDay());
				}
				inst.input.attr("size", this._formatDate(inst, date).length);
			}
		},

		/* Attach an inline date picker to a div. */
		_inlineDatepicker: function(target, inst) {
			var divSpan = $(target);
			if (divSpan.hasClass(this.markerClassName)) {
				return;
			}
			divSpan.addClass(this.markerClassName).append(inst.dpDiv);
			$.data(target, PROP_NAME, inst);
			this._setDate(inst, this._getDefaultDate(inst), true);
			this._updateDatepicker(inst);
			this._updateAlternate(inst);
			//If disabled option is true, disable the datepicker before showing it (see ticket #5665)
			if( inst.settings.disabled ) {
				this._disableDatepicker( target );
			}
			// Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
			// http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
			inst.dpDiv.css( "display", "block" );
		},

		/* Pop-up the date picker in a "dialog" box.
		 * @param  input element - ignored
		 * @param  date	string or Date - the initial date to display
		 * @param  onSelect  function - the function to call when a date is selected
		 * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
		 * @param  pos int[2] - coordinates for the dialog's position within the screen or
		 *					event - with x/y coordinates or
		 *					leave empty for default (screen centre)
		 * @return the manager object
		 */
		_dialogDatepicker: function(input, date, onSelect, settings, pos) {
			var id, browserWidth, browserHeight, scrollX, scrollY,
				inst = this._dialogInst; // internal instance

			if (!inst) {
				this.uuid += 1;
				id = "dp" + this.uuid;
				this._dialogInput = $("<input type='text' id='" + id +
					"' style='position: absolute; top: -100px; width: 0px;'/>");
				this._dialogInput.keydown(this._doKeyDown);
				$("body").append(this._dialogInput);
				inst = this._dialogInst = this._newInst(this._dialogInput, false);
				inst.settings = {};
				$.data(this._dialogInput[0], PROP_NAME, inst);
			}
			extendRemove(inst.settings, settings || {});
			date = (date && date.constructor === Date ? this._formatDate(inst, date) : date);
			this._dialogInput.val(date);

			this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
			if (!this._pos) {
				browserWidth = document.documentElement.clientWidth;
				browserHeight = document.documentElement.clientHeight;
				scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
				scrollY = document.documentElement.scrollTop || document.body.scrollTop;
				this._pos = // should use actual width/height below
					[(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
			}

			// move input on screen for focus, but hidden behind dialog
			this._dialogInput.css("left", (this._pos[0] + 20) + "px").css("top", this._pos[1] + "px");
			inst.settings.onSelect = onSelect;
			this._inDialog = true;
			this.dpDiv.addClass(this._dialogClass);
			this._showDatepicker(this._dialogInput[0]);
			if ($.blockUI) {
				$.blockUI(this.dpDiv);
			}
			$.data(this._dialogInput[0], PROP_NAME, inst);
			return this;
		},

		/* Detach a datepicker from its control.
		 * @param  target	element - the target input field or division or span
		 */
		_destroyDatepicker: function(target) {
			var nodeName,
				$target = $(target),
				inst = $.data(target, PROP_NAME);

			if (!$target.hasClass(this.markerClassName)) {
				return;
			}

			nodeName = target.nodeName.toLowerCase();
			$.removeData(target, PROP_NAME);
			if (nodeName === "input") {
				inst.append.remove();
				inst.trigger.remove();
				$target.removeClass(this.markerClassName).
					unbind("focus", this._showDatepicker).
					unbind("keydown", this._doKeyDown).
					unbind("keypress", this._doKeyPress).
					unbind("keyup", this._doKeyUp);
			} else if (nodeName === "div" || nodeName === "span") {
				$target.removeClass(this.markerClassName).empty();
			}
		},

		/* Enable the date picker to a jQuery selection.
		 * @param  target	element - the target input field or division or span
		 */
		_enableDatepicker: function(target) {
			var nodeName, inline,
				$target = $(target),
				inst = $.data(target, PROP_NAME);

			if (!$target.hasClass(this.markerClassName)) {
				return;
			}

			nodeName = target.nodeName.toLowerCase();
			if (nodeName === "input") {
				target.disabled = false;
				inst.trigger.filter("button").
					each(function() { this.disabled = false; }).end().
					filter("img").css({opacity: "1.0", cursor: ""});
			} else if (nodeName === "div" || nodeName === "span") {
				inline = $target.children("." + this._inlineClass);
				inline.children().removeClass("ui-state-disabled");
				inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
					prop("disabled", false);
			}
			this._disabledInputs = $.map(this._disabledInputs,
				function(value) { return (value === target ? null : value); }); // delete entry
		},

		/* Disable the date picker to a jQuery selection.
		 * @param  target	element - the target input field or division or span
		 */
		_disableDatepicker: function(target) {
			var nodeName, inline,
				$target = $(target),
				inst = $.data(target, PROP_NAME);

			if (!$target.hasClass(this.markerClassName)) {
				return;
			}

			nodeName = target.nodeName.toLowerCase();
			if (nodeName === "input") {
				target.disabled = true;
				inst.trigger.filter("button").
					each(function() { this.disabled = true; }).end().
					filter("img").css({opacity: "0.5", cursor: "default"});
			} else if (nodeName === "div" || nodeName === "span") {
				inline = $target.children("." + this._inlineClass);
				inline.children().addClass("ui-state-disabled");
				inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
					prop("disabled", true);
			}
			this._disabledInputs = $.map(this._disabledInputs,
				function(value) { return (value === target ? null : value); }); // delete entry
			this._disabledInputs[this._disabledInputs.length] = target;
		},

		/* Is the first field in a jQuery collection disabled as a datepicker?
		 * @param  target	element - the target input field or division or span
		 * @return boolean - true if disabled, false if enabled
		 */
		_isDisabledDatepicker: function(target) {
			if (!target) {
				return false;
			}
			for (var i = 0; i < this._disabledInputs.length; i++) {
				if (this._disabledInputs[i] === target) {
					return true;
				}
			}
			return false;
		},

		/* Retrieve the instance data for the target control.
		 * @param  target  element - the target input field or division or span
		 * @return  object - the associated instance data
		 * @throws  error if a jQuery problem getting data
		 */
		_getInst: function(target) {
			try {
				return $.data(target, PROP_NAME);
			}
			catch (err) {
				throw "Missing instance data for this datepicker";
			}
		},

		/* Update or retrieve the settings for a date picker attached to an input field or division.
		 * @param  target  element - the target input field or division or span
		 * @param  name	object - the new settings to update or
		 *				string - the name of the setting to change or retrieve,
		 *				when retrieving also "all" for all instance settings or
		 *				"defaults" for all global defaults
		 * @param  value   any - the new value for the setting
		 *				(omit if above is an object or to retrieve a value)
		 */
		_optionDatepicker: function(target, name, value) {
			var settings, date, minDate, maxDate,
				inst = this._getInst(target);

			if (arguments.length === 2 && typeof name === "string") {
				return (name === "defaults" ? $.extend({}, $.datepicker._defaults) :
					(inst ? (name === "all" ? $.extend({}, inst.settings) :
					this._get(inst, name)) : null));
			}

			settings = name || {};
			if (typeof name === "string") {
				settings = {};
				settings[name] = value;
			}

			if (inst) {
				if (this._curInst === inst) {
					this._hideDatepicker();
				}

				date = this._getDateDatepicker(target, true);
				minDate = this._getMinMaxDate(inst, "min");
				maxDate = this._getMinMaxDate(inst, "max");
				extendRemove(inst.settings, settings);
				// reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
				if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {
					inst.settings.minDate = this._formatDate(inst, minDate);
				}
				if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {
					inst.settings.maxDate = this._formatDate(inst, maxDate);
				}
				if ( "disabled" in settings ) {
					if ( settings.disabled ) {
						this._disableDatepicker(target);
					} else {
						this._enableDatepicker(target);
					}
				}
				this._attachments($(target), inst);
				this._autoSize(inst);
				this._setDate(inst, date);
				this._updateAlternate(inst);
				this._updateDatepicker(inst);
			}
		},

		// change method deprecated
		_changeDatepicker: function(target, name, value) {
			this._optionDatepicker(target, name, value);
		},

		/* Redraw the date picker attached to an input field or division.
		 * @param  target  element - the target input field or division or span
		 */
		_refreshDatepicker: function(target) {
			var inst = this._getInst(target);
			if (inst) {
				this._updateDatepicker(inst);
			}
		},

		/* Set the dates for a jQuery selection.
		 * @param  target element - the target input field or division or span
		 * @param  date	Date - the new date
		 */
		_setDateDatepicker: function(target, date) {
			var inst = this._getInst(target);
			if (inst) {
				this._setDate(inst, date);
				this._updateDatepicker(inst);
				this._updateAlternate(inst);
			}
		},

		/* Get the date(s) for the first entry in a jQuery selection.
		 * @param  target element - the target input field or division or span
		 * @param  noDefault boolean - true if no default date is to be used
		 * @return Date - the current date
		 */
		_getDateDatepicker: function(target, noDefault) {
			var inst = this._getInst(target);
			if (inst && !inst.inline) {
				this._setDateFromField(inst, noDefault);
			}
			return (inst ? this._getDate(inst) : null);
		},

		/* Handle keystrokes. */
		_doKeyDown: function(event) {
			var onSelect, dateStr, sel,
				inst = $.datepicker._getInst(event.target),
				handled = true,
				isRTL = inst.dpDiv.is(".ui-datepicker-rtl");

			inst._keyEvent = true;
			if ($.datepicker._datepickerShowing) {
				switch (event.keyCode) {
					case 9: $.datepicker._hideDatepicker();
							handled = false;
							break; // hide on tab out
					case 13: sel = $("td." + $.datepicker._dayOverClass + ":not(." +
										$.datepicker._currentClass + ")", inst.dpDiv);
							if (sel[0]) {
								$.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
							}

							onSelect = $.datepicker._get(inst, "onSelect");
							if (onSelect) {
								dateStr = $.datepicker._formatDate(inst);

								// trigger custom callback
								onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
							} else {
								$.datepicker._hideDatepicker();
							}

							return false; // don't submit the form
					case 27: $.datepicker._hideDatepicker();
							break; // hide on escape
					case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
								-$.datepicker._get(inst, "stepBigMonths") :
								-$.datepicker._get(inst, "stepMonths")), "M");
							break; // previous month/year on page up/+ ctrl
					case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
								+$.datepicker._get(inst, "stepBigMonths") :
								+$.datepicker._get(inst, "stepMonths")), "M");
							break; // next month/year on page down/+ ctrl
					case 35: if (event.ctrlKey || event.metaKey) {
								$.datepicker._clearDate(event.target);
							}
							handled = event.ctrlKey || event.metaKey;
							break; // clear on ctrl or command +end
					case 36: if (event.ctrlKey || event.metaKey) {
								$.datepicker._gotoToday(event.target);
							}
							handled = event.ctrlKey || event.metaKey;
							break; // current on ctrl or command +home
					case 37: if (event.ctrlKey || event.metaKey) {
								$.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), "D");
							}
							handled = event.ctrlKey || event.metaKey;
							// -1 day on ctrl or command +left
							if (event.originalEvent.altKey) {
								$.datepicker._adjustDate(event.target, (event.ctrlKey ?
									-$.datepicker._get(inst, "stepBigMonths") :
									-$.datepicker._get(inst, "stepMonths")), "M");
							}
							// next month/year on alt +left on Mac
							break;
					case 38: if (event.ctrlKey || event.metaKey) {
								$.datepicker._adjustDate(event.target, -7, "D");
							}
							handled = event.ctrlKey || event.metaKey;
							break; // -1 week on ctrl or command +up
					case 39: if (event.ctrlKey || event.metaKey) {
								$.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), "D");
							}
							handled = event.ctrlKey || event.metaKey;
							// +1 day on ctrl or command +right
							if (event.originalEvent.altKey) {
								$.datepicker._adjustDate(event.target, (event.ctrlKey ?
									+$.datepicker._get(inst, "stepBigMonths") :
									+$.datepicker._get(inst, "stepMonths")), "M");
							}
							// next month/year on alt +right
							break;
					case 40: if (event.ctrlKey || event.metaKey) {
								$.datepicker._adjustDate(event.target, +7, "D");
							}
							handled = event.ctrlKey || event.metaKey;
							break; // +1 week on ctrl or command +down
					default: handled = false;
				}
			} else if (event.keyCode === 36 && event.ctrlKey) { // display the date picker on ctrl+home
				$.datepicker._showDatepicker(this);
			} else {
				handled = false;
			}

			if (handled) {
				event.preventDefault();
				event.stopPropagation();
			}
		},

		/* Filter entered characters - based on date format. */
		_doKeyPress: function(event) {
			var chars, chr,
				inst = $.datepicker._getInst(event.target);

			if ($.datepicker._get(inst, "constrainInput")) {
				chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
				chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
				return event.ctrlKey || event.metaKey || (chr < " " || !chars || chars.indexOf(chr) > -1);
			}
		},

		/* Synchronise manual entry and field/alternate field. */
		_doKeyUp: function(event) {
			var date,
				inst = $.datepicker._getInst(event.target);

			if (inst.input.val() !== inst.lastVal) {
				try {
					date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
						(inst.input ? inst.input.val() : null),
						$.datepicker._getFormatConfig(inst));

					if (date) { // only if valid
						$.datepicker._setDateFromField(inst);
						$.datepicker._updateAlternate(inst);
						$.datepicker._updateDatepicker(inst);
					}
				}
				catch (err) {
				}
			}
			return true;
		},

		/* Pop-up the date picker for a given input field.
		 * If false returned from beforeShow event handler do not show.
		 * @param  input  element - the input field attached to the date picker or
		 *					event - if triggered by focus
		 */
		_showDatepicker: function(input) {
			input = input.target || input;
			if (input.nodeName.toLowerCase() !== "input") { // find from button/image trigger
				input = $("input", input.parentNode)[0];
			}

			if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) { // already here
				return;
			}

			var inst, beforeShow, beforeShowSettings, isFixed,
				offset, showAnim, duration;

			inst = $.datepicker._getInst(input);
			if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
				$.datepicker._curInst.dpDiv.stop(true, true);
				if ( inst && $.datepicker._datepickerShowing ) {
					$.datepicker._hideDatepicker( $.datepicker._curInst.input[0] );
				}
			}

			beforeShow = $.datepicker._get(inst, "beforeShow");
			beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
			if(beforeShowSettings === false){
				return;
			}
			extendRemove(inst.settings, beforeShowSettings);

			inst.lastVal = null;
			$.datepicker._lastInput = input;
			$.datepicker._setDateFromField(inst);

			if ($.datepicker._inDialog) { // hide cursor
				input.value = "";
			}
			if (!$.datepicker._pos) { // position below input
				$.datepicker._pos = $.datepicker._findPos(input);
				$.datepicker._pos[1] += input.offsetHeight; // add the height
			}

			isFixed = false;
			$(input).parents().each(function() {
				isFixed |= $(this).css("position") === "fixed";
				return !isFixed;
			});

			offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};
			$.datepicker._pos = null;
			//to avoid flashes on Firefox
			inst.dpDiv.empty();
			// determine sizing offscreen
			inst.dpDiv.css({position: "absolute", display: "block", top: "-1000px"});
			$.datepicker._updateDatepicker(inst);
			// fix width for dynamic number of date pickers
			// and adjust position before showing
			offset = $.datepicker._checkOffset(inst, offset, isFixed);
			inst.dpDiv.css({position: ($.datepicker._inDialog && $.blockUI ?
				"static" : (isFixed ? "fixed" : "absolute")), display: "none",
				left: offset.left + "px", top: offset.top + "px"});

			if (!inst.inline) {
				showAnim = $.datepicker._get(inst, "showAnim");
				duration = $.datepicker._get(inst, "duration");
				inst.dpDiv.zIndex($(input).zIndex()+1);
				$.datepicker._datepickerShowing = true;

				if ( $.effects && $.effects.effect[ showAnim ] ) {
					inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration);
				} else {
					inst.dpDiv[showAnim || "show"](showAnim ? duration : null);
				}

				if ( $.datepicker._shouldFocusInput( inst ) ) {
					inst.input.focus();
				}

				$.datepicker._curInst = inst;
			}
		},

		/* Generate the date picker content. */
		_updateDatepicker: function(inst) {
			this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
			instActive = inst; // for delegate hover events
			inst.dpDiv.empty().append(this._generateHTML(inst));
			this._attachHandlers(inst);
			inst.dpDiv.find("." + this._dayOverClass + " a").mouseover();

			var origyearshtml,
				numMonths = this._getNumberOfMonths(inst),
				cols = numMonths[1],
				width = 17;

			inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
			if (cols > 1) {
				inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", (width * cols) + "em");
			}
			inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") +
				"Class"]("ui-datepicker-multi");
			inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") +
				"Class"]("ui-datepicker-rtl");

			if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {
				inst.input.focus();
			}

			// deffered render of the years select (to avoid flashes on Firefox)
			if( inst.yearshtml ){
				origyearshtml = inst.yearshtml;
				setTimeout(function(){
					//assure that inst.yearshtml didn't change.
					if( origyearshtml === inst.yearshtml && inst.yearshtml ){
						inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);
					}
					origyearshtml = inst.yearshtml = null;
				}, 0);
			}
		},

		// #6694 - don't focus the input if it's already focused
		// this breaks the change event in IE
		// Support: IE and jQuery <1.9
		_shouldFocusInput: function( inst ) {
			return inst.input && inst.input.is( ":visible" ) && !inst.input.is( ":disabled" ) && !inst.input.is( ":focus" );
		},

		/* Check positioning to remain on screen. */
		_checkOffset: function(inst, offset, isFixed) {
			var dpWidth = inst.dpDiv.outerWidth(),
				dpHeight = inst.dpDiv.outerHeight(),
				inputWidth = inst.input ? inst.input.outerWidth() : 0,
				inputHeight = inst.input ? inst.input.outerHeight() : 0,
				viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),
				viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());

			offset.left -= (this._get(inst, "isRTL") ? (dpWidth - inputWidth) : 0);
			offset.left -= (isFixed && offset.left === inst.input.offset().left) ? $(document).scrollLeft() : 0;
			offset.top -= (isFixed && offset.top === (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;

			// now check if datepicker is showing outside window viewport - move to a better place if so.
			offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
				Math.abs(offset.left + dpWidth - viewWidth) : 0);
			offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
				Math.abs(dpHeight + inputHeight) : 0);

			return offset;
		},

		/* Find an object's position on the screen. */
		_findPos: function(obj) {
			var position,
				inst = this._getInst(obj),
				isRTL = this._get(inst, "isRTL");

			while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {
				obj = obj[isRTL ? "previousSibling" : "nextSibling"];
			}

			position = $(obj).offset();
			return [position.left, position.top];
		},

		/* Hide the date picker from view.
		 * @param  input  element - the input field attached to the date picker
		 */
		_hideDatepicker: function(input) {
			var showAnim, duration, postProcess, onClose,
				inst = this._curInst;

			if (!inst || (input && inst !== $.data(input, PROP_NAME))) {
				return;
			}

			if (this._datepickerShowing) {
				showAnim = this._get(inst, "showAnim");
				duration = this._get(inst, "duration");
				postProcess = function() {
					$.datepicker._tidyDialog(inst);
				};

				// DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
				if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {
					inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess);
				} else {
					inst.dpDiv[(showAnim === "slideDown" ? "slideUp" :
						(showAnim === "fadeIn" ? "fadeOut" : "hide"))]((showAnim ? duration : null), postProcess);
				}

				if (!showAnim) {
					postProcess();
				}
				this._datepickerShowing = false;

				onClose = this._get(inst, "onClose");
				if (onClose) {
					onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : ""), inst]);
				}

				this._lastInput = null;
				if (this._inDialog) {
					this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" });
					if ($.blockUI) {
						$.unblockUI();
						$("body").append(this.dpDiv);
					}
				}
				this._inDialog = false;
			}
		},

		/* Tidy up after a dialog display. */
		_tidyDialog: function(inst) {
			inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");
		},

		/* Close date picker if clicked elsewhere. */
		_checkExternalClick: function(event) {
			if (!$.datepicker._curInst) {
				return;
			}

			var $target = $(event.target),
				inst = $.datepicker._getInst($target[0]);

			if ( ( ( $target[0].id !== $.datepicker._mainDivId &&
					$target.parents("#" + $.datepicker._mainDivId).length === 0 &&
					!$target.hasClass($.datepicker.markerClassName) &&
					!$target.closest("." + $.datepicker._triggerClass).length &&
					$.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) ) ) ||
				( $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst ) ) {
					$.datepicker._hideDatepicker();
			}
		},

		/* Adjust one of the date sub-fields. */
		_adjustDate: function(id, offset, period) {
			var target = $(id),
				inst = this._getInst(target[0]);

			if (this._isDisabledDatepicker(target[0])) {
				return;
			}
			this._adjustInstDate(inst, offset +
				(period === "M" ? this._get(inst, "showCurrentAtPos") : 0), // undo positioning
				period);
			this._updateDatepicker(inst);
		},

		/* Action for current link. */
		_gotoToday: function(id) {
			var date,
				target = $(id),
				inst = this._getInst(target[0]);

			if (this._get(inst, "gotoCurrent") && inst.currentDay) {
				inst.selectedDay = inst.currentDay;
				inst.drawMonth = inst.selectedMonth = inst.currentMonth;
				inst.drawYear = inst.selectedYear = inst.currentYear;
			} else {
				date = new Date();
				inst.selectedDay = date.getDate();
				inst.drawMonth = inst.selectedMonth = date.getMonth();
				inst.drawYear = inst.selectedYear = date.getFullYear();
			}
			this._notifyChange(inst);
			this._adjustDate(target);
		},

		/* Action for selecting a new month/year. */
		_selectMonthYear: function(id, select, period) {
			var target = $(id),
				inst = this._getInst(target[0]);

			inst["selected" + (period === "M" ? "Month" : "Year")] =
			inst["draw" + (period === "M" ? "Month" : "Year")] =
				parseInt(select.options[select.selectedIndex].value,10);

			this._notifyChange(inst);
			this._adjustDate(target);
		},

		/* Action for selecting a day. */
		_selectDay: function(id, month, year, td) {
			var inst,
				target = $(id);

			if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
				return;
			}

			inst = this._getInst(target[0]);
			inst.selectedDay = inst.currentDay = $("a", td).html();
			inst.selectedMonth = inst.currentMonth = month;
			inst.selectedYear = inst.currentYear = year;
			this._selectDate(id, this._formatDate(inst,
				inst.currentDay, inst.currentMonth, inst.currentYear));
		},

		/* Erase the input field and hide the date picker. */
		_clearDate: function(id) {
			var target = $(id);
			this._selectDate(target, "");
		},

		/* Update the input field with the selected date. */
		_selectDate: function(id, dateStr) {
			var onSelect,
				target = $(id),
				inst = this._getInst(target[0]);

			dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
			if (inst.input) {
				inst.input.val(dateStr);
			}
			this._updateAlternate(inst);

			onSelect = this._get(inst, "onSelect");
			if (onSelect) {
				onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback
			} else if (inst.input) {
				inst.input.trigger("change"); // fire the change event
			}

			if (inst.inline){
				this._updateDatepicker(inst);
			} else {
				this._hideDatepicker();
				this._lastInput = inst.input[0];
				if (typeof(inst.input[0]) !== "object") {
					inst.input.focus(); // restore focus
				}
				this._lastInput = null;
			}
		},

		/* Update any alternate field to synchronise with the main field. */
		_updateAlternate: function(inst) {
			var altFormat, date, dateStr,
				altField = this._get(inst, "altField");

			if (altField) { // update alternate field too
				altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
				date = this._getDate(inst);
				dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
				$(altField).each(function() { $(this).val(dateStr); });
			}
		},

		/* Set as beforeShowDay function to prevent selection of weekends.
		 * @param  date  Date - the date to customise
		 * @return [boolean, string] - is this date selectable?, what is its CSS class?
		 */
		noWeekends: function(date) {
			var day = date.getDay();
			return [(day > 0 && day < 6), ""];
		},

		/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
		 * @param  date  Date - the date to get the week for
		 * @return  number - the number of the week within the year that contains this date
		 */
		iso8601Week: function(date) {
			var time,
				checkDate = new Date(date.getTime());

			// Find Thursday of this week starting on Monday
			checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));

			time = checkDate.getTime();
			checkDate.setMonth(0); // Compare with Jan 1
			checkDate.setDate(1);
			return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
		},

		/* Parse a string value into a date object.
		 * See formatDate below for the possible formats.
		 *
		 * @param  format string - the expected format of the date
		 * @param  value string - the date in the above format
		 * @param  settings Object - attributes include:
		 *					shortYearCutoff  number - the cutoff year for determining the century (optional)
		 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
		 *					dayNames		string[7] - names of the days from Sunday (optional)
		 *					monthNamesShort string[12] - abbreviated names of the months (optional)
		 *					monthNames		string[12] - names of the months (optional)
		 * @return  Date - the extracted date value or null if value is blank
		 */
		parseDate: function (format, value, settings) {
			if (format == null || value == null) {
				throw "Invalid arguments";
			}

			value = (typeof value === "object" ? value.toString() : value + "");
			if (value === "") {
				return null;
			}

			var iFormat, dim, extra,
				iValue = 0,
				shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,
				shortYearCutoff = (typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp :
					new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10)),
				dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
				dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
				monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
				monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
				year = -1,
				month = -1,
				day = -1,
				doy = -1,
				literal = false,
				date,
				// Check whether a format character is doubled
				lookAhead = function(match) {
					var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
					if (matches) {
						iFormat++;
					}
					return matches;
				},
				// Extract a number from the string value
				getNumber = function(match) {
					var isDoubled = lookAhead(match),
						size = (match === "@" ? 14 : (match === "!" ? 20 :
						(match === "y" && isDoubled ? 4 : (match === "o" ? 3 : 2)))),
						digits = new RegExp("^\\d{1," + size + "}"),
						num = value.substring(iValue).match(digits);
					if (!num) {
						throw "Missing number at position " + iValue;
					}
					iValue += num[0].length;
					return parseInt(num[0], 10);
				},
				// Extract a name from the string value and convert to an index
				getName = function(match, shortNames, longNames) {
					var index = -1,
						names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {
							return [ [k, v] ];
						}).sort(function (a, b) {
							return -(a[1].length - b[1].length);
						});

					$.each(names, function (i, pair) {
						var name = pair[1];
						if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
							index = pair[0];
							iValue += name.length;
							return false;
						}
					});
					if (index !== -1) {
						return index + 1;
					} else {
						throw "Unknown name at position " + iValue;
					}
				},
				// Confirm that a literal character matches the string value
				checkLiteral = function() {
					if (value.charAt(iValue) !== format.charAt(iFormat)) {
						throw "Unexpected literal at position " + iValue;
					}
					iValue++;
				};

			for (iFormat = 0; iFormat < format.length; iFormat++) {
				if (literal) {
					if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
						literal = false;
					} else {
						checkLiteral();
					}
				} else {
					switch (format.charAt(iFormat)) {
						case "d":
							day = getNumber("d");
							break;
						case "D":
							getName("D", dayNamesShort, dayNames);
							break;
						case "o":
							doy = getNumber("o");
							break;
						case "m":
							month = getNumber("m");
							break;
						case "M":
							month = getName("M", monthNamesShort, monthNames);
							break;
						case "y":
							year = getNumber("y");
							break;
						case "@":
							date = new Date(getNumber("@"));
							year = date.getFullYear();
							month = date.getMonth() + 1;
							day = date.getDate();
							break;
						case "!":
							date = new Date((getNumber("!") - this._ticksTo1970) / 10000);
							year = date.getFullYear();
							month = date.getMonth() + 1;
							day = date.getDate();
							break;
						case "'":
							if (lookAhead("'")){
								checkLiteral();
							} else {
								literal = true;
							}
							break;
						default:
							checkLiteral();
					}
				}
			}

			if (iValue < value.length){
				extra = value.substr(iValue);
				if (!/^\s+/.test(extra)) {
					throw "Extra/unparsed characters found in date: " + extra;
				}
			}

			if (year === -1) {
				year = new Date().getFullYear();
			} else if (year < 100) {
				year += new Date().getFullYear() - new Date().getFullYear() % 100 +
					(year <= shortYearCutoff ? 0 : -100);
			}

			if (doy > -1) {
				month = 1;
				day = doy;
				do {
					dim = this._getDaysInMonth(year, month - 1);
					if (day <= dim) {
						break;
					}
					month++;
					day -= dim;
				} while (true);
			}

			date = this._daylightSavingAdjust(new Date(year, month - 1, day));
			if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
				throw "Invalid date"; // E.g. 31/02/00
			}
			return date;
		},

		/* Standard date formats. */
		ATOM: "yy-mm-dd", // RFC 3339 (ISO 8601)
		COOKIE: "D, dd M yy",
		ISO_8601: "yy-mm-dd",
		RFC_822: "D, d M y",
		RFC_850: "DD, dd-M-y",
		RFC_1036: "D, d M y",
		RFC_1123: "D, d M yy",
		RFC_2822: "D, d M yy",
		RSS: "D, d M y", // RFC 822
		TICKS: "!",
		TIMESTAMP: "@",
		W3C: "yy-mm-dd", // ISO 8601

		_ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
			Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),

		/* Format a date object into a string value.
		 * The format can be combinations of the following:
		 * d  - day of month (no leading zero)
		 * dd - day of month (two digit)
		 * o  - day of year (no leading zeros)
		 * oo - day of year (three digit)
		 * D  - day name short
		 * DD - day name long
		 * m  - month of year (no leading zero)
		 * mm - month of year (two digit)
		 * M  - month name short
		 * MM - month name long
		 * y  - year (two digit)
		 * yy - year (four digit)
		 * @ - Unix timestamp (ms since 01/01/1970)
		 * ! - Windows ticks (100ns since 01/01/0001)
		 * "..." - literal text
		 * '' - single quote
		 *
		 * @param  format string - the desired format of the date
		 * @param  date Date - the date value to format
		 * @param  settings Object - attributes include:
		 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
		 *					dayNames		string[7] - names of the days from Sunday (optional)
		 *					monthNamesShort string[12] - abbreviated names of the months (optional)
		 *					monthNames		string[12] - names of the months (optional)
		 * @return  string - the date in the above format
		 */
		formatDate: function (format, date, settings) {
			if (!date) {
				return "";
			}

			var iFormat,
				dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,
				dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,
				monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,
				monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,
				// Check whether a format character is doubled
				lookAhead = function(match) {
					var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
					if (matches) {
						iFormat++;
					}
					return matches;
				},
				// Format a number, with leading zero if necessary
				formatNumber = function(match, value, len) {
					var num = "" + value;
					if (lookAhead(match)) {
						while (num.length < len) {
							num = "0" + num;
						}
					}
					return num;
				},
				// Format a name, short or long as requested
				formatName = function(match, value, shortNames, longNames) {
					return (lookAhead(match) ? longNames[value] : shortNames[value]);
				},
				output = "",
				literal = false;

			if (date) {
				for (iFormat = 0; iFormat < format.length; iFormat++) {
					if (literal) {
						if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
							literal = false;
						} else {
							output += format.charAt(iFormat);
						}
					} else {
						switch (format.charAt(iFormat)) {
							case "d":
								output += formatNumber("d", date.getDate(), 2);
								break;
							case "D":
								output += formatName("D", date.getDay(), dayNamesShort, dayNames);
								break;
							case "o":
								output += formatNumber("o",
									Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
								break;
							case "m":
								output += formatNumber("m", date.getMonth() + 1, 2);
								break;
							case "M":
								output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
								break;
							case "y":
								output += (lookAhead("y") ? date.getFullYear() :
									(date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100);
								break;
							case "@":
								output += date.getTime();
								break;
							case "!":
								output += date.getTime() * 10000 + this._ticksTo1970;
								break;
							case "'":
								if (lookAhead("'")) {
									output += "'";
								} else {
									literal = true;
								}
								break;
							default:
								output += format.charAt(iFormat);
						}
					}
				}
			}
			return output;
		},

		/* Extract all possible characters from the date format. */
		_possibleChars: function (format) {
			var iFormat,
				chars = "",
				literal = false,
				// Check whether a format character is doubled
				lookAhead = function(match) {
					var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);
					if (matches) {
						iFormat++;
					}
					return matches;
				};

			for (iFormat = 0; iFormat < format.length; iFormat++) {
				if (literal) {
					if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
						literal = false;
					} else {
						chars += format.charAt(iFormat);
					}
				} else {
					switch (format.charAt(iFormat)) {
						case "d": case "m": case "y": case "@":
							chars += "0123456789";
							break;
						case "D": case "M":
							return null; // Accept anything
						case "'":
							if (lookAhead("'")) {
								chars += "'";
							} else {
								literal = true;
							}
							break;
						default:
							chars += format.charAt(iFormat);
					}
				}
			}
			return chars;
		},

		/* Get a setting value, defaulting if necessary. */
		_get: function(inst, name) {
			return inst.settings[name] !== undefined ?
				inst.settings[name] : this._defaults[name];
		},

		/* Parse existing date and initialise date picker. */
		_setDateFromField: function(inst, noDefault) {
			if (inst.input.val() === inst.lastVal) {
				return;
			}

			var dateFormat = this._get(inst, "dateFormat"),
				dates = inst.lastVal = inst.input ? inst.input.val() : null,
				defaultDate = this._getDefaultDate(inst),
				date = defaultDate,
				settings = this._getFormatConfig(inst);

			try {
				date = this.parseDate(dateFormat, dates, settings) || defaultDate;
			} catch (event) {
				dates = (noDefault ? "" : dates);
			}
			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
			inst.currentDay = (dates ? date.getDate() : 0);
			inst.currentMonth = (dates ? date.getMonth() : 0);
			inst.currentYear = (dates ? date.getFullYear() : 0);
			this._adjustInstDate(inst);
		},

		/* Retrieve the default date shown on opening. */
		_getDefaultDate: function(inst) {
			return this._restrictMinMax(inst,
				this._determineDate(inst, this._get(inst, "defaultDate"), new Date()));
		},

		/* A date may be specified as an exact value or a relative one. */
		_determineDate: function(inst, date, defaultDate) {
			var offsetNumeric = function(offset) {
					var date = new Date();
					date.setDate(date.getDate() + offset);
					return date;
				},
				offsetString = function(offset) {
					try {
						return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"),
							offset, $.datepicker._getFormatConfig(inst));
					}
					catch (e) {
						// Ignore
					}

					var date = (offset.toLowerCase().match(/^c/) ?
						$.datepicker._getDate(inst) : null) || new Date(),
						year = date.getFullYear(),
						month = date.getMonth(),
						day = date.getDate(),
						pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
						matches = pattern.exec(offset);

					while (matches) {
						switch (matches[2] || "d") {
							case "d" : case "D" :
								day += parseInt(matches[1],10); break;
							case "w" : case "W" :
								day += parseInt(matches[1],10) * 7; break;
							case "m" : case "M" :
								month += parseInt(matches[1],10);
								day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
								break;
							case "y": case "Y" :
								year += parseInt(matches[1],10);
								day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
								break;
						}
						matches = pattern.exec(offset);
					}
					return new Date(year, month, day);
				},
				newDate = (date == null || date === "" ? defaultDate : (typeof date === "string" ? offsetString(date) :
					(typeof date === "number" ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));

			newDate = (newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate);
			if (newDate) {
				newDate.setHours(0);
				newDate.setMinutes(0);
				newDate.setSeconds(0);
				newDate.setMilliseconds(0);
			}
			return this._daylightSavingAdjust(newDate);
		},

		/* Handle switch to/from daylight saving.
		 * Hours may be non-zero on daylight saving cut-over:
		 * > 12 when midnight changeover, but then cannot generate
		 * midnight datetime, so jump to 1AM, otherwise reset.
		 * @param  date  (Date) the date to check
		 * @return  (Date) the corrected date
		 */
		_daylightSavingAdjust: function(date) {
			if (!date) {
				return null;
			}
			date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
			return date;
		},

		/* Set the date(s) directly. */
		_setDate: function(inst, date, noChange) {
			var clear = !date,
				origMonth = inst.selectedMonth,
				origYear = inst.selectedYear,
				newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));

			inst.selectedDay = inst.currentDay = newDate.getDate();
			inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
			inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
			if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
				this._notifyChange(inst);
			}
			this._adjustInstDate(inst);
			if (inst.input) {
				inst.input.val(clear ? "" : this._formatDate(inst));
			}
		},

		/* Retrieve the date(s) directly. */
		_getDate: function(inst) {
			var startDate = (!inst.currentYear || (inst.input && inst.input.val() === "") ? null :
				this._daylightSavingAdjust(new Date(
				inst.currentYear, inst.currentMonth, inst.currentDay)));
				return startDate;
		},

		/* Attach the onxxx handlers.  These are declared statically so
		 * they work with static code transformers like Caja.
		 */
		_attachHandlers: function(inst) {
			var stepMonths = this._get(inst, "stepMonths"),
				id = "#" + inst.id.replace( /\\\\/g, "\\" );
			inst.dpDiv.find("[data-handler]").map(function () {
				var handler = {
					prev: function () {
						$.datepicker._adjustDate(id, -stepMonths, "M");
					},
					next: function () {
						$.datepicker._adjustDate(id, +stepMonths, "M");
					},
					hide: function () {
						$.datepicker._hideDatepicker();
					},
					today: function () {
						$.datepicker._gotoToday(id);
					},
					selectDay: function () {
						$.datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
						return false;
					},
					selectMonth: function () {
						$.datepicker._selectMonthYear(id, this, "M");
						return false;
					},
					selectYear: function () {
						$.datepicker._selectMonthYear(id, this, "Y");
						return false;
					}
				};
				$(this).bind(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
			});
		},

		/* Generate the HTML for the current state of the date picker. */
		_generateHTML: function(inst) {
			var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,
				controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,
				monthNames, monthNamesShort, beforeShowDay, showOtherMonths,
				selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,
				cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,
				printDate, dRow, tbody, daySettings, otherMonth, unselectable,
				tempDate = new Date(),
				today = this._daylightSavingAdjust(
					new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), // clear time
				isRTL = this._get(inst, "isRTL"),
				showButtonPanel = this._get(inst, "showButtonPanel"),
				hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"),
				navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"),
				numMonths = this._getNumberOfMonths(inst),
				showCurrentAtPos = this._get(inst, "showCurrentAtPos"),
				stepMonths = this._get(inst, "stepMonths"),
				isMultiMonth = (numMonths[0] !== 1 || numMonths[1] !== 1),
				currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :
					new Date(inst.currentYear, inst.currentMonth, inst.currentDay))),
				minDate = this._getMinMaxDate(inst, "min"),
				maxDate = this._getMinMaxDate(inst, "max"),
				drawMonth = inst.drawMonth - showCurrentAtPos,
				drawYear = inst.drawYear;

			if (drawMonth < 0) {
				drawMonth += 12;
				drawYear--;
			}
			if (maxDate) {
				maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
					maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
				maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
				while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
					drawMonth--;
					if (drawMonth < 0) {
						drawMonth = 11;
						drawYear--;
					}
				}
			}
			inst.drawMonth = drawMonth;
			inst.drawYear = drawYear;

			prevText = this._get(inst, "prevText");
			prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
				this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
				this._getFormatConfig(inst)));

			prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
				"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" +
				" title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" :
				(hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+ prevText +"'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "e" : "w") + "'>" + prevText + "</span></a>"));

			nextText = this._get(inst, "nextText");
			nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
				this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
				this._getFormatConfig(inst)));

			next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
				"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" +
				" title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" :
				(hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+ nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + ( isRTL ? "w" : "e") + "'>" + nextText + "</span></a>"));

			currentText = this._get(inst, "currentText");
			gotoDate = (this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today);
			currentText = (!navigationAsDateFormat ? currentText :
				this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));

			controls = (!inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" +
				this._get(inst, "closeText") + "</button>" : "");

			buttonPanel = (showButtonPanel) ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") +
				(this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" +
				">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";

			firstDay = parseInt(this._get(inst, "firstDay"),10);
			firstDay = (isNaN(firstDay) ? 0 : firstDay);

			showWeek = this._get(inst, "showWeek");
			dayNames = this._get(inst, "dayNames");
			dayNamesMin = this._get(inst, "dayNamesMin");
			monthNames = this._get(inst, "monthNames");
			monthNamesShort = this._get(inst, "monthNamesShort");
			beforeShowDay = this._get(inst, "beforeShowDay");
			showOtherMonths = this._get(inst, "showOtherMonths");
			selectOtherMonths = this._get(inst, "selectOtherMonths");
			defaultDate = this._getDefaultDate(inst);
			html = "";
			dow;
			for (row = 0; row < numMonths[0]; row++) {
				group = "";
				this.maxRows = 4;
				for (col = 0; col < numMonths[1]; col++) {
					selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
					cornerClass = " ui-corner-all";
					calender = "";
					if (isMultiMonth) {
						calender += "<div class='ui-datepicker-group";
						if (numMonths[1] > 1) {
							switch (col) {
								case 0: calender += " ui-datepicker-group-first";
									cornerClass = " ui-corner-" + (isRTL ? "right" : "left"); break;
								case numMonths[1]-1: calender += " ui-datepicker-group-last";
									cornerClass = " ui-corner-" + (isRTL ? "left" : "right"); break;
								default: calender += " ui-datepicker-group-middle"; cornerClass = ""; break;
							}
						}
						calender += "'>";
					}
					calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" +
						(/all|left/.test(cornerClass) && row === 0 ? (isRTL ? next : prev) : "") +
						(/all|right/.test(cornerClass) && row === 0 ? (isRTL ? prev : next) : "") +
						this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
						row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
						"</div><table class='ui-datepicker-calendar'><thead>" +
						"<tr>";
					thead = (showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "");
					for (dow = 0; dow < 7; dow++) { // days of the week
						day = (dow + firstDay) % 7;
						thead += "<th" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" +
							"<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
					}
					calender += thead + "</tr></thead><tbody>";
					daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
					if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
						inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
					}
					leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
					curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
					numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
					this.maxRows = numRows;
					printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
					for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows
						calender += "<tr>";
						tbody = (!showWeek ? "" : "<td class='ui-datepicker-week-col'>" +
							this._get(inst, "calculateWeek")(printDate) + "</td>");
						for (dow = 0; dow < 7; dow++) { // create date picker days
							daySettings = (beforeShowDay ?
								beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, ""]);
							otherMonth = (printDate.getMonth() !== drawMonth);
							unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||
								(minDate && printDate < minDate) || (maxDate && printDate > maxDate);
							tbody += "<td class='" +
								((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + // highlight weekends
								(otherMonth ? " ui-datepicker-other-month" : "") + // highlight days from other months
								((printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent) || // user pressed key
								(defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime()) ?
								// or defaultDate is current printedDate and defaultDate is selectedDate
								" " + this._dayOverClass : "") + // highlight selected day
								(unselectable ? " " + this._unselectableClass + " ui-state-disabled": "") +  // highlight unselectable days
								(otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + // highlight custom dates
								(printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + // highlight selected day
								(printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + // highlight today (if different)
								((!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + // cell title
								(unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + // actions
								(otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
								(unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" +
								(printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") +
								(printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + // highlight selected day
								(otherMonth ? " ui-priority-secondary" : "") + // distinguish dates from other months
								"' href='#'>" + printDate.getDate() + "</a>")) + "</td>"; // display selectable date
							printDate.setDate(printDate.getDate() + 1);
							printDate = this._daylightSavingAdjust(printDate);
						}
						calender += tbody + "</tr>";
					}
					drawMonth++;
					if (drawMonth > 11) {
						drawMonth = 0;
						drawYear++;
					}
					calender += "</tbody></table>" + (isMultiMonth ? "</div>" +
								((numMonths[0] > 0 && col === numMonths[1]-1) ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
					group += calender;
				}
				html += group;
			}
			html += buttonPanel;
			inst._keyEvent = false;
			return html;
		},

		/* Generate the month and year header. */
		_generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate,
				secondary, monthNames, monthNamesShort) {

			var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,
				changeMonth = this._get(inst, "changeMonth"),
				changeYear = this._get(inst, "changeYear"),
				showMonthAfterYear = this._get(inst, "showMonthAfterYear"),
				html = "<div class='ui-datepicker-title'>",
				monthHtml = "";

			// month selection
			if (secondary || !changeMonth) {
				monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>";
			} else {
				inMinYear = (minDate && minDate.getFullYear() === drawYear);
				inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);
				monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
				for ( month = 0; month < 12; month++) {
					if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
						monthHtml += "<option value='" + month + "'" +
							(month === drawMonth ? " selected='selected'" : "") +
							">" + monthNamesShort[month] + "</option>";
					}
				}
				monthHtml += "</select>";
			}

			if (!showMonthAfterYear) {
				html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "");
			}

			// year selection
			if ( !inst.yearshtml ) {
				inst.yearshtml = "";
				if (secondary || !changeYear) {
					html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
				} else {
					// determine range of years to display
					years = this._get(inst, "yearRange").split(":");
					thisYear = new Date().getFullYear();
					determineYear = function(value) {
						var year = (value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) :
							(value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) :
							parseInt(value, 10)));
						return (isNaN(year) ? thisYear : year);
					};
					year = determineYear(years[0]);
					endYear = Math.max(year, determineYear(years[1] || ""));
					year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
					endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
					inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
					for (; year <= endYear; year++) {
						inst.yearshtml += "<option value='" + year + "'" +
							(year === drawYear ? " selected='selected'" : "") +
							">" + year + "</option>";
					}
					inst.yearshtml += "</select>";

					html += inst.yearshtml;
					inst.yearshtml = null;
				}
			}

			html += this._get(inst, "yearSuffix");
			if (showMonthAfterYear) {
				html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml;
			}
			html += "</div>"; // Close datepicker_header
			return html;
		},

		/* Adjust one of the date sub-fields. */
		_adjustInstDate: function(inst, offset, period) {
			var year = inst.drawYear + (period === "Y" ? offset : 0),
				month = inst.drawMonth + (period === "M" ? offset : 0),
				day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === "D" ? offset : 0),
				date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));

			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
			if (period === "M" || period === "Y") {
				this._notifyChange(inst);
			}
		},

		/* Ensure a date is within any min/max bounds. */
		_restrictMinMax: function(inst, date) {
			var minDate = this._getMinMaxDate(inst, "min"),
				maxDate = this._getMinMaxDate(inst, "max"),
				newDate = (minDate && date < minDate ? minDate : date);
			return (maxDate && newDate > maxDate ? maxDate : newDate);
		},

		/* Notify change of month/year. */
		_notifyChange: function(inst) {
			var onChange = this._get(inst, "onChangeMonthYear");
			if (onChange) {
				onChange.apply((inst.input ? inst.input[0] : null),
					[inst.selectedYear, inst.selectedMonth + 1, inst]);
			}
		},

		/* Determine the number of months to show. */
		_getNumberOfMonths: function(inst) {
			var numMonths = this._get(inst, "numberOfMonths");
			return (numMonths == null ? [1, 1] : (typeof numMonths === "number" ? [1, numMonths] : numMonths));
		},

		/* Determine the current maximum date - ensure no time components are set. */
		_getMinMaxDate: function(inst, minMax) {
			return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
		},

		/* Find the number of days in a given month. */
		_getDaysInMonth: function(year, month) {
			return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
		},

		/* Find the day of the week of the first of a month. */
		_getFirstDayOfMonth: function(year, month) {
			return new Date(year, month, 1).getDay();
		},

		/* Determines if we should allow a "next/prev" month display change. */
		_canAdjustMonth: function(inst, offset, curYear, curMonth) {
			var numMonths = this._getNumberOfMonths(inst),
				date = this._daylightSavingAdjust(new Date(curYear,
				curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));

			if (offset < 0) {
				date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
			}
			return this._isInRange(inst, date);
		},

		/* Is the given date in the accepted range? */
		_isInRange: function(inst, date) {
			var yearSplit, currentYear,
				minDate = this._getMinMaxDate(inst, "min"),
				maxDate = this._getMinMaxDate(inst, "max"),
				minYear = null,
				maxYear = null,
				years = this._get(inst, "yearRange");
				if (years){
					yearSplit = years.split(":");
					currentYear = new Date().getFullYear();
					minYear = parseInt(yearSplit[0], 10);
					maxYear = parseInt(yearSplit[1], 10);
					if ( yearSplit[0].match(/[+\-].*/) ) {
						minYear += currentYear;
					}
					if ( yearSplit[1].match(/[+\-].*/) ) {
						maxYear += currentYear;
					}
				}

			return ((!minDate || date.getTime() >= minDate.getTime()) &&
				(!maxDate || date.getTime() <= maxDate.getTime()) &&
				(!minYear || date.getFullYear() >= minYear) &&
				(!maxYear || date.getFullYear() <= maxYear));
		},

		/* Provide the configuration settings for formatting/parsing. */
		_getFormatConfig: function(inst) {
			var shortYearCutoff = this._get(inst, "shortYearCutoff");
			shortYearCutoff = (typeof shortYearCutoff !== "string" ? shortYearCutoff :
				new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
			return {shortYearCutoff: shortYearCutoff,
				dayNamesShort: this._get(inst, "dayNamesShort"), dayNames: this._get(inst, "dayNames"),
				monthNamesShort: this._get(inst, "monthNamesShort"), monthNames: this._get(inst, "monthNames")};
		},

		/* Format the given date for display. */
		_formatDate: function(inst, day, month, year) {
			if (!day) {
				inst.currentDay = inst.selectedDay;
				inst.currentMonth = inst.selectedMonth;
				inst.currentYear = inst.selectedYear;
			}
			var date = (day ? (typeof day === "object" ? day :
				this._daylightSavingAdjust(new Date(year, month, day))) :
				this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
			return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
		}
	});

	/*
	 * Bind hover events for datepicker elements.
	 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
	 * Global instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
	 */
	function bindHover(dpDiv) {
		var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
		return dpDiv.delegate(selector, "mouseout", function() {
				$(this).removeClass("ui-state-hover");
				if (this.className.indexOf("ui-datepicker-prev") !== -1) {
					$(this).removeClass("ui-datepicker-prev-hover");
				}
				if (this.className.indexOf("ui-datepicker-next") !== -1) {
					$(this).removeClass("ui-datepicker-next-hover");
				}
			})
			.delegate(selector, "mouseover", function(){
				if (!$.datepicker._isDisabledDatepicker( instActive.inline ? dpDiv.parent()[0] : instActive.input[0])) {
					$(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
					$(this).addClass("ui-state-hover");
					if (this.className.indexOf("ui-datepicker-prev") !== -1) {
						$(this).addClass("ui-datepicker-prev-hover");
					}
					if (this.className.indexOf("ui-datepicker-next") !== -1) {
						$(this).addClass("ui-datepicker-next-hover");
					}
				}
			});
	}

	/* jQuery extend now ignores nulls! */
	function extendRemove(target, props) {
		$.extend(target, props);
		for (var name in props) {
			if (props[name] == null) {
				target[name] = props[name];
			}
		}
		return target;
	}

	/* Invoke the datepicker functionality.
	   @param  options  string - a command, optionally followed by additional parameters or
						Object - settings for attaching new datepicker functionality
	   @return  jQuery object */
	$.fn.datepicker = function(options){

		/* Verify an empty collection wasn't passed - Fixes #6976 */
		if ( !this.length ) {
			return this;
		}

		/* Initialise the date picker. */
		if (!$.datepicker.initialized) {
			$(document).mousedown($.datepicker._checkExternalClick);
			$.datepicker.initialized = true;
		}

		/* Append datepicker main container to body if not exist. */
		if ($("#"+$.datepicker._mainDivId).length === 0) {
			$("body").append($.datepicker.dpDiv);
		}

		var otherArgs = Array.prototype.slice.call(arguments, 1);
		if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "widget")) {
			return $.datepicker["_" + options + "Datepicker"].
				apply($.datepicker, [this[0]].concat(otherArgs));
		}
		if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") {
			return $.datepicker["_" + options + "Datepicker"].
				apply($.datepicker, [this[0]].concat(otherArgs));
		}
		return this.each(function() {
			typeof options === "string" ?
				$.datepicker["_" + options + "Datepicker"].
					apply($.datepicker, [this].concat(otherArgs)) :
				$.datepicker._attachDatepicker(this, options);
		});
	};

	$.datepicker = new Datepicker(); // singleton instance
	$.datepicker.initialized = false;
	$.datepicker.uuid = new Date().getTime();
	$.datepicker.version = "1.10.4";

	})(jQuery);


/***/ },

/***/ 398:
/***/ function(module, exports, __webpack_require__) {

	var jQuery = __webpack_require__(366);

	/*!
	 * jQuery UI Core 1.10.4
	 * http://jqueryui.com
	 *
	 * Copyright 2014 jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/category/ui-core/
	 */
	(function( $, undefined ) {

	var uuid = 0,
		runiqueId = /^ui-id-\d+$/;

	// $.ui might exist from components with no dependencies, e.g., $.ui.position
	$.ui = $.ui || {};

	$.extend( $.ui, {
		version: "1.10.4",

		keyCode: {
			BACKSPACE: 8,
			COMMA: 188,
			DELETE: 46,
			DOWN: 40,
			END: 35,
			ENTER: 13,
			ESCAPE: 27,
			HOME: 36,
			LEFT: 37,
			NUMPAD_ADD: 107,
			NUMPAD_DECIMAL: 110,
			NUMPAD_DIVIDE: 111,
			NUMPAD_ENTER: 108,
			NUMPAD_MULTIPLY: 106,
			NUMPAD_SUBTRACT: 109,
			PAGE_DOWN: 34,
			PAGE_UP: 33,
			PERIOD: 190,
			RIGHT: 39,
			SPACE: 32,
			TAB: 9,
			UP: 38
		}
	});

	// plugins
	$.fn.extend({
		focus: (function( orig ) {
			return function( delay, fn ) {
				return typeof delay === "number" ?
					this.each(function() {
						var elem = this;
						setTimeout(function() {
							$( elem ).focus();
							if ( fn ) {
								fn.call( elem );
							}
						}, delay );
					}) :
					orig.apply( this, arguments );
			};
		})( $.fn.focus ),

		scrollParent: function() {
			var scrollParent;
			if (($.ui.ie && (/(static|relative)/).test(this.css("position"))) || (/absolute/).test(this.css("position"))) {
				scrollParent = this.parents().filter(function() {
					return (/(relative|absolute|fixed)/).test($.css(this,"position")) && (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
				}).eq(0);
			} else {
				scrollParent = this.parents().filter(function() {
					return (/(auto|scroll)/).test($.css(this,"overflow")+$.css(this,"overflow-y")+$.css(this,"overflow-x"));
				}).eq(0);
			}

			return (/fixed/).test(this.css("position")) || !scrollParent.length ? $(document) : scrollParent;
		},

		zIndex: function( zIndex ) {
			if ( zIndex !== undefined ) {
				return this.css( "zIndex", zIndex );
			}

			if ( this.length ) {
				var elem = $( this[ 0 ] ), position, value;
				while ( elem.length && elem[ 0 ] !== document ) {
					// Ignore z-index if position is set to a value where z-index is ignored by the browser
					// This makes behavior of this function consistent across browsers
					// WebKit always returns auto if the element is positioned
					position = elem.css( "position" );
					if ( position === "absolute" || position === "relative" || position === "fixed" ) {
						// IE returns 0 when zIndex is not specified
						// other browsers return a string
						// we ignore the case of nested elements with an explicit value of 0
						// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
						value = parseInt( elem.css( "zIndex" ), 10 );
						if ( !isNaN( value ) && value !== 0 ) {
							return value;
						}
					}
					elem = elem.parent();
				}
			}

			return 0;
		},

		uniqueId: function() {
			return this.each(function() {
				if ( !this.id ) {
					this.id = "ui-id-" + (++uuid);
				}
			});
		},

		removeUniqueId: function() {
			return this.each(function() {
				if ( runiqueId.test( this.id ) ) {
					$( this ).removeAttr( "id" );
				}
			});
		}
	});

	// selectors
	function focusable( element, isTabIndexNotNaN ) {
		var map, mapName, img,
			nodeName = element.nodeName.toLowerCase();
		if ( "area" === nodeName ) {
			map = element.parentNode;
			mapName = map.name;
			if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
				return false;
			}
			img = $( "img[usemap=#" + mapName + "]" )[0];
			return !!img && visible( img );
		}
		return ( /input|select|textarea|button|object/.test( nodeName ) ?
			!element.disabled :
			"a" === nodeName ?
				element.href || isTabIndexNotNaN :
				isTabIndexNotNaN) &&
			// the element and all of its ancestors must be visible
			visible( element );
	}

	function visible( element ) {
		return $.expr.filters.visible( element ) &&
			!$( element ).parents().addBack().filter(function() {
				return $.css( this, "visibility" ) === "hidden";
			}).length;
	}

	$.extend( $.expr[ ":" ], {
		data: $.expr.createPseudo ?
			$.expr.createPseudo(function( dataName ) {
				return function( elem ) {
					return !!$.data( elem, dataName );
				};
			}) :
			// support: jQuery <1.8
			function( elem, i, match ) {
				return !!$.data( elem, match[ 3 ] );
			},

		focusable: function( element ) {
			return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
		},

		tabbable: function( element ) {
			var tabIndex = $.attr( element, "tabindex" ),
				isTabIndexNaN = isNaN( tabIndex );
			return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
		}
	});

	// support: jQuery <1.8
	if ( !$( "<a>" ).outerWidth( 1 ).jquery ) {
		$.each( [ "Width", "Height" ], function( i, name ) {
			var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
				type = name.toLowerCase(),
				orig = {
					innerWidth: $.fn.innerWidth,
					innerHeight: $.fn.innerHeight,
					outerWidth: $.fn.outerWidth,
					outerHeight: $.fn.outerHeight
				};

			function reduce( elem, size, border, margin ) {
				$.each( side, function() {
					size -= parseFloat( $.css( elem, "padding" + this ) ) || 0;
					if ( border ) {
						size -= parseFloat( $.css( elem, "border" + this + "Width" ) ) || 0;
					}
					if ( margin ) {
						size -= parseFloat( $.css( elem, "margin" + this ) ) || 0;
					}
				});
				return size;
			}

			$.fn[ "inner" + name ] = function( size ) {
				if ( size === undefined ) {
					return orig[ "inner" + name ].call( this );
				}

				return this.each(function() {
					$( this ).css( type, reduce( this, size ) + "px" );
				});
			};

			$.fn[ "outer" + name] = function( size, margin ) {
				if ( typeof size !== "number" ) {
					return orig[ "outer" + name ].call( this, size );
				}

				return this.each(function() {
					$( this).css( type, reduce( this, size, true, margin ) + "px" );
				});
			};
		});
	}

	// support: jQuery <1.8
	if ( !$.fn.addBack ) {
		$.fn.addBack = function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		};
	}

	// support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)
	if ( $( "<a>" ).data( "a-b", "a" ).removeData( "a-b" ).data( "a-b" ) ) {
		$.fn.removeData = (function( removeData ) {
			return function( key ) {
				if ( arguments.length ) {
					return removeData.call( this, $.camelCase( key ) );
				} else {
					return removeData.call( this );
				}
			};
		})( $.fn.removeData );
	}





	// deprecated
	$.ui.ie = !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() );

	$.support.selectstart = "onselectstart" in document.createElement( "div" );
	$.fn.extend({
		disableSelection: function() {
			return this.bind( ( $.support.selectstart ? "selectstart" : "mousedown" ) +
				".ui-disableSelection", function( event ) {
					event.preventDefault();
				});
		},

		enableSelection: function() {
			return this.unbind( ".ui-disableSelection" );
		}
	});

	$.extend( $.ui, {
		// $.ui.plugin is deprecated. Use $.widget() extensions instead.
		plugin: {
			add: function( module, option, set ) {
				var i,
					proto = $.ui[ module ].prototype;
				for ( i in set ) {
					proto.plugins[ i ] = proto.plugins[ i ] || [];
					proto.plugins[ i ].push( [ option, set[ i ] ] );
				}
			},
			call: function( instance, name, args ) {
				var i,
					set = instance.plugins[ name ];
				if ( !set || !instance.element[ 0 ].parentNode || instance.element[ 0 ].parentNode.nodeType === 11 ) {
					return;
				}

				for ( i = 0; i < set.length; i++ ) {
					if ( instance.options[ set[ i ][ 0 ] ] ) {
						set[ i ][ 1 ].apply( instance.element, args );
					}
				}
			}
		},

		// only used by resizable
		hasScroll: function( el, a ) {

			//If overflow is hidden, the element might have extra content, but the user wants to hide it
			if ( $( el ).css( "overflow" ) === "hidden") {
				return false;
			}

			var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
				has = false;

			if ( el[ scroll ] > 0 ) {
				return true;
			}

			// TODO: determine which cases actually cause this to happen
			// if the element doesn't have the scroll set, see if it's possible to
			// set the scroll
			el[ scroll ] = 1;
			has = ( el[ scroll ] > 0 );
			el[ scroll ] = 0;
			return has;
		}
	});

	})( jQuery );


/***/ },

/***/ 399:
/***/ function(module, exports) {

	"use strict";

	angular.module("ui.checkbox", []).directive("checkbox", function() {
		return {
			scope: {},
			require: "ngModel",
			restrict: "E",
			replace: "true",
			template: "<button type=\"button\" ng-style=\"stylebtn\" class=\"btn btn-default\" ng-class=\"{'btn-xs': size==='default', 'btn-sm': size==='large', 'btn-lg': size==='largest', 'checked': checked===true}\">" +
				"<span ng-style=\"styleicon\" class=\"glyphicon\" ng-class=\"{'glyphicon-ok': checked===true}\"></span>" +
				"</button>",
			link: function(scope, elem, attrs, modelCtrl) {
				scope.size = "default";
				// Default Button Styling
				scope.stylebtn = {};
				// Default Checkmark Styling
				scope.styleicon = {"width": "10px", "left": "-1px"};
				// If size is undefined, Checkbox has normal size (Bootstrap 'xs')
				if(attrs.large !== undefined) {
					scope.size = "large";
					scope.stylebtn = {"padding-top": "2px", "padding-bottom": "2px", "height": "30px"};
					scope.styleicon = {"width": "8px", "left": "-5px", "font-size": "17px"};
				}
				if(attrs.larger !== undefined) {
					scope.size = "larger";
					scope.stylebtn = {"padding-top": "2px", "padding-bottom": "2px", "height": "34px"};
					scope.styleicon = {"width": "8px", "left": "-8px", "font-size": "22px"};
				}
				if(attrs.largest !== undefined) {
					scope.size = "largest";
					scope.stylebtn = {"padding-top": "2px", "padding-bottom": "2px", "height": "45px"};
					scope.styleicon = {"width": "11px", "left": "-11px", "font-size": "30px"};
				}

				var trueValue = true;
				var falseValue = false;

				// If defined set true value
				if(attrs.ngTrueValue !== undefined) {
					trueValue = attrs.ngTrueValue;
				}
				// If defined set false value
				if(attrs.ngFalseValue !== undefined) {
					falseValue = attrs.ngFalseValue;
				}

				// Check if name attribute is set and if so add it to the DOM element
				if(scope.name !== undefined) {
					elem.name = scope.name;
				}

				// Update element when model changes
				scope.$watch(function() {
					if(modelCtrl.$modelValue === trueValue || modelCtrl.$modelValue === true) {
						modelCtrl.$setViewValue(trueValue);
					} else {
						modelCtrl.$setViewValue(falseValue);
					}
					return modelCtrl.$modelValue;
				}, function(newVal, oldVal) {
					scope.checked = modelCtrl.$modelValue === trueValue;
				}, true);

				// On click swap value and trigger onChange function
				elem.bind("click", function() {
					scope.$apply(function() {
						if(modelCtrl.$modelValue === falseValue) {
							modelCtrl.$setViewValue(trueValue);
						} else {
							modelCtrl.$setViewValue(falseValue);
						}
					});
				});
			}
		};
	});

/***/ },

/***/ 400:
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },

/***/ 402:
/***/ function(module, exports) {

	'use strict';
	(function(angular){
	'use strict';

	var Module = angular.module('datePicker', []);

	Module.constant('datePickerConfig', {
	  template: 'templates/datepicker.html',
	  view: 'month',
	  views: ['year', 'month', 'date', 'hours', 'minutes'],
	  step: 5
	});

	Module.filter('time',function () {
	  function format(date){
	    return ('0' + date.getHours()).slice(-2) + ':' + ('0' + date.getMinutes()).slice(-2);
	  }

	  return function (date) {
	    if (!(date instanceof Date)) {
	      date = new Date(date);
	      if (isNaN(date.getTime())) {
	        return undefined;
	      }
	    }
	    return format(date);
	  };
	});

	Module.directive('datePicker', ['datePickerConfig', 'datePickerUtils', function datePickerDirective(datePickerConfig, datePickerUtils) {

	  //noinspection JSUnusedLocalSymbols
	  return {
	    // this is a bug ?
	    require:'?ngModel',
	    template: '<div ng-include="template"></div>',
	    scope: {
	      model: '=datePicker',
	      after: '=?',
	      before: '=?'
	    },
	    link: function (scope, element, attrs, ngModel) {

	      var arrowClick = false;

	      scope.date = new Date(scope.model || new Date());
	      scope.views = datePickerConfig.views.concat();
	      scope.view = attrs.view || datePickerConfig.view;
	      scope.now = new Date();
	      scope.template = attrs.template || datePickerConfig.template;

	      var step = parseInt(attrs.step || datePickerConfig.step, 10);
	      var partial = !!attrs.partial;

	      //if ngModel, we can add min and max validators
	      if(ngModel)
	      {
	        if (angular.isDefined(attrs.minDate)) {
	          var minVal;
	          ngModel.$validators.min = function (value) {
	            return !datePickerUtils.isValidDate(value) || angular.isUndefined(minVal) || value >= minVal;
	          };
	          attrs.$observe('minDate', function (val) {
	            minVal = new Date(val);
	            ngModel.$validate();
	          });
	        }

	        if (angular.isDefined(attrs.maxDate)) {
	          var maxVal;
	          ngModel.$validators.max = function (value) {
	            return !datePickerUtils.isValidDate(value) || angular.isUndefined(maxVal) || value <= maxVal;
	          };
	          attrs.$observe('maxDate', function (val) {
	            maxVal = new Date(val);
	            ngModel.$validate();
	          });
	        }
	      }
	      //end min, max date validator

	      /** @namespace attrs.minView, attrs.maxView */
	      scope.views =scope.views.slice(
	        scope.views.indexOf(attrs.maxView || 'year'),
	        scope.views.indexOf(attrs.minView || 'minutes')+1
	      );

	      if (scope.views.length === 1 || scope.views.indexOf(scope.view)===-1) {
	        scope.view = scope.views[0];
	      }

	      scope.setView = function (nextView) {
	        if (scope.views.indexOf(nextView) !== -1) {
	          scope.view = nextView;
	        }
	      };

	      scope.setDate = function (date) {
	        if(attrs.disabled) {
	          return;
	        }
	        scope.date = date;
	        // change next view
	        var nextView = scope.views[scope.views.indexOf(scope.view) + 1];
	        if ((!nextView || partial) || scope.model) {

	          scope.model = new Date(scope.model || date);
	          //if ngModel , setViewValue and trigger ng-change, etc...
	          if(ngModel) {
	            ngModel.$setViewValue(scope.date);
	          }

	          var view = partial ? 'minutes' : scope.view;
	          //noinspection FallThroughInSwitchStatementJS
	          switch (view) {
	          case 'minutes':
	            scope.model.setMinutes(date.getMinutes());
	          /*falls through*/
	          case 'hours':
	            scope.model.setHours(date.getHours());
	          /*falls through*/
	          case 'date':
	            scope.model.setDate(date.getDate());
	          /*falls through*/
	          case 'month':
	            scope.model.setMonth(date.getMonth());
	          /*falls through*/
	          case 'year':
	            scope.model.setFullYear(date.getFullYear());
	          }
	          scope.$emit('setDate', scope.model, scope.view);
	        }

	        if (nextView) {
	          scope.setView(nextView);
	        }

	        if(!nextView && attrs.autoClose === 'true'){
	          element.addClass('hidden');
	          scope.$emit('hidePicker');
	        }
	      };

	      function update() {
	        var view = scope.view;

	        if (scope.model && !arrowClick) {
	          scope.date = new Date(scope.model);
	          arrowClick = false;
	        }
	        var date = scope.date;

	        switch (view) {
	        case 'year':
	          scope.years = datePickerUtils.getVisibleYears(date);
	          break;
	        case 'month':
	          scope.months = datePickerUtils.getVisibleMonths(date);
	          break;
	        case 'date':
	          scope.weekdays = scope.weekdays || datePickerUtils.getDaysOfWeek();
	          scope.weeks = datePickerUtils.getVisibleWeeks(date);
	          break;
	        case 'hours':
	          scope.hours = datePickerUtils.getVisibleHours(date);
	          break;
	        case 'minutes':
	          scope.minutes = datePickerUtils.getVisibleMinutes(date, step);
	          break;
	        }
	      }

	      function watch() {
	        if (scope.view !== 'date') {
	          return scope.view;
	        }
	        return scope.date ? scope.date.getMonth() : null;
	      }


	      scope.$watch(watch, update);

	      scope.next = function (delta) {
	        var date = scope.date;
	        delta = delta || 1;
	        switch (scope.view) {
	        case 'year':
	        /*falls through*/
	        case 'month':
	          date.setFullYear(date.getFullYear() + delta);
	          break;
	        case 'date':
	          date.setMonth(date.getMonth() + delta);
	          break;
	        case 'hours':
	        /*falls through*/
	        case 'minutes':
	          date.setHours(date.getHours() + delta);
	          break;
	        }
	        arrowClick = true;
	        update();
	      };

	      scope.prev = function (delta) {
	        return scope.next(-delta || -1);
	      };

	      scope.isAfter = function (date) {
	        return scope.after && datePickerUtils.isAfter(date, scope.after);
	      };

	      scope.isBefore = function (date) {
	        return scope.before && datePickerUtils.isBefore(date, scope.before);
	      };

	      scope.isSameMonth = function (date) {
	        return datePickerUtils.isSameMonth(scope.model, date);
	      };

	      scope.isSameYear = function (date) {
	        return datePickerUtils.isSameYear(scope.model, date);
	      };

	      scope.isSameDay = function (date) {
	        return datePickerUtils.isSameDay(scope.model, date);
	      };

	      scope.isSameHour = function (date) {
	        return datePickerUtils.isSameHour(scope.model, date);
	      };

	      scope.isSameMinutes = function (date) {
	        return datePickerUtils.isSameMinutes(scope.model, date);
	      };

	      scope.isNow = function (date) {
	        var is = true;
	        var now = scope.now;
	        //noinspection FallThroughInSwitchStatementJS
	        switch (scope.view) {
	        case 'minutes':
	          is &= ~~(date.getMinutes()/step) === ~~(now.getMinutes()/step);
	        /*falls through*/
	        case 'hours':
	          is &= date.getHours() === now.getHours();
	        /*falls through*/
	        case 'date':
	          is &= date.getDate() === now.getDate();
	        /*falls through*/
	        case 'month':
	          is &= date.getMonth() === now.getMonth();
	        /*falls through*/
	        case 'year':
	          is &= date.getFullYear() === now.getFullYear();
	        }
	        return is;
	      };
	    }
	  };
	}]);

	'use strict';

	angular.module('datePicker').factory('datePickerUtils', function(){
	  return {
	    getVisibleMinutes : function(date, step) {
	      date = new Date(date || new Date());
	      date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours());
	      var minutes = [];
	      var stop = date.getTime() + 60 * 60 * 1000;
	      while (date.getTime() < stop) {
	        minutes.push(date);
	        date = new Date(date.getTime() + step * 60 * 1000);
	      }
	      return minutes;
	    },
	    getVisibleWeeks : function(date) {
	      date = new Date(date || new Date());
	      var startMonth = date.getMonth(), startYear = date.getYear();
	      date.setDate(1);
	      date.setHours(0);
	      date.setMinutes(0);
	      date.setSeconds(0);
	      date.setMilliseconds(0);

	      if (date.getDay() === 0) {
	        date.setDate(-5);
	      } else {
	        date.setDate(date.getDate() - (date.getDay() - 1));
	      }
	      if (date.getDate() === 1) {
	        date.setDate(-6);
	      }

	      var weeks = [];
	      while (weeks.length < 6) {
	        /*jshint -W116 */
	        if(date.getYear()=== startYear && date.getMonth() > startMonth) break;
	        var week = [];
	        for (var i = 0; i < 7; i++) {
	          week.push(new Date(date));
	          date.setDate(date.getDate() + 1);
	        }
	        weeks.push(week);
	      }
	      return weeks;
	    },
	    getVisibleYears : function(date) {
	      var years = [];
	      date = new Date(date || new Date());
	      date.setFullYear(date.getFullYear() - (date.getFullYear() % 10));
	      for (var i = 0; i < 12; i++) {
	        years.push(new Date(date.getFullYear() + (i - 1), 0, 1));
	      }
	      return years;
	    },
	    getDaysOfWeek : function(date) {
	      date = new Date(date || new Date());
	      date = new Date(date.getFullYear(), date.getMonth(), date.getDate());
	      date.setDate(date.getDate() - (date.getDay() - 1));
	      var days = [];
	      for (var i = 0; i < 7; i++) {
	        days.push(new Date(date));
	        date.setDate(date.getDate() + 1);
	      }
	      return days;
	    },
	    getVisibleMonths : function(date) {
	      date = new Date(date || new Date());
	      var year = date.getFullYear();
	      var months = [];
	      for (var month = 0; month < 12; month++) {
	        months.push(new Date(year, month, 1));
	      }
	      return months;
	    },
	    getVisibleHours : function(date) {
	      date = new Date(date || new Date());
	      date.setHours(0);
	      date.setMinutes(0);
	      date.setSeconds(0);
	      date.setMilliseconds(0);
	      var hours = [];
	      for (var i = 0; i < 24; i++) {
	        hours.push(date);
	        date = new Date(date.getTime() + 60 * 60 * 1000);
	      }
	      return hours;
	    },
	    isAfter : function(model, date) {
	      model = (model !== undefined) ? new Date(model) : model;
	      date = new Date(date);
	      return model && model.getTime() <= date.getTime();
	    },
	    isBefore : function(model, date) {
	      model = (model !== undefined) ? new Date(model) : model;
	      date = new Date(date);
	      return model.getTime() >= date.getTime();
	    },
	    isSameYear :   function(model, date) {
	      model = (model !== undefined) ? new Date(model) : model;
	      date = new Date(date);
	      return model && model.getFullYear() === date.getFullYear();
	    },
	    isSameMonth : function(model, date) {
	      model = (model !== undefined) ? new Date(model) : model;
	      date = new Date(date);
	      return this.isSameYear(model, date) && model.getMonth() === date.getMonth();
	    },
	    isSameDay : function(model, date) {
	      model = (model !== undefined) ? new Date(model) : model;
	      date = new Date(date);
	      return this.isSameMonth(model, date) && model.getDate() === date.getDate();
	    },
	    isSameHour : function(model, date) {
	      model = (model !== undefined) ? new Date(model) : model;
	      date = new Date(date);
	      return this.isSameDay(model, date) && model.getHours() === date.getHours();
	    },
	    isSameMinutes : function(model, date) {
	      model = (model !== undefined) ? new Date(model) : model;
	      date = new Date(date);
	      return this.isSameHour(model, date) && model.getMinutes() === date.getMinutes();
	    },
	    isValidDate : function(value) {
	      // Invalid Date: getTime() returns NaN
	      return value && !(value.getTime && value.getTime() !== value.getTime());
	    }
	  };
	});
	'use strict';

	var Module = angular.module('datePicker');

	Module.directive('dateRange', function () {
	  return {
	    templateUrl: 'templates/daterange.html',
	    scope: {
	      start: '=',
	      end: '='
	    },
	    link: function (scope, element, attrs) {

	      /*
	       * If no date is set on scope, set current date from user system
	       */
	      scope.start = new Date(scope.start || new Date());
	      scope.end = new Date(scope.end || new Date());

	      attrs.$observe('disabled', function(isDisabled){
	          scope.disableDatePickers = !!isDisabled;
	        });
	      scope.$watch('start.getTime()', function (value) {
	        if (value && scope.end && value > scope.end.getTime()) {
	          scope.end = new Date(value);
	        }
	      });
	      scope.$watch('end.getTime()', function (value) {
	        if (value && scope.start && value < scope.start.getTime()) {
	          scope.start = new Date(value);
	        }
	      });
	    }
	  };
	});

	'use strict';

	var PRISTINE_CLASS = 'ng-pristine',
	    DIRTY_CLASS = 'ng-dirty';

	var Module = angular.module('datePicker');

	Module.constant('dateTimeConfig', {
	  template: function (attrs) {
	    return '' +
	        '<div ' +
	        'date-picker="' + attrs.ngModel + '" ' +
	        (attrs.view ? 'view="' + attrs.view + '" ' : '') +
	        (attrs.maxView ? 'max-view="' + attrs.maxView + '" ' : '') +
	        (attrs.autoClose ? 'auto-close="' + attrs.autoClose + '" ' : '') +
	        (attrs.template ? 'template="' + attrs.template + '" ' : '') +
	        (attrs.minView ? 'min-view="' + attrs.minView + '" ' : '') +
	        (attrs.partial ? 'partial="' + attrs.partial + '" ' : '') +
	        (attrs.step ? 'step="' + attrs.step + '" ' : '') +
	        'class="date-picker-date-time"></div>';
	  },
	  format: 'yyyy-MM-dd HH:mm',
	  views: ['date', 'year', 'month', 'hours', 'minutes'],
	  dismiss: false,
	  position: 'relative'
	});

	Module.directive('dateTimeAppend', function () {
	  return {
	    link: function (scope, element) {
	      element.bind('click', function () {
	        element.find('input')[0].focus();
	      });
	    }
	  };
	});

	Module.directive('dateTime', ['$compile', '$document', '$filter', 'dateTimeConfig', '$parse', 'datePickerUtils',
	                function ($compile, $document, $filter, dateTimeConfig, $parse, datePickerUtils) {
	  var body = $document.find('body');
	  var dateFilter = $filter('date');

	  return {
	    require: 'ngModel',
	    scope:true,
	    link: function (scope, element, attrs, ngModel) {
	      var format = attrs.format || dateTimeConfig.format;
	      var parentForm = element.inheritedData('$formController');
	      var views = $parse(attrs.views)(scope) || dateTimeConfig.views.concat();
	      var view = attrs.view || views[0];
	      var index = views.indexOf(view);
	      var dismiss = attrs.dismiss ? $parse(attrs.dismiss)(scope) : dateTimeConfig.dismiss;
	      var picker = null;
	      var position = attrs.position || dateTimeConfig.position;
	      var container = null;

	      if (index === -1) {
	        views.splice(index, 1);
	      }

	      views.unshift(view);


	      function formatter(value) {
	        return dateFilter(value, format);
	      }

	      function parser() {
	        return ngModel.$modelValue;
	      }

	      ngModel.$formatters.push(formatter);
	      ngModel.$parsers.unshift(parser);


	      //min. max date validators
	      if (angular.isDefined(attrs.minDate)) {
	        var minVal;
	        ngModel.$validators.min = function (value) {
	            return !datePickerUtils.isValidDate(value) || angular.isUndefined(minVal) || value >= minVal;
	          };
	        attrs.$observe('minDate', function (val) {
	            minVal = new Date(val);
	            ngModel.$validate();
	          });
	      }

	      if (angular.isDefined(attrs.maxDate)) {
	        var maxVal;
	        ngModel.$validators.max = function (value) {
	            return !datePickerUtils.isValidDate(value) || angular.isUndefined(maxVal) || value <= maxVal;
	          };
	        attrs.$observe('maxDate', function (val) {
	            maxVal = new Date(val);
	            ngModel.$validate();
	          });
	      }
	      //end min, max date validator

	      var template = dateTimeConfig.template(attrs);

	      function updateInput(event) {
	        event.stopPropagation();
	        if (ngModel.$pristine) {
	          ngModel.$dirty = true;
	          ngModel.$pristine = false;
	          element.removeClass(PRISTINE_CLASS).addClass(DIRTY_CLASS);
	          if (parentForm) {
	            parentForm.$setDirty();
	          }
	          ngModel.$render();
	        }
	      }

	      function clear() {
	        if (picker) {
	          picker.remove();
	          picker = null;
	        }
	        if (container) {
	          container.remove();
	          container = null;
	        }
	      }

	      function showPicker() {
	        if (picker) {
	          return;
	        }
	        // create picker element
	        picker = $compile(template)(scope);
	        scope.$digest();

	        scope.$on('setDate', function (event, date, view) {
	          updateInput(event);
	          if (dismiss && views[views.length - 1] === view) {
	            clear();
	          }
	        });

	        scope.$on('hidePicker', function () {
	          element.triggerHandler('blur');
	        });

	        scope.$on('$destroy', clear);

	        // move picker below input element

	        if (position === 'absolute') {
	          var pos = angular.extend(element.offset(), { height: element[0].offsetHeight });
	          picker.css({ top: pos.top + pos.height, left: pos.left, display: 'block', position: position});
	          body.append(picker);
	        } else {
	          // relative
	          container = angular.element('<div date-picker-wrapper></div>');
	          element[0].parentElement.insertBefore(container[0], element[0]);
	          container.append(picker);
	//          this approach doesn't work
	//          element.before(picker);
	          picker.css({top: element[0].offsetHeight + 'px', display: 'block'});
	        }

	        picker.bind('mousedown', function (evt) {
	          evt.preventDefault();
	        });
	      }

	      element.bind('focus', showPicker);
	      element.bind('blur', clear);
	    }
	  };
	}]);

	angular.module("datePicker").run(["$templateCache", function($templateCache) {

	  $templateCache.put("templates/datepicker.html",
	    "<div ng-switch=\"view\">\r" +
	    "\n" +
	    "  <div ng-switch-when=\"date\">\r" +
	    "\n" +
	    "    <table>\r" +
	    "\n" +
	    "      <thead>\r" +
	    "\n" +
	    "      <tr>\r" +
	    "\n" +
	    "        <th ng-click=\"prev()\">&lsaquo;</th>\r" +
	    "\n" +
	    "        <th colspan=\"5\" class=\"switch\" ng-click=\"setView('month')\">{{date|date:\"yyyy MMMM\"}}</th>\r" +
	    "\n" +
	    "        <th ng-click=\"next()\">&rsaquo;</i></th>\r" +
	    "\n" +
	    "      </tr>\r" +
	    "\n" +
	    "      <tr>\r" +
	    "\n" +
	    "        <th ng-repeat=\"day in weekdays\" style=\"overflow: hidden\">{{ day|date:\"EEE\" }}</th>\r" +
	    "\n" +
	    "      </tr>\r" +
	    "\n" +
	    "      </thead>\r" +
	    "\n" +
	    "      <tbody>\r" +
	    "\n" +
	    "      <tr ng-repeat=\"week in weeks\">\r" +
	    "\n" +
	    "        <td ng-repeat=\"day in week\">\r" +
	    "\n" +
	    "          <span\r" +
	    "\n" +
	    "            ng-class=\"{'now':isNow(day),'active':isSameDay(day),'disabled':(day.getMonth()!=date.getMonth()),'after':isAfter(day),'before':isBefore(day)}\"\r" +
	    "\n" +
	    "            ng-click=\"setDate(day)\" ng-bind=\"day.getDate()\"></span>\r" +
	    "\n" +
	    "        </td>\r" +
	    "\n" +
	    "      </tr>\r" +
	    "\n" +
	    "      </tbody>\r" +
	    "\n" +
	    "    </table>\r" +
	    "\n" +
	    "  </div>\r" +
	    "\n" +
	    "  <div ng-switch-when=\"year\">\r" +
	    "\n" +
	    "    <table>\r" +
	    "\n" +
	    "      <thead>\r" +
	    "\n" +
	    "      <tr>\r" +
	    "\n" +
	    "        <th ng-click=\"prev(10)\">&lsaquo;</th>\r" +
	    "\n" +
	    "        <th colspan=\"5\" class=\"switch\">{{years[0].getFullYear()}}-{{years[years.length-1].getFullYear()}}</th>\r" +
	    "\n" +
	    "        <th ng-click=\"next(10)\">&rsaquo;</i></th>\r" +
	    "\n" +
	    "      </tr>\r" +
	    "\n" +
	    "      </thead>\r" +
	    "\n" +
	    "      <tbody>\r" +
	    "\n" +
	    "      <tr>\r" +
	    "\n" +
	    "        <td colspan=\"7\">\r" +
	    "\n" +
	    "          <span ng-class=\"{'active':isSameYear(year),'now':isNow(year)}\"\r" +
	    "\n" +
	    "                ng-repeat=\"year in years\"\r" +
	    "\n" +
	    "                ng-click=\"setDate(year)\" ng-bind=\"year.getFullYear()\"></span>\r" +
	    "\n" +
	    "        </td>\r" +
	    "\n" +
	    "      </tr>\r" +
	    "\n" +
	    "      </tbody>\r" +
	    "\n" +
	    "    </table>\r" +
	    "\n" +
	    "  </div>\r" +
	    "\n" +
	    "  <div ng-switch-when=\"month\">\r" +
	    "\n" +
	    "    <table>\r" +
	    "\n" +
	    "      <thead>\r" +
	    "\n" +
	    "      <tr>\r" +
	    "\n" +
	    "        <th ng-click=\"prev()\">&lsaquo;</th>\r" +
	    "\n" +
	    "        <th colspan=\"5\" class=\"switch\" ng-click=\"setView('year')\">{{ date|date:\"yyyy\" }}</th>\r" +
	    "\n" +
	    "        <th ng-click=\"next()\">&rsaquo;</i></th>\r" +
	    "\n" +
	    "      </tr>\r" +
	    "\n" +
	    "      </thead>\r" +
	    "\n" +
	    "      <tbody>\r" +
	    "\n" +
	    "      <tr>\r" +
	    "\n" +
	    "        <td colspan=\"7\">\r" +
	    "\n" +
	    "          <span ng-repeat=\"month in months\"\r" +
	    "\n" +
	    "                ng-class=\"{'active':isSameMonth(month),'after':isAfter(month),'before':isBefore(month),'now':isNow(month)}\"\r" +
	    "\n" +
	    "                ng-click=\"setDate(month)\"\r" +
	    "\n" +
	    "                ng-bind=\"month|date:'MMM'\"></span>\r" +
	    "\n" +
	    "        </td>\r" +
	    "\n" +
	    "      </tr>\r" +
	    "\n" +
	    "      </tbody>\r" +
	    "\n" +
	    "    </table>\r" +
	    "\n" +
	    "  </div>\r" +
	    "\n" +
	    "  <div ng-switch-when=\"hours\">\r" +
	    "\n" +
	    "    <table>\r" +
	    "\n" +
	    "      <thead>\r" +
	    "\n" +
	    "      <tr>\r" +
	    "\n" +
	    "        <th ng-click=\"prev(24)\">&lsaquo;</th>\r" +
	    "\n" +
	    "        <th colspan=\"5\" class=\"switch\" ng-click=\"setView('date')\">{{ date|date:\"dd MMMM yyyy\" }}</th>\r" +
	    "\n" +
	    "        <th ng-click=\"next(24)\">&rsaquo;</i></th>\r" +
	    "\n" +
	    "      </tr>\r" +
	    "\n" +
	    "      </thead>\r" +
	    "\n" +
	    "      <tbody>\r" +
	    "\n" +
	    "      <tr>\r" +
	    "\n" +
	    "        <td colspan=\"7\">\r" +
	    "\n" +
	    "          <span ng-repeat=\"hour in hours\"\r" +
	    "\n" +
	    "                ng-class=\"{'now':isNow(hour),'active':isSameHour(hour)}\"\r" +
	    "\n" +
	    "                ng-click=\"setDate(hour)\" ng-bind=\"hour|time\"></span>\r" +
	    "\n" +
	    "        </td>\r" +
	    "\n" +
	    "      </tr>\r" +
	    "\n" +
	    "      </tbody>\r" +
	    "\n" +
	    "    </table>\r" +
	    "\n" +
	    "  </div>\r" +
	    "\n" +
	    "  <div ng-switch-when=\"minutes\">\r" +
	    "\n" +
	    "    <table>\r" +
	    "\n" +
	    "      <thead>\r" +
	    "\n" +
	    "      <tr>\r" +
	    "\n" +
	    "        <th ng-click=\"prev()\">&lsaquo;</th>\r" +
	    "\n" +
	    "        <th colspan=\"5\" class=\"switch\" ng-click=\"setView('hours')\">{{ date|date:\"dd MMMM yyyy\" }}\r" +
	    "\n" +
	    "        </th>\r" +
	    "\n" +
	    "        <th ng-click=\"next()\">&rsaquo;</i></th>\r" +
	    "\n" +
	    "      </tr>\r" +
	    "\n" +
	    "      </thead>\r" +
	    "\n" +
	    "      <tbody>\r" +
	    "\n" +
	    "      <tr>\r" +
	    "\n" +
	    "        <td colspan=\"7\">\r" +
	    "\n" +
	    "          <span ng-repeat=\"minute in minutes\"\r" +
	    "\n" +
	    "                ng-class=\"{active:isSameMinutes(minute),'now':isNow(minute)}\"\r" +
	    "\n" +
	    "                ng-click=\"setDate(minute)\"\r" +
	    "\n" +
	    "                ng-bind=\"minute|time\"></span>\r" +
	    "\n" +
	    "        </td>\r" +
	    "\n" +
	    "      </tr>\r" +
	    "\n" +
	    "      </tbody>\r" +
	    "\n" +
	    "    </table>\r" +
	    "\n" +
	    "  </div>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );

	  $templateCache.put("templates/daterange.html",
	    "<div>\r" +
	    "\n" +
	    "    <table>\r" +
	    "\n" +
	    "        <tr>\r" +
	    "\n" +
	    "            <td valign=\"top\">\r" +
	    "\n" +
	    "                <div date-picker=\"start\" ng-disabled=\"disableDatePickers\"  class=\"date-picker\" date after=\"start\" before=\"end\" min-view=\"date\" max-view=\"date\"></div>\r" +
	    "\n" +
	    "            </td>\r" +
	    "\n" +
	    "            <td valign=\"top\">\r" +
	    "\n" +
	    "                <div date-picker=\"end\" ng-disabled=\"disableDatePickers\"  class=\"date-picker\" date after=\"start\" before=\"end\"  min-view=\"date\" max-view=\"date\"></div>\r" +
	    "\n" +
	    "            </td>\r" +
	    "\n" +
	    "        </tr>\r" +
	    "\n" +
	    "    </table>\r" +
	    "\n" +
	    "</div>\r" +
	    "\n"
	  );

	}]);
	})(angular);

/***/ },

/***/ 403:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*globals define, module, require */
	/*jslint vars:true */

	/**
	 * @license angular-date-time-input
	 * (c) 2013-2015 Knight Rider Consulting, Inc. http://www.knightrider.com
	 * License: MIT
	 *
	 *    @author Dale "Ducky" Lotts
	 *    @since  2013-Sep-23
	 */

	(function (factory) {
		'use strict';
		/* istanbul ignore if */
		if (true) {
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(385), __webpack_require__(404)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
			/* istanbul ignore next */
		} else if (typeof exports === 'object') {
			module.exports = factory(require('angular'), require('moment')); // CommonJS
		} else {
			factory(window.angular, window.moment); // Browser global
		}
	}(function (angular, moment) {
		'use strict';
		angular.module('ui.dateTimeInput', [])
			.service('dateTimeParserFactory', DateTimeParserFactoryService)
			.directive('dateTimeInput', DateTimeInputDirective);

		DateTimeParserFactoryService.$inject = [];

		function DateTimeParserFactoryService() {
			return function ParserFactory(modelType, inputFormats, dateParseStrict) {
				var result;
				// Behaviors
				switch (modelType) {
					case 'Date':
						result = handleEmpty(dateParser);
						break;
					case 'moment':
						result = handleEmpty(momentParser);
						break;
					case 'milliseconds':
						result = handleEmpty(millisecondParser);
						break;
					default: // It is assumed that the modelType is a formatting string.
						result = handleEmpty(stringParserFactory(modelType));
				}

				return result;

				function handleEmpty(delegate) {
					return function (viewValue) {
						if (angular.isUndefined(viewValue) || viewValue === '' || viewValue === null) {
							return null;
						} else {
							return delegate(viewValue);
						}
					};
				}

				function dateParser(viewValue) {
					return momentParser(viewValue).toDate();
				}

				function momentParser(viewValue) {
					return moment(viewValue, inputFormats, moment.locale(), dateParseStrict);
				}

				function millisecondParser(viewValue) {
					return moment.utc(viewValue, inputFormats, moment.locale(), dateParseStrict).valueOf();
				}

				function stringParserFactory(modelFormat) {
					return function stringParser(viewValue) {
						return momentParser(viewValue).format(modelFormat);
					};
				}
			};
		}

		DateTimeInputDirective.$inject = ['dateTimeParserFactory'];

		function DateTimeInputDirective(dateTimeParserFactory) {
			return {
				require: 'ngModel',
				restrict: 'A',
				scope: {
					'dateFormats': '='
				},
				link: linkFunction
			};

			function linkFunction(scope, element, attrs, controller) {

				// validation
				if (angular.isDefined(scope.dateFormats) && !angular.isString(scope.dateFormats) && !angular.isArray(scope.dateFormats)) {
					throw 'date-formats must be a single string or an array of strings i.e. date-formats="[\'YYYY-MM-DD\']" ';
				}

				if (angular.isDefined(attrs.modelType) && (!angular.isString(attrs.modelType) || attrs.modelType.length === 0 )) {
					throw 'model-type must be "Date", "moment", "milliseconds", or a moment format string';
				}

				// variables
				var displayFormat = attrs.dateTimeInput || moment.defaultFormat;

				var dateParseStrict = (attrs.dateParseStrict === undefined || attrs.dateParseStrict === 'true');

				var modelType = (attrs.modelType || 'Date');

				var inputFormats = [attrs.dateTimeInput, modelType].concat(scope.dateFormats).concat([moment.ISO_8601]).filter(unique);

				// Behaviors
				controller.$parsers.unshift(dateTimeParserFactory(modelType, inputFormats, dateParseStrict));

				controller.$formatters.push(formatter);

				controller.$validators.dateTimeInput = validator;

				element.bind('blur', applyFormatters);

				// Implementation

				function unique(value, index, self) {
					return ['Date', 'moment', 'milliseconds', undefined].indexOf(value) === -1 &&
						self.indexOf(value) === index;
				}

				function validator(modelValue, viewValue) {
					if (angular.isUndefined(viewValue) || viewValue === '' || viewValue === null) {
						return true;
					}
					return moment(viewValue, inputFormats, moment.locale(), dateParseStrict).isValid();
				}

				function formatter(modelValue) {
					if (angular.isUndefined(modelValue) || modelValue === '' || modelValue === null) {
						return null;
					}

					if (angular.isDate(modelValue)) {
						return moment(modelValue).format(displayFormat);
					} else if (angular.isNumber(modelValue)) {
						return moment.utc(modelValue).format(displayFormat);
					}
					return moment(modelValue, inputFormats, moment.locale(), dateParseStrict).format(displayFormat);
				}

				function applyFormatters() {
					controller.$viewValue = controller.$formatters.filter(keepAll).reverse().reduce(applyFormatter, controller.$modelValue);
					controller.$render();

					function keepAll() {
						return true;
					}

					function applyFormatter(memo, formatter) {
						return formatter(memo);
					}
				}
			}
		}
	}))
	;


/***/ },

/***/ 404:
/***/ function(module, exports) {

	module.exports = moment;

/***/ },

/***/ 405:
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["Tether"] = __webpack_require__(406);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ 406:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! tether 1.1.0 */

	(function(root, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === 'object') {
	    module.exports = factory(require, exports, module);
	  } else {
	    root.Tether = factory();
	  }
	}(this, function(require, exports, module) {

	'use strict';

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var TetherBase = undefined;
	if (typeof TetherBase === 'undefined') {
	  TetherBase = { modules: [] };
	}

	function getScrollParent(el) {
	  var _getComputedStyle = getComputedStyle(el);

	  var position = _getComputedStyle.position;

	  if (position === 'fixed') {
	    return el;
	  }

	  var parent = el;
	  while (parent = parent.parentNode) {
	    var style = undefined;
	    try {
	      style = getComputedStyle(parent);
	    } catch (err) {}

	    if (typeof style === 'undefined' || style === null) {
	      return parent;
	    }

	    var _style = style;
	    var overflow = _style.overflow;
	    var overflowX = _style.overflowX;
	    var overflowY = _style.overflowY;

	    if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {
	      if (position !== 'absolute' || ['relative', 'absolute', 'fixed'].indexOf(style.position) >= 0) {
	        return parent;
	      }
	    }
	  }

	  return document.body;
	}

	var uniqueId = (function () {
	  var id = 0;
	  return function () {
	    return ++id;
	  };
	})();

	var zeroPosCache = {};
	var getOrigin = function getOrigin(doc) {
	  // getBoundingClientRect is unfortunately too accurate.  It introduces a pixel or two of
	  // jitter as the user scrolls that messes with our ability to detect if two positions
	  // are equivilant or not.  We place an element at the top left of the page that will
	  // get the same jitter, so we can cancel the two out.
	  var node = doc._tetherZeroElement;
	  if (typeof node === 'undefined') {
	    node = doc.createElement('div');
	    node.setAttribute('data-tether-id', uniqueId());
	    extend(node.style, {
	      top: 0,
	      left: 0,
	      position: 'absolute'
	    });

	    doc.body.appendChild(node);

	    doc._tetherZeroElement = node;
	  }

	  var id = node.getAttribute('data-tether-id');
	  if (typeof zeroPosCache[id] === 'undefined') {
	    zeroPosCache[id] = {};

	    var rect = node.getBoundingClientRect();
	    for (var k in rect) {
	      // Can't use extend, as on IE9, elements don't resolve to be hasOwnProperty
	      zeroPosCache[id][k] = rect[k];
	    }

	    // Clear the cache when this position call is done
	    defer(function () {
	      delete zeroPosCache[id];
	    });
	  }

	  return zeroPosCache[id];
	};

	function getBounds(el) {
	  var doc = undefined;
	  if (el === document) {
	    doc = document;
	    el = document.documentElement;
	  } else {
	    doc = el.ownerDocument;
	  }

	  var docEl = doc.documentElement;

	  var box = {};
	  // The original object returned by getBoundingClientRect is immutable, so we clone it
	  // We can't use extend because the properties are not considered part of the object by hasOwnProperty in IE9
	  var rect = el.getBoundingClientRect();
	  for (var k in rect) {
	    box[k] = rect[k];
	  }

	  var origin = getOrigin(doc);

	  box.top -= origin.top;
	  box.left -= origin.left;

	  if (typeof box.width === 'undefined') {
	    box.width = document.body.scrollWidth - box.left - box.right;
	  }
	  if (typeof box.height === 'undefined') {
	    box.height = document.body.scrollHeight - box.top - box.bottom;
	  }

	  box.top = box.top - docEl.clientTop;
	  box.left = box.left - docEl.clientLeft;
	  box.right = doc.body.clientWidth - box.width - box.left;
	  box.bottom = doc.body.clientHeight - box.height - box.top;

	  return box;
	}

	function getOffsetParent(el) {
	  return el.offsetParent || document.documentElement;
	}

	function getScrollBarSize() {
	  var inner = document.createElement('div');
	  inner.style.width = '100%';
	  inner.style.height = '200px';

	  var outer = document.createElement('div');
	  extend(outer.style, {
	    position: 'absolute',
	    top: 0,
	    left: 0,
	    pointerEvents: 'none',
	    visibility: 'hidden',
	    width: '200px',
	    height: '150px',
	    overflow: 'hidden'
	  });

	  outer.appendChild(inner);

	  document.body.appendChild(outer);

	  var widthContained = inner.offsetWidth;
	  outer.style.overflow = 'scroll';
	  var widthScroll = inner.offsetWidth;

	  if (widthContained === widthScroll) {
	    widthScroll = outer.clientWidth;
	  }

	  document.body.removeChild(outer);

	  var width = widthContained - widthScroll;

	  return { width: width, height: width };
	}

	function extend() {
	  var out = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  var args = [];

	  Array.prototype.push.apply(args, arguments);

	  args.slice(1).forEach(function (obj) {
	    if (obj) {
	      for (var key in obj) {
	        if (({}).hasOwnProperty.call(obj, key)) {
	          out[key] = obj[key];
	        }
	      }
	    }
	  });

	  return out;
	}

	function removeClass(el, name) {
	  if (typeof el.classList !== 'undefined') {
	    name.split(' ').forEach(function (cls) {
	      if (cls.trim()) {
	        el.classList.remove(cls);
	      }
	    });
	  } else {
	    var regex = new RegExp('(^| )' + name.split(' ').join('|') + '( |$)', 'gi');
	    var className = getClassName(el).replace(regex, ' ');
	    setClassName(el, className);
	  }
	}

	function addClass(el, name) {
	  if (typeof el.classList !== 'undefined') {
	    name.split(' ').forEach(function (cls) {
	      if (cls.trim()) {
	        el.classList.add(cls);
	      }
	    });
	  } else {
	    removeClass(el, name);
	    var cls = getClassName(el) + (' ' + name);
	    setClassName(el, cls);
	  }
	}

	function hasClass(el, name) {
	  if (typeof el.classList !== 'undefined') {
	    return el.classList.contains(name);
	  }
	  var className = getClassName(el);
	  return new RegExp('(^| )' + name + '( |$)', 'gi').test(className);
	}

	function getClassName(el) {
	  if (el.className instanceof SVGAnimatedString) {
	    return el.className.baseVal;
	  }
	  return el.className;
	}

	function setClassName(el, className) {
	  el.setAttribute('class', className);
	}

	function updateClasses(el, add, all) {
	  // Of the set of 'all' classes, we need the 'add' classes, and only the
	  // 'add' classes to be set.
	  all.forEach(function (cls) {
	    if (add.indexOf(cls) === -1 && hasClass(el, cls)) {
	      removeClass(el, cls);
	    }
	  });

	  add.forEach(function (cls) {
	    if (!hasClass(el, cls)) {
	      addClass(el, cls);
	    }
	  });
	}

	var deferred = [];

	var defer = function defer(fn) {
	  deferred.push(fn);
	};

	var flush = function flush() {
	  var fn = undefined;
	  while (fn = deferred.pop()) {
	    fn();
	  }
	};

	var Evented = (function () {
	  function Evented() {
	    _classCallCheck(this, Evented);
	  }

	  _createClass(Evented, [{
	    key: 'on',
	    value: function on(event, handler, ctx) {
	      var once = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

	      if (typeof this.bindings === 'undefined') {
	        this.bindings = {};
	      }
	      if (typeof this.bindings[event] === 'undefined') {
	        this.bindings[event] = [];
	      }
	      this.bindings[event].push({ handler: handler, ctx: ctx, once: once });
	    }
	  }, {
	    key: 'once',
	    value: function once(event, handler, ctx) {
	      this.on(event, handler, ctx, true);
	    }
	  }, {
	    key: 'off',
	    value: function off(event, handler) {
	      if (typeof this.bindings !== 'undefined' && typeof this.bindings[event] !== 'undefined') {
	        return;
	      }

	      if (typeof handler === 'undefined') {
	        delete this.bindings[event];
	      } else {
	        var i = 0;
	        while (i < this.bindings[event].length) {
	          if (this.bindings[event][i].handler === handler) {
	            this.bindings[event].splice(i, 1);
	          } else {
	            ++i;
	          }
	        }
	      }
	    }
	  }, {
	    key: 'trigger',
	    value: function trigger(event) {
	      if (typeof this.bindings !== 'undefined' && this.bindings[event]) {
	        var i = 0;

	        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	          args[_key - 1] = arguments[_key];
	        }

	        while (i < this.bindings[event].length) {
	          var _bindings$event$i = this.bindings[event][i];
	          var handler = _bindings$event$i.handler;
	          var ctx = _bindings$event$i.ctx;
	          var once = _bindings$event$i.once;

	          var context = ctx;
	          if (typeof context === 'undefined') {
	            context = this;
	          }

	          handler.apply(context, args);

	          if (once) {
	            this.bindings[event].splice(i, 1);
	          } else {
	            ++i;
	          }
	        }
	      }
	    }
	  }]);

	  return Evented;
	})();

	TetherBase.Utils = {
	  getScrollParent: getScrollParent,
	  getBounds: getBounds,
	  getOffsetParent: getOffsetParent,
	  extend: extend,
	  addClass: addClass,
	  removeClass: removeClass,
	  hasClass: hasClass,
	  updateClasses: updateClasses,
	  defer: defer,
	  flush: flush,
	  uniqueId: uniqueId,
	  Evented: Evented,
	  getScrollBarSize: getScrollBarSize
	};
	/* globals TetherBase, performance */

	'use strict';

	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	if (typeof TetherBase === 'undefined') {
	  throw new Error('You must include the utils.js file before tether.js');
	}

	var _TetherBase$Utils = TetherBase.Utils;
	var getScrollParent = _TetherBase$Utils.getScrollParent;
	var getBounds = _TetherBase$Utils.getBounds;
	var getOffsetParent = _TetherBase$Utils.getOffsetParent;
	var extend = _TetherBase$Utils.extend;
	var addClass = _TetherBase$Utils.addClass;
	var removeClass = _TetherBase$Utils.removeClass;
	var updateClasses = _TetherBase$Utils.updateClasses;
	var defer = _TetherBase$Utils.defer;
	var flush = _TetherBase$Utils.flush;
	var getScrollBarSize = _TetherBase$Utils.getScrollBarSize;

	function within(a, b) {
	  var diff = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];

	  return a + diff >= b && b >= a - diff;
	}

	var transformKey = (function () {
	  if (typeof document === 'undefined') {
	    return '';
	  }
	  var el = document.createElement('div');

	  var transforms = ['transform', 'webkitTransform', 'OTransform', 'MozTransform', 'msTransform'];
	  for (var i = 0; i < transforms.length; ++i) {
	    var key = transforms[i];
	    if (el.style[key] !== undefined) {
	      return key;
	    }
	  }
	})();

	var tethers = [];

	var position = function position() {
	  tethers.forEach(function (tether) {
	    tether.position(false);
	  });
	  flush();
	};

	function now() {
	  if (typeof performance !== 'undefined' && typeof performance.now !== 'undefined') {
	    return performance.now();
	  }
	  return +new Date();
	}

	(function () {
	  var lastCall = null;
	  var lastDuration = null;
	  var pendingTimeout = null;

	  var tick = function tick() {
	    if (typeof lastDuration !== 'undefined' && lastDuration > 16) {
	      // We voluntarily throttle ourselves if we can't manage 60fps
	      lastDuration = Math.min(lastDuration - 16, 250);

	      // Just in case this is the last event, remember to position just once more
	      pendingTimeout = setTimeout(tick, 250);
	      return;
	    }

	    if (typeof lastCall !== 'undefined' && now() - lastCall < 10) {
	      // Some browsers call events a little too frequently, refuse to run more than is reasonable
	      return;
	    }

	    if (typeof pendingTimeout !== 'undefined') {
	      clearTimeout(pendingTimeout);
	      pendingTimeout = null;
	    }

	    lastCall = now();
	    position();
	    lastDuration = now() - lastCall;
	  };

	  if (typeof window !== 'undefined') {
	    ['resize', 'scroll', 'touchmove'].forEach(function (event) {
	      window.addEventListener(event, tick);
	    });
	  }
	})();

	var MIRROR_LR = {
	  center: 'center',
	  left: 'right',
	  right: 'left'
	};

	var MIRROR_TB = {
	  middle: 'middle',
	  top: 'bottom',
	  bottom: 'top'
	};

	var OFFSET_MAP = {
	  top: 0,
	  left: 0,
	  middle: '50%',
	  center: '50%',
	  bottom: '100%',
	  right: '100%'
	};

	var autoToFixedAttachment = function autoToFixedAttachment(attachment, relativeToAttachment) {
	  var left = attachment.left;
	  var top = attachment.top;

	  if (left === 'auto') {
	    left = MIRROR_LR[relativeToAttachment.left];
	  }

	  if (top === 'auto') {
	    top = MIRROR_TB[relativeToAttachment.top];
	  }

	  return { left: left, top: top };
	};

	var attachmentToOffset = function attachmentToOffset(attachment) {
	  var left = attachment.left;
	  var top = attachment.top;

	  if (typeof OFFSET_MAP[attachment.left] !== 'undefined') {
	    left = OFFSET_MAP[attachment.left];
	  }

	  if (typeof OFFSET_MAP[attachment.top] !== 'undefined') {
	    top = OFFSET_MAP[attachment.top];
	  }

	  return { left: left, top: top };
	};

	function addOffset() {
	  var out = { top: 0, left: 0 };

	  for (var _len = arguments.length, offsets = Array(_len), _key = 0; _key < _len; _key++) {
	    offsets[_key] = arguments[_key];
	  }

	  offsets.forEach(function (_ref) {
	    var top = _ref.top;
	    var left = _ref.left;

	    if (typeof top === 'string') {
	      top = parseFloat(top, 10);
	    }
	    if (typeof left === 'string') {
	      left = parseFloat(left, 10);
	    }

	    out.top += top;
	    out.left += left;
	  });

	  return out;
	}

	function offsetToPx(offset, size) {
	  if (typeof offset.left === 'string' && offset.left.indexOf('%') !== -1) {
	    offset.left = parseFloat(offset.left, 10) / 100 * size.width;
	  }
	  if (typeof offset.top === 'string' && offset.top.indexOf('%') !== -1) {
	    offset.top = parseFloat(offset.top, 10) / 100 * size.height;
	  }

	  return offset;
	}

	var parseOffset = function parseOffset(value) {
	  var _value$split = value.split(' ');

	  var _value$split2 = _slicedToArray(_value$split, 2);

	  var top = _value$split2[0];
	  var left = _value$split2[1];

	  return { top: top, left: left };
	};
	var parseAttachment = parseOffset;

	var TetherClass = (function () {
	  function TetherClass(options) {
	    var _this = this;

	    _classCallCheck(this, TetherClass);

	    this.position = this.position.bind(this);

	    tethers.push(this);

	    this.history = [];

	    this.setOptions(options, false);

	    TetherBase.modules.forEach(function (module) {
	      if (typeof module.initialize !== 'undefined') {
	        module.initialize.call(_this);
	      }
	    });

	    this.position();
	  }

	  _createClass(TetherClass, [{
	    key: 'getClass',
	    value: function getClass() {
	      var key = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
	      var classes = this.options.classes;

	      if (typeof classes !== 'undefined' && classes[key]) {
	        return this.options.classes[key];
	      } else if (this.options.classPrefix) {
	        return this.options.classPrefix + '-' + key;
	      } else {
	        return key;
	      }
	    }
	  }, {
	    key: 'setOptions',
	    value: function setOptions(options) {
	      var _this2 = this;

	      var pos = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

	      var defaults = {
	        offset: '0 0',
	        targetOffset: '0 0',
	        targetAttachment: 'auto auto',
	        classPrefix: 'tether'
	      };

	      this.options = extend(defaults, options);

	      var _options = this.options;
	      var element = _options.element;
	      var target = _options.target;
	      var targetModifier = _options.targetModifier;

	      this.element = element;
	      this.target = target;
	      this.targetModifier = targetModifier;

	      if (this.target === 'viewport') {
	        this.target = document.body;
	        this.targetModifier = 'visible';
	      } else if (this.target === 'scroll-handle') {
	        this.target = document.body;
	        this.targetModifier = 'scroll-handle';
	      }

	      ['element', 'target'].forEach(function (key) {
	        if (typeof _this2[key] === 'undefined') {
	          throw new Error('Tether Error: Both element and target must be defined');
	        }

	        if (typeof _this2[key].jquery !== 'undefined') {
	          _this2[key] = _this2[key][0];
	        } else if (typeof _this2[key] === 'string') {
	          _this2[key] = document.querySelector(_this2[key]);
	        }
	      });

	      addClass(this.element, this.getClass('element'));
	      if (!(this.options.addTargetClasses === false)) {
	        addClass(this.target, this.getClass('target'));
	      }

	      if (!this.options.attachment) {
	        throw new Error('Tether Error: You must provide an attachment');
	      }

	      this.targetAttachment = parseAttachment(this.options.targetAttachment);
	      this.attachment = parseAttachment(this.options.attachment);
	      this.offset = parseOffset(this.options.offset);
	      this.targetOffset = parseOffset(this.options.targetOffset);

	      if (typeof this.scrollParent !== 'undefined') {
	        this.disable();
	      }

	      if (this.targetModifier === 'scroll-handle') {
	        this.scrollParent = this.target;
	      } else {
	        this.scrollParent = getScrollParent(this.target);
	      }

	      if (!(this.options.enabled === false)) {
	        this.enable(pos);
	      }
	    }
	  }, {
	    key: 'getTargetBounds',
	    value: function getTargetBounds() {
	      if (typeof this.targetModifier !== 'undefined') {
	        if (this.targetModifier === 'visible') {
	          if (this.target === document.body) {
	            return { top: pageYOffset, left: pageXOffset, height: innerHeight, width: innerWidth };
	          } else {
	            var bounds = getBounds(this.target);

	            var out = {
	              height: bounds.height,
	              width: bounds.width,
	              top: bounds.top,
	              left: bounds.left
	            };

	            out.height = Math.min(out.height, bounds.height - (pageYOffset - bounds.top));
	            out.height = Math.min(out.height, bounds.height - (bounds.top + bounds.height - (pageYOffset + innerHeight)));
	            out.height = Math.min(innerHeight, out.height);
	            out.height -= 2;

	            out.width = Math.min(out.width, bounds.width - (pageXOffset - bounds.left));
	            out.width = Math.min(out.width, bounds.width - (bounds.left + bounds.width - (pageXOffset + innerWidth)));
	            out.width = Math.min(innerWidth, out.width);
	            out.width -= 2;

	            if (out.top < pageYOffset) {
	              out.top = pageYOffset;
	            }
	            if (out.left < pageXOffset) {
	              out.left = pageXOffset;
	            }

	            return out;
	          }
	        } else if (this.targetModifier === 'scroll-handle') {
	          var bounds = undefined;
	          var target = this.target;
	          if (target === document.body) {
	            target = document.documentElement;

	            bounds = {
	              left: pageXOffset,
	              top: pageYOffset,
	              height: innerHeight,
	              width: innerWidth
	            };
	          } else {
	            bounds = getBounds(target);
	          }

	          var style = getComputedStyle(target);

	          var hasBottomScroll = target.scrollWidth > target.clientWidth || [style.overflow, style.overflowX].indexOf('scroll') >= 0 || this.target !== document.body;

	          var scrollBottom = 0;
	          if (hasBottomScroll) {
	            scrollBottom = 15;
	          }

	          var height = bounds.height - parseFloat(style.borderTopWidth) - parseFloat(style.borderBottomWidth) - scrollBottom;

	          var out = {
	            width: 15,
	            height: height * 0.975 * (height / target.scrollHeight),
	            left: bounds.left + bounds.width - parseFloat(style.borderLeftWidth) - 15
	          };

	          var fitAdj = 0;
	          if (height < 408 && this.target === document.body) {
	            fitAdj = -0.00011 * Math.pow(height, 2) - 0.00727 * height + 22.58;
	          }

	          if (this.target !== document.body) {
	            out.height = Math.max(out.height, 24);
	          }

	          var scrollPercentage = this.target.scrollTop / (target.scrollHeight - height);
	          out.top = scrollPercentage * (height - out.height - fitAdj) + bounds.top + parseFloat(style.borderTopWidth);

	          if (this.target === document.body) {
	            out.height = Math.max(out.height, 24);
	          }

	          return out;
	        }
	      } else {
	        return getBounds(this.target);
	      }
	    }
	  }, {
	    key: 'clearCache',
	    value: function clearCache() {
	      this._cache = {};
	    }
	  }, {
	    key: 'cache',
	    value: function cache(k, getter) {
	      // More than one module will often need the same DOM info, so
	      // we keep a cache which is cleared on each position call
	      if (typeof this._cache === 'undefined') {
	        this._cache = {};
	      }

	      if (typeof this._cache[k] === 'undefined') {
	        this._cache[k] = getter.call(this);
	      }

	      return this._cache[k];
	    }
	  }, {
	    key: 'enable',
	    value: function enable() {
	      var pos = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

	      if (!(this.options.addTargetClasses === false)) {
	        addClass(this.target, this.getClass('enabled'));
	      }
	      addClass(this.element, this.getClass('enabled'));
	      this.enabled = true;

	      if (this.scrollParent !== document) {
	        this.scrollParent.addEventListener('scroll', this.position);
	      }

	      if (pos) {
	        this.position();
	      }
	    }
	  }, {
	    key: 'disable',
	    value: function disable() {
	      removeClass(this.target, this.getClass('enabled'));
	      removeClass(this.element, this.getClass('enabled'));
	      this.enabled = false;

	      if (typeof this.scrollParent !== 'undefined') {
	        this.scrollParent.removeEventListener('scroll', this.position);
	      }
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      var _this3 = this;

	      this.disable();

	      tethers.forEach(function (tether, i) {
	        if (tether === _this3) {
	          tethers.splice(i, 1);
	          return;
	        }
	      });
	    }
	  }, {
	    key: 'updateAttachClasses',
	    value: function updateAttachClasses(elementAttach, targetAttach) {
	      var _this4 = this;

	      elementAttach = elementAttach || this.attachment;
	      targetAttach = targetAttach || this.targetAttachment;
	      var sides = ['left', 'top', 'bottom', 'right', 'middle', 'center'];

	      if (typeof this._addAttachClasses !== 'undefined' && this._addAttachClasses.length) {
	        // updateAttachClasses can be called more than once in a position call, so
	        // we need to clean up after ourselves such that when the last defer gets
	        // ran it doesn't add any extra classes from previous calls.
	        this._addAttachClasses.splice(0, this._addAttachClasses.length);
	      }

	      if (typeof this._addAttachClasses === 'undefined') {
	        this._addAttachClasses = [];
	      }
	      var add = this._addAttachClasses;

	      if (elementAttach.top) {
	        add.push(this.getClass('element-attached') + '-' + elementAttach.top);
	      }
	      if (elementAttach.left) {
	        add.push(this.getClass('element-attached') + '-' + elementAttach.left);
	      }
	      if (targetAttach.top) {
	        add.push(this.getClass('target-attached') + '-' + targetAttach.top);
	      }
	      if (targetAttach.left) {
	        add.push(this.getClass('target-attached') + '-' + targetAttach.left);
	      }

	      var all = [];
	      sides.forEach(function (side) {
	        all.push(_this4.getClass('element-attached') + '-' + side);
	        all.push(_this4.getClass('target-attached') + '-' + side);
	      });

	      defer(function () {
	        if (!(typeof _this4._addAttachClasses !== 'undefined')) {
	          return;
	        }

	        updateClasses(_this4.element, _this4._addAttachClasses, all);
	        if (!(_this4.options.addTargetClasses === false)) {
	          updateClasses(_this4.target, _this4._addAttachClasses, all);
	        }

	        delete _this4._addAttachClasses;
	      });
	    }
	  }, {
	    key: 'position',
	    value: function position() {
	      var _this5 = this;

	      var flushChanges = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

	      // flushChanges commits the changes immediately, leave true unless you are positioning multiple
	      // tethers (in which case call Tether.Utils.flush yourself when you're done)

	      if (!this.enabled) {
	        return;
	      }

	      this.clearCache();

	      // Turn 'auto' attachments into the appropriate corner or edge
	      var targetAttachment = autoToFixedAttachment(this.targetAttachment, this.attachment);

	      this.updateAttachClasses(this.attachment, targetAttachment);

	      var elementPos = this.cache('element-bounds', function () {
	        return getBounds(_this5.element);
	      });

	      var width = elementPos.width;
	      var height = elementPos.height;

	      if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {
	        var _lastSize = this.lastSize;

	        // We cache the height and width to make it possible to position elements that are
	        // getting hidden.
	        width = _lastSize.width;
	        height = _lastSize.height;
	      } else {
	        this.lastSize = { width: width, height: height };
	      }

	      var targetPos = this.cache('target-bounds', function () {
	        return _this5.getTargetBounds();
	      });
	      var targetSize = targetPos;

	      // Get an actual px offset from the attachment
	      var offset = offsetToPx(attachmentToOffset(this.attachment), { width: width, height: height });
	      var targetOffset = offsetToPx(attachmentToOffset(targetAttachment), targetSize);

	      var manualOffset = offsetToPx(this.offset, { width: width, height: height });
	      var manualTargetOffset = offsetToPx(this.targetOffset, targetSize);

	      // Add the manually provided offset
	      offset = addOffset(offset, manualOffset);
	      targetOffset = addOffset(targetOffset, manualTargetOffset);

	      // It's now our goal to make (element position + offset) == (target position + target offset)
	      var left = targetPos.left + targetOffset.left - offset.left;
	      var top = targetPos.top + targetOffset.top - offset.top;

	      for (var i = 0; i < TetherBase.modules.length; ++i) {
	        var _module2 = TetherBase.modules[i];
	        var ret = _module2.position.call(this, {
	          left: left,
	          top: top,
	          targetAttachment: targetAttachment,
	          targetPos: targetPos,
	          elementPos: elementPos,
	          offset: offset,
	          targetOffset: targetOffset,
	          manualOffset: manualOffset,
	          manualTargetOffset: manualTargetOffset,
	          scrollbarSize: scrollbarSize,
	          attachment: this.attachment
	        });

	        if (ret === false) {
	          return false;
	        } else if (typeof ret === 'undefined' || typeof ret !== 'object') {
	          continue;
	        } else {
	          top = ret.top;
	          left = ret.left;
	        }
	      }

	      // We describe the position three different ways to give the optimizer
	      // a chance to decide the best possible way to position the element
	      // with the fewest repaints.
	      var next = {
	        // It's position relative to the page (absolute positioning when
	        // the element is a child of the body)
	        page: {
	          top: top,
	          left: left
	        },

	        // It's position relative to the viewport (fixed positioning)
	        viewport: {
	          top: top - pageYOffset,
	          bottom: pageYOffset - top - height + innerHeight,
	          left: left - pageXOffset,
	          right: pageXOffset - left - width + innerWidth
	        }
	      };

	      var scrollbarSize = undefined;
	      if (document.body.scrollWidth > window.innerWidth) {
	        scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);
	        next.viewport.bottom -= scrollbarSize.height;
	      }

	      if (document.body.scrollHeight > window.innerHeight) {
	        scrollbarSize = this.cache('scrollbar-size', getScrollBarSize);
	        next.viewport.right -= scrollbarSize.width;
	      }

	      if (['', 'static'].indexOf(document.body.style.position) === -1 || ['', 'static'].indexOf(document.body.parentElement.style.position) === -1) {
	        // Absolute positioning in the body will be relative to the page, not the 'initial containing block'
	        next.page.bottom = document.body.scrollHeight - top - height;
	        next.page.right = document.body.scrollWidth - left - width;
	      }

	      if (typeof this.options.optimizations !== 'undefined' && this.options.optimizations.moveElement !== false && !(typeof this.targetModifier !== 'undefined')) {
	        (function () {
	          var offsetParent = _this5.cache('target-offsetparent', function () {
	            return getOffsetParent(_this5.target);
	          });
	          var offsetPosition = _this5.cache('target-offsetparent-bounds', function () {
	            return getBounds(offsetParent);
	          });
	          var offsetParentStyle = getComputedStyle(offsetParent);
	          var offsetParentSize = offsetPosition;

	          var offsetBorder = {};
	          ['Top', 'Left', 'Bottom', 'Right'].forEach(function (side) {
	            offsetBorder[side.toLowerCase()] = parseFloat(offsetParentStyle['border' + side + 'Width']);
	          });

	          offsetPosition.right = document.body.scrollWidth - offsetPosition.left - offsetParentSize.width + offsetBorder.right;
	          offsetPosition.bottom = document.body.scrollHeight - offsetPosition.top - offsetParentSize.height + offsetBorder.bottom;

	          if (next.page.top >= offsetPosition.top + offsetBorder.top && next.page.bottom >= offsetPosition.bottom) {
	            if (next.page.left >= offsetPosition.left + offsetBorder.left && next.page.right >= offsetPosition.right) {
	              // We're within the visible part of the target's scroll parent
	              var scrollTop = offsetParent.scrollTop;
	              var scrollLeft = offsetParent.scrollLeft;

	              // It's position relative to the target's offset parent (absolute positioning when
	              // the element is moved to be a child of the target's offset parent).
	              next.offset = {
	                top: next.page.top - offsetPosition.top + scrollTop - offsetBorder.top,
	                left: next.page.left - offsetPosition.left + scrollLeft - offsetBorder.left
	              };
	            }
	          }
	        })();
	      }

	      // We could also travel up the DOM and try each containing context, rather than only
	      // looking at the body, but we're gonna get diminishing returns.

	      this.move(next);

	      this.history.unshift(next);

	      if (this.history.length > 3) {
	        this.history.pop();
	      }

	      if (flushChanges) {
	        flush();
	      }

	      return true;
	    }

	    // THE ISSUE
	  }, {
	    key: 'move',
	    value: function move(pos) {
	      var _this6 = this;

	      if (!(typeof this.element.parentNode !== 'undefined')) {
	        return;
	      }

	      var same = {};

	      for (var type in pos) {
	        same[type] = {};

	        for (var key in pos[type]) {
	          var found = false;

	          for (var i = 0; i < this.history.length; ++i) {
	            var point = this.history[i];
	            if (typeof point[type] !== 'undefined' && !within(point[type][key], pos[type][key])) {
	              found = true;
	              break;
	            }
	          }

	          if (!found) {
	            same[type][key] = true;
	          }
	        }
	      }

	      var css = { top: '', left: '', right: '', bottom: '' };

	      var transcribe = function transcribe(_same, _pos) {
	        var hasOptimizations = typeof _this6.options.optimizations !== 'undefined';
	        var gpu = hasOptimizations ? _this6.options.optimizations.gpu : null;
	        if (gpu !== false) {
	          var yPos = undefined,
	              xPos = undefined;
	          if (_same.top) {
	            css.top = 0;
	            yPos = _pos.top;
	          } else {
	            css.bottom = 0;
	            yPos = -_pos.bottom;
	          }

	          if (_same.left) {
	            css.left = 0;
	            xPos = _pos.left;
	          } else {
	            css.right = 0;
	            xPos = -_pos.right;
	          }

	          css[transformKey] = 'translateX(' + Math.round(xPos) + 'px) translateY(' + Math.round(yPos) + 'px)';

	          if (transformKey !== 'msTransform') {
	            // The Z transform will keep this in the GPU (faster, and prevents artifacts),
	            // but IE9 doesn't support 3d transforms and will choke.
	            css[transformKey] += " translateZ(0)";
	          }
	        } else {
	          if (_same.top) {
	            css.top = _pos.top + 'px';
	          } else {
	            css.bottom = _pos.bottom + 'px';
	          }

	          if (_same.left) {
	            css.left = _pos.left + 'px';
	          } else {
	            css.right = _pos.right + 'px';
	          }
	        }
	      };

	      var moved = false;
	      if ((same.page.top || same.page.bottom) && (same.page.left || same.page.right)) {
	        css.position = 'absolute';
	        transcribe(same.page, pos.page);
	      } else if ((same.viewport.top || same.viewport.bottom) && (same.viewport.left || same.viewport.right)) {
	        css.position = 'fixed';
	        transcribe(same.viewport, pos.viewport);
	      } else if (typeof same.offset !== 'undefined' && same.offset.top && same.offset.left) {
	        (function () {
	          css.position = 'absolute';
	          var offsetParent = _this6.cache('target-offsetparent', function () {
	            return getOffsetParent(_this6.target);
	          });

	          if (getOffsetParent(_this6.element) !== offsetParent) {
	            defer(function () {
	              _this6.element.parentNode.removeChild(_this6.element);
	              offsetParent.appendChild(_this6.element);
	            });
	          }

	          transcribe(same.offset, pos.offset);
	          moved = true;
	        })();
	      } else {
	        css.position = 'absolute';
	        transcribe({ top: true, left: true }, pos.page);
	      }

	      if (!moved) {
	        var offsetParentIsBody = true;
	        var currentNode = this.element.parentNode;
	        while (currentNode && currentNode.tagName !== 'BODY') {
	          if (getComputedStyle(currentNode).position !== 'static') {
	            offsetParentIsBody = false;
	            break;
	          }

	          currentNode = currentNode.parentNode;
	        }

	        if (!offsetParentIsBody) {
	          this.element.parentNode.removeChild(this.element);
	          document.body.appendChild(this.element);
	        }
	      }

	      // Any css change will trigger a repaint, so let's avoid one if nothing changed
	      var writeCSS = {};
	      var write = false;
	      for (var key in css) {
	        var val = css[key];
	        var elVal = this.element.style[key];

	        if (elVal !== '' && val !== '' && ['top', 'left', 'bottom', 'right'].indexOf(key) >= 0) {
	          elVal = parseFloat(elVal);
	          val = parseFloat(val);
	        }

	        if (elVal !== val) {
	          write = true;
	          writeCSS[key] = val;
	        }
	      }

	      if (write) {
	        defer(function () {
	          extend(_this6.element.style, writeCSS);
	        });
	      }
	    }
	  }]);

	  return TetherClass;
	})();

	TetherClass.modules = [];

	TetherBase.position = position;

	var Tether = extend(TetherClass, TetherBase);
	/* globals TetherBase */

	'use strict';

	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

	var _TetherBase$Utils = TetherBase.Utils;
	var getBounds = _TetherBase$Utils.getBounds;
	var extend = _TetherBase$Utils.extend;
	var updateClasses = _TetherBase$Utils.updateClasses;
	var defer = _TetherBase$Utils.defer;

	var BOUNDS_FORMAT = ['left', 'top', 'right', 'bottom'];

	function getBoundingRect(tether, to) {
	  if (to === 'scrollParent') {
	    to = tether.scrollParent;
	  } else if (to === 'window') {
	    to = [pageXOffset, pageYOffset, innerWidth + pageXOffset, innerHeight + pageYOffset];
	  }

	  if (to === document) {
	    to = to.documentElement;
	  }

	  if (typeof to.nodeType !== 'undefined') {
	    (function () {
	      var size = getBounds(to);
	      var pos = size;
	      var style = getComputedStyle(to);

	      to = [pos.left, pos.top, size.width + pos.left, size.height + pos.top];

	      BOUNDS_FORMAT.forEach(function (side, i) {
	        side = side[0].toUpperCase() + side.substr(1);
	        if (side === 'Top' || side === 'Left') {
	          to[i] += parseFloat(style['border' + side + 'Width']);
	        } else {
	          to[i] -= parseFloat(style['border' + side + 'Width']);
	        }
	      });
	    })();
	  }

	  return to;
	}

	TetherBase.modules.push({
	  position: function position(_ref) {
	    var _this = this;

	    var top = _ref.top;
	    var left = _ref.left;
	    var targetAttachment = _ref.targetAttachment;

	    if (!this.options.constraints) {
	      return true;
	    }

	    var _cache = this.cache('element-bounds', function () {
	      return getBounds(_this.element);
	    });

	    var height = _cache.height;
	    var width = _cache.width;

	    if (width === 0 && height === 0 && typeof this.lastSize !== 'undefined') {
	      var _lastSize = this.lastSize;

	      // Handle the item getting hidden as a result of our positioning without glitching
	      // the classes in and out
	      width = _lastSize.width;
	      height = _lastSize.height;
	    }

	    var targetSize = this.cache('target-bounds', function () {
	      return _this.getTargetBounds();
	    });

	    var targetHeight = targetSize.height;
	    var targetWidth = targetSize.width;

	    var allClasses = [this.getClass('pinned'), this.getClass('out-of-bounds')];

	    this.options.constraints.forEach(function (constraint) {
	      var outOfBoundsClass = constraint.outOfBoundsClass;
	      var pinnedClass = constraint.pinnedClass;

	      if (outOfBoundsClass) {
	        allClasses.push(outOfBoundsClass);
	      }
	      if (pinnedClass) {
	        allClasses.push(pinnedClass);
	      }
	    });

	    allClasses.forEach(function (cls) {
	      ['left', 'top', 'right', 'bottom'].forEach(function (side) {
	        allClasses.push(cls + '-' + side);
	      });
	    });

	    var addClasses = [];

	    var tAttachment = extend({}, targetAttachment);
	    var eAttachment = extend({}, this.attachment);

	    this.options.constraints.forEach(function (constraint) {
	      var to = constraint.to;
	      var attachment = constraint.attachment;
	      var pin = constraint.pin;

	      if (typeof attachment === 'undefined') {
	        attachment = '';
	      }

	      var changeAttachX = undefined,
	          changeAttachY = undefined;
	      if (attachment.indexOf(' ') >= 0) {
	        var _attachment$split = attachment.split(' ');

	        var _attachment$split2 = _slicedToArray(_attachment$split, 2);

	        changeAttachY = _attachment$split2[0];
	        changeAttachX = _attachment$split2[1];
	      } else {
	        changeAttachX = changeAttachY = attachment;
	      }

	      var bounds = getBoundingRect(_this, to);

	      if (changeAttachY === 'target' || changeAttachY === 'both') {
	        if (top < bounds[1] && tAttachment.top === 'top') {
	          top += targetHeight;
	          tAttachment.top = 'bottom';
	        }

	        if (top + height > bounds[3] && tAttachment.top === 'bottom') {
	          top -= targetHeight;
	          tAttachment.top = 'top';
	        }
	      }

	      if (changeAttachY === 'together') {
	        if (top < bounds[1] && tAttachment.top === 'top') {
	          if (eAttachment.top === 'bottom') {
	            top += targetHeight;
	            tAttachment.top = 'bottom';

	            top += height;
	            eAttachment.top = 'top';
	          } else if (eAttachment.top === 'top') {
	            top += targetHeight;
	            tAttachment.top = 'bottom';

	            top -= height;
	            eAttachment.top = 'bottom';
	          }
	        }

	        if (top + height > bounds[3] && tAttachment.top === 'bottom') {
	          if (eAttachment.top === 'top') {
	            top -= targetHeight;
	            tAttachment.top = 'top';

	            top -= height;
	            eAttachment.top = 'bottom';
	          } else if (eAttachment.top === 'bottom') {
	            top -= targetHeight;
	            tAttachment.top = 'top';

	            top += height;
	            eAttachment.top = 'top';
	          }
	        }

	        if (tAttachment.top === 'middle') {
	          if (top + height > bounds[3] && eAttachment.top === 'top') {
	            top -= height;
	            eAttachment.top = 'bottom';
	          } else if (top < bounds[1] && eAttachment.top === 'bottom') {
	            top += height;
	            eAttachment.top = 'top';
	          }
	        }
	      }

	      if (changeAttachX === 'target' || changeAttachX === 'both') {
	        if (left < bounds[0] && tAttachment.left === 'left') {
	          left += targetWidth;
	          tAttachment.left = 'right';
	        }

	        if (left + width > bounds[2] && tAttachment.left === 'right') {
	          left -= targetWidth;
	          tAttachment.left = 'left';
	        }
	      }

	      if (changeAttachX === 'together') {
	        if (left < bounds[0] && tAttachment.left === 'left') {
	          if (eAttachment.left === 'right') {
	            left += targetWidth;
	            tAttachment.left = 'right';

	            left += width;
	            eAttachment.left = 'left';
	          } else if (eAttachment.left === 'left') {
	            left += targetWidth;
	            tAttachment.left = 'right';

	            left -= width;
	            eAttachment.left = 'right';
	          }
	        } else if (left + width > bounds[2] && tAttachment.left === 'right') {
	          if (eAttachment.left === 'left') {
	            left -= targetWidth;
	            tAttachment.left = 'left';

	            left -= width;
	            eAttachment.left = 'right';
	          } else if (eAttachment.left === 'right') {
	            left -= targetWidth;
	            tAttachment.left = 'left';

	            left += width;
	            eAttachment.left = 'left';
	          }
	        } else if (tAttachment.left === 'center') {
	          if (left + width > bounds[2] && eAttachment.left === 'left') {
	            left -= width;
	            eAttachment.left = 'right';
	          } else if (left < bounds[0] && eAttachment.left === 'right') {
	            left += width;
	            eAttachment.left = 'left';
	          }
	        }
	      }

	      if (changeAttachY === 'element' || changeAttachY === 'both') {
	        if (top < bounds[1] && eAttachment.top === 'bottom') {
	          top += height;
	          eAttachment.top = 'top';
	        }

	        if (top + height > bounds[3] && eAttachment.top === 'top') {
	          top -= height;
	          eAttachment.top = 'bottom';
	        }
	      }

	      if (changeAttachX === 'element' || changeAttachX === 'both') {
	        if (left < bounds[0] && eAttachment.left === 'right') {
	          left += width;
	          eAttachment.left = 'left';
	        }

	        if (left + width > bounds[2] && eAttachment.left === 'left') {
	          left -= width;
	          eAttachment.left = 'right';
	        }
	      }

	      if (typeof pin === 'string') {
	        pin = pin.split(',').map(function (p) {
	          return p.trim();
	        });
	      } else if (pin === true) {
	        pin = ['top', 'left', 'right', 'bottom'];
	      }

	      pin = pin || [];

	      var pinned = [];
	      var oob = [];

	      if (top < bounds[1]) {
	        if (pin.indexOf('top') >= 0) {
	          top = bounds[1];
	          pinned.push('top');
	        } else {
	          oob.push('top');
	        }
	      }

	      if (top + height > bounds[3]) {
	        if (pin.indexOf('bottom') >= 0) {
	          top = bounds[3] - height;
	          pinned.push('bottom');
	        } else {
	          oob.push('bottom');
	        }
	      }

	      if (left < bounds[0]) {
	        if (pin.indexOf('left') >= 0) {
	          left = bounds[0];
	          pinned.push('left');
	        } else {
	          oob.push('left');
	        }
	      }

	      if (left + width > bounds[2]) {
	        if (pin.indexOf('right') >= 0) {
	          left = bounds[2] - width;
	          pinned.push('right');
	        } else {
	          oob.push('right');
	        }
	      }

	      if (pinned.length) {
	        (function () {
	          var pinnedClass = undefined;
	          if (typeof _this.options.pinnedClass !== 'undefined') {
	            pinnedClass = _this.options.pinnedClass;
	          } else {
	            pinnedClass = _this.getClass('pinned');
	          }

	          addClasses.push(pinnedClass);
	          pinned.forEach(function (side) {
	            addClasses.push(pinnedClass + '-' + side);
	          });
	        })();
	      }

	      if (oob.length) {
	        (function () {
	          var oobClass = undefined;
	          if (typeof _this.options.outOfBoundsClass !== 'undefined') {
	            oobClass = _this.options.outOfBoundsClass;
	          } else {
	            oobClass = _this.getClass('out-of-bounds');
	          }

	          addClasses.push(oobClass);
	          oob.forEach(function (side) {
	            addClasses.push(oobClass + '-' + side);
	          });
	        })();
	      }

	      if (pinned.indexOf('left') >= 0 || pinned.indexOf('right') >= 0) {
	        eAttachment.left = tAttachment.left = false;
	      }
	      if (pinned.indexOf('top') >= 0 || pinned.indexOf('bottom') >= 0) {
	        eAttachment.top = tAttachment.top = false;
	      }

	      if (tAttachment.top !== targetAttachment.top || tAttachment.left !== targetAttachment.left || eAttachment.top !== _this.attachment.top || eAttachment.left !== _this.attachment.left) {
	        _this.updateAttachClasses(eAttachment, tAttachment);
	      }
	    });

	    defer(function () {
	      if (!(_this.options.addTargetClasses === false)) {
	        updateClasses(_this.target, addClasses, allClasses);
	      }
	      updateClasses(_this.element, addClasses, allClasses);
	    });

	    return { top: top, left: left };
	  }
	});
	/* globals TetherBase */

	'use strict';

	var _TetherBase$Utils = TetherBase.Utils;
	var getBounds = _TetherBase$Utils.getBounds;
	var updateClasses = _TetherBase$Utils.updateClasses;
	var defer = _TetherBase$Utils.defer;

	TetherBase.modules.push({
	  position: function position(_ref) {
	    var _this = this;

	    var top = _ref.top;
	    var left = _ref.left;

	    var _cache = this.cache('element-bounds', function () {
	      return getBounds(_this.element);
	    });

	    var height = _cache.height;
	    var width = _cache.width;

	    var targetPos = this.getTargetBounds();

	    var bottom = top + height;
	    var right = left + width;

	    var abutted = [];
	    if (top <= targetPos.bottom && bottom >= targetPos.top) {
	      ['left', 'right'].forEach(function (side) {
	        var targetPosSide = targetPos[side];
	        if (targetPosSide === left || targetPosSide === right) {
	          abutted.push(side);
	        }
	      });
	    }

	    if (left <= targetPos.right && right >= targetPos.left) {
	      ['top', 'bottom'].forEach(function (side) {
	        var targetPosSide = targetPos[side];
	        if (targetPosSide === top || targetPosSide === bottom) {
	          abutted.push(side);
	        }
	      });
	    }

	    var allClasses = [];
	    var addClasses = [];

	    var sides = ['left', 'top', 'right', 'bottom'];
	    allClasses.push(this.getClass('abutted'));
	    sides.forEach(function (side) {
	      allClasses.push(_this.getClass('abutted') + '-' + side);
	    });

	    if (abutted.length) {
	      addClasses.push(this.getClass('abutted'));
	    }

	    abutted.forEach(function (side) {
	      addClasses.push(_this.getClass('abutted') + '-' + side);
	    });

	    defer(function () {
	      if (!(_this.options.addTargetClasses === false)) {
	        updateClasses(_this.target, addClasses, allClasses);
	      }
	      updateClasses(_this.element, addClasses, allClasses);
	    });

	    return true;
	  }
	});
	/* globals TetherBase */

	'use strict';

	var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

	TetherBase.modules.push({
	  position: function position(_ref) {
	    var top = _ref.top;
	    var left = _ref.left;

	    if (!this.options.shift) {
	      return;
	    }

	    var shift = this.options.shift;
	    if (typeof this.options.shift === 'function') {
	      shift = this.options.shift.call(this, { top: top, left: left });
	    }

	    var shiftTop = undefined,
	        shiftLeft = undefined;
	    if (typeof shift === 'string') {
	      shift = shift.split(' ');
	      shift[1] = shift[1] || shift[0];

	      var _shift = shift;

	      var _shift2 = _slicedToArray(_shift, 2);

	      shiftTop = _shift2[0];
	      shiftLeft = _shift2[1];

	      shiftTop = parseFloat(shiftTop, 10);
	      shiftLeft = parseFloat(shiftLeft, 10);
	    } else {
	      shiftTop = shift.top;
	      shiftLeft = shift.left;
	    }

	    top += shiftTop;
	    left += shiftLeft;

	    return { top: top, left: left };
	  }
	});
	return Tether;

	}));


/***/ },

/***/ 407:
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },

/***/ 409:
/***/ function(module, exports) {

	/* ========================================================================
	 * bootstrap-switch - v3.3.2
	 * http://www.bootstrap-switch.org
	 * ========================================================================
	 * Copyright 2012-2013 Mattia Larentis
	 *
	 * ========================================================================
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 * ========================================================================
	 */

	(function() {
	  var __slice = [].slice;

	  (function($, window) {
	    "use strict";
	    var BootstrapSwitch;
	    BootstrapSwitch = (function() {
	      function BootstrapSwitch(element, options) {
	        if (options == null) {
	          options = {};
	        }
	        this.$element = $(element);
	        this.options = $.extend({}, $.fn.bootstrapSwitch.defaults, {
	          state: this.$element.is(":checked"),
	          size: this.$element.data("size"),
	          animate: this.$element.data("animate"),
	          disabled: this.$element.is(":disabled"),
	          readonly: this.$element.is("[readonly]"),
	          indeterminate: this.$element.data("indeterminate"),
	          inverse: this.$element.data("inverse"),
	          radioAllOff: this.$element.data("radio-all-off"),
	          onColor: this.$element.data("on-color"),
	          offColor: this.$element.data("off-color"),
	          onText: this.$element.data("on-text"),
	          offText: this.$element.data("off-text"),
	          labelText: this.$element.data("label-text"),
	          handleWidth: this.$element.data("handle-width"),
	          labelWidth: this.$element.data("label-width"),
	          baseClass: this.$element.data("base-class"),
	          wrapperClass: this.$element.data("wrapper-class")
	        }, options);
	        this.$wrapper = $("<div>", {
	          "class": (function(_this) {
	            return function() {
	              var classes;
	              classes = ["" + _this.options.baseClass].concat(_this._getClasses(_this.options.wrapperClass));
	              classes.push(_this.options.state ? "" + _this.options.baseClass + "-on" : "" + _this.options.baseClass + "-off");
	              if (_this.options.size != null) {
	                classes.push("" + _this.options.baseClass + "-" + _this.options.size);
	              }
	              if (_this.options.disabled) {
	                classes.push("" + _this.options.baseClass + "-disabled");
	              }
	              if (_this.options.readonly) {
	                classes.push("" + _this.options.baseClass + "-readonly");
	              }
	              if (_this.options.indeterminate) {
	                classes.push("" + _this.options.baseClass + "-indeterminate");
	              }
	              if (_this.options.inverse) {
	                classes.push("" + _this.options.baseClass + "-inverse");
	              }
	              if (_this.$element.attr("id")) {
	                classes.push("" + _this.options.baseClass + "-id-" + (_this.$element.attr("id")));
	              }
	              return classes.join(" ");
	            };
	          })(this)()
	        });
	        this.$container = $("<div>", {
	          "class": "" + this.options.baseClass + "-container"
	        });
	        this.$on = $("<span>", {
	          html: this.options.onText,
	          "class": "" + this.options.baseClass + "-handle-on " + this.options.baseClass + "-" + this.options.onColor
	        });
	        this.$off = $("<span>", {
	          html: this.options.offText,
	          "class": "" + this.options.baseClass + "-handle-off " + this.options.baseClass + "-" + this.options.offColor
	        });
	        this.$label = $("<span>", {
	          html: this.options.labelText,
	          "class": "" + this.options.baseClass + "-label"
	        });
	        this.$element.on("init.bootstrapSwitch", (function(_this) {
	          return function() {
	            return _this.options.onInit.apply(element, arguments);
	          };
	        })(this));
	        this.$element.on("switchChange.bootstrapSwitch", (function(_this) {
	          return function() {
	            return _this.options.onSwitchChange.apply(element, arguments);
	          };
	        })(this));
	        this.$container = this.$element.wrap(this.$container).parent();
	        this.$wrapper = this.$container.wrap(this.$wrapper).parent();
	        this.$element.before(this.options.inverse ? this.$off : this.$on).before(this.$label).before(this.options.inverse ? this.$on : this.$off);
	        if (this.options.indeterminate) {
	          this.$element.prop("indeterminate", true);
	        }
	        this._init();
	        this._elementHandlers();
	        this._handleHandlers();
	        this._labelHandlers();
	        this._formHandler();
	        this._externalLabelHandler();
	        this.$element.trigger("init.bootstrapSwitch");
	      }

	      BootstrapSwitch.prototype._constructor = BootstrapSwitch;

	      BootstrapSwitch.prototype.state = function(value, skip) {
	        if (typeof value === "undefined") {
	          return this.options.state;
	        }
	        if (this.options.disabled || this.options.readonly) {
	          return this.$element;
	        }
	        if (this.options.state && !this.options.radioAllOff && this.$element.is(":radio")) {
	          return this.$element;
	        }
	        if (this.options.indeterminate) {
	          this.indeterminate(false);
	        }
	        value = !!value;
	        this.$element.prop("checked", value).trigger("change.bootstrapSwitch", skip);
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.toggleState = function(skip) {
	        if (this.options.disabled || this.options.readonly) {
	          return this.$element;
	        }
	        if (this.options.indeterminate) {
	          this.indeterminate(false);
	          return this.state(true);
	        } else {
	          return this.$element.prop("checked", !this.options.state).trigger("change.bootstrapSwitch", skip);
	        }
	      };

	      BootstrapSwitch.prototype.size = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.size;
	        }
	        if (this.options.size != null) {
	          this.$wrapper.removeClass("" + this.options.baseClass + "-" + this.options.size);
	        }
	        if (value) {
	          this.$wrapper.addClass("" + this.options.baseClass + "-" + value);
	        }
	        this._width();
	        this._containerPosition();
	        this.options.size = value;
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.animate = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.animate;
	        }
	        value = !!value;
	        if (value === this.options.animate) {
	          return this.$element;
	        }
	        return this.toggleAnimate();
	      };

	      BootstrapSwitch.prototype.toggleAnimate = function() {
	        this.options.animate = !this.options.animate;
	        this.$wrapper.toggleClass("" + this.options.baseClass + "-animate");
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.disabled = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.disabled;
	        }
	        value = !!value;
	        if (value === this.options.disabled) {
	          return this.$element;
	        }
	        return this.toggleDisabled();
	      };

	      BootstrapSwitch.prototype.toggleDisabled = function() {
	        this.options.disabled = !this.options.disabled;
	        this.$element.prop("disabled", this.options.disabled);
	        this.$wrapper.toggleClass("" + this.options.baseClass + "-disabled");
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.readonly = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.readonly;
	        }
	        value = !!value;
	        if (value === this.options.readonly) {
	          return this.$element;
	        }
	        return this.toggleReadonly();
	      };

	      BootstrapSwitch.prototype.toggleReadonly = function() {
	        this.options.readonly = !this.options.readonly;
	        this.$element.prop("readonly", this.options.readonly);
	        this.$wrapper.toggleClass("" + this.options.baseClass + "-readonly");
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.indeterminate = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.indeterminate;
	        }
	        value = !!value;
	        if (value === this.options.indeterminate) {
	          return this.$element;
	        }
	        return this.toggleIndeterminate();
	      };

	      BootstrapSwitch.prototype.toggleIndeterminate = function() {
	        this.options.indeterminate = !this.options.indeterminate;
	        this.$element.prop("indeterminate", this.options.indeterminate);
	        this.$wrapper.toggleClass("" + this.options.baseClass + "-indeterminate");
	        this._containerPosition();
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.inverse = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.inverse;
	        }
	        value = !!value;
	        if (value === this.options.inverse) {
	          return this.$element;
	        }
	        return this.toggleInverse();
	      };

	      BootstrapSwitch.prototype.toggleInverse = function() {
	        var $off, $on;
	        this.$wrapper.toggleClass("" + this.options.baseClass + "-inverse");
	        $on = this.$on.clone(true);
	        $off = this.$off.clone(true);
	        this.$on.replaceWith($off);
	        this.$off.replaceWith($on);
	        this.$on = $off;
	        this.$off = $on;
	        this.options.inverse = !this.options.inverse;
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.onColor = function(value) {
	        var color;
	        color = this.options.onColor;
	        if (typeof value === "undefined") {
	          return color;
	        }
	        if (color != null) {
	          this.$on.removeClass("" + this.options.baseClass + "-" + color);
	        }
	        this.$on.addClass("" + this.options.baseClass + "-" + value);
	        this.options.onColor = value;
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.offColor = function(value) {
	        var color;
	        color = this.options.offColor;
	        if (typeof value === "undefined") {
	          return color;
	        }
	        if (color != null) {
	          this.$off.removeClass("" + this.options.baseClass + "-" + color);
	        }
	        this.$off.addClass("" + this.options.baseClass + "-" + value);
	        this.options.offColor = value;
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.onText = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.onText;
	        }
	        this.$on.html(value);
	        this._width();
	        this._containerPosition();
	        this.options.onText = value;
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.offText = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.offText;
	        }
	        this.$off.html(value);
	        this._width();
	        this._containerPosition();
	        this.options.offText = value;
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.labelText = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.labelText;
	        }
	        this.$label.html(value);
	        this._width();
	        this.options.labelText = value;
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.handleWidth = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.handleWidth;
	        }
	        this.options.handleWidth = value;
	        this._width();
	        this._containerPosition();
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.labelWidth = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.labelWidth;
	        }
	        this.options.labelWidth = value;
	        this._width();
	        this._containerPosition();
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.baseClass = function(value) {
	        return this.options.baseClass;
	      };

	      BootstrapSwitch.prototype.wrapperClass = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.wrapperClass;
	        }
	        if (!value) {
	          value = $.fn.bootstrapSwitch.defaults.wrapperClass;
	        }
	        this.$wrapper.removeClass(this._getClasses(this.options.wrapperClass).join(" "));
	        this.$wrapper.addClass(this._getClasses(value).join(" "));
	        this.options.wrapperClass = value;
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.radioAllOff = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.radioAllOff;
	        }
	        value = !!value;
	        if (value === this.options.radioAllOff) {
	          return this.$element;
	        }
	        this.options.radioAllOff = value;
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.onInit = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.onInit;
	        }
	        if (!value) {
	          value = $.fn.bootstrapSwitch.defaults.onInit;
	        }
	        this.options.onInit = value;
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.onSwitchChange = function(value) {
	        if (typeof value === "undefined") {
	          return this.options.onSwitchChange;
	        }
	        if (!value) {
	          value = $.fn.bootstrapSwitch.defaults.onSwitchChange;
	        }
	        this.options.onSwitchChange = value;
	        return this.$element;
	      };

	      BootstrapSwitch.prototype.destroy = function() {
	        var $form;
	        $form = this.$element.closest("form");
	        if ($form.length) {
	          $form.off("reset.bootstrapSwitch").removeData("bootstrap-switch");
	        }
	        this.$container.children().not(this.$element).remove();
	        this.$element.unwrap().unwrap().off(".bootstrapSwitch").removeData("bootstrap-switch");
	        return this.$element;
	      };

	      BootstrapSwitch.prototype._width = function() {
	        var $handles, handleWidth;
	        $handles = this.$on.add(this.$off);
	        $handles.add(this.$label).css("width", "");
	        handleWidth = this.options.handleWidth === "auto" ? Math.max(this.$on.width(), this.$off.width()) : this.options.handleWidth;
	        $handles.width(handleWidth);
	        this.$label.width((function(_this) {
	          return function(index, width) {
	            if (_this.options.labelWidth !== "auto") {
	              return _this.options.labelWidth;
	            }
	            if (width < handleWidth) {
	              return handleWidth;
	            } else {
	              return width;
	            }
	          };
	        })(this));
	        this._handleWidth = this.$on.outerWidth();
	        this._labelWidth = this.$label.outerWidth();
	        this.$container.width((this._handleWidth * 2) + this._labelWidth);
	        return this.$wrapper.width(this._handleWidth + this._labelWidth);
	      };

	      BootstrapSwitch.prototype._containerPosition = function(state, callback) {
	        if (state == null) {
	          state = this.options.state;
	        }
	        this.$container.css("margin-left", (function(_this) {
	          return function() {
	            var values;
	            values = [0, "-" + _this._handleWidth + "px"];
	            if (_this.options.indeterminate) {
	              return "-" + (_this._handleWidth / 2) + "px";
	            }
	            if (state) {
	              if (_this.options.inverse) {
	                return values[1];
	              } else {
	                return values[0];
	              }
	            } else {
	              if (_this.options.inverse) {
	                return values[0];
	              } else {
	                return values[1];
	              }
	            }
	          };
	        })(this));
	        if (!callback) {
	          return;
	        }
	        return setTimeout(function() {
	          return callback();
	        }, 50);
	      };

	      BootstrapSwitch.prototype._init = function() {
	        var init, initInterval;
	        init = (function(_this) {
	          return function() {
	            _this._width();
	            return _this._containerPosition(null, function() {
	              if (_this.options.animate) {
	                return _this.$wrapper.addClass("" + _this.options.baseClass + "-animate");
	              }
	            });
	          };
	        })(this);
	        if (this.$wrapper.is(":visible")) {
	          return init();
	        }
	        return initInterval = window.setInterval((function(_this) {
	          return function() {
	            if (_this.$wrapper.is(":visible")) {
	              init();
	              return window.clearInterval(initInterval);
	            }
	          };
	        })(this), 50);
	      };

	      BootstrapSwitch.prototype._elementHandlers = function() {
	        return this.$element.on({
	          "change.bootstrapSwitch": (function(_this) {
	            return function(e, skip) {
	              var state;
	              e.preventDefault();
	              e.stopImmediatePropagation();
	              state = _this.$element.is(":checked");
	              _this._containerPosition(state);
	              if (state === _this.options.state) {
	                return;
	              }
	              _this.options.state = state;
	              _this.$wrapper.toggleClass("" + _this.options.baseClass + "-off").toggleClass("" + _this.options.baseClass + "-on");
	              if (!skip) {
	                if (_this.$element.is(":radio")) {
	                  $("[name='" + (_this.$element.attr('name')) + "']").not(_this.$element).prop("checked", false).trigger("change.bootstrapSwitch", true);
	                }
	                return _this.$element.trigger("switchChange.bootstrapSwitch", [state]);
	              }
	            };
	          })(this),
	          "focus.bootstrapSwitch": (function(_this) {
	            return function(e) {
	              e.preventDefault();
	              return _this.$wrapper.addClass("" + _this.options.baseClass + "-focused");
	            };
	          })(this),
	          "blur.bootstrapSwitch": (function(_this) {
	            return function(e) {
	              e.preventDefault();
	              return _this.$wrapper.removeClass("" + _this.options.baseClass + "-focused");
	            };
	          })(this),
	          "keydown.bootstrapSwitch": (function(_this) {
	            return function(e) {
	              if (!e.which || _this.options.disabled || _this.options.readonly) {
	                return;
	              }
	              switch (e.which) {
	                case 37:
	                  e.preventDefault();
	                  e.stopImmediatePropagation();
	                  return _this.state(false);
	                case 39:
	                  e.preventDefault();
	                  e.stopImmediatePropagation();
	                  return _this.state(true);
	              }
	            };
	          })(this)
	        });
	      };

	      BootstrapSwitch.prototype._handleHandlers = function() {
	        this.$on.on("click.bootstrapSwitch", (function(_this) {
	          return function(event) {
	            event.preventDefault();
	            event.stopPropagation();
	            _this.state(false);
	            return _this.$element.trigger("focus.bootstrapSwitch");
	          };
	        })(this));
	        return this.$off.on("click.bootstrapSwitch", (function(_this) {
	          return function(event) {
	            event.preventDefault();
	            event.stopPropagation();
	            _this.state(true);
	            return _this.$element.trigger("focus.bootstrapSwitch");
	          };
	        })(this));
	      };

	      BootstrapSwitch.prototype._labelHandlers = function() {
	        return this.$label.on({
	          "mousedown.bootstrapSwitch touchstart.bootstrapSwitch": (function(_this) {
	            return function(e) {
	              if (_this._dragStart || _this.options.disabled || _this.options.readonly) {
	                return;
	              }
	              e.preventDefault();
	              e.stopPropagation();
	              _this._dragStart = (e.pageX || e.originalEvent.touches[0].pageX) - parseInt(_this.$container.css("margin-left"), 10);
	              if (_this.options.animate) {
	                _this.$wrapper.removeClass("" + _this.options.baseClass + "-animate");
	              }
	              return _this.$element.trigger("focus.bootstrapSwitch");
	            };
	          })(this),
	          "mousemove.bootstrapSwitch touchmove.bootstrapSwitch": (function(_this) {
	            return function(e) {
	              var difference;
	              if (_this._dragStart == null) {
	                return;
	              }
	              e.preventDefault();
	              difference = (e.pageX || e.originalEvent.touches[0].pageX) - _this._dragStart;
	              if (difference < -_this._handleWidth || difference > 0) {
	                return;
	              }
	              _this._dragEnd = difference;
	              return _this.$container.css("margin-left", "" + _this._dragEnd + "px");
	            };
	          })(this),
	          "mouseup.bootstrapSwitch touchend.bootstrapSwitch": (function(_this) {
	            return function(e) {
	              var state;
	              if (!_this._dragStart) {
	                return;
	              }
	              e.preventDefault();
	              if (_this.options.animate) {
	                _this.$wrapper.addClass("" + _this.options.baseClass + "-animate");
	              }
	              if (_this._dragEnd) {
	                state = _this._dragEnd > -(_this._handleWidth / 2);
	                _this._dragEnd = false;
	                _this.state(_this.options.inverse ? !state : state);
	              } else {
	                _this.state(!_this.options.state);
	              }
	              return _this._dragStart = false;
	            };
	          })(this),
	          "mouseleave.bootstrapSwitch": (function(_this) {
	            return function(e) {
	              return _this.$label.trigger("mouseup.bootstrapSwitch");
	            };
	          })(this)
	        });
	      };

	      BootstrapSwitch.prototype._externalLabelHandler = function() {
	        var $externalLabel;
	        $externalLabel = this.$element.closest("label");
	        return $externalLabel.on("click", (function(_this) {
	          return function(event) {
	            event.preventDefault();
	            event.stopImmediatePropagation();
	            if (event.target === $externalLabel[0]) {
	              return _this.toggleState();
	            }
	          };
	        })(this));
	      };

	      BootstrapSwitch.prototype._formHandler = function() {
	        var $form;
	        $form = this.$element.closest("form");
	        if ($form.data("bootstrap-switch")) {
	          return;
	        }
	        return $form.on("reset.bootstrapSwitch", function() {
	          return window.setTimeout(function() {
	            return $form.find("input").filter(function() {
	              return $(this).data("bootstrap-switch");
	            }).each(function() {
	              return $(this).bootstrapSwitch("state", this.checked);
	            });
	          }, 1);
	        }).data("bootstrap-switch", true);
	      };

	      BootstrapSwitch.prototype._getClasses = function(classes) {
	        var c, cls, _i, _len;
	        if (!$.isArray(classes)) {
	          return ["" + this.options.baseClass + "-" + classes];
	        }
	        cls = [];
	        for (_i = 0, _len = classes.length; _i < _len; _i++) {
	          c = classes[_i];
	          cls.push("" + this.options.baseClass + "-" + c);
	        }
	        return cls;
	      };

	      return BootstrapSwitch;

	    })();
	    $.fn.bootstrapSwitch = function() {
	      var args, option, ret;
	      option = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
	      ret = this;
	      this.each(function() {
	        var $this, data;
	        $this = $(this);
	        data = $this.data("bootstrap-switch");
	        if (!data) {
	          $this.data("bootstrap-switch", data = new BootstrapSwitch(this, option));
	        }
	        if (typeof option === "string") {
	          return ret = data[option].apply(data, args);
	        }
	      });
	      return ret;
	    };
	    $.fn.bootstrapSwitch.Constructor = BootstrapSwitch;
	    return $.fn.bootstrapSwitch.defaults = {
	      state: true,
	      size: null,
	      animate: true,
	      disabled: false,
	      readonly: false,
	      indeterminate: false,
	      inverse: false,
	      radioAllOff: false,
	      onColor: "primary",
	      offColor: "default",
	      onText: "ON",
	      offText: "OFF",
	      labelText: "&nbsp;",
	      handleWidth: "auto",
	      labelWidth: "auto",
	      baseClass: "bootstrap-switch",
	      wrapperClass: "wrapper",
	      onInit: function() {},
	      onSwitchChange: function() {}
	    };
	  })(window.jQuery, window);

	}).call(this);


/***/ },

/***/ 410:
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },

/***/ 412:
/***/ function(module, exports) {

	'use strict';

	angular.module('fundoo.services', []).factory('createDialog', ["$document", "$compile", "$rootScope", "$controller", "$timeout", function ($document, $compile, $rootScope, $controller, $timeout) {
	  var defaults = {
	    id: null,
	    template: null,
	    templateUrl: null,
	    title: 'Default Title',
	    backdrop: true,
	    success: { label: 'OK', fn: null },
	    cancel: { label: 'Close', fn: null },
	    controller: null, //just like route controller declaration
	    backdropClass: "modal-backdrop",
	    backdropCancel: true,
	    footerTemplate: null,
	    modalClass: "modal",
	    css: {
	      top: '100px',
	      left: '30%',
	      margin: '0 auto'
	    }
	  };
	  var body = $document.find('body');

	  return function Dialog(templateUrl /*optional*/, options, passedInLocals) {

	    // Handle arguments if optional template isn't provided.
	    if (angular.isObject(templateUrl)) {
	      passedInLocals = options;
	      options = templateUrl;
	    } else {
	      options.templateUrl = templateUrl;
	    }

	    options = angular.extend({}, defaults, options); //options defined in constructor

	    var key;
	    var idAttr = options.id ? ' id="' + options.id + '" ' : '';
	    var defaultFooter = '<button class="btn" ng-click="$modalCancel()">{{$modalCancelLabel}}</button>' + '<button class="btn btn-primary" ng-click="$modalSuccess()">{{$modalSuccessLabel}}</button>';
	    var footerTemplate = '<div class="modal-footer">' + (options.footerTemplate || defaultFooter) + '</div>';
	    var modalBody = function () {
	      if (options.template) {
	        if (angular.isString(options.template)) {
	          // Simple string template
	          return '<div class="modal-body">' + options.template + '</div>';
	        } else {
	          // jQuery/JQlite wrapped object
	          return '<div class="modal-body">' + options.template.html() + '</div>';
	        }
	      } else {
	        // Template url
	        return '<div class="modal-body" ng-include="\'' + options.templateUrl + '\'"></div>';
	      }
	    }();
	    //We don't have the scope we're gonna use yet, so just get a compile function for modal
	    var modalEl = angular.element('<div class="' + options.modalClass + ' fade"' + idAttr + ' style="display: block;">' + '  <div class="modal-dialog">' + '    <div class="modal-content">' + '      <div class="modal-header">' + '        <button type="button" class="close" ng-click="$modalCancel()">&times;</button>' + '        <h2>{{$title}}</h2>' + '      </div>' + modalBody + footerTemplate + '    </div>' + '  </div>' + '</div>');

	    for (key in options.css) {
	      modalEl.css(key, options.css[key]);
	    }
	    var divHTML = "<div ";
	    if (options.backdropCancel) {
	      divHTML += 'ng-click="$modalCancel()"';
	    }
	    divHTML += ">";
	    var backdropEl = angular.element(divHTML);
	    backdropEl.addClass(options.backdropClass);
	    backdropEl.addClass('fade in');

	    var handleEscPressed = function handleEscPressed(event) {
	      if (event.keyCode === 27) {
	        scope.$modalCancel();
	      }
	    };

	    var closeFn = function closeFn() {
	      body.unbind('keydown', handleEscPressed);
	      modalEl.remove();
	      if (options.backdrop) {
	        backdropEl.remove();
	      }
	    };

	    body.bind('keydown', handleEscPressed);

	    var ctrl,
	        locals,
	        scope = options.scope || $rootScope.$new();

	    scope.$title = options.title;
	    scope.$modalClose = closeFn;
	    scope.$modalCancel = function () {
	      var callFn = options.cancel.fn || closeFn;
	      callFn.call(this);
	      scope.$modalClose();
	    };
	    scope.$modalSuccess = function () {
	      var callFn = options.success.fn || closeFn;
	      callFn.call(this);
	      scope.$modalClose();
	    };
	    scope.$modalSuccessLabel = options.success.label;
	    scope.$modalCancelLabel = options.cancel.label;

	    if (options.controller) {
	      locals = angular.extend({ $scope: scope }, passedInLocals);
	      ctrl = $controller(options.controller, locals);
	      // Yes, ngControllerController is not a typo
	      modalEl.contents().data('$ngControllerController', ctrl);
	    }

	    $compile(modalEl)(scope);
	    $compile(backdropEl)(scope);
	    body.append(modalEl);
	    if (options.backdrop) body.append(backdropEl);

	    $timeout(function () {
	      modalEl.addClass('in');
	    }, 200);
	  };
	}]);

/***/ },

/***/ 413:
/***/ function(module, exports) {

	angular.module('ngMap', []);

	/**
	 * @ngdoc service
	 * @name Attr2Options
	 * @description 
	 *   Converts tag attributes to options used by google api v3 objects, map, marker, polygon, circle, etc.
	 */
	/* global google */
	(function() {
	  'use strict';

	  var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
	  var MOZ_HACK_REGEXP = /^moz([A-Z])/;  

	  function camelCase(name) {
	    return name.
	      replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
	        return offset ? letter.toUpperCase() : letter;
	      }).
	      replace(MOZ_HACK_REGEXP, 'Moz$1');
	  }

	  function JSONize(str) {
	    try {       // if parsable already, return as it is
	      JSON.parse(str);
	      return str;
	    } catch(e) { // if not parsable, change little
	      return str
	        // wrap keys without quote with valid double quote
	        .replace(/([\$\w]+)\s*:/g, function(_, $1){return '"'+$1+'":';})
	        // replacing single quote wrapped ones to double quote 
	        .replace(/'([^']+)'/g, function(_, $1){return '"'+$1+'"';});
	    }
	  }

	  var Attr2Options = ["$parse", "$timeout", "$log", "NavigatorGeolocation", "GeoCoder", function($parse, $timeout, $log, NavigatorGeolocation, GeoCoder) { 

	    /**
	     * Returns the attributes of an element as hash
	     * @memberof Attr2Options
	     * @param {HTMLElement} el html element
	     * @returns {Hash} attributes
	     */
	    var orgAttributes = function(el) {
	      (el.length > 0) && (el = el[0]);
	      var orgAttributes = {};
	      for (var i=0; i<el.attributes.length; i++) {
	        var attr = el.attributes[i];
	        orgAttributes[attr.name] = attr.value;
	      }
	      return orgAttributes;
	    };

	    var toOptionValue = function(input, options) {
	      var output, key=options.key, scope=options.scope;
	      try { // 1. Number?
	        var num = Number(input);
	        if (isNaN(num)) {
	          throw "Not a number";
	        } else  {
	          output = num;
	        }
	      } catch(err) { 
	        try { // 2.JSON?
	          if (input.match(/^[\+\-]?[0-9\.]+,[ ]*\ ?[\+\-]?[0-9\.]+$/)) { // i.e "-1.0, 89.89"
	            input = "["+input+"]";
	          }
	          output = JSON.parse(JSONize(input));
	          if (output instanceof Array) {
	            var t1stEl = output[0];
	            if (t1stEl.constructor == Object) { // [{a:1}] : not lat/lng ones
	            } else if (t1stEl.constructor == Array) { // [[1,2],[3,4]] 
	              output =  output.map(function(el) {
	                return new google.maps.LatLng(el[0], el[1]);
	              });
	            } else if(!isNaN(parseFloat(t1stEl)) && isFinite(t1stEl)) {
	              return new google.maps.LatLng(output[0], output[1]);
	            }
	          }
	          else if (output === Object(output)) { // JSON is an object (not array or null)
	            // check for nested hashes and convert to Google API options
	            output = getOptions(output, options, true);
	          }
	        } catch(err2) {
	          // 3. Object Expression. i.e. LatLng(80,-49)
	          if (input.match(/^[A-Z][a-zA-Z0-9]+\(.*\)$/)) {
	            try {
	              var exp = "new google.maps."+input;
	              output = eval(exp); // TODO, still eval
	            } catch(e) {
	              output = input;
	            } 
	          // 4. Object Expression. i.e. MayTypeId.HYBRID 
	          } else if (input.match(/^([A-Z][a-zA-Z0-9]+)\.([A-Z]+)$/)) {
	            try {
	              var matches = input.match(/^([A-Z][a-zA-Z0-9]+)\.([A-Z]+)$/);
	              output = google.maps[matches[1]][matches[2]];
	            } catch(e) {
	              output = input;
	            } 
	          // 5. Object Expression. i.e. HYBRID 
	          } else if (input.match(/^[A-Z]+$/)) {
	            try {
	              var capitalizedKey = key.charAt(0).toUpperCase() + key.slice(1);
	              if (key.match(/temperatureUnit|windSpeedUnit|labelColor/)) {
	                capitalizedKey = capitalizedKey.replace(/s$/,"");
	                output = google.maps.weather[capitalizedKey][input];
	              } else {
	                output = google.maps[capitalizedKey][input];
	              }
	            } catch(e) {
	              output = input;
	            }
	          // 6. Date Object as ISO String i.e. "2015-08-12T06:12:40.858Z"
	          } else if (input.match(/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/)) {
	            try {
	              output = new Date(input);
	            } catch(e) {
	              output = input;
	            }
	          } else {
	            output = input;
	          }
	        } // catch(err2)
	      } // catch(err)

	      // convert output more for shape bounds
	      if (options.key == 'bounds' && output instanceof Array) {
	        output = new google.maps.LatLngBounds(output[0], output[1]);
	      }

	      // convert output more for shape icons
	      if (options.key == 'icons' && output instanceof Array) {
	        for (var i=0; i<output.length; i++) {
	          var el = output[i];
	          if (el.icon.path.match(/^[A-Z_]+$/)) {
	            el.icon.path =  google.maps.SymbolPath[el.icon.path];
	          }
	        }
	      }

	      // convert output more for marker icon
	      if (options.key == 'icon' && output instanceof Object) {
	        if ((""+output.path).match(/^[A-Z_]+$/)) {
	          output.path = google.maps.SymbolPath[output.path];
	        }
	        for (var key in output) { //jshint ignore:line
	          var arr = output[key];
	          if (key == "anchor" || key == "origin") {
	            output[key] = new google.maps.Point(arr[0], arr[1]);
	          } else if (key == "size" || key == "scaledSize") {
	            output[key] = new google.maps.Size(arr[0], arr[1]);
	          }
	        }
	      }

	      return output;
	    };

	    var getAttrsToObserve = function(attrs) {
	      var attrsToObserve = [];
	      if (attrs["ng-repeat"] || attrs.ngRepeat) {  // if element is created by ng-repeat, don't observe any
	        //$log.warn("It is NOT ideal to have many observers or watcher with ng-repeat. Please use it with your own risk");
	      }
	      for (var attrName in attrs) { //jshint ignore:line
	        var attrValue = attrs[attrName];
	        if (attrValue && attrValue.match(/\{\{.*\}\}/)) { // if attr value is {{..}}
	          void 0;
	          attrsToObserve.push(camelCase(attrName));
	        }
	      }
	      return attrsToObserve;
	    };

	    /**
	     * filters attributes by skipping angularjs methods $.. $$..
	     * @memberof Attr2Options
	     * @param {Hash} attrs tag attributes
	     * @returns {Hash} filterd attributes
	     */
	    var filter = function(attrs) {
	      var options = {};
	      for(var key in attrs) {
	        if (key.match(/^\$/) || key.match(/^ng[A-Z]/)) {
	          void(0);
	        } else {
	          options[key] = attrs[key];
	        }
	      }
	      return options;
	    };

	    /**
	     * converts attributes hash to Google Maps API v3 options  
	     * ```
	     *  . converts numbers to number   
	     *  . converts class-like string to google maps instance   
	     *    i.e. `LatLng(1,1)` to `new google.maps.LatLng(1,1)`  
	     *  . converts constant-like string to google maps constant    
	     *    i.e. `MapTypeId.HYBRID` to `google.maps.MapTypeId.HYBRID`   
	     *    i.e. `HYBRID"` to `google.maps.MapTypeId.HYBRID`  
	     * ```
	     * @memberof Attr2Options
	     * @param {Hash} attrs tag attributes
	     * @param {scope} scope angularjs scope
	     * @returns {Hash} options converted attributess
	     */
	    var getOptions = function(attrs, scope, doNotConverStringToNumber) {
	      var options = {};
	      for(var key in attrs) {
	        if (attrs[key]) {
	          if (key.match(/^on[A-Z]/)) { //skip events, i.e. on-click
	            continue;
	          } else if (key.match(/ControlOptions$/)) { // skip controlOptions
	            continue;
	          } else {
	            // nested conversions need to be typechecked (non-strings are fully converted)
	            if (typeof attrs[key] !== 'string') {
	              options[key] = attrs[key];
	            } else {
	              if (doNotConverStringToNumber && attrs[key].match(/^[0-9]+$/)) {
	                options[key] = attrs[key];
	              } else {
	                options[key] = toOptionValue(attrs[key], {scope:scope, key: key});
	              }
	            }
	          }
	        } // if (attrs[key])
	      } // for(var key in attrs)
	      return options;
	    };

	    /**
	     * converts attributes hash to scope-specific event function 
	     * @memberof Attr2Options
	     * @param {scope} scope angularjs scope
	     * @param {Hash} attrs tag attributes
	     * @returns {Hash} events converted events
	     */
	    var getEvents = function(scope, attrs) {
	      var events = {};
	      var toLowercaseFunc = function($1){
	        return "_"+$1.toLowerCase();
	      };
	      var eventFunc = function(attrValue) {
	        var matches = attrValue.match(/([^\(]+)\(([^\)]*)\)/);
	        var funcName = matches[1];
	        var argsStr = matches[2].replace(/event[ ,]*/,'');  //remove string 'event'
	        var argsExpr = $parse("["+argsStr+"]"); //for perf when triggering event
	        return function(event) {
	          var args = argsExpr(scope); //get args here to pass updated model values
	          function index(obj,i) {return obj[i];}
	          var f = funcName.split('.').reduce(index, scope);
	          f && f.apply(this, [event].concat(args));
	          $timeout( function() {
	            scope.$apply();
	          });
	        };
	      };

	      for(var key in attrs) {
	        if (attrs[key]) {
	          if (!key.match(/^on[A-Z]/)) { //skip if not events
	            continue;
	          }
	          
	          //get event name as underscored. i.e. zoom_changed
	          var eventName = key.replace(/^on/,'');
	          eventName = eventName.charAt(0).toLowerCase() + eventName.slice(1);
	          eventName = eventName.replace(/([A-Z])/g, toLowercaseFunc);

	          var attrValue = attrs[key];
	          events[eventName] = new eventFunc(attrValue);
	        }
	      }
	      return events;
	    };

	    /**
	     * control means map controls, i.e streetview, pan, etc, not a general control
	     * @memberof Attr2Options
	     * @param {Hash} filtered filtered tag attributes
	     * @returns {Hash} Google Map options
	     */
	    var getControlOptions = function(filtered) {
	      var controlOptions = {};
	      if (typeof filtered != 'object') {
	        return false;
	      }

	      for (var attr in filtered) {
	        if (filtered[attr]) {
	          if (!attr.match(/(.*)ControlOptions$/)) { 
	            continue; // if not controlOptions, skip it
	          }

	          //change invalid json to valid one, i.e. {foo:1} to {"foo": 1}
	          var orgValue = filtered[attr];
	          var newValue = orgValue.replace(/'/g, '"');
	          newValue = newValue.replace(/([^"]+)|("[^"]+")/g, function($0, $1, $2) {
	            if ($1) {
	              return $1.replace(/([a-zA-Z0-9]+?):/g, '"$1":');
	            } else {
	              return $2; 
	            } 
	          });
	          try {
	            var options = JSON.parse(newValue);
	            for (var key in options) { //assign the right values
	              if (options[key]) {
	                var value = options[key];
	                if (typeof value === 'string') {
	                  value = value.toUpperCase();
	                } else if (key === "mapTypeIds") {
	                  value = value.map( function(str) {
	                    if (str.match(/^[A-Z]+$/)) { // if constant
	                      return google.maps.MapTypeId[str.toUpperCase()];
	                    } else { // else, custom map-type
	                      return str;
	                    }
	                  });
	                }

	                if (key === "style") {
	                  var str = attr.charAt(0).toUpperCase() + attr.slice(1);
	                  var objName = str.replace(/Options$/,'')+"Style";
	                  options[key] = google.maps[objName][value];
	                } else if (key === "position") {
	                  options[key] = google.maps.ControlPosition[value];
	                } else {
	                  options[key] = value;
	                }
	              }
	            }
	            controlOptions[attr] = options;
	          } catch (e) {
	            void 0;
	          }
	        }
	      } // for

	      return controlOptions;
	    };

	    return {
	      camelCase: camelCase,
	      filter: filter,
	      getOptions: getOptions,
	      getEvents: getEvents,
	      getControlOptions: getControlOptions,
	      toOptionValue: toOptionValue,
	      getAttrsToObserve: getAttrsToObserve,
	      orgAttributes: orgAttributes
	    }; // return

	  }];
	  Attr2Options.$inject= ['$parse', '$timeout', '$log', 'NavigatorGeolocation', 'GeoCoder'];

	  angular.module('ngMap').service('Attr2Options', Attr2Options);
	})();

	/**
	 * @ngdoc service
	 * @name GeoCoder
	 * @description
	 *   Provides [defered/promise API](https://docs.angularjs.org/api/ng/service/$q) service for Google Geocoder service
	 */
	/* global google */
	(function() {
	  'use strict';
	  var GeoCoder = ["$q", function($q) {
	    return {
	      /**
	       * @memberof GeoCoder
	       * @param {Hash} options https://developers.google.com/maps/documentation/geocoding/#geocoding
	       * @example
	       * ```
	       *   GeoCoder.geocode({address: 'the cn tower'}).then(function(result) {
	       *     //... do something with result
	       *   });
	       * ```
	       * @returns {HttpPromise} Future object
	       */
	      geocode : function(options) {
	        var deferred = $q.defer();
	        var geocoder = new google.maps.Geocoder();
	        geocoder.geocode(options, function (results, status) {
	          if (status == google.maps.GeocoderStatus.OK) {
	            deferred.resolve(results);
	          } else {
	            deferred.reject('Geocoder failed due to: '+ status);
	          }
	        });
	        return deferred.promise;
	      }
	    }
	  }];
	  GeoCoder.$inject = ['$q'];

	  angular.module('ngMap').service('GeoCoder', GeoCoder);
	})();

	/**
	 * @ngdoc service
	 * @name NavigatorGeolocation
	 * @description
	 *  Provides [defered/promise API](https://docs.angularjs.org/api/ng/service/$q) service for navigator.geolocation methods
	 */
	/* global google */
	(function() {
	  'use strict';

	  var NavigatorGeolocation = ["$q", function($q) {
	    return {
	      /**
	       * @memberof NavigatorGeolocation
	       * @param {Object} geoLocationOptions the navigator geolocations options. i.e. { maximumAge: 3000, timeout: 5000, enableHighAccuracy: true }. If none specified, { timeout: 5000 }. If timeout not specified, timeout: 5000 added
	       * @param {function} success success callback function
	       * @param {function} failure failure callback function
	       * @example
	       * ```
	       *  NavigatorGeolocation.getCurrentPosition()
	       *    .then(function(position) {
	       *      var lat = position.coords.latitude, lng = position.coords.longitude;
	       *      .. do something lat and lng
	       *    });
	       * ```
	       * @returns {HttpPromise} Future object
	       */
	      getCurrentPosition: function(geoLocationOptions) {
	        var deferred = $q.defer();
	        if (navigator.geolocation) {
	          
	          if (geoLocationOptions === undefined) {
	            geoLocationOptions = { timeout: 5000 };
	          }
	          else if (geoLocationOptions.timeout === undefined) {
	            geoLocationOptions.timeout = 5000;
	          }
	          
	          navigator.geolocation.getCurrentPosition(
	            function(position) {
	              deferred.resolve(position);
	            }, function(evt) {
	              void 0;
	              deferred.reject(evt);
	            },
	            geoLocationOptions
	          );
	        } else {
	          deferred.reject("Browser Geolocation service failed.");
	        }
	        return deferred.promise;
	      },

	      watchPosition: function() {
	        return "TODO";
	      },

	      clearWatch: function() {
	        return "TODO";
	      }
	    };
	  }]; 
	  NavigatorGeolocation.$inject = ['$q'];

	  angular.module('ngMap').service('NavigatorGeolocation', NavigatorGeolocation);
	})();

	/**
	 * @ngdoc service
	 * @name StreetView
	 * @description
	 *  Provides [defered/promise API](https://docs.angularjs.org/api/ng/service/$q) service 
	 *  for [Google StreetViewService](https://developers.google.com/maps/documentation/javascript/streetview)
	 */
	/* global google */
	(function() {
	  'use strict';

	  var StreetView = ["$q", function($q) {

	    /**
	     * Retrieves panorama id from the given map (and or position)
	     * @memberof StreetView
	     * @param {map} map Google map instance
	     * @param {LatLng} latlng Google LatLng instance  
	     *   default: the center of the map
	     * @example
	     *   StreetView.getPanorama(map).then(function(panoId) {
	     *     $scope.panoId = panoId;
	     *   });
	     * @returns {HttpPromise} Future object
	     */
	    var getPanorama = function(map, latlng) {
	      latlng = latlng || map.getCenter();
	      var deferred = $q.defer();
	      var svs = new google.maps.StreetViewService();
	      svs.getPanoramaByLocation( (latlng||map.getCenter), 100, function (data, status) {
	        // if streetView available
	        if (status === google.maps.StreetViewStatus.OK) {
	          deferred.resolve(data.location.pano);
	        } else {
	          // no street view available in this range, or some error occurred
	          deferred.resolve(false);
	          //deferred.reject('Geocoder failed due to: '+ status);
	        }
	      });
	      return deferred.promise;
	    };

	    /**
	     * Set panorama view on the given map with the panorama id
	     * @memberof StreetView
	     * @param {map} map Google map instance
	     * @param {String} panoId Panorama id fro getPanorama method
	     * @example
	     *   StreetView.setPanorama(map, panoId);
	     */
	    var setPanorama = function(map, panoId) {
	      var svp = new google.maps.StreetViewPanorama(map.getDiv(), {enableCloseButton: true});
	      svp.setPano(panoId);
	    };

	    return {
	      getPanorama: getPanorama,
	      setPanorama: setPanorama
	    }; // return

	  }];
	  StreetView.$inject = ['$q'];

	  angular.module('ngMap').service('StreetView', StreetView);
	})();

	/**
	 * @ngdoc directive
	 * @name bicycling-layer
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @description 
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example: 
	 *
	 *   <map zoom="13" center="34.04924594193164, -118.24104309082031">
	 *     <bicycling-layer></bicycling-layer>
	 *    </map>
	 */
	(function() {
	  'use strict';
	  angular.module('ngMap').directive('bicyclingLayer', ['Attr2Options', function(Attr2Options) {
	    var parser = Attr2Options;
	    
	    var getLayer = function(options, events) {
	      var layer = new google.maps.BicyclingLayer(options);
	      for (var eventName in events) {
	        google.maps.event.addListener(layer, eventName, events[eventName]);
	      }
	      return layer;
	    };
	    
	    return {
	      restrict: 'E',
	      require: '^map',

	      link: function(scope, element, attrs, mapController) {
	        var orgAttrs = parser.orgAttributes(element);
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered);
	        var events = parser.getEvents(scope, filtered);

	        void 0;

	        var layer = getLayer(options, events);
	        mapController.addObject('bicyclingLayers', layer);
	        mapController.observeAttrSetObj(orgAttrs, attrs, layer);  //observers
	        element.bind('$destroy', function() {
	          mapController.deleteObject('bicyclingLayers', layer);
	        });
	      }
	     }; // return
	  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name cloud-layer
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @description 
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example: 
	 *
	 *   <map zoom="13" center="34.04924594193164, -118.24104309082031">
	 *     <cloud-layer></cloud-layer>
	 *    </map>
	 */
	(function() {
	  'use strict';
	  angular.module('ngMap').directive('cloudLayer', ['Attr2Options', function(Attr2Options) {
	    var parser = Attr2Options;
	    
	    var getLayer = function(options, events) {
	      var layer = new google.maps.weather.CloudLayer(options);
	      for (var eventName in events) {
	        google.maps.event.addListener(layer, eventName, events[eventName]);
	      }
	      return layer;
	    };
	    
	    return {
	      restrict: 'E',
	      require: '^map',

	      link: function(scope, element, attrs, mapController) {
	        var orgAttrs = parser.orgAttributes(element);
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered);
	        var events = parser.getEvents(scope, filtered);
	        void 0;

	        var layer = getLayer(options, events);
	        mapController.addObject('cloudLayers', layer);
	        mapController.observeAttrSetObj(orgAttrs, attrs, layer);  //observers
	        element.bind('$destroy', function() {
	          mapController.deleteObject('cloudLayers', layer);
	        });
	      }
	     }; // return
	  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name custom-control
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @param $compile {service} AngularJS $compile service
	 * @description 
	 *   Build custom control and set to the map with position
	 *   
	 *   Requires:  map directive
	 *
	 *   Restrict To:  Element
	 *
	 * @attr {String} position position of this control
	 *        i.e. TOP_RIGHT
	 * @attr {Number} index index of the control
	 * @example
	 *
	 * Example: 
	 *  <map center="41.850033,-87.6500523" zoom="3">
	 *    <custom-control id="home" position="TOP_LEFT" index="1">
	 *      <div style="background-color: white;">
	 *        <b>Home</b>
	 *      </div>
	 *    </custom-control>
	 *  </map>
	 *
	 */
	(function() {
	  'use strict';
	  angular.module('ngMap').directive('customControl', ['Attr2Options', '$compile', function(Attr2Options, $compile)  {
	    'use strict';
	    var parser = Attr2Options;

	    return {
	      restrict: 'E',
	      require: '^map',
	      link: function(scope, element, attrs, mapController) {
	        var orgAttrs = parser.orgAttributes(element);
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered, scope);
	        var events = parser.getEvents(scope, filtered);
	        void 0;

	        /**
	         * build a custom control element
	         */
	        var customControlEl = element[0].parentElement.removeChild(element[0]);
	        $compile(customControlEl.innerHTML.trim())(scope);

	        /**
	         * set events
	         */
	        for (var eventName in events) {
	          google.maps.event.addDomListener(customControlEl, eventName, events[eventName]);
	        }

	        mapController.addObject('customControls', customControlEl);
	        scope.$on('mapInitialized', function(evt, map) {
	          var position = options.position;
	          map.controls[google.maps.ControlPosition[position]].push(customControlEl);
	        });

	      } //link
	    }; // return
	  }]);// function
	})();

	/**
	 * @ngdoc directive
	 * @memberof ngmap
	 * @name custom-marker
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @param $timeout {service} AngularJS $timeout
	 * @description
	 *   Marker with html
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @attr {String} position required, position on map
	 * @attr {Number} z-index optional
	 * @attr {Boolean} visible optional
	 * @example
	 *
	 * Example:
	 *   <map center="41.850033,-87.6500523" zoom="3">
	 *     <custom-marker position="41.850033,-87.6500523">
	 *       <div>
	 *         <b>Home</b>
	 *       </div>
	 *     </custom-marker>
	 *   </map>
	 *
	 */
	(function() {
	  'use strict';
	  var parser, $timeout, $compile;

	  var CustomMarker = function(options) {
	    options = options || {};

	    this.el = document.createElement('div');
	    this.el.style.display = 'inline-block';
	    this.visible = true;
	    for (var key in options) { /* jshint ignore:line */
	     this[key] = options[key];
	    }
	  };

	  var setCustomMarker = function() {

	    CustomMarker.prototype = new google.maps.OverlayView();

	    CustomMarker.prototype.setContent = function(html, scope) {
	      this.el.innerHTML = html;
	      this.el.style.position = 'absolute';
	      if (scope) {
	        $compile(angular.element(this.el).contents())(scope);
	      }
	    };

	    CustomMarker.prototype.setPosition = function(position) {
	      position && (this.position = position); /* jshint ignore:line */
	      if (this.getProjection() && typeof this.position.lng == 'function') {
	        var posPixel = this.getProjection().fromLatLngToDivPixel(this.position);
	        var x = Math.round(posPixel.x - (this.el.offsetWidth/2));
	        var y = Math.round(posPixel.y - this.el.offsetHeight - 10); // 10px for anchor
	        this.el.style.left = x + "px";
	        this.el.style.top = y + "px";
	      }
	    };

	    CustomMarker.prototype.setZIndex = function(zIndex) {
	      zIndex && (this.zIndex = zIndex); /* jshint ignore:line */
	      this.el.style.zIndex = this.zIndex;
	    };

	    CustomMarker.prototype.setVisible = function(visible) {
	      this.el.style.display = visible ? 'inline-block' : 'none';
	      this.visible = visible;
	    };

	    CustomMarker.prototype.addClass = function(className) {
	      var classNames = this.el.className.trim().split(' ');
	      (classNames.indexOf(className) == -1) && classNames.push(className); /* jshint ignore:line */
	      this.el.className = classNames.join(' ');
	    };

	    CustomMarker.prototype.removeClass = function(className) {
	      var classNames = this.el.className.split(' ');
	      var index = classNames.indexOf(className);
	      (index > -1) && classNames.splice(index, 1); /* jshint ignore:line */
	      this.el.className = classNames.join(' ');
	    };

	    CustomMarker.prototype.onAdd = function() {
	      this.getPanes().overlayMouseTarget.appendChild(this.el);
	    };

	    CustomMarker.prototype.draw = function() {
	      this.setPosition();
	      this.setZIndex(this.zIndex);
	      this.setVisible(this.visible);
	    };

	    CustomMarker.prototype.onRemove = function() {
	      this.el.parentNode.removeChild(this.el);
	      this.el = null;
	    };
	  };

	  var linkFunc = function(orgHtml, varsToWatch) {
	    //console.log('orgHtml', orgHtml, 'varsToWatch', varsToWatch);

	    return function(scope, element, attrs, mapController) {

	      var orgAttrs = parser.orgAttributes(element);
	      var filtered = parser.filter(attrs);
	      var options = parser.getOptions(filtered, scope);
	      var events = parser.getEvents(scope, filtered);

	      /**
	       * build a custom marker element
	       */
	      var removedEl = element[0].parentElement.removeChild(element[0]);
	      void 0;
	      var customMarker = new CustomMarker(options);

	      $timeout(function() { //apply contents, class, and location after it is compiled
	        scope.$watch('[' + varsToWatch.join(',') + ']', function(val) {
	          customMarker.setContent(orgHtml, scope);
	        });

	        customMarker.setContent(removedEl.innerHTML, scope);
	        var classNames = removedEl.firstElementChild.className;
	        customMarker.addClass('custom-marker');
	        customMarker.addClass(classNames);
	        void 0;

	        if (!(options.position instanceof google.maps.LatLng)) {
	          mapController.getGeoLocation(options.position).then(
	            function(latlng) {
	              customMarker.setPosition(latlng);
	            }
	          );
	        }
	      });

	      void 0;
	      for (var eventName in events) { /* jshint ignore:line */
	        google.maps.event.addDomListener(
	          customMarker.el, eventName, events[eventName]);
	      }
	      mapController.addObject('customMarkers', customMarker);

	      element.bind('$destroy', function() {
	        //Is it required to remove event listeners when DOM is removed?
	        mapController.deleteObject('customMarkers', customMarker);
	      });

	    }; // linkFunc
	  };

	  var customMarkerDirective = ["Attr2Options", "_$timeout_", "_$compile_", function(Attr2Options, _$timeout_, _$compile_)  {
	    parser = Attr2Options;
	    $timeout = _$timeout_;
	    $compile = _$compile_;
	    setCustomMarker();

	    return {
	      restrict: 'E',
	      require: '^map',
	      compile: function(element) {
	        var orgHtml = element.html();
	        var matches = orgHtml.match(/{{([^}]+)}}/g);
	        var varsToWatch = [];
	        (matches || []).forEach(function(match) { //filter out that contains '::', 'this.'
	          var toWatch = match.replace('{{','').replace('}}','');
	          if (match.indexOf('::') == -1 && match.indexOf('this.') == -1 && varsToWatch.indexOf(toWatch) == -1) {
	            varsToWatch.push(match.replace('{{','').replace('}}',''));
	          }
	        });

	        return linkFunc(orgHtml, varsToWatch);
	      }
	    }; // return
	  }];// function
	  customMarkerDirective.$inject = ['Attr2Options', '$timeout', '$compile'];

	  angular.module('ngMap').directive('customMarker', customMarkerDirective);
	})();

	/**
	 * @ngdoc directive
	 * @name directions
	 * @description 
	 *   Enable directions on map. e.g., origin, destination, draggable, waypoints, etc
	 *   
	 *   Requires:  map directive
	 *
	 *   Restrict To:  Element 
	 *
	 * @attr {String} DirectionsRendererOptions [Any DirectionsRendererOptions](https://developers.google.com/maps/documentation/javascript/reference#DirectionsRendererOptions)
	 * @attr {String} DirectionsRequestOptions [Any DirectionsRequest options](https://developers.google.com/maps/documentation/javascript/reference#DirectionsRequest)
	 * @example
	 * Example: 
	 *   <map zoom="14" center="37.7699298, -122.4469157">
	 *     <directions 
	 *       draggable="true"
	 *       panel="directions-panel"
	 *       travel-mode="{{travelMode}}"
	 *       waypoints="[{location:'kingston', stopover:true}]"
	 *       origin="{{origin}}"
	 *       destination="{{destination}}">
	 *     </directions>
	 *   </map> 
	 */
	/* global google */
	(function() {
	  'use strict';

	  var getDirectionsRenderer = function(options, events) {
	    if (options.panel) {
	      options.panel = document.getElementById(options.panel) || document.querySelector(options.panel);
	    }
	    var renderer = new google.maps.DirectionsRenderer(options);
	    for (var eventName in events) {
	      google.maps.event.addListener(renderer, eventName, events[eventName]);
	    }
	    return renderer;
	  };

	  var directions = ["Attr2Options", "$timeout", "NavigatorGeolocation", function(Attr2Options, $timeout, NavigatorGeolocation) {
	    var parser = Attr2Options;
	    var directionsService = new google.maps.DirectionsService();

	    var updateRoute = function(renderer, options) {
	      /* filter out valid keys only for DirectionsRequest object*/
	      var request = options;
	      request.travelMode = request.travelMode || 'DRIVING';
	      var validKeys = [
	        'origin', 'destination', 'travelMode', 'transitOptions', 'unitSystem',
	        'durationInTraffic', 'waypoints', 'optimizeWaypoints', 
	        'provideRouteAlternatives', 'avoidHighways', 'avoidTolls', 'region'
	      ];
	      for(var key in request){
	        (validKeys.indexOf(key) === -1) && (delete request[key]);
	      }

	      if(request.waypoints) {
	        // Check fo valid values
	        if(request.waypoints == "[]" || request.waypoints == "")  delete request.waypoints;
	      }

	      var showDirections = function(request) {
	        void 0;
	        directionsService.route(request, function(response, status) {
	          if (status == google.maps.DirectionsStatus.OK) {
	            $timeout(function() {
	              renderer.setDirections(response);
	            });
	          }
	        });
	      };

	      if (request.origin && request.destination) {
	        if (request.origin == 'current-location') {
	          NavigatorGeolocation.getCurrentPosition().then(function(ll) {
	            request.origin = new google.maps.LatLng(ll.coords.latitude, ll.coords.longitude);
	            showDirections(request);
	          });
	        } else if (request.destination == 'current-location') {
	          NavigatorGeolocation.getCurrentPosition().then(function(ll) {
	            request.destination = new google.maps.LatLng(ll.coords.latitude, ll.coords.longitude);
	            showDirections(request);
	          });
	        } else {
	          showDirections(request);
	        }
	      } 
	    };

	    var linkFunc = function(scope, element, attrs, mapController) {
	      var orgAttrs = parser.orgAttributes(element);
	      var filtered = parser.filter(attrs);
	      var options = parser.getOptions(filtered);
	      var events = parser.getEvents(scope, filtered);
	      var attrsToObserve = parser.getAttrsToObserve(orgAttrs);

	      var renderer = getDirectionsRenderer(options, events);
	      mapController.addObject('directionsRenderers', renderer);
	      
	      attrsToObserve.forEach(function(attrName) {
	        (function(attrName) {
	          attrs.$observe(attrName, function(val) {
	            if (attrName == 'panel') {
	              $timeout(function(){
	                var panel = document.getElementById(val) || document.querySelector(val);
	                void 0;
	                panel && renderer.setPanel(panel);
	              });
	            } else if (options[attrName] !== val) { //apply only if changed
	              var optionValue = parser.toOptionValue(val, {key: attrName});
	              void 0;
	              options[attrName] = optionValue;
	              updateRoute(renderer, options);
	            }
	          });
	        })(attrName);
	      });

	      scope.$on('mapInitialized', function(event, map) {
	        updateRoute(renderer, options);
	      });
	      scope.$on('$destroy', function(event, map) {
	        mapController.deleteObject('directionsRenderers', renderer);
	      });
	    };
	    
	    return {
	      restrict: 'E',
	      require: '^map',
	      link: linkFunc
	    }
	  }]; // var directions
	  directions.$inject = ['Attr2Options', '$timeout', 'NavigatorGeolocation'];

	  angular.module('ngMap').directive('directions', directions);
	})();


	/**
	 * @ngdoc directive
	 * @name drawing-manager
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *
	 *  <map zoom="13" center="37.774546, -122.433523" map-type-id="SATELLITE">
	 *    <drawing-manager  on-overlaycomplete="onMapOverlayCompleted()" position="ControlPosition.TOP_CENTER" drawingModes="POLYGON,CIRCLE" drawingControl="true" circleOptions="fillColor: '#FFFF00';fillOpacity: 1;strokeWeight: 5;clickable: false;zIndex: 1;editable: true;" ></drawing-manager>
	 *  </map>
	 *
	 *  TODO: Add remove button.
	 *  currently, for out solution, we have the shapes/markers in our own controller, and we use some css classes to change the shape button
	 *  to a remove button (<div>X</div>) and have the remove operation in our own controller.
	 */
	(function() {
	  'use strict';
	  angular.module('ngMap').directive('drawingManager', ['Attr2Options', function(Attr2Options) {
	    var parser = Attr2Options;

	    return {
	      restrict: 'E',
	      require: '^map',

	      link: function(scope, element, attrs, mapController) {
	        var orgAttrs = parser.orgAttributes(element);
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered);
	        var controlOptions = parser.getControlOptions(filtered);
	        var events = parser.getEvents(scope, filtered);

	        void 0;

	        /**
	         * set options
	         */
	        var drawingManager = new google.maps.drawing.DrawingManager({
	          drawingMode: options.drawingmode,
	          drawingControl: options.drawingcontrol,
	          drawingControlOptions: controlOptions.drawingControlOptions,
	          circleOptions:options.circleoptions,
	          markerOptions:options.markeroptions,
	          polygonOptions:options.polygonoptions,
	          polylineOptions:options.polylineoptions,
	          rectangleOptions:options.rectangleoptions
	        });


	        /**
	         * set events
	         */
	        var events = parser.getEvents(scope, filtered);
	        for (var eventName in events) {
	          google.maps.event.addListener(drawingManager, eventName, events[eventName]);
	        }

	        mapController.addObject('mapDrawingManager', drawingManager);
	      }
	    }; // return
	  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name dynamic-maps-engine-layer
	 * @description 
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example: 
	 *   <map zoom="14" center="[59.322506, 18.010025]">
	 *     <dynamic-maps-engine-layer layer-id="06673056454046135537-08896501997766553811"></dynamic-maps-engine-layer>
	 *    </map>
	 */
	(function() {
	  'use strict';

	  angular.module('ngMap').directive('dynamicMapsEngineLayer', ['Attr2Options', function(Attr2Options) {
	    var parser = Attr2Options;

	    var getDynamicMapsEngineLayer = function(options, events) {
	      var layer = new google.maps.visualization.DynamicMapsEngineLayer(options);

	      for (var eventName in events) {
	        google.maps.event.addListener(layer, eventName, events[eventName]);
	      }

	      return layer;
	    };

	    
	    return {
	      restrict: 'E',
	      require: '^map',

	      link: function(scope, element, attrs, mapController) {
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered);
	        var events = parser.getEvents(scope, filtered, events);
	        void 0;

	        var layer = getDynamicMapsEngineLayer(options, events);
	        mapController.addObject('mapsEngineLayers', layer);
	      }
	     }; // return
	  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name fusion-tables-layer
	 * @description 
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example: 
	 *   <map zoom="11" center="41.850033, -87.6500523">
	 *     <fusion-tables-layer query="{
	 *       select: 'Geocodable address',
	 *       from: '1mZ53Z70NsChnBMm-qEYmSDOvLXgrreLTkQUvvg'}">
	 *     </fusion-tables-layer>
	 *   </map>
	 */
	(function() {
	  'use strict';

	  angular.module('ngMap').directive('fusionTablesLayer', ['Attr2Options', function(Attr2Options) {
	    var parser = Attr2Options;

	    var getLayer = function(options, events) {
	      var layer = new google.maps.FusionTablesLayer(options);

	      for (var eventName in events) {
	        google.maps.event.addListener(layer, eventName, events[eventName]);
	      }

	      return layer;
	    };

	    
	    return {
	      restrict: 'E',
	      require: '^map',

	      link: function(scope, element, attrs, mapController) {
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered);
	        var events = parser.getEvents(scope, filtered, events);
	        void 0;

	        var layer = getLayer(options, events);
	        mapController.addObject('fusionTablesLayers', layer);
	      }
	     }; // return
	  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name heatmap-layer
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @description 
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example: 
	 *
	 *   <map zoom="11" center="[41.875696,-87.624207]">
	 *     <heatmap-layer data="taxiData"></heatmap-layer>
	 *   </map>
	 */
	(function() {
	  'use strict';

	  angular.module('ngMap').directive('heatmapLayer', ['Attr2Options', '$window', function(Attr2Options, $window) {
	    var parser = Attr2Options;
	    
	    return {
	      restrict: 'E',
	      require: '^map',

	      link: function(scope, element, attrs, mapController) {
	        var filtered = parser.filter(attrs);

	        /**
	         * set options 
	         */
	        var options = parser.getOptions(filtered);
	        options.data = $window[attrs.data] || scope[attrs.data];
	        if (options.data instanceof Array) {
	          options.data = new google.maps.MVCArray(options.data);
	        } else {
	          throw "invalid heatmap data";
	        }
	        var layer = new google.maps.visualization.HeatmapLayer(options);

	        /**
	         * set events 
	         */
	        var events = parser.getEvents(scope, filtered);
	        void 0;

	        mapController.addObject('heatmapLayers', layer);
	      }
	     }; // return
	  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name info-window
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @param $compile {service} $compile service
	 * @description
	 *   Defines infoWindow and provides compile method
	 *
	 *   Requires:  map directive
	 *
	 *   Restrict To:  Element
	 *
	 *   NOTE: this directive should **NOT** be used with `ng-repeat` because InfoWindow itself is a template,
	 *   and must be reused by each marker, thus, should not be redefined by `ng-repeat`.
	 *
	 * @attr {Boolean} visible Indicates to show it when map is initialized
	 * @attr {Boolean} visible-on-marker Indicates to show it on a marker when map is initialized
	 * @attr {Expression} geo-callback if position is an address, the expression is will be performed when geo-lookup is successful. e.g., geo-callback="showDetail()"
	 * @attr {String} &lt;InfoWindowOption> Any InfoWindow options,
	 *       https://developers.google.com/maps/documentation/javascript/reference?csw=1#InfoWindowOptions
	 * @attr {String} &lt;InfoWindowEvent> Any InfoWindow events, https://developers.google.com/maps/documentation/javascript/reference
	 * @example
	 * Usage:
	 *   <map MAP_ATTRIBUTES>
	 *    <info-window id="foo" ANY_OPTIONS ANY_EVENTS"></info-window>
	 *   </map>
	 *
	 * Example:
	 *  <map center="41.850033,-87.6500523" zoom="3">
	 *    <info-window id="1" position="41.850033,-87.6500523" >
	 *      <div ng-non-bindable>
	 *        Chicago, IL<br/>
	 *        LatLng: {{chicago.lat()}}, {{chicago.lng()}}, <br/>
	 *        World Coordinate: {{worldCoordinate.x}}, {{worldCoordinate.y}}, <br/>
	 *        Pixel Coordinate: {{pixelCoordinate.x}}, {{pixelCoordinate.y}}, <br/>
	 *        Tile Coordinate: {{tileCoordinate.x}}, {{tileCoordinate.y}} at Zoom Level {{map.getZoom()}}
	 *      </div>
	 *    </info-window>
	 *  </map>
	 */
	/* global google */
	(function() {
	  'use strict';

	  var infoWindow = ["Attr2Options", "$compile", "$timeout", "$parse", function(Attr2Options, $compile, $timeout, $parse)  {
	    var parser = Attr2Options;

	    var getInfoWindow = function(options, events, element) {
	      var infoWindow;

	      /**
	       * set options
	       */
	      if (options.position && !(options.position instanceof google.maps.LatLng)) {
	        delete options.position;
	      }
	      infoWindow = new google.maps.InfoWindow(options);

	      /**
	       * set events
	       */
	      if (Object.keys(events).length > 0) {
	        void 0;
	      }
	      for (var eventName in events) {
	        if (eventName) {
	          google.maps.event.addListener(infoWindow, eventName, events[eventName]);
	        }
	      }

	      /**
	       * set template ane template-relate functions
	       * it must have a container element with ng-non-bindable
	       */
	      var template = element.html().trim();
	      if (angular.element(template).length != 1) {
	        throw "info-window working as a template must have a container";
	      }
	      infoWindow.__template = template.replace(/\s?ng-non-bindable[='"]+/,"");

	      infoWindow.__compile = function(scope, anchor) {
	        anchor && (scope['this'] = anchor);
	        var el = $compile(infoWindow.__template)(scope);
	        infoWindow.setContent(el[0]);
	        scope.$apply();
	      };

	      infoWindow.__open = function(map, scope, anchor) {
	        $timeout(function() {
	          infoWindow.__compile(scope, anchor);
	          if (anchor && anchor.getPosition) {
	            infoWindow.open(map, anchor);
	          } else if (anchor && anchor instanceof google.maps.LatLng) {
	            infoWindow.open(map);
	            infoWindow.setPosition(anchor);
	          } else {
	            infoWindow.open(map);
	          }
	        });
	      };

	      return infoWindow;
	    };

	    var linkFunc = function(scope, element, attrs, mapController) {
	      element.css('display','none');

	      var orgAttrs = parser.orgAttributes(element);
	      var filtered = parser.filter(attrs);
	      var options = parser.getOptions(filtered, scope);
	      var events = parser.getEvents(scope, filtered);
	      void 0;

	      var address;
	      if (options.position && !(options.position instanceof google.maps.LatLng)) {
	        address = options.position;
	      }
	      var infoWindow = getInfoWindow(options, events, element);
	      if (address) {
	        mapController.getGeoLocation(address).then(function(latlng) {
	          infoWindow.setPosition(latlng);
	          infoWindow.__open(mapController.map, scope, latlng);
	          var geoCallback = attrs.geoCallback;
	          geoCallback && $parse(geoCallback)(scope);
	        });
	      }

	      mapController.addObject('infoWindows', infoWindow);
	      mapController.observeAttrSetObj(orgAttrs, attrs, infoWindow); /* observers */

	      scope.$on('mapInitialized', function(evt, map) {
	        infoWindow.visible && infoWindow.__open(map, scope);
	        if (infoWindow.visibleOnMarker) {
	          var markerId = infoWindow.visibleOnMarker;
	          infoWindow.__open(map, scope, map.markers[markerId]);
	        }
	      });

	      /**
	       * provide showInfoWindow method to scope
	       */

	      scope.showInfoWindow  = function(e, id, marker) {
	        var infoWindow = mapController.map.infoWindows[id];
	        var anchor = marker ? marker : (this.getPosition ? this : null);
	        infoWindow.__open(mapController.map, scope, anchor);
	        if(mapController.singleInfoWindow) {
	          if(mapController.lastInfoWindow) scope.hideInfoWindow(e, mapController.lastInfoWindow);
	          mapController.lastInfoWindow = id;
	        }
	      };

	      /**
	       * provide hideInfoWindow method to scope
	       */
	      scope.hideInfoWindow  = scope.hideInfoWindow ||
	        function(event, id) {
	          var infoWindow = mapController.map.infoWindows[id];
	          infoWindow.close();
	        };

	    }; //link

	    return {
	      restrict: 'E',
	      require: '^map',
	      link: linkFunc
	    };

	  }]; // infoWindow
	  infoWindow.$inject = ['Attr2Options', '$compile', '$timeout', '$parse'];

	  angular.module('ngMap').directive('infoWindow', infoWindow);
	})();

	/**
	 * @ngdoc directive
	 * @name kml-layer
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @description 
	 *   renders Kml layer on a map
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @attr {Url} url url of the kml layer
	 * @attr {KmlLayerOptions} KmlLayerOptions
	 *   (https://developers.google.com/maps/documentation/javascript/reference#KmlLayerOptions)  
	 * @attr {String} &lt;KmlLayerEvent> Any KmlLayer events, https://developers.google.com/maps/documentation/javascript/reference
	 * @example
	 * Usage: 
	 *   <map MAP_ATTRIBUTES>
	 *    <kml-layer ANY_KML_LAYER ANY_KML_LAYER_EVENTS"></kml-layer>
	 *   </map>
	 *
	 * Example: 
	 *
	 *   <map zoom="11" center="[41.875696,-87.624207]">
	 *     <kml-layer url="https://gmaps-samples.googlecode.com/svn/trunk/ggeoxml/cta.kml" ></kml-layer>
	 *    </map>
	 */
	(function() {
	  'use strict';

	  angular.module('ngMap').directive('kmlLayer', ['Attr2Options', function(Attr2Options) {
	    var parser = Attr2Options;
	    
	    var getKmlLayer = function(options, events) {
	      var kmlLayer = new google.maps.KmlLayer(options);
	      for (var eventName in events) {
	        google.maps.event.addListener(kmlLayer, eventName, events[eventName]);
	      }
	      return kmlLayer;
	    };
	    
	    return {
	      restrict: 'E',
	      require: '^map',

	      link: function(scope, element, attrs, mapController) {
	        var orgAttrs = parser.orgAttributes(element);
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered);
	        var events = parser.getEvents(scope, filtered);
	        void 0;

	        var kmlLayer = getKmlLayer(options, events);
	        mapController.addObject('kmlLayers', kmlLayer);
	        mapController.observeAttrSetObj(orgAttrs, attrs, kmlLayer);  //observers
	        element.bind('$destroy', function() {
	          mapController.deleteObject('kmlLayers', kmlLayer);
	        });
	      }
	     }; // return
	  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name map-data
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @description 
	 *   set map data
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @wn {String} method-name, run map.data[method-name] with attribute value
	 * @example
	 * Example: 
	 *
	 *   <map zoom="11" center="[41.875696,-87.624207]">
	 *     <map-data load-geo-json="https://storage.googleapis.com/maps-devrel/google.json"></map-data>
	 *    </map>
	 */
	(function() {
	  'use strict';

	  angular.module('ngMap').directive('mapData', ['Attr2Options', function(Attr2Options) {
	    var parser = Attr2Options;
	    
	    return {
	      restrict: 'E',
	      require: '^map',

	      link: function(scope, element, attrs, mapController) {
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered);
	        var events = parser.getEvents(scope, filtered, events);

	        void 0;
	        scope.$on('mapInitialized', function(event, map) {
	          /**
	           * options
	           */
	          for (var key in options) {
	            if (key) {
	              var val = options[key];
	              if (typeof scope[val] === "function") {
	                map.data[key](scope[val]);
	              } else {
	                map.data[key](val);
	              }
	            } // if (key)
	          }

	          /**
	           * events
	           */
	          for (var eventName in events) {
	            if (events[eventName]) {
	              map.data.addListener(eventName, events[eventName]);
	            }
	          }
	        });
	      }
	     }; // return
	  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name map-lazy-load
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @description 
	 *   Requires: Delay the initialization of map directive until the map is ready to be rendered
	 *   Restrict To: Attribute 
	 *
	 * @attr {String} map-lazy-load
	      Maps api script source file location.
	 *    Example:  
	 *      'https://maps.google.com/maps/api/js'   
	 * @attr {String} map-lazy-load-params
	     Maps api script source file location via angular scope variable.
	     Also requires the map-lazy-load attribute to be present in the directive.
	     Example: In your controller, set 
	       $scope.googleMapsURL = 'https://maps.google.com/maps/api/js?v=3.20&client=XXXXXenter-api-key-hereXXXX'

	 * @example
	 * Example: 
	 *
	 *   <div map-lazy-load="http://maps.google.com/maps/api/js">
	 *     <map center="Brampton" zoom="10">
	 *       <marker position="Brampton"></marker>
	 *     </map>
	 *   </div>
	 *
	 *   <div map-lazy-load="http://maps.google.com/maps/api/js" 
	 *        map-lazy-load-params="{{googleMapsUrl}}">
	 *     <map center="Brampton" zoom="10">
	 *       <marker position="Brampton"></marker>
	 *     </map>
	 *   </div>
	 */
	(function() {
	  'use strict';
	  var $timeout, $compile, src, savedHtml;

	  var preLinkFunc = function(scope, element, attrs) {
	    var mapsUrl = attrs.mapLazyLoadParams || attrs.mapLazyLoad;    
	    
	    window.lazyLoadCallback = function() {
	      void 0;
	      $timeout(function() { /* give some time to load */
	        element.html(savedHtml);
	        $compile(element.contents())(scope);
	      }, 100);
	    };

	    if(window.google === undefined || window.google.maps === undefined) {
	      var scriptEl = document.createElement('script');
	      void 0;
	      scriptEl.src = mapsUrl + (mapsUrl.indexOf('?') > -1 ? '&' : '?') + 'callback=lazyLoadCallback';
	      document.body.appendChild(scriptEl);
	    } else {
	      element.html(savedHtml);
	      $compile(element.contents())(scope);
	    }
	  };

	  var compileFunc = function(tElement, tAttrs) {

	    (!tAttrs.mapLazyLoad) && void 0;
	    savedHtml = tElement.html(); 
	    src = tAttrs.mapLazyLoad;

	    /**
	     * if already loaded, stop processing it
	     */
	    if (document.querySelector('script[src="'+src+(src.indexOf('?') > -1 ? '&' : '?')+'callback=lazyLoadCallback"]')) {
	      return false;
	    }

	    tElement.html('');  // will compile again after script is loaded
	    return {
	      pre: preLinkFunc
	    };
	  };

	  var mapLazyLoad = ["_$compile_", "_$timeout_", function(_$compile_, _$timeout_) {
	    $compile = _$compile_, $timeout = _$timeout_;
	    return {
	      compile: compileFunc
	    }
	  }];
	  mapLazyLoad.$inject = ['$compile','$timeout'];

	  angular.module('ngMap').directive('mapLazyLoad', mapLazyLoad);
	})();

	/**
	 * @ngdoc directive
	 * @name map-type
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @description 
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example: 
	 *
	 *   <map zoom="13" center="34.04924594193164, -118.24104309082031">
	 *     <map-type name="coordinate" object="coordinateMapType"></map-type>
	 *   </map>
	 */
	(function() {
	  'use strict';

	  angular.module('ngMap').directive('mapType', ['Attr2Options', '$window', function(Attr2Options, $window) {
	    var parser = Attr2Options;
	    
	    return {
	      restrict: 'E',
	      require: '^map',

	      link: function(scope, element, attrs, mapController) {
	        var mapTypeName = attrs.name, mapTypeObject;
	        if (!mapTypeName) {
	          throw "invalid map-type name";
	        }
	        if (attrs.object) {
	          var __scope = scope[attrs.object] ? scope : $window;
	          mapTypeObject = __scope[attrs.object];
	          if (typeof mapTypeObject == "function") {
	            mapTypeObject = new mapTypeObject();
	          }
	        }
	        if (!mapTypeObject) {
	          throw "invalid map-type object";
	        }

	        scope.$on('mapInitialized', function(evt, map) {
	          map.mapTypes.set(mapTypeName, mapTypeObject);
	        });
	        mapController.addObject('mapTypes', mapTypeObject);
	      }
	     }; // return
	  }]);
	})();

	/**
	 * @ngdoc directive
	 * @memberof ngMap
	 * @name map
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @description
	 *   Implementation of {@link MapController}
	 *   Initialize a Google map within a `<div>` tag with given options and register events
	 *   It accepts children directives; marker, shape, or marker-clusterer
	 *
	 *   It initialize map, children tags, then emits message as soon as the action is done
	 *   The message emitted from this directive is;
	 *     . mapInitialized
	 *
	 *   Restrict To:
	 *     Element
	 *
	 * @attr {Expression} geo-callback if center is an address or current location, the expression is will be executed when geo-lookup is successful. e.g., geo-callback="showMyStoreInfo()"
	 * @attr {Array} geo-fallback-center
	 *    The center of map incase geolocation failed. i.e. [0,0]
	 * @attr {Object} geo-location-options
	 *    The navigator geolocation options. i.e. { maximumAge: 3000, timeout: 5000, enableHighAccuracy: true }. If none specified, { timeout: 5000 }. If timeout not specified, timeout: 5000 added
	 * @attr {Boolean} zoom-to-include-markers
	 *    When true, map boundary will be changed automatially to include all markers when initialized
	 * @attr {Boolean} default-style
	 *    When false, the default styling, `display:block;height:300px`, will be ignored.
	 * @attr {String} init-event The name of event to initialize this map.
	 *    If this option is given, the map won't be initialized until the event is received.
	 *    To invoke the event, use $scope.$emit or $scope.$broacast.
	 *    i.e. <map init-event="init-map" ng-click="$emit('init-map')" center=... ></map>
	 * @attr {String} &lt;MapOption> Any Google map options,
	 *    https://developers.google.com/maps/documentation/javascript/reference?csw=1#MapOptions
	 * @attr {String} &lt;MapEvent> Any Google map events,
	 *    https://rawgit.com/allenhwkim/angularjs-google-maps/master/build/map_events.html
	 * @attr {Boolean} single-info-window
	 *    When true the map will only display one info window at the time, if not set or false,
	 *    everytime an info window is open it will be displayed with the othe one.
	 * @example
	 * Usage:
	 *   <map MAP_OPTIONS_OR_MAP_EVENTS ..>
	 *     ... Any children directives
	 *   </map>
	 *
	 * Example:
	 *   <map center="[40.74, -74.18]" on-click="doThat()">
	 *   </map>
	 *
	 *   <map geo-fallback-center="[40.74, -74.18]" zoom-to-inlude-markers="true">
	 *   </map>
	 */
	/* global google */
	(function () {
	  'use strict';

	  function getStyle(el, styleProp) {
	    var y;
	    if (el.currentStyle) {
	      y = el.currentStyle[styleProp];
	    } else if (window.getComputedStyle) {
	      y = document.defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);
	    }
	    return y;
	  }

	  var mapDirective = function (Attr2Options, $timeout, $parse) {
	    var parser = Attr2Options;

	    /**
	     * Initialize map and events
	     * @memberof map
	     * @param {$scope} scope
	     * @param {angular.element} element
	     * @param {Hash} attrs
	     * @ctrl {MapController} ctrl
	     */
	    var linkFunc = function (scope, element, attrs, ctrl) {
	      var orgAttrs = parser.orgAttributes(element);

	      scope.google = google;  //used by $scope.eval in Attr2Options to avoid eval()

	      /**
	       * create a new `div` inside map tag, so that it does not touch map element
	       * https://stackoverflow.com/questions/20955356
	       */
	      var el = document.createElement("div");
	      el.style.width = "100%";
	      el.style.height = "100%";
	      element.prepend(el);

	      /**
	       * if style is not given to the map element, set display and height
	       */
	      if (attrs.defaultStyle !== 'false') {
	        if (getStyle(element[0], 'display') != "block") {
	          element.css('display', 'block');
	        }
	        if (getStyle(element[0], 'height').match(/^(0|auto)/)) {
	          element.css('height', '300px');
	        }
	      }

	      /**
	       * disable drag event
	       */
	      element[0].addEventListener('dragstart', function (event) {
	        event.preventDefault();
	        return false;
	      });

	      /**
	       * initialize function
	       */
	      var initializeMap = function (mapOptions, mapEvents) {
	        var map = new google.maps.Map(el, {});
	        map.markers = {};
	        map.shapes = {};

	        /**
	         * resize the map to prevent showing partially, in case intialized too early
	         */
	        $timeout(function () {
	          google.maps.event.trigger(map, "resize");
	        });

	        /**
	         * set options
	         */
	        mapOptions.zoom = mapOptions.zoom || 15;
	        var center = mapOptions.center;
	        if (!center) {
	          mapOptions.center = new google.maps.LatLng(0, 0);
	        } else if (!(center instanceof google.maps.LatLng)) {
	          delete mapOptions.center;
	          ctrl.getGeoLocation(center, options.geoLocationOptions).then(function (latlng) {
	            map.setCenter(latlng);
	            var geoCallback = attrs.geoCallback;
	            geoCallback && $parse(geoCallback)(scope);
	          }, function (error) {
	            map.setCenter(options.geoFallbackCenter);
	          });
	        }
	        map.setOptions(mapOptions);

	        ctrl.singleInfoWindow = mapOptions.singleInfoWindow;

	        /**
	         * set events
	         */
	        for (var eventName in mapEvents) {
	          if (eventName) {
	            google.maps.event.addListener(map, eventName, mapEvents[eventName]);
	          }
	        }

	        /**
	         * set observers
	         */
	        ctrl.observeAttrSetObj(orgAttrs, attrs, map);

	        /**
	         * set controller and set objects
	         * so that map can be used by other directives; marker or shape
	         * ctrl._objects are gathered when marker and shape are initialized before map is set
	         */
	        ctrl.map = map;
	        /* so that map can be used by other directives; marker or shape */
	        ctrl.addObjects(ctrl._objects);

	        // /* providing method to add a marker used by user scope */
	        // map.addMarker = ctrl.addMarker;

	        /**
	         * set map for scope and controller and broadcast map event
	         * scope.map will be overwritten if user have multiple maps in a scope,
	         * thus the last map will be set as scope.map.
	         * however an `mapInitialized` event will be emitted every time.
	         */
	        scope.map = map;
	        scope.map.scope = scope;
	        google.maps.event.addListenerOnce(map, "idle", function () {
	          scope.$emit('mapInitialized', map);
	          if (attrs.zoomToIncludeMarkers) {
	            ctrl.zoomToIncludeMarkers();
	            if (attrs.zoomToIncludeMarkers == 'auto') {
	              scope.$on('objectChanged', function (evt, msg) {
	                msg[0] == 'markers' && ctrl.zoomToIncludeMarkers();
	              });
	            }
	          }
	        });
	      }; // function initializeMap()

	      /**
	       * get map options and events
	       */
	      var filtered = parser.filter(attrs);
	      var options = parser.getOptions(filtered, scope);
	      var controlOptions = parser.getControlOptions(filtered);
	      var mapOptions = angular.extend(options, controlOptions);
	      var mapEvents = parser.getEvents(scope, filtered);
	      void 0;

	      if (attrs.initEvent) { // allows controlled initialization
	        scope.$on(attrs.initEvent, function () {
	          !ctrl.map && initializeMap(mapOptions, mapEvents); // init if not done
	        });
	      } else {
	        initializeMap(mapOptions, mapEvents);
	      } // if
	    };

	    return {
	      restrict: 'AE',
	      controller: 'MapController',
	      link: linkFunc
	    };
	  };

	  angular.module('ngMap').directive('map', ['Attr2Options', '$timeout', '$parse', mapDirective]);
	})();

	/* global google */
	(function() {
	  'use strict';

	  /**
	   * @ngdoc controller
	   * @name MapController
	   * @param $scope {service}
	   * @param $q {service} promise Q
	   * @param NavigatorGeolocation {service}
	   * @param GeoCoder {service}
	   * @param Attr2Options {service} convert html attribute to Gogole map api options
	   * @property {Hash} controls collection of Controls initiated within `map` directive
	   * @property {Hash} markers collection of Markers initiated within `map` directive
	   * @property {Hash} shapes collection of shapes initiated within `map` directive
	   */
	  var MapController = ["$scope", "$q", "NavigatorGeolocation", "GeoCoder", "Attr2Options", function($scope, $q, NavigatorGeolocation, GeoCoder, Attr2Options) { 
	    var parser = Attr2Options;
	    var _this = this;

	    var observeAndSet = function(attrs, attrName, object) {
	      attrs.$observe(attrName, function(val) {
	        if (val) {
	          void 0;
	          var setMethod = parser.camelCase('set-'+attrName);
	          var optionValue = parser.toOptionValue(val, {key: attrName});
	          void 0;
	          if (object[setMethod]) { //if set method does exist
	            /* if an location is being observed */
	            if (attrName.match(/center|position/) && 
	              typeof optionValue == 'string') {
	              _this.getGeoLocation(optionValue).then(function(latlng) {
	                object[setMethod](latlng);
	              });
	            } else {
	              object[setMethod](optionValue);
	            }
	          }
	        }
	      });
	    };

	    this.map = null;
	    this._objects = []; /* temporary collection of map objects */

	    /**
	     * Add an object to the collection of group
	     * @memberof MapController
	     * @function addObject
	     * @param groupName the name of collection that object belongs to
	     * @param obj  an object to add into a collection, i.e. marker, shape
	     */
	    this.addObject = function(groupName, obj) {
	      /**
	       * objects, i.e. markers and shapes, are initialized before map is initialized
	       * so, we collect those objects, then, we will add to map when map is initialized
	       * However the case as in ng-repeat, we can directly add to map
	       */
	      if (this.map) {
	        this.map[groupName] = this.map[groupName] || {};
	        var len = Object.keys(this.map[groupName]).length;
	        this.map[groupName][obj.id || len] = obj;
	        if (groupName != "infoWindows" && obj.setMap) { //infoWindow.setMap works like infoWindow.open
	          obj.setMap && obj.setMap(this.map);
	        }
	        if (obj.centered && obj.position) {
	          this.map.setCenter(obj.position);
	        }
	        $scope.$emit('objectChanged', [groupName, this.map[groupName]]);
	      } else {
	        obj.groupName = groupName;
	        this._objects.push(obj);
	      }
	    };

	    /**
	     * Delete an object from the collection and remove from map
	     * @memberof MapController
	     * @function deleteObject
	     * @param {Array} objs the collection of objects. i.e., map.markers
	     * @param {Object} obj the object to be removed. i.e., marker
	     */
	    this.deleteObject = function(groupName, obj) {
	      /* delete from group */
	      if (obj.map) {
	        var objs = obj.map[groupName];
	        for (var name in objs) {
	          objs[name] === obj && (delete objs[name]);
	        }

	        /* delete from map */
	        obj.map && obj.setMap && obj.setMap(null);
	        $scope.$emit('objectChanged', [groupName, this.map[groupName]]);
	      }
	    };

	    /**
	     * Add collected objects to map
	     * @memberof MapController
	     * @function addObjects
	     * @param {Array} objects the collection of objects. i.e., map.markers
	     */
	    this.addObjects = function(objects) {
	      for (var i=0; i<objects.length; i++) {
	        var obj=objects[i];
	        if (obj instanceof google.maps.Marker) {
	          this.addObject('markers', obj);
	        } else if (obj instanceof google.maps.Circle ||
	          obj instanceof google.maps.Polygon ||
	          obj instanceof google.maps.Polyline ||
	          obj instanceof google.maps.Rectangle ||
	          obj instanceof google.maps.GroundOverlay) {
	          this.addObject('shapes', obj);
	        } else {
	          this.addObject(obj.groupName, obj);
	        }
	      }
	    };

	    /**
	     * returns the location of an address or 'current-location'
	     * @memberof MapController
	     * @function getGeoLocation
	     * @param {String} string an address to find the location
	     * @param {Object} geoLocationOptions the navigator geolocation options. i.e. { maximumAge: 3000, timeout: 5000, enableHighAccuracy: true }. If none specified, { timeout: 5000 }. If timeout not specified, timeout: 5000 added
	     * @returns {Promise} latlng the location of the address
	     */
	    this.getGeoLocation = function(string, geoLocationOptions) {
	      var deferred = $q.defer();
	      if (!string || string.match(/^current/i)) { // current location
	        NavigatorGeolocation.getCurrentPosition(geoLocationOptions).then(
	          function(position) {
	            var lat = position.coords.latitude;
	            var lng = position.coords.longitude;
	            var latLng = new google.maps.LatLng(lat,lng);
	            deferred.resolve(latLng);
	          },
	          function(error) {
	            deferred.reject(error);
	          }
	        );
	      } else {
	        GeoCoder.geocode({address: string}).then(
	          function(results) {
	            deferred.resolve(results[0].geometry.location);
	          },
	          function(error) {
	            deferred.reject(error);
	          }
	        );
	      }

	      return deferred.promise;
	    };

	    /**
	     * watch changes of attribute values and do appropriate action based on attribute name
	     * @memberof MapController
	     * @function observeAttrSetObj
	     * @param {Hash} orgAttrs attributes before its initialization
	     * @param {Hash} attrs    attributes after its initialization
	     * @param {Object} obj    map object that an action is to be done
	     */
	    this.observeAttrSetObj = function(orgAttrs, attrs, obj) {
	      var attrsToObserve = parser.getAttrsToObserve(orgAttrs);
	      if (Object.keys(attrsToObserve).length) {
	        void 0;
	      }
	      for (var i=0; i<attrsToObserve.length; i++) {
	        observeAndSet(attrs, attrsToObserve[i], obj);
	      }
	    };

	    /**
	     * include all markers
	     */
	    this.zoomToIncludeMarkers = function() {
	      var bounds = new google.maps.LatLngBounds();
	      for (var marker in this.map.markers) {
	        bounds.extend(this.map.markers[marker].getPosition());
	      }
	      this.map.fitBounds(bounds);
	    };

	  }]; // MapController

	  MapController.$inject = ['$scope', '$q', 'NavigatorGeolocation', 'GeoCoder', 'Attr2Options'];
	  angular.module('ngMap').controller('MapController', MapController);
	})();

	/**
	 * @ngdoc directive
	 * @name maps-engine-layer
	 * @description 
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example: 
	 *   <map zoom="14" center="[59.322506, 18.010025]">
	 *     <maps-engine-layer layer-id="06673056454046135537-08896501997766553811"></maps-engine-layer>
	 *    </map>
	 */
	(function() {
	  'use strict';

	  angular.module('ngMap').directive('mapsEngineLayer', ['Attr2Options', function(Attr2Options) {
	    var parser = Attr2Options;

	    var getMapsEngineLayer = function(options, events) {
	      var layer = new google.maps.visualization.MapsEngineLayer(options);

	      for (var eventName in events) {
	        google.maps.event.addListener(layer, eventName, events[eventName]);
	      }

	      return layer;
	    };

	    
	    return {
	      restrict: 'E',
	      require: '^map',

	      link: function(scope, element, attrs, mapController) {
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered);
	        var events = parser.getEvents(scope, filtered, events);
	        void 0;

	        var layer = getMapsEngineLayer(options, events);
	        mapController.addObject('mapsEngineLayers', layer);
	      }
	     }; // return
	  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name marker
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @param NavigatorGeolocation It is used to find the current location
	 * @description 
	 *   Draw a Google map marker on a map with given options and register events  
	 *   
	 *   Requires:  map directive
	 *
	 *   Restrict To:  Element 
	 *
	 * @attr {String} position address, 'current', or [latitude, longitude]  
	 *    example:  
	 *      '1600 Pennsylvania Ave, 20500  Washingtion DC',   
	 *      'current position',  
	 *      '[40.74, -74.18]'  
	 * @attr {Boolean} centered if set, map will be centered with this marker
	 * @attr {Expression} geo-callback if position is an address, the expression is will be performed when geo-lookup is successful. e.g., geo-callback="showStoreInfo()"
	 * @attr {String} &lt;MarkerOption> [Any Marker options](https://developers.google.com/maps/documentation/javascript/reference?csw=1#MarkerOptions) 
	 * @attr {String} &lt;MapEvent> [Any Marker events](https://developers.google.com/maps/documentation/javascript/reference)
	 * @example
	 * Usage: 
	 *   <map MAP_ATTRIBUTES>
	 *    <marker ANY_MARKER_OPTIONS ANY_MARKER_EVENTS"></MARKER>
	 *   </map>
	 *
	 * Example: 
	 *   <map center="[40.74, -74.18]">
	 *    <marker position="[40.74, -74.18]" on-click="myfunc()"></div>
	 *   </map>
	 *
	 *   <map center="the cn tower">
	 *    <marker position="the cn tower" on-click="myfunc()"></div>
	 *   </map>
	 */
	/* global google */
	(function() {
	  'use strict';

	  var getMarker = function(options, events) {
	    var marker;

	    if (!(options.position instanceof google.maps.LatLng)) {
	      options.position = new google.maps.LatLng(0,0);
	    }
	    marker = new google.maps.Marker(options);

	    /**
	     * set events
	     */
	    if (Object.keys(events).length > 0) {
	      void 0;
	    }
	    for (var eventName in events) {
	      if (eventName) {
	        google.maps.event.addListener(marker, eventName, events[eventName]);
	      }
	    }

	    return marker;
	  };

	  var marker = ["Attr2Options", "$parse", function(Attr2Options, $parse) {
	    var parser = Attr2Options;
	    var linkFunc = function(scope, element, attrs, mapController) {
	      var orgAttrs = parser.orgAttributes(element);
	      var filtered = parser.filter(attrs);
	      var markerOptions = parser.getOptions(filtered, scope);
	      var markerEvents = parser.getEvents(scope, filtered);
	      void 0;

	      var address;
	      if (!(markerOptions.position instanceof google.maps.LatLng)) {
	        address = markerOptions.position;
	      }
	      var marker = getMarker(markerOptions, markerEvents);
	      mapController.addObject('markers', marker);
	      if (address) {
	        mapController.getGeoLocation(address).then(function(latlng) {
	          marker.setPosition(latlng);
	          markerOptions.centered && marker.map.setCenter(latlng);
	          var geoCallback = attrs.geoCallback;
	          geoCallback && $parse(geoCallback)(scope);
	        });
	      }

	      /**
	       * set observers
	       */
	      mapController.observeAttrSetObj(orgAttrs, attrs, marker); /* observers */
	      element.bind('$destroy', function() {
	        mapController.deleteObject('markers', marker);
	      });
	    };

	    return {
	      restrict: 'E',
	      require: '^map',
	      link: linkFunc
	    };
	  }];

	  marker.$inject = ['Attr2Options', '$parse'];
	  angular.module('ngMap').directive('marker', marker); 

	})();

	/**
	 * @ngdoc directive
	 * @name overlay-map-type
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @param $window {service} 
	 * @description 
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example: 
	 *
	 *   <map zoom="13" center="34.04924594193164, -118.24104309082031">
	 *     <overlay-map-type index="0" object="coordinateMapType"></map-type>
	 *   </map>
	 */
	(function() {
	  'use strict';

	  angular.module('ngMap').directive('overlayMapType', ['Attr2Options', '$window', function(Attr2Options, $window) {
	    var parser = Attr2Options;
	    
	    return {
	      restrict: 'E',
	      require: '^map',

	      link: function(scope, element, attrs, mapController) {
	        var overlayMapTypeObject;
	        var initMethod = attrs.initMethod || "insertAt";
	        if (attrs.object) {
	          var __scope = scope[attrs.object] ? scope : $window;
	          overlayMapTypeObject = __scope[attrs.object];
	          if (typeof overlayMapTypeObject == "function") {
	            overlayMapTypeObject = new overlayMapTypeObject();
	          }
	        }
	        if (!overlayMapTypeObject) {
	          throw "invalid map-type object";
	        }

	        scope.$on('mapInitialized', function(evt, map) {
	          if (initMethod == "insertAt") {
	            var index = parseInt(attrs.index, 10);
	            map.overlayMapTypes.insertAt(index, overlayMapTypeObject);
	          } else if (initMethod == "push") {
	            map.overlayMapTypes.push(overlayMapTypeObject);
	          }
	        });
	        mapController.addObject('overlayMapTypes', overlayMapTypeObject);
	      }
	     }; // return
	  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name places-auto-complete
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @description 
	 *   Provides address auto complete feature to an input element
	 *   Requires: input tag
	 *   Restrict To: Attribute
	 *
	 * @attr {AutoCompleteOptions} [Any AutocompleteOptions](https://developers.google.com/maps/documentation/javascript/3.exp/reference#AutocompleteOptions)
	 *
	 * @example
	 * Example: 
	 *   <script src="https://maps.googleapis.com/maps/api/js?libraries=places"></script>
	 *   <input places-auto-complete types="['geocode']" on-place-changed="myCallback(place)" />
	 */
	/* global google */
	(function() {
	  'use strict';

	  var placesAutoComplete = ["Attr2Options", "$timeout", function(Attr2Options, $timeout) {
	    var parser = Attr2Options;

	    var linkFunc = function(scope, element, attrs, ngModelCtrl) {
	      if (attrs.placesAutoComplete ==='false') {
	        return false;
	      }
	      var filtered = parser.filter(attrs);
	      var options = parser.getOptions(filtered);
	      var events = parser.getEvents(scope, filtered);
	      void 0;
	      var autocomplete = new google.maps.places.Autocomplete(element[0], options);
	      for (var eventName in events) {
	        google.maps.event.addListener(autocomplete, eventName, events[eventName]);
	      }

	      var updateModel = function() {
	        $timeout(function(){
	          ngModelCtrl && ngModelCtrl.$setViewValue(element.val());
	        },100);
	      }
	      google.maps.event.addListener(autocomplete, 'place_changed', updateModel);
	      element[0].addEventListener('change', updateModel);

	      attrs.$observe('types', function(val) {
	        if (val) {
	          void 0;
	          var optionValue = parser.toOptionValue(val, {key: 'types'});
	          void 0;
	          autocomplete.setTypes(optionValue);
	        }
	      });
	    };

	    return {
	      restrict: 'A',
	      require: '?ngModel',
	      link: linkFunc
	    };
	  }];

	  placesAutoComplete.$inject = ['Attr2Options', '$timeout'];
	  angular.module('ngMap').directive('placesAutoComplete', placesAutoComplete); 

	})();

	/**
	 * @ngdoc directive
	 * @name shape
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @description 
	 *   Initialize a Google map shape in map with given options and register events  
	 *   The shapes are:
	 *     . circle
	 *     . polygon
	 *     . polyline
	 *     . rectangle
	 *     . groundOverlay(or image)
	 *   
	 *   Requires:  map directive
	 *
	 *   Restrict To:  Element
	 *
	 * @attr {Boolean} centered if set, map will be centered with this marker
	 * @attr {Expression} geo-callback if shape is a circle and the center is an address, the expression is will be performed when geo-lookup is successful. e.g., geo-callback="showDetail()"
	 * @attr {String} &lt;OPTIONS>
	 *   For circle, [any circle options](https://developers.google.com/maps/documentation/javascript/reference#CircleOptions)  
	 *   For polygon, [any polygon options](https://developers.google.com/maps/documentation/javascript/reference#PolygonOptions)  
	 *   For polyline, [any polyline options](https://developers.google.com/maps/documentation/javascript/reference#PolylineOptions)   
	 *   For rectangle, [any rectangle options](https://developers.google.com/maps/documentation/javascript/reference#RectangleOptions)   
	 *   For image, [any groundOverlay options](https://developers.google.com/maps/documentation/javascript/reference#GroundOverlayOptions)   
	 * @attr {String} &lt;MapEvent> [Any Shape events](https://developers.google.com/maps/documentation/javascript/reference)
	 * @example
	 * Usage: 
	 *   <map MAP_ATTRIBUTES>
	 *    <shape name=SHAPE_NAME ANY_SHAPE_OPTIONS ANY_SHAPE_EVENTS"></MARKER>
	 *   </map>
	 *
	 * Example: 
	 *
	 *   <map zoom="11" center="[40.74, -74.18]">
	 *     <shape id="polyline" name="polyline" geodesic="true" stroke-color="#FF0000" stroke-opacity="1.0" stroke-weight="2"
	 *      path="[[40.74,-74.18],[40.64,-74.10],[40.54,-74.05],[40.44,-74]]" ></shape>
	 *    </map>
	 *
	 *   <map zoom="11" center="[40.74, -74.18]">
	 *     <shape id="polygon" name="polygon" stroke-color="#FF0000" stroke-opacity="1.0" stroke-weight="2"
	 *      paths="[[40.74,-74.18],[40.64,-74.18],[40.84,-74.08],[40.74,-74.18]]" ></shape>
	 *   </map>
	 *   
	 *   <map zoom="11" center="[40.74, -74.18]">
	 *     <shape id="rectangle" name="rectangle" stroke-color='#FF0000' stroke-opacity="0.8" stroke-weight="2"
	 *      bounds="[[40.74,-74.18], [40.78,-74.14]]" editable="true" ></shape>
	 *   </map>
	 *
	 *   <map zoom="11" center="[40.74, -74.18]">
	 *     <shape id="circle" name="circle" stroke-color='#FF0000' stroke-opacity="0.8"stroke-weight="2" 
	 *      center="[40.70,-74.14]" radius="4000" editable="true" ></shape>
	 *   </map>
	 *
	 *   <map zoom="11" center="[40.74, -74.18]">
	 *     <shape id="image" name="image" url="https://www.lib.utexas.edu/maps/historical/newark_nj_1922.jpg"
	 *      bounds="[[40.71,-74.22],[40.77,-74.12]]" opacity="0.7" clickable="true" ></shape>
	 *   </map>
	 *
	 *  For full-working example, please visit 
	 *    [shape example](https://rawgit.com/allenhwkim/angularjs-google-maps/master/build/shape.html)
	 */
	/* global google */
	(function() {
	  'use strict';

	  var getShape = function(options, events) {
	    var shape;

	    var shapeName = options.name;
	    delete options.name;  //remove name bcoz it's not for options
	    void 0;

	    /**
	     * set options
	     */
	    switch(shapeName) {
	      case "circle":
	        if (!(options.center instanceof google.maps.LatLng)) {
	          options.center = new google.maps.LatLng(0,0);
	        } 
	        shape = new google.maps.Circle(options);
	        break;
	      case "polygon":
	        shape = new google.maps.Polygon(options);
	        break;
	      case "polyline":
	        shape = new google.maps.Polyline(options);
	        break;
	      case "rectangle":
	        shape = new google.maps.Rectangle(options);
	        break;
	      case "groundOverlay":
	      case "image":
	        var url = options.url;
	        var opts = {opacity: options.opacity, clickable: options.clickable, id:options.id};
	        shape = new google.maps.GroundOverlay(url, options.bounds, opts);
	        break;
	    }

	    /**
	     * set events
	     */
	    for (var eventName in events) {
	      if (events[eventName]) {
	        google.maps.event.addListener(shape, eventName, events[eventName]);
	      }
	    }
	    return shape;
	  };

	  var shape = ["Attr2Options", "$parse", function(Attr2Options, $parse) {
	    var parser = Attr2Options;

	    var linkFunc = function(scope, element, attrs, mapController) {
	      var orgAttrs = parser.orgAttributes(element);
	      var filtered = parser.filter(attrs);
	      var shapeOptions = parser.getOptions(filtered);
	      var shapeEvents = parser.getEvents(scope, filtered);

	      var address, shapeType;
	      shapeType = shapeOptions.name;
	      if (!(shapeOptions.center instanceof google.maps.LatLng)) {
	        address = shapeOptions.center;
	      }
	      var shape = getShape(shapeOptions, shapeEvents);
	      mapController.addObject('shapes', shape);

	      if (address && shapeType == 'circle') {
	        mapController.getGeoLocation(address).then(function(latlng) {
	          shape.setCenter(latlng);
	          shape.centered && shape.map.setCenter(latlng);
	          var geoCallback = attrs.geoCallback;
	          geoCallback && $parse(geoCallback)(scope);
	        });
	      }

	      /**
	       * set observers
	       */
	      mapController.observeAttrSetObj(orgAttrs, attrs, shape); 
	      element.bind('$destroy', function() {
	        mapController.deleteObject('shapes', shape);
	      });
	    };

	    return {
	      restrict: 'E',
	      require: '^map',
	      link: linkFunc
	     }; // return
	  }];
	  shape.$inject = ['Attr2Options', '$parse'];

	  angular.module('ngMap').directive('shape', shape);

	})();

	/**
	 * @ngdoc directive
	 * @name streetview-panorama
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @attr container Optional, id or css selector, if given, streetview will be in the given html element
	 * @attr {String} &lt;StreetViewPanoramaOption> [Any Google StreetViewPanorama options](https://developers.google.com/maps/documentation/javascript/reference?csw=1#StreetViewPanoramaOptions)
	 * @attr {String} &lt;StreetViewPanoramaEvent> [Any Google StreetViewPanorama events](https://developers.google.com/maps/documentation/javascript/reference#StreetViewPanorama)
	 *
	 * @example
	 *   <map zoom="11" center="[40.688738,-74.043871]" >
	 *     <street-view-panorama
	 *       click-to-go="true"
	 *       disable-default-ui="true"
	 *       disable-double-click-zoom="true"
	 *       enable-close-button="true"
	 *       pano="my-pano"
	 *       position="40.688738,-74.043871"
	 *       pov="{heading:0, pitch: 90}"
	 *       scrollwheel="false"
	 *       visible="true">
	 *     </street-view-panorama>
	 *   </map>
	 */
	/* global google */
	(function() {
	  'use strict';
	   
	  var streetViewPanorama = ["Attr2Options", function(Attr2Options) {
	    var parser = Attr2Options;
	  
	    var getStreetViewPanorama = function(map, options, events) {
	      var svp, container;
	      if (options.container) {
	        container = document.getElementById(options.container);
	        container = container || document.querySelector(options.container);
	      }
	      if (container) {
	        svp = new google.maps.StreetViewPanorama(container, options);
	      } else {
	        svp = map.getStreetView();
	        svp.setOptions(options);
	      }

	      for (var eventName in events) {
	        eventName &&
	          google.maps.event.addListener(svp, eventName, events[eventName]);
	      }
	      return svp;
	    };

	    var linkFunc = function(scope, element, attrs, mapController) {
	      var orgAttrs = parser.orgAttributes(element);
	      var filtered = parser.filter(attrs);
	      var options = parser.getOptions(filtered);
	      var controlOptions = parser.getControlOptions(filtered);
	      var svpOptions = angular.extend(options, controlOptions);

	      var svpEvents = parser.getEvents(scope, filtered);
	      void 0;
	 
	      scope.$on('mapInitialized', function(evt, map) {
	        var svp = getStreetViewPanorama(map, svpOptions, svpEvents);

	        map.setStreetView(svp);
	        (!svp.getPosition()) && svp.setPosition(map.getCenter());
	        google.maps.event.addListener(svp, 'position_changed', function() {
	          if (svp.getPosition() !== map.getCenter()) {
	            map.setCenter(svp.getPosition());
	          }
	        });
	        //needed for geo-callback
	        var listener = google.maps.event.addListener(map, 'center_changed', function() {
	          svp.setPosition(map.getCenter());
	          google.maps.event.removeListener(listener);
	        });
	      });

	    }; //link

	    return {
	      restrict: 'E',
	      require: '^map',
	      link: linkFunc
	    };

	  }];
	  streetViewPanorama.$inject = ['Attr2Options'];

	  angular.module('ngMap').directive('streetViewPanorama', streetViewPanorama);
	})();

	/**
	 * @ngdoc directive
	 * @name traffic-layer
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @description 
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example: 
	 *
	 *   <map zoom="13" center="34.04924594193164, -118.24104309082031">
	 *     <traffic-layer></traffic-layer>
	 *    </map>
	 */
	(function() {
	  'use strict';

	  angular.module('ngMap').directive('trafficLayer', ['Attr2Options', function(Attr2Options) {
	    var parser = Attr2Options;
	    
	    var getLayer = function(options, events) {
	      var layer = new google.maps.TrafficLayer(options);
	      for (var eventName in events) {
	        google.maps.event.addListener(layer, eventName, events[eventName]);
	      }
	      return layer;
	    };
	    
	    return {
	      restrict: 'E',
	      require: '^map',

	      link: function(scope, element, attrs, mapController) {
	        var orgAttrs = parser.orgAttributes(element);
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered);
	        var events = parser.getEvents(scope, filtered);
	        void 0;

	        var layer = getLayer(options, events);
	        mapController.addObject('trafficLayers', layer);
	        mapController.observeAttrSetObj(orgAttrs, attrs, layer);  //observers
	        element.bind('$destroy', function() {
	          mapController.deleteObject('trafficLayers', layer);
	        });
	      }
	     }; // return
	  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name transit-layer
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @description 
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example: 
	 *
	 *   <map zoom="13" center="34.04924594193164, -118.24104309082031">
	 *     <transit-layer></transit-layer>
	 *    </map>
	 */
	(function() {
	  'use strict';

	  angular.module('ngMap').directive('transitLayer', ['Attr2Options', function(Attr2Options) {
	    var parser = Attr2Options;
	    
	    var getLayer = function(options, events) {
	      var layer = new google.maps.TransitLayer(options);
	      for (var eventName in events) {
	        google.maps.event.addListener(layer, eventName, events[eventName]);
	      }
	      return layer;
	    };
	    
	    return {
	      restrict: 'E',
	      require: '^map',

	      link: function(scope, element, attrs, mapController) {
	        var orgAttrs = parser.orgAttributes(element);
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered);
	        var events = parser.getEvents(scope, filtered);
	        void 0;

	        var layer = getLayer(options, events);
	        mapController.addObject('transitLayers', layer);
	        mapController.observeAttrSetObj(orgAttrs, attrs, layer);  //observers
	        element.bind('$destroy', function() {
	          mapController.deleteObject('transitLayers', layer);
	        });
	      }
	     }; // return
	  }]);
	})();

	/**
	 * @ngdoc directive
	 * @name weather-layer
	 * @param Attr2Options {service} convert html attribute to Gogole map api options
	 * @description 
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example: 
	 *
	 *   <map zoom="13" center="34.04924594193164, -118.24104309082031">
	 *     <weather-layer></weather-layer>
	 *    </map>
	 */
	(function() {
	  'use strict';

	  angular.module('ngMap').directive('weatherLayer', ['Attr2Options', function(Attr2Options) {
	    var parser = Attr2Options;
	    
	    var getLayer = function(options, events) {
	      var layer = new google.maps.weather.WeatherLayer(options);
	      for (var eventName in events) {
	        google.maps.event.addListener(layer, eventName, events[eventName]);
	      }
	      return layer;
	    };
	    
	    return {
	      restrict: 'E',
	      require: '^map',

	      link: function(scope, element, attrs, mapController) {
	        var orgAttrs = parser.orgAttributes(element);
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered);
	        var events = parser.getEvents(scope, filtered);

	        void 0;

	        var layer = getLayer(options, events);
	        mapController.addObject('weatherLayers', layer);
	        mapController.observeAttrSetObj(orgAttrs, attrs, layer);  //observers
	        element.bind('$destroy', function() {
	          mapController.deleteObject('weatherLayers', layer);
	        });
	      }
	     }; // return
	  }]);
	})();


/***/ },

/***/ 414:
/***/ function(module, exports) {

	// ==ClosureCompiler==
	// @compilation_level ADVANCED_OPTIMIZATIONS
	// @externs_url http://closure-compiler.googlecode.com/svn/trunk/contrib/externs/maps/google_maps_api_v3_3.js
	// ==/ClosureCompiler==

	/**
	 * @name MarkerClusterer for Google Maps v3
	 * @version version 1.0
	 * @author Luke Mahe
	 * @fileoverview
	 * The library creates and manages per-zoom-level clusters for large amounts of
	 * markers.
	 * <br/>
	 * This is a v3 implementation of the
	 * <a href="http://gmaps-utility-library-dev.googlecode.com/svn/tags/markerclusterer/"
	 * >v2 MarkerClusterer</a>.
	 */

	/**
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */


	/**
	 * A Marker Clusterer that clusters markers.
	 *
	 * @param {google.maps.Map} map The Google map to attach to.
	 * @param {Array.<google.maps.Marker>=} opt_markers Optional markers to add to
	 *   the cluster.
	 * @param {Object=} opt_options support the following options:
	 *     'gridSize': (number) The grid size of a cluster in pixels.
	 *     'maxZoom': (number) The maximum zoom level that a marker can be part of a
	 *                cluster.
	 *     'zoomOnClick': (boolean) Whether the default behaviour of clicking on a
	 *                    cluster is to zoom into it.
	 *     'averageCenter': (boolean) Wether the center of each cluster should be
	 *                      the average of all markers in the cluster.
	 *     'minimumClusterSize': (number) The minimum number of markers to be in a
	 *                           cluster before the markers are hidden and a count
	 *                           is shown.
	 *     'styles': (object) An object that has style properties:
	 *       'url': (string) The image url.
	 *       'height': (number) The image height.
	 *       'width': (number) The image width.
	 *       'anchor': (Array) The anchor position of the label text.
	 *       'textColor': (string) The text color.
	 *       'textSize': (number) The text size.
	 *       'backgroundPosition': (string) The position of the backgound x, y.
	 *       'iconAnchor': (Array) The anchor position of the icon x, y.
	 * @constructor
	 * @extends google.maps.OverlayView
	 */
	function MarkerClusterer(map, opt_markers, opt_options) {
	  // MarkerClusterer implements google.maps.OverlayView interface. We use the
	  // extend function to extend MarkerClusterer with google.maps.OverlayView
	  // because it might not always be available when the code is defined so we
	  // look for it at the last possible moment. If it doesn't exist now then
	  // there is no point going ahead :)
	  this.extend(MarkerClusterer, google.maps.OverlayView);
	  this.map_ = map;

	  /**
	   * @type {Array.<google.maps.Marker>}
	   * @private
	   */
	  this.markers_ = [];

	  /**
	   *  @type {Array.<Cluster>}
	   */
	  this.clusters_ = [];

	  this.sizes = [53, 56, 66, 78, 90];

	  /**
	   * @private
	   */
	  this.styles_ = [];

	  /**
	   * @type {boolean}
	   * @private
	   */
	  this.ready_ = false;

	  var options = opt_options || {};

	  /**
	   * @type {number}
	   * @private
	   */
	  this.gridSize_ = options['gridSize'] || 60;

	  /**
	   * @private
	   */
	  this.minClusterSize_ = options['minimumClusterSize'] || 2;


	  /**
	   * @type {?number}
	   * @private
	   */
	  this.maxZoom_ = options['maxZoom'] || null;

	  this.styles_ = options['styles'] || [];

	  /**
	   * @type {string}
	   * @private
	   */
	  this.imagePath_ = options['imagePath'] ||
	      this.MARKER_CLUSTER_IMAGE_PATH_;

	  /**
	   * @type {string}
	   * @private
	   */
	  this.imageExtension_ = options['imageExtension'] ||
	      this.MARKER_CLUSTER_IMAGE_EXTENSION_;

	  /**
	   * @type {boolean}
	   * @private
	   */
	  this.zoomOnClick_ = true;

	  if (options['zoomOnClick'] != undefined) {
	    this.zoomOnClick_ = options['zoomOnClick'];
	  }

	  /**
	   * @type {boolean}
	   * @private
	   */
	  this.averageCenter_ = false;

	  if (options['averageCenter'] != undefined) {
	    this.averageCenter_ = options['averageCenter'];
	  }

	  this.setupStyles_();

	  this.setMap(map);

	  /**
	   * @type {number}
	   * @private
	   */
	  this.prevZoom_ = this.map_.getZoom();

	  // Add the map event listeners
	  var that = this;
	  google.maps.event.addListener(this.map_, 'zoom_changed', function() {
	    var zoom = that.map_.getZoom();

	    if (that.prevZoom_ != zoom) {
	      that.prevZoom_ = zoom;
	      that.resetViewport();
	    }
	  });

	  google.maps.event.addListener(this.map_, 'idle', function() {
	    that.redraw();
	  });

	  // Finally, add the markers
	  if (opt_markers && opt_markers.length) {
	    this.addMarkers(opt_markers, false);
	  }
	}


	/**
	 * The marker cluster image path.
	 *
	 * @type {string}
	 * @private
	 */
	MarkerClusterer.prototype.MARKER_CLUSTER_IMAGE_PATH_ =
	    'http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclusterer/' +
	    'images/m';


	/**
	 * The marker cluster image path.
	 *
	 * @type {string}
	 * @private
	 */
	MarkerClusterer.prototype.MARKER_CLUSTER_IMAGE_EXTENSION_ = 'png';


	/**
	 * Extends a objects prototype by anothers.
	 *
	 * @param {Object} obj1 The object to be extended.
	 * @param {Object} obj2 The object to extend with.
	 * @return {Object} The new extended object.
	 * @ignore
	 */
	MarkerClusterer.prototype.extend = function(obj1, obj2) {
	  return (function(object) {
	    for (var property in object.prototype) {
	      this.prototype[property] = object.prototype[property];
	    }
	    return this;
	  }).apply(obj1, [obj2]);
	};


	/**
	 * Implementaion of the interface method.
	 * @ignore
	 */
	MarkerClusterer.prototype.onAdd = function() {
	  this.setReady_(true);
	};

	/**
	 * Implementaion of the interface method.
	 * @ignore
	 */
	MarkerClusterer.prototype.draw = function() {};

	/**
	 * Sets up the styles object.
	 *
	 * @private
	 */
	MarkerClusterer.prototype.setupStyles_ = function() {
	  if (this.styles_.length) {
	    return;
	  }

	  for (var i = 0, size; size = this.sizes[i]; i++) {
	    this.styles_.push({
	      url: this.imagePath_ + (i + 1) + '.' + this.imageExtension_,
	      height: size,
	      width: size
	    });
	  }
	};

	/**
	 *  Fit the map to the bounds of the markers in the clusterer.
	 */
	MarkerClusterer.prototype.fitMapToMarkers = function() {
	  var markers = this.getMarkers();
	  var bounds = new google.maps.LatLngBounds();
	  for (var i = 0, marker; marker = markers[i]; i++) {
	    bounds.extend(marker.getPosition());
	  }

	  this.map_.fitBounds(bounds);
	};


	/**
	 *  Sets the styles.
	 *
	 *  @param {Object} styles The style to set.
	 */
	MarkerClusterer.prototype.setStyles = function(styles) {
	  this.styles_ = styles;
	};


	/**
	 *  Gets the styles.
	 *
	 *  @return {Object} The styles object.
	 */
	MarkerClusterer.prototype.getStyles = function() {
	  return this.styles_;
	};


	/**
	 * Whether zoom on click is set.
	 *
	 * @return {boolean} True if zoomOnClick_ is set.
	 */
	MarkerClusterer.prototype.isZoomOnClick = function() {
	  return this.zoomOnClick_;
	};

	/**
	 * Whether average center is set.
	 *
	 * @return {boolean} True if averageCenter_ is set.
	 */
	MarkerClusterer.prototype.isAverageCenter = function() {
	  return this.averageCenter_;
	};


	/**
	 *  Returns the array of markers in the clusterer.
	 *
	 *  @return {Array.<google.maps.Marker>} The markers.
	 */
	MarkerClusterer.prototype.getMarkers = function() {
	  return this.markers_;
	};


	/**
	 *  Returns the number of markers in the clusterer
	 *
	 *  @return {Number} The number of markers.
	 */
	MarkerClusterer.prototype.getTotalMarkers = function() {
	  return this.markers_.length;
	};


	/**
	 *  Sets the max zoom for the clusterer.
	 *
	 *  @param {number} maxZoom The max zoom level.
	 */
	MarkerClusterer.prototype.setMaxZoom = function(maxZoom) {
	  this.maxZoom_ = maxZoom;
	};


	/**
	 *  Gets the max zoom for the clusterer.
	 *
	 *  @return {number} The max zoom level.
	 */
	MarkerClusterer.prototype.getMaxZoom = function() {
	  return this.maxZoom_;
	};


	/**
	 *  The function for calculating the cluster icon image.
	 *
	 *  @param {Array.<google.maps.Marker>} markers The markers in the clusterer.
	 *  @param {number} numStyles The number of styles available.
	 *  @return {Object} A object properties: 'text' (string) and 'index' (number).
	 *  @private
	 */
	MarkerClusterer.prototype.calculator_ = function(markers, numStyles) {
	  var index = 0;
	  var count = markers.length;
	  var dv = count;
	  while (dv !== 0) {
	    dv = parseInt(dv / 10, 10);
	    index++;
	  }

	  index = Math.min(index, numStyles);
	  return {
	    text: count,
	    index: index
	  };
	};


	/**
	 * Set the calculator function.
	 *
	 * @param {function(Array, number)} calculator The function to set as the
	 *     calculator. The function should return a object properties:
	 *     'text' (string) and 'index' (number).
	 *
	 */
	MarkerClusterer.prototype.setCalculator = function(calculator) {
	  this.calculator_ = calculator;
	};


	/**
	 * Get the calculator function.
	 *
	 * @return {function(Array, number)} the calculator function.
	 */
	MarkerClusterer.prototype.getCalculator = function() {
	  return this.calculator_;
	};


	/**
	 * Add an array of markers to the clusterer.
	 *
	 * @param {Array.<google.maps.Marker>} markers The markers to add.
	 * @param {boolean=} opt_nodraw Whether to redraw the clusters.
	 */
	MarkerClusterer.prototype.addMarkers = function(markers, opt_nodraw) {
	  for (var i = 0, marker; marker = markers[i]; i++) {
	    this.pushMarkerTo_(marker);
	  }
	  if (!opt_nodraw) {
	    this.redraw();
	  }
	};


	/**
	 * Pushes a marker to the clusterer.
	 *
	 * @param {google.maps.Marker} marker The marker to add.
	 * @private
	 */
	MarkerClusterer.prototype.pushMarkerTo_ = function(marker) {
	  marker.isAdded = false;
	  if (marker['draggable']) {
	    // If the marker is draggable add a listener so we update the clusters on
	    // the drag end.
	    var that = this;
	    google.maps.event.addListener(marker, 'dragend', function() {
	      marker.isAdded = false;
	      that.repaint();
	    });
	  }
	  this.markers_.push(marker);
	};


	/**
	 * Adds a marker to the clusterer and redraws if needed.
	 *
	 * @param {google.maps.Marker} marker The marker to add.
	 * @param {boolean=} opt_nodraw Whether to redraw the clusters.
	 */
	MarkerClusterer.prototype.addMarker = function(marker, opt_nodraw) {
	  this.pushMarkerTo_(marker);
	  if (!opt_nodraw) {
	    this.redraw();
	  }
	};


	/**
	 * Removes a marker and returns true if removed, false if not
	 *
	 * @param {google.maps.Marker} marker The marker to remove
	 * @return {boolean} Whether the marker was removed or not
	 * @private
	 */
	MarkerClusterer.prototype.removeMarker_ = function(marker) {
	  var index = -1;
	  if (this.markers_.indexOf) {
	    index = this.markers_.indexOf(marker);
	  } else {
	    for (var i = 0, m; m = this.markers_[i]; i++) {
	      if (m == marker) {
	        index = i;
	        break;
	      }
	    }
	  }

	  if (index == -1) {
	    // Marker is not in our list of markers.
	    return false;
	  }

	  marker.setMap(null);

	  this.markers_.splice(index, 1);

	  return true;
	};


	/**
	 * Remove a marker from the cluster.
	 *
	 * @param {google.maps.Marker} marker The marker to remove.
	 * @param {boolean=} opt_nodraw Optional boolean to force no redraw.
	 * @return {boolean} True if the marker was removed.
	 */
	MarkerClusterer.prototype.removeMarker = function(marker, opt_nodraw) {
	  var removed = this.removeMarker_(marker);

	  if (!opt_nodraw && removed) {
	    this.resetViewport();
	    this.redraw();
	    return true;
	  } else {
	   return false;
	  }
	};


	/**
	 * Removes an array of markers from the cluster.
	 *
	 * @param {Array.<google.maps.Marker>} markers The markers to remove.
	 * @param {boolean=} opt_nodraw Optional boolean to force no redraw.
	 */
	MarkerClusterer.prototype.removeMarkers = function(markers, opt_nodraw) {
	  var removed = false;

	  for (var i = 0, marker; marker = markers[i]; i++) {
	    var r = this.removeMarker_(marker);
	    removed = removed || r;
	  }

	  if (!opt_nodraw && removed) {
	    this.resetViewport();
	    this.redraw();
	    return true;
	  }
	};


	/**
	 * Sets the clusterer's ready state.
	 *
	 * @param {boolean} ready The state.
	 * @private
	 */
	MarkerClusterer.prototype.setReady_ = function(ready) {
	  if (!this.ready_) {
	    this.ready_ = ready;
	    this.createClusters_();
	  }
	};


	/**
	 * Returns the number of clusters in the clusterer.
	 *
	 * @return {number} The number of clusters.
	 */
	MarkerClusterer.prototype.getTotalClusters = function() {
	  return this.clusters_.length;
	};


	/**
	 * Returns the google map that the clusterer is associated with.
	 *
	 * @return {google.maps.Map} The map.
	 */
	MarkerClusterer.prototype.getMap = function() {
	  return this.map_;
	};


	/**
	 * Sets the google map that the clusterer is associated with.
	 *
	 * @param {google.maps.Map} map The map.
	 */
	MarkerClusterer.prototype.setMap = function(map) {
	  this.map_ = map;
	};


	/**
	 * Returns the size of the grid.
	 *
	 * @return {number} The grid size.
	 */
	MarkerClusterer.prototype.getGridSize = function() {
	  return this.gridSize_;
	};


	/**
	 * Sets the size of the grid.
	 *
	 * @param {number} size The grid size.
	 */
	MarkerClusterer.prototype.setGridSize = function(size) {
	  this.gridSize_ = size;
	};


	/**
	 * Returns the min cluster size.
	 *
	 * @return {number} The grid size.
	 */
	MarkerClusterer.prototype.getMinClusterSize = function() {
	  return this.minClusterSize_;
	};

	/**
	 * Sets the min cluster size.
	 *
	 * @param {number} size The grid size.
	 */
	MarkerClusterer.prototype.setMinClusterSize = function(size) {
	  this.minClusterSize_ = size;
	};


	/**
	 * Extends a bounds object by the grid size.
	 *
	 * @param {google.maps.LatLngBounds} bounds The bounds to extend.
	 * @return {google.maps.LatLngBounds} The extended bounds.
	 */
	MarkerClusterer.prototype.getExtendedBounds = function(bounds) {
	  var projection = this.getProjection();

	  // Turn the bounds into latlng.
	  var tr = new google.maps.LatLng(bounds.getNorthEast().lat(),
	      bounds.getNorthEast().lng());
	  var bl = new google.maps.LatLng(bounds.getSouthWest().lat(),
	      bounds.getSouthWest().lng());

	  // Convert the points to pixels and the extend out by the grid size.
	  var trPix = projection.fromLatLngToDivPixel(tr);
	  trPix.x += this.gridSize_;
	  trPix.y -= this.gridSize_;

	  var blPix = projection.fromLatLngToDivPixel(bl);
	  blPix.x -= this.gridSize_;
	  blPix.y += this.gridSize_;

	  // Convert the pixel points back to LatLng
	  var ne = projection.fromDivPixelToLatLng(trPix);
	  var sw = projection.fromDivPixelToLatLng(blPix);

	  // Extend the bounds to contain the new bounds.
	  bounds.extend(ne);
	  bounds.extend(sw);

	  return bounds;
	};


	/**
	 * Determins if a marker is contained in a bounds.
	 *
	 * @param {google.maps.Marker} marker The marker to check.
	 * @param {google.maps.LatLngBounds} bounds The bounds to check against.
	 * @return {boolean} True if the marker is in the bounds.
	 * @private
	 */
	MarkerClusterer.prototype.isMarkerInBounds_ = function(marker, bounds) {
	  return bounds.contains(marker.getPosition());
	};


	/**
	 * Clears all clusters and markers from the clusterer.
	 */
	MarkerClusterer.prototype.clearMarkers = function() {
	  this.resetViewport(true);

	  // Set the markers a empty array.
	  this.markers_ = [];
	};


	/**
	 * Clears all existing clusters and recreates them.
	 * @param {boolean} opt_hide To also hide the marker.
	 */
	MarkerClusterer.prototype.resetViewport = function(opt_hide) {
	  // Remove all the clusters
	  for (var i = 0, cluster; cluster = this.clusters_[i]; i++) {
	    cluster.remove();
	  }

	  // Reset the markers to not be added and to be invisible.
	  for (var i = 0, marker; marker = this.markers_[i]; i++) {
	    marker.isAdded = false;
	    if (opt_hide) {
	      marker.setMap(null);
	    }
	  }

	  this.clusters_ = [];
	};

	/**
	 *
	 */
	MarkerClusterer.prototype.repaint = function() {
	  var oldClusters = this.clusters_.slice();
	  this.clusters_.length = 0;
	  this.resetViewport();
	  this.redraw();

	  // Remove the old clusters.
	  // Do it in a timeout so the other clusters have been drawn first.
	  window.setTimeout(function() {
	    for (var i = 0, cluster; cluster = oldClusters[i]; i++) {
	      cluster.remove();
	    }
	  }, 0);
	};


	/**
	 * Redraws the clusters.
	 */
	MarkerClusterer.prototype.redraw = function() {
	  this.createClusters_();
	};


	/**
	 * Calculates the distance between two latlng locations in km.
	 * @see http://www.movable-type.co.uk/scripts/latlong.html
	 *
	 * @param {google.maps.LatLng} p1 The first lat lng point.
	 * @param {google.maps.LatLng} p2 The second lat lng point.
	 * @return {number} The distance between the two points in km.
	 * @private
	*/
	MarkerClusterer.prototype.distanceBetweenPoints_ = function(p1, p2) {
	  if (!p1 || !p2) {
	    return 0;
	  }

	  var R = 6371; // Radius of the Earth in km
	  var dLat = (p2.lat() - p1.lat()) * Math.PI / 180;
	  var dLon = (p2.lng() - p1.lng()) * Math.PI / 180;
	  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
	    Math.cos(p1.lat() * Math.PI / 180) * Math.cos(p2.lat() * Math.PI / 180) *
	    Math.sin(dLon / 2) * Math.sin(dLon / 2);
	  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
	  var d = R * c;
	  return d;
	};


	/**
	 * Add a marker to a cluster, or creates a new cluster.
	 *
	 * @param {google.maps.Marker} marker The marker to add.
	 * @private
	 */
	MarkerClusterer.prototype.addToClosestCluster_ = function(marker) {
	  var distance = 40000; // Some large number
	  var clusterToAddTo = null;
	  var pos = marker.getPosition();
	  for (var i = 0, cluster; cluster = this.clusters_[i]; i++) {
	    var center = cluster.getCenter();
	    if (center) {
	      var d = this.distanceBetweenPoints_(center, marker.getPosition());
	      if (d < distance) {
	        distance = d;
	        clusterToAddTo = cluster;
	      }
	    }
	  }

	  if (clusterToAddTo && clusterToAddTo.isMarkerInClusterBounds(marker)) {
	    clusterToAddTo.addMarker(marker);
	  } else {
	    var cluster = new Cluster(this);
	    cluster.addMarker(marker);
	    this.clusters_.push(cluster);
	  }
	};


	/**
	 * Creates the clusters.
	 *
	 * @private
	 */
	MarkerClusterer.prototype.createClusters_ = function() {
	  if (!this.ready_) {
	    return;
	  }

	  // Get our current map view bounds.
	  // Create a new bounds object so we don't affect the map.
	  var mapBounds = new google.maps.LatLngBounds(this.map_.getBounds().getSouthWest(),
	      this.map_.getBounds().getNorthEast());
	  var bounds = this.getExtendedBounds(mapBounds);

	  for (var i = 0, marker; marker = this.markers_[i]; i++) {
	    if (!marker.isAdded && this.isMarkerInBounds_(marker, bounds)) {
	      this.addToClosestCluster_(marker);
	    }
	  }
	};


	/**
	 * A cluster that contains markers.
	 *
	 * @param {MarkerClusterer} markerClusterer The markerclusterer that this
	 *     cluster is associated with.
	 * @constructor
	 * @ignore
	 */
	function Cluster(markerClusterer) {
	  this.markerClusterer_ = markerClusterer;
	  this.map_ = markerClusterer.getMap();
	  this.gridSize_ = markerClusterer.getGridSize();
	  this.minClusterSize_ = markerClusterer.getMinClusterSize();
	  this.averageCenter_ = markerClusterer.isAverageCenter();
	  this.center_ = null;
	  this.markers_ = [];
	  this.bounds_ = null;
	  this.clusterIcon_ = new ClusterIcon(this, markerClusterer.getStyles(),
	      markerClusterer.getGridSize());
	}

	/**
	 * Determins if a marker is already added to the cluster.
	 *
	 * @param {google.maps.Marker} marker The marker to check.
	 * @return {boolean} True if the marker is already added.
	 */
	Cluster.prototype.isMarkerAlreadyAdded = function(marker) {
	  if (this.markers_.indexOf) {
	    return this.markers_.indexOf(marker) != -1;
	  } else {
	    for (var i = 0, m; m = this.markers_[i]; i++) {
	      if (m == marker) {
	        return true;
	      }
	    }
	  }
	  return false;
	};


	/**
	 * Add a marker the cluster.
	 *
	 * @param {google.maps.Marker} marker The marker to add.
	 * @return {boolean} True if the marker was added.
	 */
	Cluster.prototype.addMarker = function(marker) {
	  if (this.isMarkerAlreadyAdded(marker)) {
	    return false;
	  }

	  if (!this.center_) {
	    this.center_ = marker.getPosition();
	    this.calculateBounds_();
	  } else {
	    if (this.averageCenter_) {
	      var l = this.markers_.length + 1;
	      var lat = (this.center_.lat() * (l-1) + marker.getPosition().lat()) / l;
	      var lng = (this.center_.lng() * (l-1) + marker.getPosition().lng()) / l;
	      this.center_ = new google.maps.LatLng(lat, lng);
	      this.calculateBounds_();
	    }
	  }

	  marker.isAdded = true;
	  this.markers_.push(marker);

	  var len = this.markers_.length;
	  if (len < this.minClusterSize_ && marker.getMap() != this.map_) {
	    // Min cluster size not reached so show the marker.
	    marker.setMap(this.map_);
	  }

	  if (len == this.minClusterSize_) {
	    // Hide the markers that were showing.
	    for (var i = 0; i < len; i++) {
	      this.markers_[i].setMap(null);
	    }
	  }

	  if (len >= this.minClusterSize_) {
	    marker.setMap(null);
	  }

	  this.updateIcon();
	  return true;
	};


	/**
	 * Returns the marker clusterer that the cluster is associated with.
	 *
	 * @return {MarkerClusterer} The associated marker clusterer.
	 */
	Cluster.prototype.getMarkerClusterer = function() {
	  return this.markerClusterer_;
	};


	/**
	 * Returns the bounds of the cluster.
	 *
	 * @return {google.maps.LatLngBounds} the cluster bounds.
	 */
	Cluster.prototype.getBounds = function() {
	  var bounds = new google.maps.LatLngBounds(this.center_, this.center_);
	  var markers = this.getMarkers();
	  for (var i = 0, marker; marker = markers[i]; i++) {
	    bounds.extend(marker.getPosition());
	  }
	  return bounds;
	};


	/**
	 * Removes the cluster
	 */
	Cluster.prototype.remove = function() {
	  this.clusterIcon_.remove();
	  this.markers_.length = 0;
	  delete this.markers_;
	};


	/**
	 * Returns the center of the cluster.
	 *
	 * @return {number} The cluster center.
	 */
	Cluster.prototype.getSize = function() {
	  return this.markers_.length;
	};


	/**
	 * Returns the center of the cluster.
	 *
	 * @return {Array.<google.maps.Marker>} The cluster center.
	 */
	Cluster.prototype.getMarkers = function() {
	  return this.markers_;
	};


	/**
	 * Returns the center of the cluster.
	 *
	 * @return {google.maps.LatLng} The cluster center.
	 */
	Cluster.prototype.getCenter = function() {
	  return this.center_;
	};


	/**
	 * Calculated the extended bounds of the cluster with the grid.
	 *
	 * @private
	 */
	Cluster.prototype.calculateBounds_ = function() {
	  var bounds = new google.maps.LatLngBounds(this.center_, this.center_);
	  this.bounds_ = this.markerClusterer_.getExtendedBounds(bounds);
	};


	/**
	 * Determines if a marker lies in the clusters bounds.
	 *
	 * @param {google.maps.Marker} marker The marker to check.
	 * @return {boolean} True if the marker lies in the bounds.
	 */
	Cluster.prototype.isMarkerInClusterBounds = function(marker) {
	  return this.bounds_.contains(marker.getPosition());
	};


	/**
	 * Returns the map that the cluster is associated with.
	 *
	 * @return {google.maps.Map} The map.
	 */
	Cluster.prototype.getMap = function() {
	  return this.map_;
	};


	/**
	 * Updates the cluster icon
	 */
	Cluster.prototype.updateIcon = function() {
	  var zoom = this.map_.getZoom();
	  var mz = this.markerClusterer_.getMaxZoom();

	  if (mz && zoom > mz) {
	    // The zoom is greater than our max zoom so show all the markers in cluster.
	    for (var i = 0, marker; marker = this.markers_[i]; i++) {
	      marker.setMap(this.map_);
	    }
	    return;
	  }

	  if (this.markers_.length < this.minClusterSize_) {
	    // Min cluster size not yet reached.
	    this.clusterIcon_.hide();
	    return;
	  }

	  var numStyles = this.markerClusterer_.getStyles().length;
	  var sums = this.markerClusterer_.getCalculator()(this.markers_, numStyles);
	  this.clusterIcon_.setCenter(this.center_);
	  this.clusterIcon_.setSums(sums);
	  this.clusterIcon_.show();
	};


	/**
	 * A cluster icon
	 *
	 * @param {Cluster} cluster The cluster to be associated with.
	 * @param {Object} styles An object that has style properties:
	 *     'url': (string) The image url.
	 *     'height': (number) The image height.
	 *     'width': (number) The image width.
	 *     'anchor': (Array) The anchor position of the label text.
	 *     'textColor': (string) The text color.
	 *     'textSize': (number) The text size.
	 *     'backgroundPosition: (string) The background postition x, y.
	 * @param {number=} opt_padding Optional padding to apply to the cluster icon.
	 * @constructor
	 * @extends google.maps.OverlayView
	 * @ignore
	 */
	function ClusterIcon(cluster, styles, opt_padding) {
	  cluster.getMarkerClusterer().extend(ClusterIcon, google.maps.OverlayView);

	  this.styles_ = styles;
	  this.padding_ = opt_padding || 0;
	  this.cluster_ = cluster;
	  this.center_ = null;
	  this.map_ = cluster.getMap();
	  this.div_ = null;
	  this.sums_ = null;
	  this.visible_ = false;

	  this.setMap(this.map_);
	}


	/**
	 * Triggers the clusterclick event and zoom's if the option is set.
	 */
	ClusterIcon.prototype.triggerClusterClick = function() {
	  var markerClusterer = this.cluster_.getMarkerClusterer();

	  // Trigger the clusterclick event.
	  google.maps.event.trigger(markerClusterer, 'clusterclick', this.cluster_);

	  if (markerClusterer.isZoomOnClick()) {
	    // Zoom into the cluster.
	    this.map_.fitBounds(this.cluster_.getBounds());
	  }
	};


	/**
	 * Adding the cluster icon to the dom.
	 * @ignore
	 */
	ClusterIcon.prototype.onAdd = function() {
	  this.div_ = document.createElement('DIV');
	  if (this.visible_) {
	    var pos = this.getPosFromLatLng_(this.center_);
	    this.div_.style.cssText = this.createCss(pos);
	    this.div_.innerHTML = this.sums_.text;
	  }

	  var panes = this.getPanes();
	  panes.overlayMouseTarget.appendChild(this.div_);

	  var that = this;
	  google.maps.event.addDomListener(this.div_, 'click', function() {
	    that.triggerClusterClick();
	  });
	};


	/**
	 * Returns the position to place the div dending on the latlng.
	 *
	 * @param {google.maps.LatLng} latlng The position in latlng.
	 * @return {google.maps.Point} The position in pixels.
	 * @private
	 */
	ClusterIcon.prototype.getPosFromLatLng_ = function(latlng) {
	  var pos = this.getProjection().fromLatLngToDivPixel(latlng);

	  if (typeof this.iconAnchor_ === 'object' && this.iconAnchor_.length === 2) {
	    pos.x -= this.iconAnchor_[0];
	    pos.y -= this.iconAnchor_[1];
	  } else {
	    pos.x -= parseInt(this.width_ / 2, 10);
	    pos.y -= parseInt(this.height_ / 2, 10);
	  }
	  return pos;
	};


	/**
	 * Draw the icon.
	 * @ignore
	 */
	ClusterIcon.prototype.draw = function() {
	  if (this.visible_) {
	    var pos = this.getPosFromLatLng_(this.center_);
	    this.div_.style.top = pos.y + 'px';
	    this.div_.style.left = pos.x + 'px';
	  }
	};


	/**
	 * Hide the icon.
	 */
	ClusterIcon.prototype.hide = function() {
	  if (this.div_) {
	    this.div_.style.display = 'none';
	  }
	  this.visible_ = false;
	};


	/**
	 * Position and show the icon.
	 */
	ClusterIcon.prototype.show = function() {
	  if (this.div_) {
	    var pos = this.getPosFromLatLng_(this.center_);
	    this.div_.style.cssText = this.createCss(pos);
	    this.div_.style.display = '';
	  }
	  this.visible_ = true;
	};


	/**
	 * Remove the icon from the map
	 */
	ClusterIcon.prototype.remove = function() {
	  this.setMap(null);
	};


	/**
	 * Implementation of the onRemove interface.
	 * @ignore
	 */
	ClusterIcon.prototype.onRemove = function() {
	  if (this.div_ && this.div_.parentNode) {
	    this.hide();
	    this.div_.parentNode.removeChild(this.div_);
	    this.div_ = null;
	  }
	};


	/**
	 * Set the sums of the icon.
	 *
	 * @param {Object} sums The sums containing:
	 *   'text': (string) The text to display in the icon.
	 *   'index': (number) The style index of the icon.
	 */
	ClusterIcon.prototype.setSums = function(sums) {
	  this.sums_ = sums;
	  this.text_ = sums.text;
	  this.index_ = sums.index;
	  if (this.div_) {
	    this.div_.innerHTML = sums.text;
	  }

	  this.useStyle();
	};


	/**
	 * Sets the icon to the the styles.
	 */
	ClusterIcon.prototype.useStyle = function() {
	  var index = Math.max(0, this.sums_.index - 1);
	  index = Math.min(this.styles_.length - 1, index);
	  var style = this.styles_[index];
	  this.url_ = style['url'];
	  this.height_ = style['height'];
	  this.width_ = style['width'];
	  this.textColor_ = style['textColor'];
	  this.anchor_ = style['anchor'];
	  this.textSize_ = style['textSize'];
	  this.backgroundPosition_ = style['backgroundPosition'];
	  this.iconAnchor_ = style['iconAnchor'];
	};


	/**
	 * Sets the center of the icon.
	 *
	 * @param {google.maps.LatLng} center The latlng to set as the center.
	 */
	ClusterIcon.prototype.setCenter = function(center) {
	  this.center_ = center;
	};


	/**
	 * Create the css text based on the position of the icon.
	 *
	 * @param {google.maps.Point} pos The position.
	 * @return {string} The css style text.
	 */
	ClusterIcon.prototype.createCss = function(pos) {
	  var style = [];
	  style.push('background-image:url(' + this.url_ + ');');
	  var backgroundPosition = this.backgroundPosition_ ? this.backgroundPosition_ : '0 0';
	  style.push('background-position:' + backgroundPosition + ';');

	  if (typeof this.anchor_ === 'object') {
	    if (typeof this.anchor_[0] === 'number' && this.anchor_[0] > 0 &&
	        this.anchor_[0] < this.height_) {
	      style.push('height:' + (this.height_ - this.anchor_[0]) +
	          'px; padding-top:' + this.anchor_[0] + 'px;');
	    } else if (typeof this.anchor_[0] === 'number' && this.anchor_[0] < 0 &&
	        -this.anchor_[0] < this.height_) {
	      style.push('height:' + this.height_ + 'px; line-height:' + (this.height_ + this.anchor_[0]) +
	          'px;');
	    } else {
	      style.push('height:' + this.height_ + 'px; line-height:' + this.height_ +
	          'px;');
	    }
	    if (typeof this.anchor_[1] === 'number' && this.anchor_[1] > 0 &&
	        this.anchor_[1] < this.width_) {
	      style.push('width:' + (this.width_ - this.anchor_[1]) +
	          'px; padding-left:' + this.anchor_[1] + 'px;');
	    } else {
	      style.push('width:' + this.width_ + 'px; text-align:center;');
	    }
	  } else {
	    style.push('height:' + this.height_ + 'px; line-height:' +
	        this.height_ + 'px; width:' + this.width_ + 'px; text-align:center;');
	  }

	  var txtColor = this.textColor_ ? this.textColor_ : 'black';
	  var txtSize = this.textSize_ ? this.textSize_ : 11;

	  style.push('cursor:pointer; top:' + pos.y + 'px; left:' +
	      pos.x + 'px; color:' + txtColor + '; position:absolute; font-size:' +
	      txtSize + 'px; font-family:Arial,sans-serif; font-weight:bold');
	  return style.join('');
	};


	// Export Symbols for Closure
	// If you are not going to compile with closure then you can remove the
	// code below.
	window['MarkerClusterer'] = MarkerClusterer;
	MarkerClusterer.prototype['addMarker'] = MarkerClusterer.prototype.addMarker;
	MarkerClusterer.prototype['addMarkers'] = MarkerClusterer.prototype.addMarkers;
	MarkerClusterer.prototype['clearMarkers'] =
	    MarkerClusterer.prototype.clearMarkers;
	MarkerClusterer.prototype['fitMapToMarkers'] =
	    MarkerClusterer.prototype.fitMapToMarkers;
	MarkerClusterer.prototype['getCalculator'] =
	    MarkerClusterer.prototype.getCalculator;
	MarkerClusterer.prototype['getGridSize'] =
	    MarkerClusterer.prototype.getGridSize;
	MarkerClusterer.prototype['getExtendedBounds'] =
	    MarkerClusterer.prototype.getExtendedBounds;
	MarkerClusterer.prototype['getMap'] = MarkerClusterer.prototype.getMap;
	MarkerClusterer.prototype['getMarkers'] = MarkerClusterer.prototype.getMarkers;
	MarkerClusterer.prototype['getMaxZoom'] = MarkerClusterer.prototype.getMaxZoom;
	MarkerClusterer.prototype['getStyles'] = MarkerClusterer.prototype.getStyles;
	MarkerClusterer.prototype['getTotalClusters'] =
	    MarkerClusterer.prototype.getTotalClusters;
	MarkerClusterer.prototype['getTotalMarkers'] =
	    MarkerClusterer.prototype.getTotalMarkers;
	MarkerClusterer.prototype['redraw'] = MarkerClusterer.prototype.redraw;
	MarkerClusterer.prototype['removeMarker'] =
	    MarkerClusterer.prototype.removeMarker;
	MarkerClusterer.prototype['removeMarkers'] =
	    MarkerClusterer.prototype.removeMarkers;
	MarkerClusterer.prototype['resetViewport'] =
	    MarkerClusterer.prototype.resetViewport;
	MarkerClusterer.prototype['repaint'] =
	    MarkerClusterer.prototype.repaint;
	MarkerClusterer.prototype['setCalculator'] =
	    MarkerClusterer.prototype.setCalculator;
	MarkerClusterer.prototype['setGridSize'] =
	    MarkerClusterer.prototype.setGridSize;
	MarkerClusterer.prototype['setMaxZoom'] =
	    MarkerClusterer.prototype.setMaxZoom;
	MarkerClusterer.prototype['onAdd'] = MarkerClusterer.prototype.onAdd;
	MarkerClusterer.prototype['draw'] = MarkerClusterer.prototype.draw;

	Cluster.prototype['getCenter'] = Cluster.prototype.getCenter;
	Cluster.prototype['getSize'] = Cluster.prototype.getSize;
	Cluster.prototype['getMarkers'] = Cluster.prototype.getMarkers;

	ClusterIcon.prototype['onAdd'] = ClusterIcon.prototype.onAdd;
	ClusterIcon.prototype['draw'] = ClusterIcon.prototype.draw;
	ClusterIcon.prototype['onRemove'] = ClusterIcon.prototype.onRemove;


/***/ },

/***/ 415:
/***/ function(module, exports) {

	/**
	 * angular-bootstrap-switch
	 * @version v0.4.1 - 2015-06-15
	 * @author Francesco Pontillo (francescopontillo@gmail.com)
	 * @link https://github.com/frapontillo/angular-bootstrap-switch
	 * @license Apache License 2.0(http://www.apache.org/licenses/LICENSE-2.0.html)
	**/

	(function() {
	'use strict';

	// Source: common/module.js
	angular.module('frapontillo.bootstrap-switch', []);

	// Source: dist/.temp/directives/bsSwitch.js
	angular.module('frapontillo.bootstrap-switch').directive('bsSwitch', [
	  '$parse',
	  '$timeout',
	  function ($parse, $timeout) {
	    return {
	      restrict: 'A',
	      require: 'ngModel',
	      link: function link(scope, element, attrs, controller) {
	        var isInit = false;
	        /**
	         * Return the true value for this specific checkbox.
	         * @returns {Object} representing the true view value; if undefined, returns true.
	         */
	        var getTrueValue = function () {
	          if (attrs.type === 'radio') {
	            return attrs.value || $parse(attrs.ngValue)(scope) || true;
	          }
	          var trueValue = $parse(attrs.ngTrueValue)(scope);
	          if (angular.isUndefined(trueValue)) {
	            trueValue = true;
	          }
	          return trueValue;
	        };
	        /**
	         * Get a boolean value from a boolean-like string, evaluating it on the current scope.
	         * @param value The input object
	         * @returns {boolean} A boolean value
	         */
	        var getBooleanFromString = function (value) {
	          return scope.$eval(value) === true;
	        };
	        /**
	         * Get a boolean value from a boolean-like string, defaulting to true if undefined.
	         * @param value The input object
	         * @returns {boolean} A boolean value
	         */
	        var getBooleanFromStringDefTrue = function (value) {
	          return value === true || value === 'true' || !value;
	        };
	        /**
	         * Returns the value if it is truthy, or undefined.
	         *
	         * @param value The value to check.
	         * @returns the original value if it is truthy, {@link undefined} otherwise.
	         */
	        var getValueOrUndefined = function (value) {
	          return value ? value : undefined;
	        };
	        /**
	         * Get the value of the angular-bound attribute, given its name.
	         * The returned value may or may not equal the attribute value, as it may be transformed by a function.
	         *
	         * @param attrName  The angular-bound attribute name to get the value for
	         * @returns {*}     The attribute value
	         */
	        var getSwitchAttrValue = function (attrName) {
	          var map = {
	              'switchRadioOff': getBooleanFromStringDefTrue,
	              'switchActive': function (value) {
	                return !getBooleanFromStringDefTrue(value);
	              },
	              'switchAnimate': getBooleanFromStringDefTrue,
	              'switchLabel': function (value) {
	                return value ? value : '&nbsp;';
	              },
	              'switchIcon': function (value) {
	                if (value) {
	                  return '<span class=\'' + value + '\'></span>';
	                }
	              },
	              'switchWrapper': function (value) {
	                return value || 'wrapper';
	              },
	              'switchInverse': getBooleanFromString,
	              'switchReadonly': getBooleanFromString
	            };
	          var transFn = map[attrName] || getValueOrUndefined;
	          return transFn(attrs[attrName]);
	        };
	        /**
	         * Set a bootstrapSwitch parameter according to the angular-bound attribute.
	         * The parameter will be changed only if the switch has already been initialized
	         * (to avoid creating it before the model is ready).
	         *
	         * @param element   The switch to apply the parameter modification to
	         * @param attr      The name of the switch parameter
	         * @param modelAttr The name of the angular-bound parameter
	         */
	        var setSwitchParamMaybe = function (element, attr, modelAttr) {
	          if (!isInit) {
	            return;
	          }
	          var newValue = getSwitchAttrValue(modelAttr);
	          element.bootstrapSwitch(attr, newValue);
	        };
	        var setActive = function () {
	          setSwitchParamMaybe(element, 'disabled', 'switchActive');
	        };
	        /**
	         * If the directive has not been initialized yet, do so.
	         */
	        var initMaybe = function () {
	          // if it's the first initialization
	          if (!isInit) {
	            var viewValue = controller.$modelValue === getTrueValue();
	            isInit = !isInit;
	            // Bootstrap the switch plugin
	            element.bootstrapSwitch({
	              radioAllOff: getSwitchAttrValue('switchRadioOff'),
	              disabled: getSwitchAttrValue('switchActive'),
	              state: viewValue,
	              onText: getSwitchAttrValue('switchOnText'),
	              offText: getSwitchAttrValue('switchOffText'),
	              onColor: getSwitchAttrValue('switchOnColor'),
	              offColor: getSwitchAttrValue('switchOffColor'),
	              animate: getSwitchAttrValue('switchAnimate'),
	              size: getSwitchAttrValue('switchSize'),
	              labelText: attrs.switchLabel ? getSwitchAttrValue('switchLabel') : getSwitchAttrValue('switchIcon'),
	              wrapperClass: getSwitchAttrValue('switchWrapper'),
	              handleWidth: getSwitchAttrValue('switchHandleWidth'),
	              labelWidth: getSwitchAttrValue('switchLabelWidth'),
	              inverse: getSwitchAttrValue('switchInverse'),
	              readonly: getSwitchAttrValue('switchReadonly')
	            });
	            if (attrs.type === 'radio') {
	              controller.$setViewValue(controller.$modelValue);
	            } else {
	              controller.$setViewValue(viewValue);
	            }
	          }
	        };
	        /**
	         * Listen to model changes.
	         */
	        var listenToModel = function () {
	          attrs.$observe('switchActive', function (newValue) {
	            var active = getBooleanFromStringDefTrue(newValue);
	            // if we are disabling the switch, delay the deactivation so that the toggle can be switched
	            if (!active) {
	              $timeout(function () {
	                setActive(active);
	              });
	            } else {
	              // if we are enabling the switch, set active right away
	              setActive(active);
	            }
	          });
	          function modelValue() {
	            return controller.$modelValue;
	          }
	          // When the model changes
	          scope.$watch(modelValue, function (newValue) {
	            initMaybe();
	            if (newValue !== undefined) {
	              element.bootstrapSwitch('state', newValue === getTrueValue(), false);
	            } else {
	              element.bootstrapSwitch('toggleIndeterminate', true, false);
	            }
	          }, true);
	          // angular attribute to switch property bindings
	          var bindings = {
	              'switchRadioOff': 'radioAllOff',
	              'switchOnText': 'onText',
	              'switchOffText': 'offText',
	              'switchOnColor': 'onColor',
	              'switchOffColor': 'offColor',
	              'switchAnimate': 'animate',
	              'switchSize': 'size',
	              'switchLabel': 'labelText',
	              'switchIcon': 'labelText',
	              'switchWrapper': 'wrapperClass',
	              'switchHandleWidth': 'handleWidth',
	              'switchLabelWidth': 'labelWidth',
	              'switchInverse': 'inverse',
	              'switchReadonly': 'readonly'
	            };
	          var observeProp = function (prop, bindings) {
	            return function () {
	              attrs.$observe(prop, function () {
	                setSwitchParamMaybe(element, bindings[prop], prop);
	              });
	            };
	          };
	          // for every angular-bound attribute, observe it and trigger the appropriate switch function
	          for (var prop in bindings) {
	            attrs.$observe(prop, observeProp(prop, bindings));
	          }
	        };
	        /**
	         * Listen to view changes.
	         */
	        var listenToView = function () {
	          if (attrs.type === 'radio') {
	            // when the switch is clicked
	            element.on('change.bootstrapSwitch', function (e) {
	              // discard not real change events
	              if (controller.$modelValue === controller.$viewValue && e.target.checked !== $(e.target).bootstrapSwitch('state')) {
	                // $setViewValue --> $viewValue --> $parsers --> $modelValue
	                // if the switch is indeed selected
	                if (e.target.checked) {
	                  // set its value into the view
	                  controller.$setViewValue(getTrueValue());
	                } else if (getTrueValue() === controller.$viewValue) {
	                  // otherwise if it's been deselected, delete the view value
	                  controller.$setViewValue(undefined);
	                }
	              }
	            });
	          } else {
	            // When the checkbox switch is clicked, set its value into the ngModel
	            element.on('switchChange.bootstrapSwitch', function (e) {
	              // $setViewValue --> $viewValue --> $parsers --> $modelValue
	              controller.$setViewValue(e.target.checked);
	            });
	          }
	        };
	        // Listen and respond to view changes
	        listenToView();
	        // Listen and respond to model changes
	        listenToModel();
	        // On destroy, collect ya garbage
	        scope.$on('$destroy', function () {
	          element.bootstrapSwitch('destroy');
	        });
	      }
	    };
	  }
	]).directive('bsSwitch', function () {
	  return {
	    restrict: 'E',
	    require: 'ngModel',
	    template: '<input bs-switch>',
	    replace: true
	  };
	});
	// Source: bsSwitch.suffix
	})();

/***/ },

/***/ 416:
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(root, factory) {
	  if (true) {
	    // AMD. Register as an anonymous module.
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(385)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === 'object') {
	    // Node. Does not work with strict CommonJS, but
	    // only CommonJS-like environments that support module.exports,
	    // like Node.
	    module.exports = factory(require('angular'));
	  } else {
	    // Browser globals (root is window)
	    root.returnExports = factory(root.angular);
	  }
	}(this, function(angular) {
	  /**
	   * @ngdoc service
	   * @name ngMeta.ngMeta
	   * @description
	   * # A metatags service for single-page applications
	   * that supports setting arbitrary meta tags
	   */
	  angular.module('ngMeta', [])
	    .provider('ngMeta', function() {

	      'use strict';

	      //Object for storing default tag/values
	      var defaults = {};

	      //One-time configuration
	      var config = {
	        useTitleSuffix: false
	      };

	      function Meta($rootScope) {

	        /**
	         * @ngdoc function
	         * @name setTitle
	         * @description
	         * Sets the title of the page, optionally
	         * appending a title suffix.
	         *
	         * If suffix usage is enabled and the title suffix
	         * parameter is missing, the default title suffix
	         * (if available) is used as a fallback.
	         *
	         * @example
	         * //title and titleSuffix
	         * ngMeta.setTitle('Page name', ' - Site name | Tagline of the site');
	         *
	         * //title only (default titleSuffix may be suffixed,
	         * //depending on useTitleSuffix configuration)
	         * ngMeta.setTitle('Page name');
	         */
	        var setTitle = function(title, titleSuffix) {
	          if (!$rootScope.ngMeta) {
	            throw new Error('Cannot call setTitle when ngMeta is undefined. Did you forget to call ngMeta.init() in the run block? \nRefer: https://github.com/vinaygopinath/ngMeta#getting-started');
	          }
	          $rootScope.ngMeta.title = angular.isDefined(title) ? title : defaults.title;
	          if (config.useTitleSuffix) {
	            $rootScope.ngMeta.title += angular.isDefined(titleSuffix) ? titleSuffix : defaults.titleSuffix;
	          }
	        };

	        /**
	         * @ngdoc function
	         * @name setTag
	         * @description
	         * Sets the value of a meta tag, using
	         * the default value (if available) as
	         * a fallback.
	         *
	         * @example
	         * ngMeta.setTag('og:image', 'http://example.com/a.png');
	         */
	        var setTag = function(tag, value) {
	          if (!$rootScope.ngMeta) {
	            throw new Error('Cannot call setTag when ngMeta is undefined. Did you forget to call ngMeta.init() in the run block? \nRefer: https://github.com/vinaygopinath/ngMeta#getting-started');
	          }
	          $rootScope.ngMeta[tag] = angular.isDefined(value) ? value : defaults[tag];
	        };

	        /**
	         * @ngdoc function
	         * @name readRouteMeta
	         * @description
	         * Helper function to process meta tags on route/state
	         * change.
	         *
	         * It:
	         * 1. Sets the title (with titleSuffix, as appropriate)
	         * 2. Iterates through all the state/route tags (other than title)
	         *    and sets their values
	         * 3. Iterates through all default tags and sets the ones
	         *    that were not utilized while setting the state/route tags.
	         */
	        var readRouteMeta = function(meta) {
	          meta = meta || {};

	          setTitle(meta.title, meta.titleSuffix);

	          var def = angular.copy(defaults);

	          delete meta.title;
	          delete meta.titleSuffix;
	          delete def.title;
	          delete def.titleSuffix;

	          var metaKeys = Object.keys(meta);
	          for (var i = 0; i < metaKeys.length; i++) {
	            if (def.hasOwnProperty(metaKeys[i])) {
	              delete def[metaKeys[i]];
	            }
	            setTag(metaKeys[i], meta[metaKeys[i]]);
	          }

	          var defaultKeys = Object.keys(def);
	          for (var j = 0; j < defaultKeys.length; j++) {
	            setTag(defaultKeys[j], def[defaultKeys[j]]);
	          }
	        };

	        var update = function(event, current) {
	          readRouteMeta(angular.copy(current.meta));
	        };

	        /**
	         * @ngdoc function
	         * @name init
	         * @description
	         * Initializes the ngMeta object and sets up
	         * listeners for route/state change broadcasts
	         *
	         * @example
	         * angular.module('yourApp', ['ngRoute', 'ngMeta'])
	         * .config(function($routeProvider, ngMetaProvider) {
	         *   ....
	         * })
	         * .run(function(ngMeta) {
	         *   ngMeta.init();
	         * });
	         */
	        var init = function() {
	          $rootScope.ngMeta = {};
	          $rootScope.$on('$routeChangeSuccess', update);
	          $rootScope.$on('$stateChangeSuccess', update);
	        };

	        return {
	          'init': init,
	          'setTitle': setTitle,
	          'setTag': setTag
	        };
	      }

	      /* Set defaults */

	      this.setDefaultTitle = function(titleStr) {
	        defaults.title = titleStr;
	      };

	      this.setDefaultTitleSuffix = function(titleSuffix) {
	        defaults.titleSuffix = titleSuffix;
	      };

	      this.setDefaultTag = function(tag, value) {
	        defaults[tag] = value;
	      };

	      /* One-time config */

	      this.useTitleSuffix = function(bool) {
	        config.useTitleSuffix = !!bool;
	      };

	      this.$get = ["$rootScope", function($rootScope) {
	        return new Meta($rootScope);
	      }];
	    });
	}));

/***/ }

/******/ });
webpackJsonp([3],{

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _deps = ['ngMessages', 'ui.router', 'ngSanitize', 'angular-capitalize-filter', 'ngAnimate', 'angular-loading-bar',
	//          'ui.bootstrap',
	'ui.select',

	//        'ui.grid',
	//        'ui.grid.resizeColumns',
	//        'ui.grid.pinning',
	//        'ui.grid.selection',
	//        'ui.grid.moveColumns',
	//        'ui.grid.saveState',
	//        'ui.grid.pagination',

	'ui.grid', 'ui.grid.resizeColumns', 'ui.grid.pinning', 'ui.grid.selection', 'ui.grid.moveColumns', 'ui.grid.saveState', 'ui.grid.pagination', 'ui.grid.autoResize', 'fundoo.services', 'ngMap', 'ui.checkbox', 'ui.date',
	//        'ui.bootstrap.datetimepicker',
	'datePicker', 'ui.dateTimeInput',

	//        'ngBootstrap',
	//            'daterangepicker',
	//        'jkuri.daterangepicker',

	//        'moment',
	//        'ui.mask',
	'toaster', 'ngStorage',
	//        'LocalStorageModule',
	'formly', 'formlyBootstrap'
	//        , 'ng-if-bootstrap-grid'


	// 21        , 'ngBreakpoint'
	// 21        , 'frapontillo.bootstrap-switch'
	, 'ngMeta'

	//        , 'eha.back-button.directive'
	//        , 'eha.back-button.templates'


	//        'app_tools'

	//        , 'ui.bootstrap.popover'
	//        , 'FreshFindData'
	];

	var app = angular.module('ffd-routes', _deps);
	//require('./Directives/')(app);
	__webpack_require__(301)(app);

/***/ },

/***/ 301:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {
	    __webpack_require__(302)(app);
	    __webpack_require__(303)(app);
	    __webpack_require__(305)(app);
	    __webpack_require__(306)(app);
	    __webpack_require__(307)(app);
	    __webpack_require__(308)(app);
	    __webpack_require__(309)(app);
	    __webpack_require__(312)(app);
	    __webpack_require__(313)(app);
	    __webpack_require__(319)(app);
	    __webpack_require__(320)(app);
	    __webpack_require__(321)(app);
	    __webpack_require__(322)(app);
	    __webpack_require__(323)(app);
	    __webpack_require__(324)(app);
	    __webpack_require__(325)(app);
	    __webpack_require__(326)(app);

	    __webpack_require__(337);

	    //    require('./uuid2Factory.js')(app);
	};

/***/ },

/***/ 302:
/***/ function(module, exports) {

	'use strict';

	module.exports = function (app) {

	    app.factory('_', lodashfactory);

	    /* @ngInject */
	    function lodashfactory($window, $filter) {
	        var _ = $window._;

	        _.mixin({
	            col13dig2date: function col13dig2date(_recs) {
	                var _recs1 = _.map(_recs, function (item) {
	                    var item_new = {};
	                    _.each(item, function (v, k) {
	                        item_new[k] = item[k];
	                        if (/\d{13}/.test(v)) {
	                            item_new[k] = v.match(/\d+/)[0];
	                            //                                                    item_new[k] = $filter('date')(item_new[k], 'yyyy-MM-dd');
	                            item_new[k] = $filter('date')(item_new[k], 'MM-dd-yyyy');
	                        }
	                    });
	                    return item_new;
	                });
	                return _recs1;
	            }
	        });

	        //        delete ($window._);
	        return _;
	    }
	    lodashfactory.$inject = ["$window", "$filter"];
	};

/***/ },

/***/ 303:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    app.constant('FFD_CONST', {
	        "API_BASE_URL": "/SPA/NewRemoteMethods.aspx/",
	        SOCIAL_FB_LINK: "https://www.facebook.com/Freshfinddatacom-1450150908606616/",
	        SOCIAL_TW_LINK: "https://twitter.com/freshfinddata",
	        SOCIAL_IN_LINK: "http://www.linkedin.com/company/freshfinddata",
	        ROUTE_METAS: __webpack_require__(304)
	    });
	};

/***/ },

/***/ 304:
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	    'home': {
	        'title': 'New Business Leads from FreshFind Data',
	        'description': 'Tap into new business leads as soon as the data is available'

	        //                , 'keywords': require('./keywords.js').join(' , ')
	        , 'keywords': 'New Business Leads , New Business List , Find List of New Businesses in My Area , Businesses selling to businesses , Lead generation for sales teams , Sales Professionals , Marketing lead generation , Sales Leads , Business Sales Leads , New Business , Mailing Lists , Business-to-Business , Tools built specifically for Sales Professionals , New Business Sales Leads , The best data , prospecting leads , prospect list , grow my business , b to b leads , new startup leads , target new business , find new customers , new business names , new business sales leads , new business leads , new business data',

	        'og:title': 'Transform the way you find business leads | FreshFind Data',
	        'og:type': 'website',
	        'og:url': 'https://www.freshfinddata.com/',
	        'og:image': 'https://www.freshfinddata.com/img/freshfind-og-img-home.jpg',
	        'og:description': 'Tap into new business leads as soon as the data is availables.'
	    },

	    'about': {
	        'title': 'About New Business Leads',
	        'description': 'FreshFind Data brings you business-to-business sales leads and marketing info for over 14 million established businesses and 2.5 million brand new businesses',
	        'og:title': 'About | FreshFind Data',
	        'og:type': 'website',
	        'og:url': 'https://www.freshfinddata.com/about',
	        'og:image': 'https://www.freshfinddata.com/img/freshfind-og-img-about.jpg',
	        'og:description': 'FreshFind Data brings you business-to-business sales leads and marketing info for over 14 million established businesses and 2.5 million brand new businesses.'

	    },

	    'tryit': {
	        'title': 'LeadFormulator find and create New Business Leads',
	        'description': 'Try our demo and scan our database to see how many business leads are waiting for you',
	        'og:title': 'Try It | FreshFind Data',
	        'og:type': 'website',
	        'og:url': 'https://www.freshfinddata.com/try-it',
	        'og:image': 'https://www.freshfinddata.com/img/freshfind-og-img-try-it.jpg',
	        'og:description': 'Try our demo and scan our database to see how many business leads are waiting for you.'
	    },

	    'pricing': {
	        'title': 'Pricing New Business Leads $29.99 Monthly Subscription',
	        'description': 'Try our special introductory offer and enjoy up to 5000 downloads per month, unlimited searches, and a 30 day no risk trial',
	        'og:title': 'Pricing | FreshFind Data',
	        'og:type': 'website',
	        'og:url': 'https://www.freshfinddata.com/pricing',
	        'og:image': 'https://www.freshfinddata.com/img/freshfind-og-img-pricing.jpg',
	        'og:description': 'Try our special introductory offer and enjoy up to 5000 downloads per month, unlimited searches, and a 30 day no risk trial.'
	    },

	    'faq': {
	        'title': 'FAQ For New Business Leads List',
	        'description': 'Frequently asked questions about our data, lists, subscriptions, access and security, and terms and conditions',
	        'keywords': 'business lists,FreshFind List Launcher,FreshFind FAQ, about , contact , expert service , faq , freshfind , list launcher,list leads',
	        'og:title': 'Frequently Asked Questions | FreshFind Data',
	        'og:type': 'website',
	        'og:url': 'https://www.freshfinddata.com/faq',
	        'og:image': 'https://www.freshfinddata.com/img/freshfind-og-img-faq.jpg',
	        'og:description': 'Frequently asked questions about our data, lists, subscriptions, access and security, and terms and conditions.'
	    },

	    'contact': {
	        'title': 'Contact New Business Leads',
	        'description': 'For more information about FreshFind Data, fill out our contact form, email us, or call',
	        'og:title': 'Contact Us | FreshFind Data',
	        'og:type': 'website',
	        'og:url': 'https://www.freshfinddata.com/contact',
	        'og:image': 'https://www.freshfinddata.com/img/freshfind-og-img-contact.jpg',
	        'og:description': 'For more information about FreshFind Data, fill out our contact form, email us, or call'
	    },

	    'howitworks': {
	        'title': 'How it Works create your New Business Leads List',
	        'description': 'Through sophisticated data mining and web crawling technology, we are able to provide you with the purest, most accurate data in the industry',
	        'og:title': 'How It Works | FreshFind Data',
	        'og:type': 'website',
	        'og:url': 'https://www.freshfinddata.com/how-it-works',
	        'og:image': 'https://www.freshfinddata.com/img/freshfind-og-img-how-it-works.jpg',
	        'og:description': 'Through sophisticated data mining and web crawling technology, we are able to provide you with the purest, most accurate data in the industry'

	    },

	    'yourdatapro': {
	        'title': 'Your Data Pro Find New Business Leads',
	        'description': 'The experts at FreshFind Data have years of experience in the industry and provide you with business leads tailored specifically to your needs',
	        'keywords': 'business lists,FreshFind List Launcher,FreshFind FAQ, about , contact , expert service , faq , freshfind , list launcher,list leads',
	        'og:title': 'Your Data Pro | FreshFind Data',
	        'og:type': 'website',
	        'og:url': 'https://www.freshfinddata.com/your-data-pro',
	        'og:image': 'https://www.freshfinddata.com/img/freshfind-og-img-your-data-pro.jpg',
	        'og:description': 'The experts at FreshFind Data have years of experience in the industry and provide you with business leads tailored specifically to your needs'
	    }

	};

/***/ },

/***/ 305:
/***/ function(module, exports) {

	'use strict';

	/*  @ngInject */

	module.exports = function (app) {

	            app.factory('InfoFactory', _InfoFactory);

	            function _InfoFactory(FFD_CONST, $http, $q) {

	                        var cities = [];
	                        var cities_int = [];

	                        var counties = [];
	                        var counties_int = [];

	                        var keywords = [];
	                        var keywords_int = [];

	                        var phrase3_prev = "";
	                        var phrase3_prev_c = "";
	                        var states_prev = "";
	                        var states_prev_c = "";

	                        var _bustypes = [
	                        //               { id: 1, name: "NEW BUSINESS" },
	                        //               { id: 2, name: "ESTABLISHED BUSINESS" },

	                        { id: 1, name: "New Businesses" }

	                        //               ,{ id: 2, name: "Established Businesses" }


	                        ];

	                        var _companysizes = [{ value: 'E1', name: '0 - 4' }, { value: 'E2', name: '5 - 9' }, { value: 'E3', name: '10 - 24' }, { value: 'E4', name: '25 - 99' }, { value: 'E5', name: '100 - 500' }, { value: 'E6', name: '>500' }];

	                        var _salesvolumes = [{ value: 'S1', name: '0 - 1M' }, { value: 'S2', name: '1M - 2.5M' }, { value: 'S3', name: '2.5M - 5M' }, { value: 'S4', name: '5M - 10M' }, { value: 'S5', name: '10M - 50M' }, { value: 'S6', name: '50M and above' }];

	                        var _getallstates = function _getallstates() {
	                                    var deferral = $q.defer();
	                                    $http.post(FFD_CONST.API_BASE_URL + "allstates", {}).success(function (data, status, headers, config) {
	                                                deferral.resolve({ states: data.d });
	                                    });
	                                    return deferral.promise;
	                        };

	                        var _getsiccodes = function _getsiccodes() {
	                                    var deferral = $q.defer();
	                                    $http.post(FFD_CONST.API_BASE_URL + "siccodes", {}).success(function (data, status, headers, config) {
	                                                deferral.resolve({ siccodes: data.d });
	                                    });
	                                    return deferral.promise;
	                        };

	                        var _getcities = function _getcities(phrase, _states) {
	                                    if (phrase.length < 3) {
	                                                return $q.when({ cities: [] });
	                                    }

	                                    var phrase3 = phrase.substr(0, 3).toLowerCase();
	                                    var states_cur = angular.toJson(_states);
	                                    if (phrase3 == phrase3_prev && states_cur == states_prev) {
	                                                cities = cities_int;return $q.when({ cities: cities });
	                                    }

	                                    phrase3_prev = phrase3;
	                                    states_prev = states_cur;
	                                    console.log('refresh cities ' + phrase);

	                                    var deferral = $q.defer();

	                                    var request = $http({
	                                                method: "post",
	                                                url: FFD_CONST.API_BASE_URL + "cities",
	                                                data: { states: _states, search: phrase }
	                                    });

	                                    request.success(function (data, status, headers, config) {
	                                                cities_int = data.d;
	                                                cities = data.d;
	                                                deferral.resolve({ cities: cities });
	                                    }).error(function (data, status, headers, config) {
	                                                deferral.reject('Error while getting cities !!!');
	                                    });

	                                    return deferral.promise;
	                        };

	                        var _getcounties = function _getcounties(phrase, _states) {
	                                    if (phrase.length < 3) {
	                                                return $q.when({ counties: [] });
	                                    }

	                                    var phrase3 = phrase.substr(0, 3).toLowerCase();
	                                    var states_cur = angular.toJson(_states);

	                                    if (phrase3 == phrase3_prev_c && states_cur == states_prev_c) {
	                                                return $q.when({ counties: counties });
	                                    }

	                                    phrase3_prev_c = phrase3;
	                                    states_prev_c = states_cur;

	                                    console.log('refresh counties ' + phrase);

	                                    var deferral = $q.defer();

	                                    var request = $http({
	                                                method: "post",
	                                                url: FFD_CONST.API_BASE_URL + "counties",
	                                                data: { states: _states, search: phrase }
	                                    });

	                                    request.success(function (data, status, headers, config) {
	                                                counties = data.d;
	                                                deferral.resolve({ counties: counties });
	                                    }).error(function (data, status, headers, config) {
	                                                deferral.reject('Error while getting counties !!!');
	                                    });

	                                    return deferral.promise;
	                        };

	                        var _getsic2kw = function _getsic2kw(phrase) {
	                                    if (phrase.length < 3) {
	                                                return $q.when({ kw: [] });
	                                    }

	                                    var phrase3 = phrase.substr(0, 3).toLowerCase();
	                                    if (phrase3 == phrase3_prev) {
	                                                keywords = keywords_int;return $q.when({ keywords: keywords });
	                                    }

	                                    phrase3_prev = phrase3;

	                                    var deferral = $q.defer();

	                                    var request = $http({
	                                                method: "post",
	                                                url: FFD_CONST.API_BASE_URL + "GetSIC2Keywords",
	                                                data: { search: phrase }
	                                    });

	                                    request.success(function (data, status, headers, config) {
	                                                keywords_int = data.d;
	                                                keywords = data.d;
	                                                deferral.resolve({ keywords: keywords });
	                                    }).error(function (data, status, headers, config) {
	                                                deferral.reject('Error while getting keywords !!!');
	                                    });

	                                    return deferral.promise;
	                        };

	                        /*
	                        var _getsic2keywords = function () {
	                            var deferral = $q.defer();
	                            $http.post(FFD_CONST.API_BASE_URL + "GetSIC2Keywords_", {})
	                            .success(function (data, status, headers, config) {
	                                deferral.resolve({ keywords: data.d });
	                            });
	                            return deferral.promise;
	                        };
	                        */

	                        var _factory = {
	                                    bustypes: _bustypes,
	                                    companysizes: _companysizes,
	                                    salesvolumes: _salesvolumes,
	                                    getallstates: _getallstates,
	                                    getsiccodes: _getsiccodes,
	                                    getcities: _getcities,
	                                    getcounties: _getcounties,
	                                    getsic2kw: _getsic2kw
	                        };

	                        return _factory;
	            }
	            _InfoFactory.$inject = ["FFD_CONST", "$http", "$q"];
	};
	module.exports.$inject = ["app"];

/***/ },

/***/ 306:
/***/ function(module, exports) {

	'use strict';

	module.exports = function (app) {

	    app.factory('ChoicesFactory', _factory);

	    /* @ngInject */
	    function _factory(FFD_CONST, InfoFactory, toaster) {

	        var _months_back = 9;
	        var _dend = moment().format("MM/DD/YYYY");
	        var _dstart = moment().subtract(_months_back, "months").format("MM/DD/YYYY");

	        var _int_bustype = 1; //  InfoFactory.bustypes[0];


	        var _choices = {
	            //                bustype: InfoFactory.bustypes[0],

	            _date_start: _dstart,

	            _date_start_: moment().subtract(_months_back, "months").toDate(),

	            _date_end: _dend,

	            _date_end_: moment().toDate(), //_dend,

	            states: [],
	            cities: [],
	            zipcodes: [],
	            areacodes: [],
	            counties: [],
	            siccodes: [],
	            keywords: [],
	            rbdiBusiness: false,
	            rbdiIndividual: false,
	            rbdiUnknown: false,
	            zipForRadius: "",
	            radiusMiles: "",
	            companysizes: [],
	            salesvolumes: [],
	            chkContactNames: false,
	            chkPhoneNumbers: false,
	            chkEmails: false,
	            chkOmit: true,

	            _random_Data: false,
	            _count_Data: 0
	        };

	        var _clear_choices = function _clear_choices() {

	            _choices.date_start_ = moment().subtract(_months_back, "months").toDate();
	            _choices.date_end_ = moment().toDate();

	            _choices.states = [];
	            _choices.cities = [];
	            _choices.zipcodes = [];
	            _choices.areacodes = [];
	            _choices.counties = [];
	            _choices.siccodes = [];
	            _choices.keywords = [];
	            _choices.rbdiBusiness = false;
	            _choices.rbdiIndividual = false;
	            _choices.rbdiUnknown = false;
	            _choices.zipForRadius = "";
	            _choices.radiusMiles = "";
	            _choices.companysizes = [];
	            _choices.salesvolumes = [];
	            _choices.chkContactNames = false;
	            _choices.chkPhoneNumbers = false;
	            _choices.chkEmails = false;
	            _choices.chkOmit = true;
	        };

	        Object.defineProperty(_choices, "bustype", {
	            get: function get() {
	                return InfoFactory.bustypes[_int_bustype - 1];
	            },
	            set: function set(value) {
	                if (value.id == 2) {
	                    toaster.pop({
	                        type: 'info',
	                        body: "Established Business Info temporarily closed !",
	                        timeout: 0,
	                        showCloseButton: true
	                    });
	                }
	                if (_int_bustype != value.id && value.id != 2) {
	                    _int_bustype = value.id;
	                    _clear_choices();
	                }
	            }
	        });

	        Object.defineProperty(_choices, "date_start", {
	            get: function get() {
	                return this._date_start;
	            },
	            set: function set(value) {
	                if (value == undefined) return;
	                var _old = this._date_start;
	                var _old_ = this._date_start_;

	                try {
	                    this._date_start = value;
	                    this._date_start_ = moment(value, 'MM/DD/YYYY').toDate();
	                } catch (e) {
	                    console.log('date-start  -->> ', value);
	                    this._date_start = _old;
	                    this._date_start_ = _old_;
	                }
	            }
	        });

	        Object.defineProperty(_choices, "date_end", {
	            get: function get() {
	                return this._date_end;
	            },
	            set: function set(value) {
	                if (value == undefined) return;
	                var _old = this._date_end;
	                var _old_ = this._date_end_;

	                try {
	                    this._date_end = value;
	                    this._date_end_ = moment(value, 'MM/DD/YYYY').toDate();
	                } catch (e) {
	                    console.log('date-end  -->> ', value);
	                    this._date_end = _old;
	                    this._date_end_ = _old_;
	                }
	            }
	        });

	        Object.defineProperty(_choices, "date_start_", {
	            get: function get() {
	                return this._date_start_;
	            },
	            set: function set(value) {
	                if (value == undefined) return;
	                var _old = this._date_start;
	                var _old_ = this._date_start_;

	                try {
	                    this._date_start_ = value;
	                    this.date_start = moment(value).format("MM/DD/YYYY");
	                } catch (e) {
	                    console.log('date-start_z -->> ', value);
	                    this._date_start = _old;
	                    this._date_start_ = _old_;
	                }
	            }
	        });

	        Object.defineProperty(_choices, "date_end_", {
	            get: function get() {
	                return this._date_end_;
	            },
	            set: function set(value) {
	                if (value == undefined) return;
	                var _old = this._date_end;
	                var _old_ = this._date_end_;

	                try {
	                    this._date_end_ = value;
	                    this.date_end = moment(value).format("MM/DD/YYYY");
	                } catch (e) {
	                    console.log('date-end_z -->> ', value);
	                    this._date_end = _old;
	                    this._date_end_ = _old_;
	                }
	            }
	        });

	        /*
	            $scope.$watch("vm.choices.date_start_", function (new_, old_) {
	                $timeout(function () { vm.choices.date_start = moment(new_).format("MM/DD/YYYY") }, 0);
	            });
	              $scope.$watch("vm.choices.date_end_", function (new_, old_) {
	                $timeout(function () { vm.choices.date_end = moment(new_).format("MM/DD/YYYY") }, 0);
	            });
	         
	         */

	        var _factory = { choices: _choices, clear_choices: _clear_choices };

	        return _factory;
	    }
	    _factory.$inject = ["FFD_CONST", "InfoFactory", "toaster"];
	};

/***/ },

/***/ 307:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    app.factory('GetResultsFactory', _GetResultsFactory);

	    /* @ngInject */

	    function _GetResultsFactory($http, $q, _, FFD_CONST, ChoicesFactory) {
	        var service = {
	            getCounters: getcounters,
	            setdemoviewedflag: setdemoviewedflag,
	            getNeedSubscription: getneedsubscription,
	            addsearchtemplate: add_search_template,
	            getlisttemplates: get_list_templates,
	            getonepagetemplates: get_one_page_templates,
	            getsearchtemplate: get_search_template,
	            deletesearchtemplate: delete_search_template,
	            updatesearchtemplate_mailsettings: update_search_template_mail_settings
	        };

	        return service;

	        function getcounters() {
	            var _choices = ChoicesFactory.choices;
	            var deferrer = $q.defer();

	            //            console.log('getcounters');
	            //            console.log(_choices);

	            var request = $http({
	                method: "post",
	                url: FFD_CONST.API_BASE_URL + "SaveFilters",
	                data: {
	                    _selectedlist: _choices["bustype"]["id"],
	                    _begindate: _choices["date_start"],
	                    _enddate: _choices["date_end"],
	                    _states: _choices["states"],
	                    _cities: _choices["cities"],
	                    _counties: _choices["counties"],
	                    _siccodes: _choices["siccodes"],
	                    _rbdiBusiness: _choices["rbdiBusiness"],
	                    _rbdiIndividual: _choices["rbdiIndividual"],
	                    _rbdiUnknown: _choices["rbdiUnknown"],
	                    _zipcodes: _choices["zipcodes"],
	                    _areacodes: _choices["areacodes"],
	                    _zipForRadius: _choices["zipForRadius"],
	                    _radiusMiles: _choices["radiusMiles"],
	                    _companysizes: _.map(_choices["companysizes"], function (_itm) {
	                        return _itm["value"];
	                    }),
	                    _salesvolumes: _.map(_choices["salesvolumes"], function (_itm) {
	                        return _itm["value"];
	                    }),
	                    _keywords: _.map(_choices["keywords"], function (_itm) {
	                        return _itm["KeywordID"];
	                    }),
	                    _chkContactNames: _choices["chkContactNames"],
	                    _chkPhoneNumbers: _choices["chkPhoneNumbers"],
	                    _chkEmails: _choices["chkEmails"]

	                }
	            });

	            request.success(function (data, status, headers, config) {
	                var _result = data.d;
	                deferrer.resolve({ count: _result[0], leftcount: _result[1], demo: _result[2], invoiceid: _result[3] });
	            }).error(function (data, status, headers, config) {
	                deferrer.reject('Error !!!');
	            });
	            return deferrer.promise;
	        }

	        function setdemoviewedflag() {
	            var deferrer = $q.defer();

	            var request = $http({
	                method: "post",
	                url: FFD_CONST.API_BASE_URL + "SetDemoViewedFlag",
	                data: {}
	            });

	            request.success(function (data, status, headers, config) {
	                var _result = data.d;
	                deferrer.resolve({ demoviewedflag: _result._demoviewed });
	            }).error(function (data, status, headers, config) {
	                deferrer.reject('Error !!!');
	            });

	            return deferrer.promise;
	        }

	        function getneedsubscription() {
	            var deferrer = $q.defer();

	            var request = $http({
	                method: "post",
	                url: FFD_CONST.API_BASE_URL + "getNeedSubscription",
	                data: {}
	            });

	            request.success(function (data, status, headers, config) {
	                deferrer.resolve({ needsubscription: data.d });
	            }).error(function (data, status, headers, config) {
	                deferrer.reject('Error !!!');
	            });
	            return deferrer.promise;
	        }

	        function get_search_template(_id) {
	            var deferrer = $q.defer();

	            var request = $http({
	                method: "post",
	                url: FFD_CONST.API_BASE_URL + "getSearchTemplate",
	                data: { _templateID: _id }
	            });

	            request.success(function (data, status, headers, config) {
	                deferrer.resolve(data.d);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject('Error !!!');
	            });

	            return deferrer.promise;
	        }

	        function get_list_templates() {
	            var deferrer = $q.defer();

	            var request = $http({
	                method: "post",
	                url: FFD_CONST.API_BASE_URL + "getTemplates",
	                data: {}
	            });

	            request.success(function (data, status, headers, config) {
	                deferrer.resolve(data.d);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject('Error !!!');
	            });

	            return deferrer.promise;
	        }

	        function get_one_page_templates(_page, _sizepage) {
	            var deferrer = $q.defer();
	            var _data = { _page: _page, _sizepage: _sizepage };

	            var request = $http({
	                method: "post",
	                url: FFD_CONST.API_BASE_URL + "getTemplates_M",
	                data: _data
	            });

	            request.success(function (data, status, headers, config) {
	                console.log(data);
	                var page = data.d.data["_page"];
	                var cntpages = data.d.data["_cntpages"];
	                var _records = data.d.data["_records"];
	                var cntrecords = data.d.data["_cntrecords"];
	                var _result = { page: page, cntpages: cntpages, records: _records, cntrecords: cntrecords };
	                console.log(_result);
	                deferrer.resolve(_result);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject('Error !!!');
	            });

	            return deferrer.promise;
	        }

	        function add_search_template(_name, _load, _random, _limit) {
	            var deferrer = $q.defer();
	            var _choices = ChoicesFactory.choices;

	            getcounters(_choices).then(function (_data) {
	                if (true /*_data.result != "OK"*/) {
	                        //                        deferrer.resolve(_data);
	                        //                        return;

	                        var _request = $http({
	                            method: "post",
	                            url: FFD_CONST.API_BASE_URL + "AddSearchTemplate",
	                            data: { _name: _name, _daLoad: _load, _daRandomRecords: _random, _daRecordLimit: _limit }
	                        });

	                        _request.success(function (data, status, headers, config) {
	                            console.log("AddSearchTemplate data>> ", data);
	                            deferrer.resolve({ result: "OK" });
	                        }).error(function (data, status, headers, config) {
	                            console.log('AddSearchTemplate error');deferrer.reject('Error !!!');
	                        });
	                    }
	            });
	            return deferrer.promise;
	        }

	        function update_search_template_mail_settings(_id, _load, _random, _limit) {
	            var deferrer = $q.defer();

	            var request = $http({
	                method: "post",
	                url: FFD_CONST.API_BASE_URL + "updateSearchTemplateMailSettings",
	                data: { _templateID: _id, _daLoad: _load, _daRandomRecords: _random, _daRecordLimit: _limit }
	            });

	            request.success(function (data, status, headers, config) {
	                deferrer.resolve(data.d);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject('Error !!!');
	            });

	            return deferrer.promise;
	        }

	        function delete_search_template(_id) {
	            var deferrer = $q.defer();

	            var request = $http({
	                method: "post",
	                url: FFD_CONST.API_BASE_URL + "deleteSearchTemplate",
	                data: { _templateID: _id }
	            });

	            request.success(function (data, status, headers, config) {
	                deferrer.resolve(data.d);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject('Error !!!');
	            });

	            return deferrer.promise;
	        }
	    }
	    _GetResultsFactory.$inject = ["$http", "$q", "_", "FFD_CONST", "ChoicesFactory"];
	};

/***/ },

/***/ 308:
/***/ function(module, exports) {

	'use strict';

	module.exports = function (app) {
	            app.service('PreviewDataService', _PreviewDataService);

	            /* @ngInject */

	            function _PreviewDataService($http, $q, _, FFD_CONST, GetResultsFactory, ChoicesFactory) {

	                        var _params_ns = {
	                                    coldefs: [
	                                    //            { name: 'ClientID', visible: false },
	                                    { name: 'Phone', visible: true, width: 100 }, { name: 'FirstName', visible: true, width: 150 }, { name: 'LastName', visible: true, width: 150 }, { name: 'CompanyName', visible: true, width: 300 }, { name: 'Address', visible: true, width: 250 }, { name: 'City', visible: true, width: 150 }, { name: 'State', visible: true, width: 100 }, { name: 'Zip5', visible: true, width: 100 }, { name: 'Zip4', visible: true, width: 100 }, { name: 'Email', displayName: 'Email Address', visible: true, width: 150 },
	                                    //            { name: 'Phone', visible: true, width: 100 },
	                                    //            { name: 'SICCODE', visible: false },
	                                    { name: 'ImportDate', displayName: 'Record Release Date', visible: true, width: 150 }, { name: 'LoadDate', displayName: 'Business Open Date', visible: true, width: 150 }, { name: 'PhoneAppendDate', displayName: 'Phone/E-mail Append Date', visible: true, width: 150 }

	                                    //            { name: 'CountyFIPS', visible: false },
	                                    //            { name: 'RBDI', visible: false },
	                                    //            { name: 'AreaCode', visible: false }
	                                    ],
	                                    name_for_save: 'new_bus_grid_inf00'
	                        };

	                        var _params_es = {
	                                    coldefs: [
	                                    //            { name: 'ClientID', visible: false },
	                                    { name: 'FirstName', visible: true, width: 150 }, { name: 'LastName', visible: true, width: 150 },
	                                    //            { name: 'Keywords', visible: false },
	                                    { name: 'Title', width: 250 }, { name: 'BusName', visible: true, width: 250 }, { name: 'Address', visible: true, width: 250 }, { name: 'City', visible: true, width: 100 }, { name: 'State', visible: true, width: 100 }, { name: 'Zip', visible: true, width: 100 }, { name: 'Phone', visible: true, width: 100 }],
	                                    name_for_save: 'est_bus_grid_inf00'
	                        };

	                        var sizepage = 10;
	                        var page = 1;
	                        var cntpages = 0;
	                        var cntrecords = 0;
	                        var _records = [];
	                        var _demo = false;

	                        this.getPage = getPage;
	                        this.getParamsForPreviewData = _getParamsForPreviewData;

	                        function getPage(_page, _sizepage, _init) {

	                                    var _choices = ChoicesFactory.choices;
	                                    var _id_type = _choices.bustype.id;

	                                    var _url = FFD_CONST.API_BASE_URL + (_id_type == 1 ? "GetOnePageNewBusiness" : "GetOnePageEstBusiness");

	                                    var def = $q.defer();

	                                    var request = $http({
	                                                method: "post",
	                                                url: _url,
	                                                data: { _page: _page, _sizepage: _sizepage, _init: _init, _random: _choices._random_Data, _count: _choices._count_Data }
	                                    });

	                                    request.success(function (data, status, headers, config) {

	                                                console.log(data);

	                                                _demo = data.d.data["_demo"];
	                                                page = data.d.data["_page"];
	                                                cntpages = data.d.data["_cntpages"];
	                                                _records = data.d.data["_records"];
	                                                cntrecords = data.d.data["_cntrecords"];
	                                                var _result = { page: page, cntpages: cntpages, records: _records, cntrecords: cntrecords, demo: _demo };
	                                                console.log(_result);
	                                                def.resolve(_result);
	                                    }).error(function (data, status, headers, config) {
	                                                def.reject("Failed to get data");
	                                    });

	                                    return def.promise;
	                        }

	                        function _getParamsForPreviewData() {
	                                    var _choices = ChoicesFactory.choices;
	                                    var _id_type = _choices.bustype.id;
	                                    return _id_type == 1 ? _params_ns : _params_es;
	                        }
	            }
	            _PreviewDataService.$inject = ["$http", "$q", "_", "FFD_CONST", "GetResultsFactory", "ChoicesFactory"];
	};

/***/ },

/***/ 309:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    app.service('AdminDataService', _AdminDataService);

	    /* @ngInject */
	    function _AdminDataService($http, $q, _, FFD_CONST, createDialog, GetResultsFactory, ChoicesFactory) {

	        var sizepage = 10;
	        var page = 1;
	        var cntpages = 0;
	        var cntrecords = 0;
	        var _records = [];

	        this.getOnePageOfAllUsers = _getOnePageOfAllUsers;
	        this.ChangeSubscriptionCount = _change_subscription_count;
	        this.getUserInfo4Id = _getUserInfo4Id;

	        function _getOnePageOfAllUsers(_page, _sizepage, _init, _cond, _sort) {

	            var _url = FFD_CONST.API_BASE_URL + "GetOnePageOfAllUsers";
	            //            var _url = "/api/Admin/" +  "GetOnePageOfAllUsers";


	            var def = $q.defer();

	            var request = $http({
	                method: "post",
	                url: _url,
	                data: { _page: _page, _sizepage: _sizepage, _cond: _cond, _init: _init, _sort: _sort }
	            });

	            request.success(function (data, status, headers, config) {

	                page = data.d.data["_page"];
	                cntpages = data.d.data["_cntpages"];
	                _records = data.d.data["_records"];
	                cntrecords = data.d.data["_cntrecords"];
	                var _result = { page: page, cntpages: cntpages, records: _records, cntrecords: cntrecords };
	                def.resolve(_result);
	            }).error(function (data, status, headers, config) {
	                def.reject("Failed to get data");
	            });

	            return def.promise;
	        }

	        function _getUserInfo4Id(_userid) {

	            var _url = FFD_CONST.API_BASE_URL + "getUserInfo4Id";

	            var def = $q.defer();

	            var request = $http({
	                method: "post",
	                url: _url,
	                data: { _userid: _userid }
	            });

	            request.success(function (data, status, headers, config) {
	                var _result = {
	                    changeCC: data.d["changeCC"],
	                    createSubscr: data.d["createSubscr"],
	                    leftCount: data.d["leftCount"]
	                };
	                def.resolve(_result);
	            }).error(function (data, status, headers, config) {
	                def.reject("Failed to get data");
	            });

	            return def.promise;
	        }

	        function _change_subscription_count(_userid, _leftcount) {
	            createDialog({
	                id: 'SpecialOffer',
	                css: { top: '100px', margin: '0 auto' },
	                template: __webpack_require__(310),
	                footerTemplate: __webpack_require__(311),
	                backdrop: true,
	                controller: 'ChangeSubscriptionCountController',
	                success: {
	                    label: 'Ok', // 'Preview List',
	                    fn: function fn() {
	                        this.change(_userid);
	                    }
	                    //                                 fn: f_suc
	                },
	                cancel: {
	                    label: 'Cancel',
	                    fn: function fn() {}
	                    //                                 fn: f_can
	                }
	            }, {
	                userid_: _userid,
	                leftCount_: _leftcount
	            });
	        }
	    }
	    _AdminDataService.$inject = ["$http", "$q", "_", "FFD_CONST", "createDialog", "GetResultsFactory", "ChoicesFactory"];
	};

/***/ },

/***/ 310:
/***/ function(module, exports) {

	module.exports = "\r\n<h2 class=\"text-xs-center\">Update Subscription Count</h2>\r\n<table class=\"table table-sm\" style=\"width:100%; \">\r\n    <tr>\r\n        <td class=\"text-xs-right\">\r\n            <span>\r\n                Change Count\r\n            </span>\r\n        </td>\r\n        <td>&nbsp;</td>\r\n        <td>\r\n            <input type=\"number\"  min=\"1\" ng-model=\"count\" />\r\n        </td>\r\n    </tr>\r\n</table>\r\n";

/***/ },

/***/ 311:
/***/ function(module, exports) {

	module.exports = "<div class=\"col-xs-6 text-xs-center\">\r\n    <button class=\"btn  btn-sm   btn-warning\" ng-click=\"$modalSuccess()\">\r\n        {{$modalSuccessLabel}}\r\n    </button>\r\n</div>\r\n<div class=\"col-xs-6 text-xs-center\">\r\n    <button class=\"btn btn-sm   btn-warning\" ng-click=\"$modalCancel()\">\r\n        {{$modalCancelLabel}}\r\n    </button>\r\n</div>\r\n";

/***/ },

/***/ 312:
/***/ function(module, exports) {

	'use strict';

	module.exports = function (app) {

	    app.service('LoginService', /* @ngInject */LoginService);

	    //    app.run( /* @ngInject */ _check_security);

	    //    LoginService.$inject = ['$http', '$rootScope', '$state', '$q', '$sessionStorage'];

	    function LoginService($http, $rootScope, $state, $q, $sessionStorage, toaster, FFD_CONST, ChoicesFactory) {
	        var _base_url = FFD_CONST.API_BASE_URL;

	        this._http = $http;
	        this.username = "";
	        this.isLogged = false;

	        this.success_state = "";
	        this.cancel_state = "";

	        this.success_params = null;
	        this.cancel_params = null;

	        this.login = Login;
	        this.logout = Logout;
	        this.getuserinfo = getUserInfo;
	        this.enterloginform = EnterLoginForm;
	        this.createuser = CreateUser;
	        this.ConfirmRegistration = _ConfirmRegistration;
	        this.resetpassword = ResetPassword;
	        this.changepassword = ChangePassword;
	        this.createsubscription = CreateSubscription;
	        this.createpaypalsubscription = CreatePayPalSubscription;
	        this.unsubscribe = UnSubscribe;
	        this.unsubscribe_wo_email = UnSubscribe_wo_email;
	        this.getuserdetailinfo = getUserDetailInfo;
	        this.updateuserinfo = UpdateUserInfo;
	        this.changecreditcarddata = ChangeCreditCardData;
	        this.checkseconduser = checkSecondUser;
	        this.getActiveSubscriptionFullInfo = GetActiveSubscriptionFullInfo;

	        this.switchactiveuser = SwitchActiveUser;
	        this.switchadminrole = SwitchAdminRole;
	        this.switchsuperadminrole = SwitchSuperAdminRole;
	        this.deleteuser = DeleteUser;

	        function EnterLoginForm(_success_state, _success_params, _cancel_state, _cancel_params) {
	            this.success_state = _success_state;
	            this.success_params = _success_params || null;

	            if ($state.get(_success_state).noauthenticate) {
	                this.success_state = "home";
	                this.success_params = null;
	            }

	            this.cancel_state = _cancel_state;
	            this.cancel_params = _cancel_params || null;

	            $state.go('login');
	        };

	        function Login(_user, _password, _supressAnotherActiveSession) {
	            var deferrer = $q.defer();
	            var self = this;

	            var request = $http({
	                method: "post",
	                url: _base_url + "userlogin",
	                data: { _name: _user, _password: _password, _supressAnotherActiveSession: _supressAnotherActiveSession }
	            });

	            request.success(function (data, status, headers, config) {
	                deferrer.resolve(data.d);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject("Error !!!");
	            });
	            return deferrer.promise;
	        };

	        function checkSecondUser() {
	            var deferrer = $q.defer();
	            var self = this;

	            var request = $http({
	                method: "post",
	                url: _base_url + "DropMeIfISecondUser",
	                data: {}
	            });

	            request.success(function (data, status, headers, config) {
	                var _data = data.d;
	                if (_data.result == "ERROR") {
	                    $rootScope.$broadcast('ChangeUserStatus', { username: '', islogged: false, isadmin: false });
	                }

	                deferrer.resolve(_data);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject("Error !!!");
	            });

	            return deferrer.promise;
	        }

	        function getUserInfo() {
	            var deferrer = $q.defer();
	            var self = this;

	            var request = $http({
	                method: "post",
	                url: _base_url + "getUserInfo",
	                data: {}
	            });

	            request.success(function (data, status, headers, config) {
	                self.username = data.d['Name'] || '';
	                //                self.isLogged = (self.username.toString().trim().length > 0);
	                self.isLogged = data.d['IsLogged'];
	                self.isAdmin = data.d['IsAdmin'];
	                self.isSuperAdmin = data.d['IsSuperAdmin'];
	                self.changeCC = data.d["changeCC"];
	                self.createSubscr = data.d["createSubscr"];
	                self.InvoiceID = data.d["InvoiceID"];
	                self.LeftCount = data.d["leftCount"];
	                var _data = {
	                    username: self.username,
	                    islogged: self.isLogged,
	                    isadmin: self.isAdmin,
	                    issuperadmin: self.isSuperAdmin,
	                    changeCC: self.changeCC,
	                    createSubscr: self.createSubscr,
	                    InvoiceID: self.InvoiceID,
	                    leftcount: self.LeftCount
	                };

	                if (data.d['DetailInfo']) {
	                    toaster.pop("info", data.d['DetailInfo']);
	                }
	                console.log('userinfo>', _data);
	                if ($state.current.authenticate && !_data.islogged) {
	                    console.log("enter login");
	                    self.enterloginform($state.current.name, null, "home", null);
	                }

	                $rootScope.$broadcast('ChangeUserStatus', _data);
	                deferrer.resolve(_data);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject("Error !!!");
	            });

	            return deferrer.promise;
	        };

	        function getUserDetailInfo(_username) {
	            var deferrer = $q.defer();
	            var self = this;

	            var request = $http({
	                method: "post",
	                url: _base_url + "GetUserDetailInfo",
	                data: { UserName: _username ? _username : "" }
	            });

	            request.success(function (data, status, headers, config) {
	                self.userinfo = data.d;
	                deferrer.resolve(self.userinfo);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject("Error !!!");
	            });

	            return deferrer.promise;
	        };

	        function Logout() {
	            var deferrer = $q.defer();
	            var self = this;

	            var request = $http({
	                method: "post",
	                url: _base_url + "logout",
	                data: {}
	            });

	            request.success(function (data, status, headers, config) {
	                self.username = data.d;
	                self.isLogged = data.d.toString().trim().length > 0;
	                deferrer.resolve({ username: self.username, islogged: self.isLogged });
	                console.log($state);
	                console.log($state.current.authenticate, !self.isLogged);

	                //                if ($state.current.authenticate && !self.isLogged)

	                if ($state.current.authenticate) {
	                    console.log("enter login");
	                    self.enterloginform($state.current.name, "home");
	                }
	            }).error(function (data, status, headers, config) {
	                deferrer.reject("Error !!!");
	            });

	            return deferrer.promise;
	        }

	        function CreateUser(_userdata) {
	            //            var _srchdata = $sessionStorage['searchform'];
	            var _srchdata = ChoicesFactory.choices;

	            if (_srchdata == undefined) _srchdata = {};
	            var _udata = encodeURIComponent(angular.toJson(_srchdata));

	            var deferrer = $q.defer();
	            var self = this;

	            var request = $http({
	                method: "post",
	                url: _base_url + "CreateUser",
	                data: { _userdata: _userdata, _udata: _udata }
	            });

	            request.success(function (data, status, headers, config) {
	                deferrer.resolve(data.d);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject("Error !!!");
	            });
	            return deferrer.promise;
	        }

	        function UpdateUserInfo(_userdata, _username) {
	            var deferrer = $q.defer();
	            var self = this;

	            var request = $http({
	                method: "post",
	                url: _base_url + "UpdateUserInfo",
	                data: { UserName: _username ? _username : "", data: _userdata }
	            });

	            request.success(function (data, status, headers, config) {
	                deferrer.resolve(data.d);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject("Error !!!");
	            });
	            return deferrer.promise;
	        }

	        function GetActiveSubscriptionFullInfo() {
	            var deferrer = $q.defer();
	            var self = this;

	            var request = $http({
	                method: "post",
	                url: _base_url + "GetActiveSubscriptionFullInfo",
	                data: {}
	            });

	            request.success(function (data, status, headers, config) {
	                deferrer.resolve(data.d);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject("Error !!!");
	            });
	            return deferrer.promise;
	        }

	        function CreateSubscription(_userdata) {
	            var deferrer = $q.defer();
	            var self = this;

	            var request = $http({
	                method: "post",
	                url: _base_url + "CreateSubscription",
	                data: { _userdata: _userdata }
	            });

	            request.success(function (data, status, headers, config) {
	                deferrer.resolve(data.d);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject("Error !!!");
	            });
	            return deferrer.promise;
	        }

	        function CreatePayPalSubscription(_userdata) {
	            var deferrer = $q.defer();
	            var self = this;

	            var request = $http({
	                method: "post",
	                url: _base_url + "CreatePayPalSubscription",
	                data: { _userdata: _userdata }
	            });

	            request.success(function (data, status, headers, config) {
	                deferrer.resolve(data.d);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject("Error !!!");
	            });
	            return deferrer.promise;
	        }

	        function UnSubscribe(_userid) {
	            var deferrer = $q.defer();
	            var self = this;

	            var request = $http({
	                method: "post",
	                url: _base_url + "UnSubscribe",
	                data: { _userid: _userid, _sendemail: true }
	            });

	            request.success(function (data, status, headers, config) {
	                deferrer.resolve(data.d);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject("Error !!!");
	            });
	            return deferrer.promise;
	        }

	        function UnSubscribe_wo_email(_userid) {
	            var deferrer = $q.defer();
	            var self = this;

	            var request = $http({
	                method: "post",
	                url: _base_url + "UnSubscribe",
	                data: { _userid: _userid, _sendemail: false }
	            });

	            request.success(function (data, status, headers, config) {
	                deferrer.resolve(data.d);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject("Error !!!");
	            });
	            return deferrer.promise;
	        }

	        function ChangeCreditCardData(_userdata) {
	            var deferrer = $q.defer();
	            var self = this;

	            var request = $http({
	                method: "post",
	                url: _base_url + "ChangeCreditCardData",
	                data: { _userdata: _userdata }
	            });

	            request.success(function (data, status, headers, config) {
	                deferrer.resolve(data.d);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject("Error !!!");
	            });
	            return deferrer.promise;
	        }

	        function _ConfirmRegistration(memberID) {
	            //            return $q.when({ result:"OK"});
	            var deferrer = $q.defer();
	            var self = this;

	            var request = $http({
	                method: "post",
	                url: _base_url + "ConfirmRegistration",
	                data: { _memberID: memberID }
	            });

	            request.success(function (data, status, headers, config) {
	                deferrer.resolve(data.d);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject("Error !!!");
	            });
	            return deferrer.promise;
	        }

	        function ResetPassword(_email) {
	            var deferrer = $q.defer();
	            var self = this;

	            var request = $http({
	                method: "post",
	                url: _base_url + "ResetPassword",
	                data: { _email: _email }
	            });

	            request.success(function (data, status, headers, config) {
	                deferrer.resolve(data.d);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject("Error !!!");
	            });
	            return deferrer.promise;
	        }

	        function SwitchAdminRole(_userid) {
	            var deferrer = $q.defer();
	            var self = this;

	            var request = $http({
	                method: "post",
	                url: _base_url + "SwitchAdminRole",
	                data: { _userid: _userid }
	            });

	            request.success(function (data, status, headers, config) {
	                deferrer.resolve(data.d);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject("Error !!!");
	            });
	            return deferrer.promise;
	        }

	        function SwitchSuperAdminRole(_userid) {
	            var deferrer = $q.defer();
	            var self = this;

	            var request = $http({
	                method: "post",
	                url: _base_url + "SwitchSuperAdminRole",
	                data: { _userid: _userid }
	            });

	            request.success(function (data, status, headers, config) {
	                deferrer.resolve(data.d);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject("Error !!!");
	            });
	            return deferrer.promise;
	        }

	        function SwitchActiveUser(_userid) {
	            var deferrer = $q.defer();
	            var self = this;

	            var request = $http({
	                method: "post",
	                url: _base_url + "SwitchActiveUser",
	                data: { _userid: _userid }
	            });

	            request.success(function (data, status, headers, config) {
	                deferrer.resolve(data.d);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject("Error !!!");
	            });
	            return deferrer.promise;
	        }

	        function DeleteUser(_userid) {
	            var deferrer = $q.defer();
	            var self = this;

	            var request = $http({
	                method: "post",
	                url: _base_url + "DeleteUser",
	                data: { _userid: _userid }
	            });

	            request.success(function (data, status, headers, config) {
	                deferrer.resolve(data.d);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject("Error !!!");
	            });
	            return deferrer.promise;
	        }

	        function ChangePassword(old_p, new_p) {
	            var deferrer = $q.defer();
	            var self = this;

	            var request = $http({
	                method: "post",
	                url: _base_url + "ChangePassword",
	                data: { old_Password: old_p, new_Password: new_p }
	            });

	            request.success(function (data, status, headers, config) {
	                deferrer.resolve(data.d);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject("Error !!!");
	            });
	            return deferrer.promise;
	        }
	    }
	    LoginService.$inject = ["$http", "$rootScope", "$state", "$q", "$sessionStorage", "toaster", "FFD_CONST", "ChoicesFactory"];

	    function _check_security($rootScope, LoginService) {
	        $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
	            LoginService.getuserinfo().then(function (data) {
	                if (toState.authenticate && !data.islogged) {
	                    event.preventDefault();
	                    LoginService.enterloginform(toState.name, toParams, fromState.name, fromParams);
	                }
	            });
	        });
	    }
	};

/***/ },

/***/ 313:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {
	    app.directive('popBodyTemplate01', function () {
	        return { template: __webpack_require__(314) };
	    });
	    __webpack_require__(315)(app);
	    __webpack_require__(316)(app);
	};

/***/ },

/***/ 314:
/***/ function(module, exports) {

	module.exports = "<h4>\r\n    Next points are not recognized for geolocation !\r\n</h4>\r\n\r\n\r\n<table class=\"table-bordered\">\r\n    <tr ng-repeat=\"item in directiveData\">\r\n        <td>{{$index+1}})&nbsp;</td>\r\n        <td>{{item.busname}}</td>\r\n        <td>{{item.address}}</td>\r\n    </tr>\r\n</table>";

/***/ },

/***/ 315:
/***/ function(module, exports) {

	'use strict';

	module.exports = function (app) {

	    app.controller('PreviewMapController', PreviewMapController);

	    /* @ngInject */

	    function PreviewMapController(_, $scope, $location, points, toaster, $timeout) {
	        /* jshint validthis:true */
	        var vm = this;
	        $scope.points = points;
	        $scope.markers = [];
	        $scope.center = '';

	        var map;

	        function AutoCenter() {
	            //  Create a new viewpoint bound
	            var bounds = new google.maps.LatLngBounds();

	            //  Go through each...

	            //            $.each($scope.markers, function (index, marker)             
	            angular.forEach($scope.markers, function (marker, index) {
	                bounds.extend(marker.position);
	            });
	            //  Fit these bounds to the map
	            map.fitBounds(bounds);
	        }

	        $scope.$on('mapInitialized', function (event, evtMap) {
	            map = evtMap;

	            var _x = _.filter($scope.points, 'position');
	            var _slat = 0,
	                _slng = 0;
	            _.forEach(_x, function (itm) {
	                _slat += itm.position.lat();_slng += itm.position.lng();
	            });
	            var _avglat = _slat / _x.length;
	            var _avglng = _slng / _x.length;
	            var _center = new google.maps.LatLng(_avglat, _avglng);
	            $scope.center = _center.toUrlValue();
	            var options = {
	                //                'zoom': 13,
	                //                'center': _center,
	                mapTypeId: google.maps.MapTypeId.ROADMAP
	            };

	            var makemarker = function makemarker(itm) {
	                return new google.maps.Marker({
	                    position: itm.position,
	                    title: itm.busname,
	                    html: "<b>" + itm.busname + "</b><br/>" + itm.address
	                });
	            };

	            $scope.markers = _.map(_x, makemarker);
	            $scope.markerClusterer = new MarkerClusterer(map, $scope.markers, options);
	            AutoCenter();

	            var infowindow = null;

	            /* now inside your initialise function */
	            infowindow = new google.maps.InfoWindow({
	                content: "holding..."
	            });

	            for (var i = 0; i < $scope.markers.length; i++) {
	                var marker = $scope.markers[i];
	                google.maps.event.addListener(marker, 'click', function () {
	                    // where I have added .html to the marker object.
	                    infowindow.setContent(this.html);
	                    infowindow.open(map, this);
	                });
	            }

	            if (_x.length < $scope.points.length) {
	                var _msg = "Next points are not recognized for geolocation";
	                var _indx = 0;
	                var _itms = [];
	                _.forEach($scope.points, function (itm) {
	                    if (!itm.position) _itms.push({ busname: itm.busname, address: itm.address });
	                });
	                $timeout(function () {

	                    toaster.pop({
	                        type: 'error',
	                        title: 'ERROR !!!?',
	                        body: 'pop-body-template01',
	                        directiveData: _itms,
	                        bodyOutputType: 'directive',
	                        timeOut: 45000
	                    });
	                }, 1000);
	            }
	        });
	    }
	    PreviewMapController.$inject = ["_", "$scope", "$location", "points", "toaster", "$timeout"];
	};

/***/ },

/***/ 316:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    app.service('GoogleGeoService', GoogleGeoService);

	    /* @ngInject */

	    function GoogleGeoService($http, $q, GeoCoder, createDialog, FFD_CONST, _) {

	        this.ShowMap = show_map;

	        var _dynamicMarkers = [];

	        var _success = function _success(_value) {
	            var _xxx = function _xxx(_dx) {
	                var latlng = new google.maps.LatLng(_dx[0].geometry.location.lat(), _dx[0].geometry.location.lng());
	                _dynamicMarkers.push({
	                    address: _value.address,
	                    busname: _value.busname,
	                    position: latlng
	                });
	            };
	            return _xxx;
	        };

	        var _failure = function _failure(_value) {
	            var _xxx = function _xxx(_message) {
	                _dynamicMarkers.push({
	                    address: _value.address,
	                    busname: _value.busname,
	                    position: null,
	                    message: _message
	                });
	            };
	            return _xxx;
	        };

	        function _showMap() {
	            createDialog({
	                id: 'SpecialOffer',
	                css: {
	                    top: '100px',
	                    margin: '0 auto'
	                },
	                template: __webpack_require__(317),
	                footerTemplate: __webpack_require__(318),
	                backdrop: true,
	                cancel: { label: 'Exit', fn: function fn() {} },
	                controller: 'PreviewMapController'
	            }, {
	                points: _dynamicMarkers
	            });
	        }

	        function addresses2geo(_mapdata) {
	            _dynamicMarkers = [];
	            var _arr = _.map(_mapdata, function (_val) {
	                return GeoCoder.geocode({ address: _val.address }).then(_success(_val), _failure(_val));
	            });

	            $q.all(_arr).finally(function (_data) {
	                _showMap();
	            });
	        }

	        function show_map(_mapdata) {
	            addresses2geo(_mapdata);
	        }
	    }
	    GoogleGeoService.$inject = ["$http", "$q", "GeoCoder", "createDialog", "FFD_CONST", "_"];
	};

/***/ },

/***/ 317:
/***/ function(module, exports) {

	module.exports = "<div map-lazy-load__=\"//maps.google.com/maps/api/js\" style=\"height: 400px;\">\r\n    <map zoom=\"3\" center=\"40,-100\" style=\"height:100%;\"></map>\r\n</div>";

/***/ },

/***/ 318:
/***/ function(module, exports) {

	module.exports = "<div class=\"col-xs-12 text-xs-center\">\r\n    <button class=\"btn  btn-sm  btn-warning\" ng-click=\"$modalCancel()\">{{$modalCancelLabel}}</button>\r\n</div>";

/***/ },

/***/ 319:
/***/ function(module, exports) {

	'use strict';

	module.exports = function (app) {

	    app.service('OrderHistoryService', OrderHistoryService);

	    /* @ngInject */

	    function OrderHistoryService($http, $q, _, FFD_CONST) {
	        var sizepage = 10;
	        var page = 1;
	        var cntpages = 0;
	        var cntrecords = 0;
	        var _records = [];

	        this.getPage = getPage;
	        this.getOrderInfo = getOrderInfo;

	        function getPage(_page, _sizepage, _username) {
	            var def = $q.defer();

	            var _data = { _page: _page, _sizepage: _sizepage, _username: _username ? _username : "" };

	            var request = $http({
	                method: "post",
	                url: FFD_CONST.API_BASE_URL + "GetOnePageOrderHistory_M",
	                data: _data
	            });

	            request.success(function (data, status, headers, config) {

	                console.log(data);

	                page = data.d.data["_page"];
	                cntpages = data.d.data["_cntpages"];
	                _records = data.d.data["_records"];
	                cntrecords = data.d.data["_cntrecords"];
	                var _result = { page: page, cntpages: cntpages, records: _records, cntrecords: cntrecords };
	                console.log(_result);
	                def.resolve(_result);
	            }).error(function (data, status, headers, config) {
	                def.reject("Failed to get data");
	            });

	            return def.promise;
	        }

	        function getOrderInfo(_listid) {
	            var def = $q.defer();

	            var request = $http({
	                method: "post",
	                url: FFD_CONST.API_BASE_URL + "GetOrderInfo",
	                data: { _listid: _listid }
	            });

	            request.success(function (data, status, headers, config) {

	                def.resolve(data.d);
	            }).error(function (data, status, headers, config) {
	                def.reject("Failed to get data");
	            });

	            return def.promise;
	        }
	    }
	    OrderHistoryService.$inject = ["$http", "$q", "_", "FFD_CONST"];
	};

/***/ },

/***/ 320:
/***/ function(module, exports) {

	'use strict';

	module.exports = function (app) {

	    //   GetOnePageQueryHistory
	    app.service('QueryHistoryService', QueryHistoryService);

	    /* @ngInject */

	    function QueryHistoryService($http, $q, _, FFD_CONST) {
	        var sizepage = 10;
	        var page = 1;
	        var cntpages = 0;
	        var cntrecords = 0;
	        var _records = [];

	        this.getPage = getPage;
	        this.getQueryInfo = getQueryInfo;
	        this.getUserQuery = get_userquery;

	        function getPage(_page, _sizepage, _username) {
	            var def = $q.defer();

	            var _data = { _page: _page, _sizepage: _sizepage, _username: _username ? _username : "" };

	            var request = $http({
	                method: "post",
	                //                url: FFD_CONST.API_BASE_URL + "GetOnePageQueryHistory",
	                url: FFD_CONST.API_BASE_URL + "GetOnePageQueryHistory_M",
	                data: _data
	            });

	            request.success(function (data, status, headers, config) {

	                console.log(data);

	                page = data.d.data["_page"];
	                cntpages = data.d.data["_cntpages"];
	                _records = data.d.data["_records"];
	                cntrecords = data.d.data["_cntrecords"];
	                var _result = { page: page, cntpages: cntpages, records: _records, cntrecords: cntrecords };
	                console.log(_result);
	                def.resolve(_result);
	            }).error(function (data, status, headers, config) {
	                def.reject("Failed to get data");
	            });

	            return def.promise;
	        }

	        function getQueryInfo(_listid) {
	            var def = $q.defer();

	            var request = $http({
	                method: "post",
	                url: FFD_CONST.API_BASE_URL + "GetQueryInfo",
	                data: { _listid: _listid }
	            });

	            request.success(function (data, status, headers, config) {

	                def.resolve(data.d);
	            }).error(function (data, status, headers, config) {
	                def.reject("Failed to get data");
	            });

	            return def.promise;
	        }

	        function get_userquery(_id) {
	            var deferrer = $q.defer();

	            var request = $http({
	                method: "post",
	                url: FFD_CONST.API_BASE_URL + "GetUserQuery",
	                data: { _id: _id }
	            });

	            request.success(function (data, status, headers, config) {
	                deferrer.resolve(data.d);
	            }).error(function (data, status, headers, config) {
	                deferrer.reject('Error !!!');
	            });

	            return deferrer.promise;
	        }
	    }
	    QueryHistoryService.$inject = ["$http", "$q", "_", "FFD_CONST"];
	};

/***/ },

/***/ 321:
/***/ function(module, exports) {

	'use strict';

	module.exports = function (app) {

	    app.directive('myUiGridResize', myUiGridResizeDirective);

	    /* @ngInject */
	    function myUiGridResizeDirective(gridUtil, uiGridConstants) {
	        return {
	            restrict: 'A',
	            require: 'uiGrid',
	            link: function link($scope, $elm, $attrs, uiGridCtrl) {
	                $scope.$watch($attrs.uiGrid + '.minRowsToShow', function (val) {
	                    var grid = uiGridCtrl.grid;

	                    // Initialize scrollbars (TODO: move to controller??)
	                    uiGridCtrl.scrollbars = [];

	                    // Figure out the new height
	                    var contentHeight = grid.options.minRowsToShow * grid.options.rowHeight;
	                    var headerHeight = grid.options.hideHeader ? 0 : grid.options.headerRowHeight;
	                    var footerHeight = grid.options.showFooter ? grid.options.footerRowHeight : 0;
	                    var scrollbarHeight = grid.options.enableScrollbars ? gridUtil.getScrollbarWidth() : 0;

	                    var maxNumberOfFilters = 0;
	                    // Calculates the maximum number of filters in the columns
	                    angular.forEach(grid.options.columnDefs, function (col) {
	                        if (col.hasOwnProperty('filter')) {
	                            if (maxNumberOfFilters < 1) {
	                                maxNumberOfFilters = 1;
	                            }
	                        } else if (col.hasOwnProperty('filters')) {
	                            if (maxNumberOfFilters < col.filters.length) {
	                                maxNumberOfFilters = col.filters.length;
	                            }
	                        }
	                    });
	                    var filterHeight = maxNumberOfFilters * headerHeight;

	                    var newHeight = headerHeight + contentHeight + footerHeight + scrollbarHeight + filterHeight + 10;

	                    $elm.css('height', newHeight + 'px');

	                    grid.gridHeight = $scope.gridHeight = gridUtil.elementHeight($elm);

	                    // Run initial canvas refresh
	                    grid.refreshCanvas();
	                });
	            }
	        };
	    }
	    myUiGridResizeDirective.$inject = ["gridUtil", "uiGridConstants"];
	};

/***/ },

/***/ 322:
/***/ function(module, exports) {

	'use strict';

	module.exports = function (app) {
	    app.controller('ChangePreviewDataController', _ChangePreviewDataController);

	    /* @ngInject */
	    function _ChangePreviewDataController($scope, ChoicesFactory) {
	        //        $scope.previewParams = previewParams;
	        $scope.choices = ChoicesFactory.choices;
	        $scope.max_val = $scope.choices._count_Data;

	        /*
	        $scope.$watch("choices._count_Data",
	            function (_new, _old)
	            {
	                if ($scope.choices._count_Data==undefined)
	                {
	                    $scope.choices._count_Data = $scope.max_val;
	                }
	              });
	         */
	    }
	    _ChangePreviewDataController.$inject = ["$scope", "ChoicesFactory"];
	};

/***/ },

/***/ 323:
/***/ function(module, exports) {

	'use strict';

	module.exports = function (app) {
	    app.controller('AskAboutPopupController', _AskAboutPopupController);

	    /* @ngInject */
	    function _AskAboutPopupController($scope, $localStorage) {
	        $scope.chkAsk = false;
	    }
	    _AskAboutPopupController.$inject = ["$scope", "$localStorage"];
	};

/***/ },

/***/ 324:
/***/ function(module, exports) {

	'use strict';

	module.exports = function (app) {
	    app.controller('ChangeSubscriptionCountController', _ChangeSubscriptionCountController);

	    /* @ngInject */
	    function _ChangeSubscriptionCountController($scope, $http, toaster, FFD_CONST, AdminDataService, userid_, leftCount_) {
	        //        console.log("$scope.userid_=", userid_, "$scope.leftcount_=", leftCount_);


	        //        $scope.previewParams = previewParams;
	        $scope.count = leftCount_ ? leftCount_ : 5000;

	        $scope.change = function (_userid) {

	            var _url = FFD_CONST.API_BASE_URL + "UpdateSubscribeCount";

	            var request = $http({
	                method: "post",
	                url: _url,
	                data: { _userid: _userid, _count: $scope.count }
	            });

	            request.success(function (data, status, headers, config) {
	                var _data = data.d;
	                if (_data.result == 'OK') toaster.pop('success', _data.message);
	                if (_data.result != 'OK') toaster.pop('error', _data.message);
	            }).error(function (data, status, headers, config) {});
	        };
	    }
	    _ChangeSubscriptionCountController.$inject = ["$scope", "$http", "toaster", "FFD_CONST", "AdminDataService", "userid_", "leftCount_"];
	};

/***/ },

/***/ 325:
/***/ function(module, exports) {

	'use strict';

	module.exports = function (app) {
	    app.controller('ChangeSearchTemplateMailSettingController', _ChangeSearchTemplateMailSettingController);

	    /* @ngInject */
	    function _ChangeSearchTemplateMailSettingController($scope, $http, toaster, FFD_CONST, GetResultsFactory, _template_params) {
	        //        console.log("$scope.userid_=", userid_, "$scope.leftcount_=", leftCount_);


	        //        $scope.previewParams = previewParams;
	        $scope.params = _template_params;
	        $scope.max_val = 5000;

	        $scope.change = function () {

	            //            GetResultsFactory.updatesearchtemplate_mailsettings(params.id, params.load, params.random, params.limit)

	            /*
	            var _url = FFD_CONST.API_BASE_URL + "UpdateSubscribeCount";
	              var request = $http({
	                method: "post",
	                url: _url,
	                data: { _userid: _userid, _count: $scope.count }
	            });
	                request
	            .success(function (data, status, headers, config)
	            {
	                var _data = data.d;
	                if (_data.result == 'OK') toaster.pop('success', _data.message);
	                if (_data.result != 'OK') toaster.pop('error', _data.message);
	            })
	            .error(function (data, status, headers, config)
	            {
	            });
	            */

	        };
	    }
	    _ChangeSearchTemplateMailSettingController.$inject = ["$scope", "$http", "toaster", "FFD_CONST", "GetResultsFactory", "_template_params"];
	};

/***/ },

/***/ 326:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    app.service('ToolsService', _toolsservice);

	    /* @ngInject */
	    function _toolsservice(createDialog, $state, $timeout, $localStorage, toaster, GetResultsFactory) {

	        var _proposal_opened = false;
	        var _count_max = 100;

	        this.DownloadSample = _downloadsample;
	        this.ActivateDialog = _activate_dialog;
	        this.MoreLeadsDialog = _moreleads_dialog;
	        this.ChangePreviewData = _change_preview_data;
	        this.ChangeSearchTemplateMailSettings = _change_search_template_mail_settings;
	        this.AskAboutPopup = _askAboutPopup;

	        function _downloadsample() {

	            var _sampleurl = __webpack_require__(327);

	            angular.element('.dwnl').remove();
	            var anchor = angular.element('<iframe class="dwnl" ></iframe>');
	            anchor.attr({
	                src: _sampleurl,
	                style: "display:none;"
	            });

	            anchor.appendTo('body');
	        }

	        function _activate_dialog(_cancel_label) {
	            if (_proposal_opened) return;
	            _proposal_opened = true;;
	            createDialog({
	                id: 'SpecialOffer',
	                css: { top: '100px', margin: '0 auto' },
	                template: __webpack_require__(328),
	                footerTemplate: __webpack_require__(329),
	                backdrop: true,
	                success: {
	                    label: 'Yes, activate my account',
	                    fn: function fn() {
	                        _proposal_opened = false;
	                        $state.go('selectsubscriptiontype');
	                    }
	                },
	                cancel: {
	                    label: _cancel_label,
	                    fn: function fn() {
	                        _proposal_opened = false;
	                    }
	                }
	            });
	        }

	        function _askAboutPopup() {
	            if ($localStorage._askAboutPopup) return;
	            createDialog({
	                id: 'SpecialOffer',
	                css: { top: '100px', margin: '0 auto' },
	                template: __webpack_require__(330),
	                footerTemplate: __webpack_require__(331),
	                backdrop: true,
	                controller: 'AskAboutPopupController',
	                success: {
	                    label: 'Close',
	                    fn: function fn() {
	                        if (this.chkAsk) $localStorage._askAboutPopup = this.chkAsk;
	                    }
	                },
	                cancel: {
	                    label: "Cancel",
	                    fn: function fn() {}
	                }
	            });
	        }

	        function _moreleads_dialog(_cancel_label) {
	            createDialog({
	                id: 'SpecialOffer',
	                css: { top: '100px', margin: '0 auto' },
	                template: __webpack_require__(332),
	                footerTemplate: __webpack_require__(333),
	                backdrop: true,
	                cancel: { label: 'CLOSE' }
	            });
	        }

	        function _change_preview_data(_view_list_title, f_suc, f_can) {
	            createDialog({
	                id: 'SpecialOffer',
	                css: { top: '100px', margin: '0 auto' },
	                template: __webpack_require__(334),
	                footerTemplate: __webpack_require__(335),
	                backdrop: true,
	                controller: 'ChangePreviewDataController',
	                success: {
	                    label: _view_list_title, // 'Preview List',
	                    fn: f_suc || function () {
	                        if (this.choices._count_Data == undefined) {
	                            this.choices._count_Data = this.max_val;
	                            return false;
	                        }
	                        $state.go('previewdata');
	                    }
	                    //                                 fn: f_suc
	                },
	                cancel: {
	                    label: 'Cancel',
	                    fn: f_can || function () {}
	                    //                                 fn: f_can
	                }
	            });

	            //            return _count_max;
	        }

	        function _change_search_template_mail_settings(_params, f_suc, f_can) {
	            createDialog({
	                id: 'SpecialOffer',
	                css: { top: '100px', margin: '0 auto' },
	                template: __webpack_require__(336),
	                footerTemplate: __webpack_require__(335),
	                backdrop: true,
	                controller: 'ChangeSearchTemplateMailSettingController',
	                success: {
	                    label: 'Ok',
	                    fn: function fn() {
	                        var _ffn = f_suc || function () {};
	                        var _params = this.params;
	                        GetResultsFactory.updatesearchtemplate_mailsettings(_params.id, _params.load, _params.random, _params.limit).then(function (data) {
	                            if (data.result == "OK") {
	                                _ffn();
	                            }
	                            if (data.result != "OK" && data.message) {
	                                toaster.pop('error', data.message);
	                            }
	                        });
	                    }
	                },
	                cancel: {
	                    label: 'Cancel',
	                    fn: f_can || function () {}
	                }
	            }, {
	                _template_params: _params
	            });
	        }
	    }
	    _toolsservice.$inject = ["createDialog", "$state", "$timeout", "$localStorage", "toaster", "GetResultsFactory"];

	    app.filter('currencyFilter', function () {
	        return function (value) {
	            return value.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
	        };
	    });
	};

/***/ },

/***/ 327:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "assets/samples/sample.xlsx";

/***/ },

/***/ 328:
/***/ function(module, exports) {

	module.exports = "<table style=\"width:100%;\">\r\n    <tr>\r\n        <td colspan=\"2\" style=\"text-align:left;\">\r\n            <br />\r\n            Subscribe now for full access to our website!\r\n            <br  />\r\n            <ul style=\"list-style-type:circle\">\r\n                <li>View and download up to 5000 leads monthly</li>\r\n                <li>\r\n                    Monthly Plan $ 29.99\r\n                    <b style=\"color: #ee7c42\">\r\n                        **limited time only $9.99 for the first month\r\n                    </b>\r\n                </li>\r\n                <li>No setup charge</li>\r\n                <li>\r\n                    30-Day Money Back Guarantee (Within the first 30 days of\r\n                    subscription start date:\r\n                    If you have not downloaded any Data, you can receive\r\n                    a full refund of your\r\n                    subscription)\r\n                </li>\r\n            </ul>\r\n        </td>\r\n    </tr>\r\n</table>\r\n";

/***/ },

/***/ 329:
/***/ function(module, exports) {

	module.exports = "<div class=\"col-xs-6 text-xs-center\">\r\n    <button class=\"btn  btn-lg  btn-warning\" ng-click=\"$modalSuccess()\">\r\n        {{$modalSuccessLabel}}\r\n    </button>\r\n</div>\r\n<div class=\"col-xs-6 text-xs-center\">\r\n    <button class=\"btn  btn-lg  btn-warning\" ng-click=\"$modalCancel()\">\r\n        {{$modalCancelLabel}}\r\n    </button>\r\n</div>\r\n";

/***/ },

/***/ 330:
/***/ function(module, exports) {

	module.exports = "\r\n\r\n<table style=\"width:100%;\" class=\"askaboutpopup\">\r\n    <tr>\r\n        <td colspan=\"2\" style=\"text-align:left;\">\r\n            <p>\r\n                When the majority of our new business leads are initially obtained they do not come with phone numbers.\r\n                Therefore, we append phone numbers as that information becomes available.\r\n                For this process we use up to the minute telecom database sources and software programs to match\r\n                the numbers to the corresponding new businesses.\r\n                We do our best to ensure accuracy however it is not an exact science so some inaccuracy should be expected.\r\n            </p>\r\n\r\n\r\n\r\n            <p>\r\n                Some customers have found that the leads with phone numbers are so new that the businesses are not even open for business yet.\r\n                We suggest that you try a few different timeframes when testing the numbers to maximize your results.\r\n                Also, we encourage you to query older months on a regular basis because we are adding new numbers to those leads all the time.\r\n            </p>\r\n\r\n\r\n        </td>\r\n    </tr>\r\n\r\n\r\n    <tr>\r\n        <td colspan=\"2\" style=\"text-align:center;\">\r\n            <div class=\"col-sm-12\">\r\n                <input type=\"checkbox\" class=\"checkbox\" ng-model=\"chkAsk\" />\r\n                <span class=\"text_part_info_gray_01\">&nbsp;&nbsp;Do not show me this message again</span>\r\n            </div>\r\n        </td>\r\n    </tr>\r\n\r\n\r\n\r\n\r\n\r\n</table>\r\n";

/***/ },

/***/ 331:
/***/ function(module, exports) {

	module.exports = "<div class=\"col-xs-12 text-xs-center\">\r\n    <button class=\"btn  btn-lg  btn-warning\" ng-click=\"$modalSuccess()\">\r\n        {{$modalSuccessLabel}}\r\n    </button>\r\n</div>\r\n";

/***/ },

/***/ 332:
/***/ function(module, exports) {

	module.exports = "<table style=\"width:100%;\">\r\n    <tr>\r\n        <td colspan=\"2\" style=\"text-align:left;\">\r\n\r\n            <h4 class=\"text-sm-center\">\r\n                <br />\r\n                Need more leads?\r\n                <br />\r\n                Contact customer service at (475) 298-1100\r\n                <br />\r\n                or\r\n                <a href=\"mailto:customerservice@freshfinddata.com\">\r\n                    CustomerService@FreshFindData.com\r\n                </a>\r\n                <br />\r\n                to discuss a custom package.\r\n                <br />\r\n\r\n            </h4>\r\n\r\n        </td>\r\n    </tr>\r\n</table>\r\n";

/***/ },

/***/ 333:
/***/ function(module, exports) {

	module.exports = "<div class=\"col-xs-12 text-xs-center\">\r\n    <button class=\"btn  btn-sm  btn-warning\" ng-click=\"$modalCancel()\">\r\n        {{$modalCancelLabel}}\r\n    </button>\r\n</div>\r\n";

/***/ },

/***/ 334:
/***/ function(module, exports) {

	module.exports = "\r\n<h2 class=\"text-xs-center\">Select Parameters</h2>\r\n<table class=\"table table-sm\" style=\"width:100%; font-size: x-large;\">\r\n    <tr>\r\n        <td class=\"text-xs-right\">\r\n            <span>Random Select</span>\r\n        </td>\r\n        <td>&nbsp;</td>\r\n        <td>\r\n            <input type=\"checkbox\" class=\"checkbox\" ng-model=\"choices._random_Data\"  style=\"height: 1.0em; width: 1.0em;\"  />\r\n        </td>\r\n    </tr>\r\n    <tr>\r\n        <td class=\"text-xs-right\">\r\n            <span>\r\n                Change Count   <span class=\"text-nowrap\">( between 1 and {{max_val}})</span>  \r\n            </span>\r\n        </td>\r\n        <td>&nbsp;</td>\r\n        <td>\r\n            <input type=\"number\" max=\"{{max_val}}\" min=\"1\" ng-model=\"choices._count_Data\" />\r\n        </td>\r\n    </tr>\r\n</table>\r\n";

/***/ },

/***/ 335:
/***/ function(module, exports) {

	module.exports = "<div class=\"col-xs-6 text-xs-center\">\r\n    <button class=\"btn    btn-warning\" ng-click=\"$modalSuccess()\">\r\n        {{$modalSuccessLabel}}\r\n    </button>\r\n</div>\r\n<div class=\"col-xs-6 text-xs-center\">\r\n    <button class=\"btn    btn-warning\" ng-click=\"$modalCancel()\">\r\n        {{$modalCancelLabel}}\r\n    </button>\r\n</div>\r\n";

/***/ },

/***/ 336:
/***/ function(module, exports) {

	module.exports = "\r\n<h2 class=\"text-xs-center\">Auto Notify Settings</h2>\r\n<table class=\"table table-sm\" style=\"width:100%; font-size: x-large;\">\r\n\r\n    <tr>\r\n        <td class=\"text-xs-right\">\r\n            <span>Template Name</span>\r\n        </td>\r\n        <td>&nbsp;</td>\r\n        <td>\r\n            <span>{{params.name}}</span>\r\n        </td>\r\n    </tr>\r\n\r\n    <tr>\r\n        <td class=\"text-xs-right\">\r\n            <span>Automatically email me available records</span>\r\n        </td>\r\n        <td>&nbsp;</td>\r\n        <td>\r\n            <input type=\"checkbox\" class=\"checkbox\" ng-model=\"params.load\" style=\"height: 1.0em; width: 1.0em;\" />\r\n        </td>\r\n    </tr>\r\n\r\n    <tr class=\"hidden-xs-up\">\r\n        <td class=\"text-xs-right\">\r\n            <span>Load Random Records</span>\r\n        </td>\r\n        <td>&nbsp;</td>\r\n        <td>\r\n            <input type=\"checkbox\" class=\"checkbox\" ng-model=\"params.random\" style=\"height: 1.0em; width: 1.0em;\" />\r\n        </td>\r\n    </tr>\r\n\r\n\r\n\r\n\r\n\r\n    <tr>\r\n        <td class=\"text-xs-right\">\r\n            <span>\r\n                Daily Leads Limit  <span class=\"text-nowrap hidden-xs-up\">( between 0 and {{max_val}})</span>\r\n            </span>\r\n        </td>\r\n        <td>&nbsp;</td>\r\n        <td>\r\n            <input type=\"number\" max=\"{{max_val}}\" min=\"1\" ng-model=\"params.limit\" />\r\n        </td>\r\n    </tr>\r\n\r\n</table>\r\n";

/***/ },

/***/ 337:
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }

});
webpackJsonp([0],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	//var  angular=require('angular');


	//window.angular=require('angular');
	//require('script?jquery');

	__webpack_require__(1);

	/* @ngInject */

	// Init App
	var _deps = ['ngMessages', 'ui.router', 'ngSanitize', 'angular-capitalize-filter', 'ngAnimate', 'angularScreenfull', 'angular-loading-bar',
	//          'ui.bootstrap',
	'ui.select',

	//        'ui.grid',
	//        'ui.grid.resizeColumns',
	//        'ui.grid.pinning',
	//        'ui.grid.selection',
	//        'ui.grid.moveColumns',
	//        'ui.grid.saveState',
	//        'ui.grid.pagination',

	'ui.grid', 'ui.grid.resizeColumns', 'ui.grid.pinning', 'ui.grid.selection', 'ui.grid.moveColumns', 'ui.grid.saveState', 'ui.grid.pagination', 'ui.grid.autoResize', 'ui.grid.exporter', 'fundoo.services', 'ngMap', 'ui.checkbox', 'ui.date',
	//        'ui.bootstrap.datetimepicker',
	'datePicker', 'ui.dateTimeInput',

	//        'ngBootstrap',
	//            'daterangepicker',
	//        'jkuri.daterangepicker',

	//        'moment',
	//        'ui.mask',
	'toaster', 'ngStorage',
	//        'LocalStorageModule',
	'formly', 'formlyBootstrap'
	//        , 'ng-if-bootstrap-grid'


	, 'ngBreakpoint', 'frapontillo.bootstrap-switch', 'ngMeta'

	//        , 'eha.back-button.directive'
	//        , 'eha.back-button.templates'


	//        'app_tools'

	//        , 'ui.bootstrap.popover'

	, 'ffd-routes'];

	function _AppController($scope, $timeout, $rootScope, $location) {

	    $scope.LoadingActive = true;

	    $scope.$on('cfpLoadingBar:started', function (event, data) {
	        $timeout(function () {
	            $scope.LoadingActive = true;
	        });
	        console.log('cfpLoadingBar:started');
	    });

	    $scope.$on('cfpLoadingBar:completed', function (event, data) {
	        $timeout(function () {
	            $scope.LoadingActive = false;
	        });
	        console.log('cfpLoadingBar:completed');
	    });

	    /*
	    $scope.title = 'AppController';
	      activate();
	      function activate() { }
	     */
	}
	_AppController.$inject = ["$scope", "$timeout", "$rootScope", "$location"];

	//require('script!jquery');
	var app = angular.module('FreshFindData', _deps);
	app.controller('AppController', _AppController);

	//require('./Common/')(app);
	__webpack_require__(16)(app);
	__webpack_require__(89)(app);

	__webpack_require__(288)(app);
	// require('./Run/')(app);

	app.config(['cfpLoadingBarProvider', function (cfpLoadingBarProvider) {
	    //    cfpLoadingBarProvider.latencyThreshold = 10;
	}]);

	/*
	*/

	app.config([
	    '$locationProvider',
	    function ($locationProvider)
	    {
	        $locationProvider.html5Mode(true);
	        $locationProvider.hashPrefix('!');
	    }
	])


	var _run = ["$templateCache", function _run( /* @ngInject */$templateCache) {
	    $templateCache.put('ui-grid/pagination-z', "<div role=\"contentinfo\" class=\"ui-grid-pager-panel\" ui-grid-pager ng-show=\"grid.options.enablePaginationControls\"><div role=\"navigation\" class=\"ui-grid-pager-container\"><div role=\"menubar\" class=\"ui-grid-pager-control\"><button type=\"button\" role=\"menuitem\" class=\"btn btn-success ui-grid-pager-first\" ui-grid-one-bind-title=\"aria.pageToFirst\" ui-grid-one-bind-aria-label=\"aria.pageToFirst\" ng-click=\"pageFirstPageClick()\" ng-disabled=\"cantPageBackward()\"><div class=\"first-triangle\"><div class=\"first-bar\"></div></div></button> <button type=\"button\" role=\"menuitem\" class=\"ui-grid-pager-previous\" ui-grid-one-bind-title=\"aria.pageBack\" ui-grid-one-bind-aria-label=\"aria.pageBack\" ng-click=\"pagePreviousPageClick()\" ng-disabled=\"cantPageBackward()\"><div class=\"first-triangle prev-triangle\"></div></button> <input type=\"number\" ui-grid-one-bind-title=\"aria.pageSelected\" ui-grid-one-bind-aria-label=\"aria.pageSelected\" class=\"ui-grid-pager-control-input\" ng-model=\"grid.options.paginationCurrentPage\" min=\"1\" max=\"{{ paginationApi.getTotalPages() }}\" required> <span class=\"ui-grid-pager-max-pages-number\" ng-show=\"paginationApi.getTotalPages() > 0\"><abbr ui-grid-one-bind-title=\"paginationOf\">/</abbr> {{ paginationApi.getTotalPages() }}</span> <button type=\"button\" role=\"menuitem\" class=\"ui-grid-pager-next\" ui-grid-one-bind-title=\"aria.pageForward\" ui-grid-one-bind-aria-label=\"aria.pageForward\" ng-click=\"pageNextPageClick()\" ng-disabled=\"cantPageForward()\"><div class=\"last-triangle next-triangle\"></div></button> <button type=\"button\" role=\"menuitem\" class=\"ui-grid-pager-last\" ui-grid-one-bind-title=\"aria.pageToLast\" ui-grid-one-bind-aria-label=\"aria.pageToLast\" ng-click=\"pageLastPageClick()\" ng-disabled=\"cantPageToLast()\"><div class=\"last-triangle\"><div class=\"last-bar\"></div></div></button></div><div class=\"ui-grid-pager-row-count-picker\" ng-if=\"grid.options.paginationPageSizes.length > 1\"><select ui-grid-one-bind-aria-labelledby-grid=\"'items-per-page-label'\" ng-model=\"grid.options.paginationPageSize\" ng-options=\"o as o for o in grid.options.paginationPageSizes\"></select><span ui-grid-one-bind-id-grid=\"'items-per-page-label'\" class=\"ui-grid-pager-row-count-label\">&nbsp;{{sizesLabel}}</span></div><span ng-if=\"grid.options.paginationPageSizes.length <= 1\" class=\"ui-grid-pager-row-count-label\">{{grid.options.paginationPageSize}}&nbsp;{{sizesLabel}}</span></div><div class=\"ui-grid-pager-count-container\"><div class=\"ui-grid-pager-count\"><span ng-show=\"grid.options.totalItems > 0\">{{showingLow}} <abbr ui-grid-one-bind-title=\"paginationThrough\">-</abbr> {{showingHigh}} {{paginationOf}} {{grid.options.totalItems}} {{totalItemsLabel}}</span></div></div></div>");
	}];

	app.run(_run);

	// app.run(  /* @ngInject */   function ($state, $location) { $state.transitionTo('home'); });


	app.run(['$state', '$location', '$sessionStorage', '$rootScope', '$uiViewScroll', function ($state, $location, $sessionStorage, $rootScope, $uiViewScroll) {

	    delete $sessionStorage['searchform'];

	    $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {

	        if (window['addthis_share'] && toState.meta) {
	            window['addthis_share'].title = toState.meta['title'];
	            window['addthis_share'].description = toState.meta['description'];
	            setTimeout(function () {
	                window['addthis_share'].url = window.location.href;
	            }, 700);
	        }

	        if (toParams['scrollto']) return;
	        window.scroll(0, 0);
	    });

	    var _states = ['successcreatepaypalsubscription', 'selectsubscriptiontype', 'confirmregister', "about", "try-it", "pricing", "contact", "how-it-works", "your-data-pro", "create-bitpay-subscription", "create-bitcoin-monthly-fee", "commit-bitcoin-user-payment", "register", "login", "getsubscriptionfullinfo", "newsletter", "profile", "profile.changecreditcarddata"];

	    for (var _in in _states) {
	        var _state = _states[_in];
	        if ($location.$$path == '/' + _state.replace('.', '/')) {
	            var _state0 = _state.split('-').join('');
	            $state.transitionTo(_state0, $location.$$search);
	            return;
	        }
	    }

	    /*
	    if ($location.$$path == '/successcreatepaypalsubscription') {
	    $state.transitionTo('successcreatepaypalsubscription', $location.$$search);
	    return;
	    }
	    if ($location.$$path == '/selectsubscriptiontype') {
	    $state.transitionTo('selectsubscriptiontype', $location.$$search);
	    return;
	    }
	    
	    if ($location.$$path == '/confirmregister'){
	    $state.transitionTo('confirmregister', $location.$$search);
	    return;
	    }
	     */

	    $state.transitionTo('home');
	}]);

	app.run( /* @ngInject */_check_security);

	function _check_security($rootScope, $localStorage, LoginService) {
	    $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
	        LoginService.getuserinfo().then(function (data) {
	            if (toState.authenticate && !data.islogged) {
	                event.preventDefault();
	                /*
	                if (fromState.name == 'successcreatepaypalsubscription')
	                {
	                    $localStorage['successcreatepaypalsubscription'] = fromParams;
	                }
	                */

	                LoginService.enterloginform(toState.name, toParams, fromState.name, fromParams);
	            }
	        });
	    });
	}
	_check_security.$inject = ["$rootScope", "$localStorage", "LoginService"];

	app.run( /* @ngInject */["$rootScope", "$location", "$state", function ($rootScope, $location, $state) {
	    //Bind the `$locationChangeSuccess` event on the rootScope, so that we dont need to 
	    //bind in induvidual controllers.


	    $rootScope.$on('$locationChangeStart', function (event, _newurl) {
	        if ($rootScope.prevUrl == _newurl && window.$_Tawk && window.$_Tawk.isChatMaximized()) {
	            event.preventDefault();
	            window.$_Tawk.toggle();
	        }
	    });

	    $rootScope.$on('$locationChangeSuccess', function (event, _newurl, _oldurl) {
	        $rootScope.actualLocation = $location.path();
	        $rootScope.prevUrl = _oldurl;
	    });

	    $rootScope.$watch(function () {
	        return $location.path();
	    }, function (newLocation, oldLocation) {
	        if ($rootScope.actualLocation === newLocation) {
	            //            alert('Why did you use history back? ' + newLocation + ' <-- ' + $rootScope.actualLocation);
	            //            console.log('Why did you use history back? ' + newLocation + ' <-- ' + $rootScope.actualLocation);

	            var _newloc = newLocation.replace('/', '');
	            if (_newloc == "") _newloc = "home";
	            $state.go(_newloc);
	        }
	    });
	}]);

	app.config(['FFD_CONST', 'ngMetaProvider', _config]);

	app.run(['FFD_CONST', 'ngMeta', '$state', _run_1]);

	function _config(FFD_CONST, ngMetaProvider) {
	    var _home = FFD_CONST.ROUTE_METAS['home'];
	    var _tags = ['description', 'keywords', 'og:title', 'og:type', 'og:url', 'og:image', 'og:title', 'og:description'];

	    ngMetaProvider.setDefaultTitle(_home['title']);
	    angular.forEach(_tags, function (_tag) {
	        ngMetaProvider.setDefaultTag(_tag, _home[_tag]);
	    });

	    //    ngMetaProvider.setDefaultTitle('Transform the way you find business leads | FreshFind Data');

	    //    ngMetaProvider.setDefaultTag('description', 'Tap into new business leads as soon as the data is available');
	    //    ngMetaProvider.setDefaultTag('og:title', 'Transform the way you find business leads | FreshFind Data');
	    //    ngMetaProvider.setDefaultTag('og:type', 'website');
	    //    ngMetaProvider.setDefaultTag('og:url', 'https://www.freshfinddata.com/');
	    //    ngMetaProvider.setDefaultTag('og:image', 'https://www.freshfinddata.com/img/freshfind-og-img-home.jpg');
	    //    ngMetaProvider.setDefaultTag('og:description', 'Tap into new business leads as soon as the data is availables.');

	}

	function _run_1(FFD_CONST, ngMeta, $state) {
	    var _metas = FFD_CONST.ROUTE_METAS;
	    ngMeta.init();

	    angular.forEach(FFD_CONST.ROUTE_METAS, function (_val, _key) {
	        //            console.log(_key, _val);
	        $state.get(_key).meta = _val;
	    });

	    /*
	        $state.get('about').meta = _metas['about'];
	        $state.get('tryit').meta = _metas['tryit'];
	        $state.get('pricing').meta = _metas['pricing'];
	        $state.get('faq').meta = _metas['faq'];
	     
	     */
	}

	module.exports = app;

/***/ },
/* 1 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {
	    __webpack_require__(17)(app);
	    __webpack_require__(22)(app);
	    __webpack_require__(28)(app);
	    __webpack_require__(34)(app);
	    __webpack_require__(42)(app);
	    __webpack_require__(46)(app);
	    __webpack_require__(51)(app);
	    __webpack_require__(55)(app);
	    __webpack_require__(57)(app);
	    __webpack_require__(59)(app);
	    __webpack_require__(64)(app);
	    __webpack_require__(69)(app);
	    __webpack_require__(88)(app);
	};

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(18);
	module.exports = function (app) {

	    app.directive('getStartedNow', _GetStartedNow);

	    function _GetStartedNow() {
	        var _res = {
	            restrict: 'E',
	            replace: 'true',
	            scope: {},
	            template: __webpack_require__(20),
	            controller: ["FFD_CONST", "$scope", "$rootScope", "$state", "$timeout", "$filter", "toaster", "LoginService", _StartNowController],
	            controllerAs: 'vm'
	        };

	        return _res;
	    }

	    function _StartNowController(FFD_CONST, $scope, $rootScope, $state, $timeout, $filter, toaster, LoginService) {

	        var vm = this;

	        //        vm.breakpoint = $rootScope.breakpoint;

	        vm.businesSes = [{ name: "How large is your business?", value: "" }, { name: "MICRO BUSINESS", value: "MICRO BUSINESS" }, { name: "HOME BASE BUSINESS", value: "HOME BASE BUSINESS" }, { name: "SMALL BUSINESS", value: "SMALL BUSINESS" }, { name: "LARGE BUSINESS", value: "LARGE BUSINESS" }];

	        vm.adduser = function ($event) {

	            $event.preventDefault();

	            //            localStorageService.set('_regdata', angular.toJson(vm.regdata));
	            //            $sessionStorage["_regdata"] = vm.regdata;

	            LoginService.createuser(vm.regdata).then(function (data) {
	                if (data.result == 'ERROR') {
	                    toaster.pop('error', data.message);
	                }
	                if (data.result == 'OK') {
	                    $state.go('registersuccess');
	                }
	            });
	        };

	        //        vm.bustypes = InfoFactory.bustypes;
	        //        vm.choices = ChoicesFactory.choices;


	        vm.regdata = {
	            FirstName: '',
	            LastName: '',
	            UserName: '',
	            Email: '',
	            Password: '',
	            CompanyName: '',
	            Title: null,
	            Address: '',
	            City: '',
	            State: '',
	            Zip: '',
	            Country: '',
	            PhoneNumber: '',
	            HearOfUs: '',
	            BusinessType: '',
	            Message: null
	        };

	        vm.options = {};

	        vm.regdataFields = [{
	            key: 'FirstName',
	            type: "bs4Input",
	            templateOptions: {
	                label: 'First Name',
	                type: 'text',
	                placeholder: 'First Name',
	                required: true
	                //                    ,minlength: 5
	                , maxlength: 25
	            },

	            watcher: {
	                listener: function listener(field, newValue, oldValue, scope, stopWatching) {
	                    if (newValue) {
	                        vm.regdata.FirstName = $filter('capitalize')(newValue || '');
	                        console.log('Default Expression: ' + newValue);
	                    }
	                }
	            }
	        }, {
	            key: 'LastName',
	            type: "bs4Input",
	            templateOptions: {
	                label: 'Last Name',
	                type: 'text',
	                placeholder: 'Last Name',
	                required: true
	                //                    ,minlength: 5
	                , maxlength: 25

	            },
	            watcher: {
	                listener: function listener(field, newValue, oldValue, scope, stopWatching) {
	                    if (newValue) {
	                        vm.regdata.LastName = $filter('capitalize')(newValue || '');
	                    }
	                }
	            }

	        }, {
	            key: 'Email',
	            type: "bs4Input",
	            templateOptions: {
	                label: 'E-mail',
	                type: 'email',
	                placeholder: 'E-mail',
	                required: true
	                //                    ,minlength: 10
	                , maxlength: 80,
	                disabled: true
	            }
	        }, {
	            key: 'confirmEmail',
	            type: 'bs4Input',
	            optionsTypes: ['matchField'],
	            model: vm.confirmationModel,
	            templateOptions: {
	                type: 'email',
	                label: 'Confirm email address',
	                placeholder: 'Please re-enter your e-mail',
	                required: true,
	                //                minlength: 6,
	                maxlength: 80

	            },
	            data: {
	                fieldToMatch: 'Email',
	                modelToMatch: vm.model
	            }

	        }, {
	            key: 'UserName',
	            type: "bs4Input",
	            templateOptions: {
	                label: 'User Name',
	                type: 'text',
	                placeholder: 'User Name'
	                //                    ,minlength: 5
	                , maxlength: 25,
	                required: true
	            }
	        }, {
	            key: 'Password',
	            type: "bs4Input",
	            templateOptions: {
	                label: 'Password',
	                type: 'password',
	                placeholder: 'Password',
	                required: true,
	                disabled: true,
	                minlength: 6,
	                maxlength: 20
	            }
	        }, {
	            key: 'confirmPassword',
	            type: 'bs4Input',
	            optionsTypes: ['matchField'],
	            model: vm.confirmationModel,
	            templateOptions: {
	                type: 'password',
	                label: 'Confirm Password',
	                placeholder: 'Please re-enter your password',
	                required: true,
	                minlength: 6,
	                maxlength: 20

	            },
	            data: {
	                fieldToMatch: 'Password',
	                modelToMatch: vm.model
	            }

	        }, {
	            key: 'Zip',
	            type: "bs4Input",
	            templateOptions: {
	                type: 'text',
	                label: 'Zip',
	                placeholder: 'Enter Zip',
	                required: true
	            }
	        }, {
	            key: 'CompanyName',
	            type: "bs4Input",
	            //                    className: 'hidden-sm-down',
	            templateOptions: {
	                type: 'text',
	                label: 'Company Name',
	                placeholder: 'Enter Company name',
	                required: true
	            },
	            hideExpression: 'model.mobile'
	        }

	        /*
	                    ,{
	                        key: 'BusinessType',
	                        type: 'bs4Select',
	                        className: 'hidden-sm-down',
	                        defaultValue: "",
	                        templateOptions: {
	                            label: 'How large is your business?',
	                            placeholder: '',
	                            labelProp: 'name',
	                            valueProp: 'value',
	                            options: vm.businesSes
	                        }
	                    }
	        */

	        , {
	            key: 'BusinessType',
	            type: "bs4Input",
	            templateOptions: {
	                type: 'text',
	                label: 'Business Type',
	                placeholder: 'Enter Business type'
	            },
	            hideExpression: 'model.mobile'
	        }];

	        $timeout(function () {
	            angular.element('input[disabled]').each(function () {
	                angular.element(this).removeAttr('disabled');
	            });
	        }, 5000);

	        //        $scope.vm = vm;
	    }
	};

/***/ },
/* 18 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 19 */,
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<div class=\"row text-xs-center get-started-now\" >\r\n    <div class=\"col-md-7\">\r\n        <img src=\"" + __webpack_require__(21) + "\" class=\"table-responsive\" />\r\n    </div>\r\n    <div class=\"col-md-4 col-md-offset-0\">\r\n        <br /><br />\r\n        <h1 class=\"text-xs-center m-y-1\">Free Registration</h1>\r\n        <h4 class=\"text-xs-center m-y-1\">\r\n            <sup>*</sup>Free Unlimited Searches\r\n            <sup>*</sup>No Credit Card Required\r\n            <sup>*</sup>Risk Free\r\n        </h4>\r\n        <!--\r\n        <form>\r\n            <input type=\"text\" class=\"form-control\" placeholder=\"First Name\" />\r\n            <input type=\"text\" class=\"form-control\" placeholder=\"Last Name\" />\r\n            <input type=\"text\" class=\"form-control\" placeholder=\"E-mail\" />\r\n            <input type=\"text\" class=\"form-control\" placeholder=\"Password\" />\r\n            <a class=\"btn btn-sucess btn-lg_ ffd-btn-base button_green_02 p-x-3 \">Create User</a>\r\n        </form>\r\n        -->\r\n\r\n\r\n\r\n        <form name=\"form\" novalidate>\r\n            <formly-form model=\"vm.regdata\" fields=\"vm.regdataFields\"  form=\"vm.regForm\" >\r\n                <button class=\"btn btn-sucess btn-lg_ ffd-btn-base button_green_02 p-x-1\" ng-disabled=\"vm.regForm.$invalid\" ng-click=\"vm.adduser($event)\">\r\n                    Start Free Unlimited Searches\r\n                </button>\r\n            </formly-form>\r\n        </form>\r\n\r\n\r\n\r\n\r\n\r\n    </div>\r\n</div>";

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "assets/images/create-user-left.png";

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(23);

	module.exports = function (app) {

	    app.directive('topHeader', _TopHeader);
	    app.directive('topHeaderSearch', _TopHeaderSearch);

	    function _TopHeader() {
	        var _res = {
	            restrict: 'E',
	            replace: 'true',
	            template: __webpack_require__(25),
	            controller: ["$scope", "LoginService", _controller],
	            controllerAs: 'vm'
	        };

	        return _res;
	    }

	    function _TopHeaderSearch() {
	        var _res = {
	            restrict: 'E',
	            replace: 'true',
	            template: __webpack_require__(27)
	        };

	        return _res;
	    }

	    function _controller($scope, LoginService) {
	        //        var vm = this;

	        var vm = this;

	        vm.username = "";
	        vm.isLogged = false;
	        vm.changeCC = false;
	        vm.createSubscr = false;

	        /*
	                vm.isAdmin = false;
	                vm.counters = { isLoaded: false, _leftcount: 0 };
	                vm.needActivate = false;
	         */

	        $scope.links = [{ title: 'HOME', link: 'home' }, { title: 'ABOUT', link: 'about' }, { title: 'LeadFormulator' /* 'TRY IT'*/, link: "tryit" }, { title: 'PRICING', link: 'pricing' }, { title: 'FAQ', link: 'faq' }, { title: 'CONTACT', link: 'contact' }, { title: 'HOW IT WORKS', link: 'howitworks' }, { title: 'YOUR DATA PRO', link: 'yourdatapro' }];

	        LoginService.getuserinfo().then(function (data) {
	            console.log('logelem get userinfo');
	            vm.username = data.username;
	            vm.isLogged = data.islogged;
	            vm.changeCC = data.changeCC;
	            vm.createSubscr = data.createSubscr;

	            vm.InvoiceID = data.InvoiceID;
	        });
	    }
	};

/***/ },
/* 23 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 24 */,
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<div ng-class=\"{  'mobile': (breakpoint.xs||breakpoint.sm)  , 'break_xs': breakpoint.xs, 'break_sm': breakpoint.sm, 'break_md': breakpoint.md, 'break_lg': breakpoint.lg }\">\r\n\r\n\r\n    <nav id=\"top-header\" class=\"navbar navbar-dark bg-inverse\" ng-class=\"{  'mobile': (breakpoint.xs||breakpoint.sm)  , 'break_xs': breakpoint.xs, 'break_sm': breakpoint.sm, 'break_md': breakpoint.md, 'break_lg': breakpoint.lg }\">\r\n        <a class=\"navbar-brand\" ui-sref=\"tryit({ scrollto:'.try-now'})\">\r\n\r\n            <img src=\"" + __webpack_require__(26) + "\" />\r\n            <h4>Qualified Business Leads</h4>\r\n        </a>\r\n\r\n        <!-- Toggle Button -->\r\n        <button class=\"navbar-toggler hidden-sm-up pull-right\" type=\"button\" data-toggle=\"collapse\" data-target=\"#nav-content\">\r\n            ☰\r\n        </button>\r\n\r\n        <!-- Nav Content -->\r\n        <div class=\"collapse navbar-toggleable-xs  \" id=\"nav-content\">\r\n            <ul class=\"nav navbar-nav pull-right\">\r\n\r\n<!--  2016-09-28  -->\r\n                <li class=\"nav-item\"  ng-if=\"breakpoint.md || breakpoint.lg\">\r\n                    <a class=\"nav-link btn btn-sm button_blue_01\" ui-sref=\"selectsubscriptiontype\" ng-show=\"vm.createSubscr\">\r\n                        Activate Subscription\r\n                    </a>\r\n                </li>\r\n\r\n\r\n\r\n                <li class=\"nav-item\" ng-repeat=\"item in links\">\r\n                    <a class=\"nav-link\" ui-sref-active=\"active\" ui-sref=\"{{item.link}}\" ng-bind=\"item.title\">{{item.title}}<</a>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n\r\n        <div class=\"_abs _login\">\r\n\r\n            <login-element1st></login-element1st>\r\n\r\n\r\n        </div>\r\n\r\n    </nav>\r\n\r\n\r\n</div>";

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "assets/images/logo/ffd-logo-bg222222.png";

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "\r\n\r\n<nav id=\"top-header\" class=\"navbar navbar-dark bg-inverse \"  ng-class=\"{'mobile': breakpoint.xs||breakpoint.sm}\">\r\n    <a class=\"navbar-brand\" ui-sref=\"home\">\r\n\r\n        <img src=\"" + __webpack_require__(26) + "\" />\r\n\r\n        <h4>Qualified Business Leads</h4>\r\n\r\n\r\n    </a>\r\n\r\n    <!-- Toggle Button -->\r\n    <button class=\"navbar-toggler hidden-sm-up pull-right\" type=\"button\" data-toggle=\"collapse\" data-target=\"#nav-content\">\r\n        ☰\r\n    </button>\r\n\r\n    <!-- Nav Content -->\r\n    <div class=\"collapse navbar-toggleable-xs  \" id=\"nav-content\">\r\n         <login-element2nd></login-element2nd>\r\n    </div>\r\n\r\n\r\n\r\n\r\n</nav>";

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(29);

	module.exports = function (app) {

	    app.directive('footerInfo', _FooterInfo);

	    function _FooterInfo() {
	        var _res = {
	            restrict: 'E',
	            replace: 'true',
	            template: __webpack_require__(33),
	            controller: ["$state", "FFD_CONST", _controller],
	            controllerAs: 'vm'
	        };

	        return _res;

	        function _controller($state, FFD_CONST) {
	            var vm = this;

	            vm.links_1 = [{ title: "About", link: "about" },
	            //                    { title: "Try It", link: "tryit" },
	            { title: "LeadFormulator", link: "tryit" }, { title: "Pricing", link: "pricing" }, { title: "FAQ", link: "faq" }, { title: "Privacy", link: "faq({ scrollto:'#faq-privacy' })" }];

	            vm.links_2 = [{ title: "Contact", link: "contact" }, { title: "How It Works", link: "howitworks" }, { title: "Your Data PRO", link: "yourdatapro" }, { title: "Sign In", link: "login" }, { title: "Terms & Conditions", link: "faq({ scrollto:'#faq-terms'})" }, { title: "NewsLetter", link: "newsletter" }];

	            vm.links_all = vm.links_1.concat(vm.links_2);

	            vm.scl_fb = FFD_CONST.SOCIAL_FB_LINK;
	            vm.scl_tw = FFD_CONST.SOCIAL_TW_LINK;
	            vm.scl_in = FFD_CONST.SOCIAL_IN_LINK;

	            vm.goto = function (_link) {
	                $state.go(_link);
	            };
	        }
	    }
	};

/***/ },
/* 29 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<div class=\"row  footer-info p-x-2\">\r\n\r\n    <div class=\"col-md-5 text-xs-center text-md-left footer-item\">\r\n        <div class=\"row\">\r\n\r\n\r\n            <a class=\"col-xs-10 col-md-8 navbar-brand\" ui-sref=\"home\">\r\n                <img class=\"table-responsive\" src=\"" + __webpack_require__(26) + "\" />\r\n            </a>\r\n\r\n\r\n\r\n        </div>\r\n        <div class=\"row text-center footer-item-text\">\r\n            <div class=\"col-sm-12\">\r\n                755 Main Street-Bldg 2<br />\r\n                Monroe, CT 06468<br />\r\n                <a ui-sref=\"contact\">CustomerService@FreshFindData.com</a>\r\n                <br />\r\n                1.475.298.1100\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"col-md-4 footer-item text-xs-center text-md-left p-x-1\">\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-12\"><h2>SiteMap</h2></div>\r\n        </div>\r\n        <div class=\"row footer-item-text\">\r\n\r\n            <div class=\"col-md-6 hidden-sm-down\">\r\n                <ul class=\"list-unstyled\">\r\n                    <li ng-repeat=\"item in vm.links_1\">\r\n                        <a ui-sref=\"{{item.link}}\" ui-sref-opts=\"{reload: true, notify: true}\">{{item.title}}</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n\r\n            <div class=\"col-md-6 hidden-sm-down\">\r\n                <ul class=\"list-unstyled\">\r\n                    <li ng-repeat=\"item in vm.links_2\">\r\n                        <a ui-sref=\"{{item.link}}\" ui-sref-opts=\"{reload: true, notify: true}\">{{item.title}}</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n\r\n            <div class=\"col-xs-12 hidden-md-up\">\r\n                <ul class=\"list-unstyled\">\r\n                    <li ng-repeat=\"item in vm.links_all\">\r\n                        <a ui-sref=\"{{item.link}}\" ui-sref-opts=\"{reload: true, notify: true}\">{{item.title}}</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"col-md-3  footer-item text-xs-center\">\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-12\"><h2>Follow Us</h2></div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n                <ul class=\"list-inline\">\r\n                    <li><a ng-href=\"{{vm.scl_fb}}\" target=\"_blank\" class=\"fa fa-facebook-official fa-3x\"></a></li>\r\n                    <li><a ng-href=\"{{vm.scl_tw}}\" target=\"_blank\" class=\"fa fa-twitter-square fa-3x\"></a></li>\r\n                    <li><a ng-href=\"{{vm.scl_in}}\" target=\"_blank\" class=\"fa fa-linkedin-square fa-3x\"></a></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</div>";

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(35);
	module.exports = function (app) {

	    app.directive('slideShow', _SlideShow);

	    function _SlideShow() {
	        var _res = {
	            restrict: 'E',
	            replace: 'true',
	            scope: {},
	            template: __webpack_require__(37),
	            controller: _SlideShow_Controller,
	            controllerAs: 'vm'
	        };

	        return _res;
	    }

	    /* @ngInject */
	    function _SlideShow_Controller(InfoFactory, ChoicesFactory) {

	        var vm = this;
	        vm.bustypes = InfoFactory.bustypes;
	        vm.choices = ChoicesFactory.choices;
	        angular.element('#carousel-example-generic').carousel('cycle');
	    }
	    _SlideShow_Controller.$inject = ["InfoFactory", "ChoicesFactory"];;
	};

/***/ },
/* 35 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 36 */,
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<div class=\"row\">\r\n    <div id=\"carousel-example-generic\" class=\"carousel slide\" data-ride=\"carousel\" data-interval=\"5200\" data-pause=\"off\">\r\n\r\n        <ol class=\"carousel-indicators\" >\r\n            <li data-target=\"#carousel-example-generic\" data-slide-to=\"0\" class=\"active\"></li>\r\n            <li data-target=\"#carousel-example-generic\" data-slide-to=\"1\"></li>\r\n            <li data-target=\"#carousel-example-generic\" data-slide-to=\"2\"></li>\r\n            <li data-target=\"#carousel-example-generic\" data-slide-to=\"3\"></li>\r\n        </ol>\r\n\r\n\r\n        <div class=\"carousel-inner\" role=\"listbox\">\r\n            <div class=\"carousel-item  slides  active\">\r\n                <img src=\"" + __webpack_require__(38) + "\" />\r\n                <span class=\"_abs _abs_top\">New Business Leads from FreshFind Data.</span>\r\n                <span class=\"_abs _abs_btm\">Get Started for Only $9.99</span>\r\n            </div>\r\n            <div class=\"carousel-item  slides\">\r\n                <img src=\"" + __webpack_require__(39) + "\" />\r\n                <span class=\"_abs _abs_top\">Customize your lead search.</span>\r\n                <span class=\"_abs _abs_btm\">Phone Numbers Appended Weekly</span>\r\n            </div>\r\n            <div class=\"carousel-item  slides\">\r\n                <img src=\"" + __webpack_require__(40) + "\" />\r\n                <span class=\"_abs _abs_top\">Generate leads from anywhere.</span>\r\n                <span class=\"_abs _abs_btm\">Get Started for Only $9.99</span>\r\n            </div>\r\n            <div class=\"carousel-item  slides\">\r\n                <img src=\"" + __webpack_require__(41) + "\" />\r\n                <span class=\"_abs _abs_top\">Dependable data updated daily.</span>\r\n                <span class=\"_abs _abs_btm\">Phone Numbers Appended Weekly</span>\r\n            </div>\r\n\r\n        </div>\r\n\r\n\r\n        <div class=\"container _abs _abs_form   hidden-md-up\" >\r\n            <div class=\"row\">\r\n                <form>\r\n                    <div class=\"col-xs-8 col-xs-offset-2\">\r\n                        <h1>Show Me Qualified Leads For</h1>\r\n                        <div class=\"select_wrap\">\r\n\r\n                            <select class=\"form-control input-sm\"\r\n                                    ng-model=\"vm.choices.bustype\"\r\n                                    ng-options=\"type as type.name for type in vm.bustypes\"\r\n                                    name=\"inputSubject\"\r\n                                    id=\"inputSubject\"\r\n                                    ng-if_=\"breakpoint.md || breakpoint.lg\"\r\n                                    >\r\n\r\n                            </select>\r\n\r\n                        </div>\r\n\r\n                        <a class=\"btn btn-lg col-sm-12 btn-block m-t-1\" ui-sref=\"search\">\r\n                            Build Your List\r\n                        </a>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n        <div class=\"container _abs _abs_form hidden-sm-down\">\r\n            <div class=\"row\">\r\n                <form>\r\n                    <h1>Show Me Qualified Leads For</h1>\r\n                    <div class=\"select_wrap\">\r\n\r\n                        <select class=\"form-control input-sm\"\r\n                                ng-model=\"vm.choices.bustype\"\r\n                                ng-options=\"type as type.name for type in vm.bustypes\"\r\n                                name=\"inputSubject\"\r\n                                id=\"inputSubject\"></select>\r\n\r\n                    </div>\r\n\r\n                    <a class=\"btn btn-lg col-sm-12 btn-block m-t-1\" ui-sref=\"search\">Build Your List</a>\r\n\r\n\r\n                </form>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"col-xs-12 col-xs-offset-0 m-t-1\">\r\n                    <h4>First 25 leads are free!</h4>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n    </div>\r\n</div>\r\n";

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "assets/images/about.jpg";

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "assets/images/faq.jpg";

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "assets/images/howitworks.jpg";

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "assets/images/yourdatapro.jpg";

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(43);
	module.exports = function (app) {

	    app.directive('infoList', _InfoList);

	    function _InfoList() {
	        var _res = {
	            restrict: 'E',
	            replace: 'true',
	            scope: {},
	            template: __webpack_require__(45),
	            controller: _controller,
	            controllerAs: 'vm'
	        };

	        return _res;
	    }

	    function _controller() {
	        var vm = this;

	        var detail_1 = ['We extract several business attributes through sophisticated text mining technologies.', 'This information is monitored and updated daily, providing you with you purest,most accurate', 'data in the industry.'].join(' ');

	        var detail_2 = ['We gather data on new businesses the', 'minute they go public and make them', 'available to you record fast compared to', 'competitor business lead lists, which', 'are often up to 45 days stale.'].join(' ');

	        var detail_3 = ['You\'re just minutes away from reaching', 'new businesses and existing businesses', 'in your area. Make selections to', 'customize your list. Choose by state,', 'and narrow by city or by 5-digit zip', 'code.'].join(' ');

	        vm.items = [{ title: "Discover the most advanced source of new business data", icon: "fa-bar-chart", detail: detail_1, scrollto: '.hitw-calendar:visible' }, { title: "Now you can tap into new business leads as soon as they are available", icon: "fa-clock-o", detail: detail_2, scrollto: '.hitw-chart:visible' }, { title: "Construct your leads list with options that are important to you", icon: "fa-file-text", detail: detail_3, scrollto: '.hitw-map:visible' }];
	    }
	};

/***/ },
/* 43 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 44 */,
/* 45 */
/***/ function(module, exports) {

	module.exports = "<div>\r\n\r\n    <div class=\"row info-list p-t-2  hidden-sm-down\">\r\n        <div class=\"col-md-4 text-xs-center  p-x-3 info-item\" ng-repeat=\"item in vm.items\">\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-12 p-x-3\">\r\n                    <span class=\"title\">{{item.title}}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"row info-list  hidden-sm-down\">\r\n        <div class=\"col-md-4 text-xs-center  p-x-3 info-item\" ng-repeat=\"item in vm.items\">\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-12\">\r\n                    <span id=\"\" class=\"fa {{item.icon}} fa-4x  p-y-0\"></span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"row info-list  hidden-sm-down\">\r\n        <div class=\"col-md-4 text-xs-center  p-x-3 info-item\" ng-repeat=\"item in vm.items\">\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-12 p-x-3\">\r\n                    <span class=\"detail\">{{item.detail}}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"row info-list p-b-3 hidden-sm-down\">\r\n        <div class=\"col-md-4 text-xs-center  p-x-3 info-item\" ng-repeat=\"item in vm.items\">\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-12\">\r\n                    <a class=\"btn learn-more p-x-3 m-a-2\" ui-sref=\"howitworks({scrollto: item.scrollto })\">Learn More</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n    <div class=\"row info-list p-t-2  p-b-3 hidden-md-up\">\r\n        <div class=\"col-md-4 text-xs-center  p-x-3 info-item\" ng-repeat=\"item in vm.items\">\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-12\">\r\n                    <span class=\"title\">{{item.title}}</span>\r\n                    <span id=\"\"  class=\"fa {{item.icon}} fa-4x  p-y-2\"></span>\r\n                    <span class=\"detail\">{{item.detail}}</span>\r\n                    <br />\r\n                    <a class=\"btn learn-more p-x-3 m-a-2\" ui-sref=\"howitworks({scrollto: item.scrollto })\">Learn More</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n\r\n\r\n\r\n</div>";

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(47);
	/* @ngInject */
	module.exports = function (app) {

	    app.directive('ffdSearchPanel', _FfdSearchPanelDirective);
	    app.directive('ffdSearchPanelItem', _FfdSearchPanelItemDirective);

	    function _FfdSearchPanelDirective() {
	        var _res = {
	            restrict: 'E',
	            replace: true,
	            //            scope:true,
	            transclude: true,
	            template: __webpack_require__(49)
	        };

	        return _res;
	    }

	    function _FfdSearchPanelItemDirective() {
	        var _res = {
	            restrict: 'E',
	            replace: 'true',
	            scope: { idclps: '@', idhdng: '@', title: '@', info: '@' },
	            transclude: true,
	            /*
	            transclude:
	                {
	                    'title' : '?itemTitle',
	                    'info'  : '?itemInfo'
	            },*/
	            template: __webpack_require__(50)
	            /*
	            ,link: function (scope, element, attrs) {
	                scope =
	                    {
	                        id_clps: attrs.idClps
	                    };
	            }
	            */
	        };

	        return _res;
	    }
	};
	module.exports.$inject = ["app"];

/***/ },
/* 47 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 48 */,
/* 49 */
/***/ function(module, exports) {

	module.exports = "<div id=\"accordion\" role=\"tablist\" aria-multiselectable=\"true\">\r\n    <ng-transclude>\r\n    </ng-transclude>\r\n</div>";

/***/ },
/* 50 */
/***/ function(module, exports) {

	module.exports = "<div class=\"panel panel-default\">\r\n\r\n    <div class=\"panel-heading\" role=\"tab\" id=\"{{idhdng}}\">\r\n\r\n\r\n\r\n        <a data-toggle=\"collapse\"\r\n           class=\"collapsed btn-block\"\r\n           data-parent=\"#accordion\"\r\n           href=\"#{{idclps}}\"\r\n           aria-expanded=\"false\"\r\n           aria-controls=\"{{idclps}}\"\r\n            >\r\n\r\n\r\n\r\n            <table>\r\n                <tr>\r\n                    <td>&nbsp;&nbsp;</td>\r\n                    <td>\r\n                        <span class=\"fa fa-chevron-down fa-1x\"></span>\r\n                        <span class=\"fa fa-chevron-up fa-1x\"></span>\r\n                    </td>\r\n                    <td>&nbsp;&nbsp;</td>\r\n                    <td>\r\n                        <span class=\"text_part_title_gray_01 _lh100\">{{title}}</span>\r\n                        <br />\r\n                        <span class=\"text_part_info_gray_01 _lh100\">{{info}}</span>\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </a>\r\n    </div>\r\n\r\n    <div id=\"{{idclps}}\"\r\n         class=\"panel-collapse collapse\"\r\n         role=\"tabpanel\"\r\n         aria-labelledby=\"{{idhdng}}\">\r\n        <ng-transclude>\r\n        </ng-transclude>\r\n    </div>\r\n\r\n</div>";

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(52);

	module.exports = function (app) {

	    app.directive('loginElement1st', _LoginElementDirective);

	    function _LoginElementDirective() {
	        // Usage:
	        //     <LoginElementdirective></LoginElementdirective>
	        // Creates:
	        // 
	        var directive = {
	            restrict: 'EA',
	            replace: true,
	            template: __webpack_require__(54),
	            //            scope: false,
	            controller: ["$state", "$scope", "LoginService", "toaster", loginElement1st_controller],
	            controllerAs: 'vm'
	        };
	        return directive;

	        function loginElement1st_controller($state, $scope, LoginService, toaster) {
	            var vm = this;
	            vm.username = "";
	            vm.isLogged = false;
	            vm.isAdmin = false;

	            $scope.$on('ChangeUserStatus', function (event, data) {

	                /*
	                                vm.username = data.username;
	                                vm.isLogged = data.islogged;
	                                vm.isAdmin = data.isadmin;
	                */

	                vm.username = data.username;
	                vm.isLogged = data.islogged;
	                vm.isAdmin = data.isadmin;
	                vm.changeCC = data.changeCC;
	                vm.createSubscr = data.createSubscr;
	            });

	            vm.logout = function () {

	                console.log('start logout');
	                LoginService.logout().then(function (data) {

	                    LoginService.getuserinfo().then(function (data) {
	                        console.log('logout rez  ', data);
	                        vm.username = data.username;
	                        vm.isLogged = data.islogged;
	                        vm.isAdmin = data.isadmin;
	                        $state.go('home');
	                        toaster.pop('info', 'You are logged out !');
	                    });
	                });
	            };

	            vm.login = function (_suc_state) {
	                LoginService.enterloginform(_suc_state || $state.current.name, $state.current.name);
	            };

	            LoginService.getuserinfo().then(function (data) {
	                console.log('logelem get userinfo');
	                vm.username = data.username;
	                vm.isLogged = data.islogged;
	                /*  2016-09-28*/
	                vm.changeCC = data.changeCC;
	                vm.createSubscr = data.createSubscr;

	                vm.InvoiceID = data.InvoiceID;
	            });
	        }
	    }
	};

/***/ },
/* 52 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 53 */,
/* 54 */
/***/ function(module, exports) {

	module.exports = "<div class=\"btn-group  login-element-1\" data-toggle=\"buttons\">\r\n    <a class=\"btn  btn-link\" ng-show=\"vm.isAdmin\" ui-sref='admin'>Admin Panel</a>\r\n    <a class=\"btn  btn-link\" ng-show=\"vm.isLogged\" ui-sref='profile'>{{vm.username}} Account Settings</a>\r\n    <a class=\"btn  btn-link\" ng-show=\"vm.isLogged\" style=\"cursor:pointer;\" ng-click=\"vm.logout()\">Sign Out</a>\r\n    <a class=\"btn  btn-link\" ng-hide=\"vm.isLogged\" style=\"cursor:pointer;\" ng-click=\"vm.login('search')\">Sign In</a>\r\n    <a class=\"btn  btn-link\" ng-hide=\"vm.isLogged\" style=\"cursor:pointer;\" ui-sref=\"register\">Sign Up</a>\r\n</div>\r\n\r\n";

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    app.directive('loginElement2nd', _LoginElementDirective);

	    //    LoginElementDirective.$inject = ['$window', '$state', 'LoginService'];

	    //    function _LoginElementDirective($window, $state, LoginService)     
	    function _LoginElementDirective() {
	        // Usage:
	        //     <LoginElementdirective></LoginElementdirective>
	        // Creates:
	        // 
	        var directive = {
	            restrict: 'EA',
	            replace: true,
	            template: __webpack_require__(56),
	            scope: {},
	            controller: ["$state", "$scope", "LoginService", "GetResultsFactory", "toaster", loginElement2nd_controller],
	            controllerAs: 'vm'
	        };
	        return directive;

	        /* @ngInject */
	        function loginElement2nd_controller($state, $scope, LoginService, GetResultsFactory, toaster) {
	            var vm = this;

	            vm.username = "";
	            vm.isLogged = false;
	            vm.isAdmin = false;
	            vm.changeCC = false;
	            vm.createSubscr = false;
	            vm.counters = { isLoaded: false, _leftcount: 0 };
	            vm.needActivate = false;

	            GetResultsFactory.getCounters().then(function (data) {
	                vm.counters.isLoaded = true;
	                vm.counters._leftcount = data.leftcount;
	                vm.needActivate = vm.counters._leftcount == 0;
	            });

	            $scope.$on('ChangeUserStatus', function (event, data) {
	                vm.username = data.username;
	                vm.isLogged = data.islogged;
	                vm.isAdmin = data.isadmin;
	                vm.changeCC = data.changeCC;
	                vm.createSubscr = data.createSubscr;
	            });

	            vm.logout = function () {

	                console.log('start logout');
	                LoginService.logout().then(function (data) {

	                    LoginService.getuserinfo().then(function (data) {
	                        console.log('logout rez  ', data);
	                        vm.username = data.username;
	                        vm.isLogged = data.islogged;
	                        vm.isAdmin = data.isadmin;
	                        vm.changeCC = data.changeCC;
	                        vm.createSubscr = data.createSubscr;
	                        vm.InvoiceID = data.InvoiceID;

	                        $state.go('home');
	                        toaster.pop('info', 'You are logged out !');
	                    });
	                });
	            };

	            vm.login = function () {
	                LoginService.enterloginform($state.current.name, $state.current.name);
	            };

	            LoginService.getuserinfo().then(function (data) {
	                console.log('logelem get userinfo');
	                vm.username = data.username;
	                vm.isLogged = data.islogged;
	                vm.isAdmin = data.isadmin;
	                vm.changeCC = data.changeCC;
	                vm.createSubscr = data.createSubscr;
	                vm.InvoiceID = data.InvoiceID;
	            });
	        }
	        loginElement2nd_controller.$inject = ["$state", "$scope", "LoginService", "GetResultsFactory", "toaster"];
	    }
	};

/***/ },
/* 56 */
/***/ function(module, exports) {

	module.exports = "<ul class=\"nav navbar-nav pull-right\">\r\n\r\n\r\n    <li class=\"nav-item\" ng-show=\"vm.isAdmin\">\r\n        <a class=\"nav-link\" ui-sref='admin'>Admin Panel</a>\r\n    </li>\r\n\r\n \r\n\r\n\r\n    <li class=\"nav-item\">\r\n        <a class=\"nav-link btn btn-sm button_blue_01\" ui-sref=\"selectsubscriptiontype\" ng-show=\"vm.createSubscr\">\r\n            Activate Subscription\r\n        </a>\r\n    </li>\r\n\r\n    <li class=\"nav-item\" ng-show=\"vm.isLogged\">\r\n        <a class=\"nav-link\" ui-sref='profile' title=\"InvoiceID={{vm.InvoiceID}}\">Account Settings</a>\r\n    </li>\r\n    <li class=\"nav-item\">\r\n        &nbsp;&nbsp;&nbsp;&nbsp;\r\n    </li>\r\n\r\n    <li class=\"nav-item\" ng-show=\"vm.isLogged\">\r\n        <a class=\"nav-link\" ui-sref='profile'>{{vm.username}} Account Settings</a>\r\n    </li>\r\n\r\n    <li class=\"nav-item\">\r\n        <a class=\"nav-link\" ng-show=\"vm.isLogged\" style=\"cursor:pointer;\" ng-click=\"vm.logout()\">Sign out</a>\r\n        <a class=\"nav-link\" ng-hide=\"vm.isLogged\" style=\"cursor:pointer;\" ng-click=\"vm.login()\">Sign In</a>\r\n    </li>\r\n    <li class=\"nav-item\">\r\n        <a class=\"nav-link\" ng-hide=\"vm.isLogged\" style=\"cursor:pointer;\" ui-sref=\"register\">Sign Up</a>\r\n    </li>\r\n</ul>\r\n";

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    /* @ngInject */

	    app.directive('currentCriteries', _CurrentCriteriesDirective);

	    function _CurrentCriteriesDirective() {

	        var directive = {
	            restrict: 'EA',
	            replace: false,
	            template: __webpack_require__(58),
	            scope: { choices: '=' }
	        };

	        return directive;

	        /* @ngInject */
	        function _controller(ChoicesFactory) {
	            var vm = this;
	            vm.choices = ChoicesFactory.choices;
	        }
	        _controller.$inject = ["ChoicesFactory"];
	    }
	};

/***/ },
/* 58 */
/***/ function(module, exports) {

	module.exports = "<span ng-if=\"!!choices.states.length\">\r\n    <span class=\"text_gray_01\">State:</span>\r\n    <span class=\"text_orange_01\" ng-if=\"choices.states.length==0\">&nbsp;&ndash;&nbsp;</span>\r\n    <span class=\"text_orange_01\" ng-repeat=\"state in choices.states\">\r\n        {{state.shortname}}\r\n        {{$last ? '' : ($index==choices.states.length-2) ? ' and ' : ', '}}\r\n    </span>\r\n</span>\r\n\r\n\r\n<span ng-if=\"!!choices.counties.length\">\r\n    <span class=\"text_gray_01\">Counties:</span>\r\n    <span class=\"text_orange_01\" ng-repeat=\"county in choices.counties\">\r\n        {{county.Name+' ('+county.State+')'}}\r\n        {{$last ? '' : ($index==choices.cities.length-2) ? ' and ' : ', '}}\r\n    </span>\r\n</span>\r\n\r\n\r\n\r\n<span ng-if=\"!!choices.cities.length\">\r\n    <span class=\"text_gray_01\">City:</span>\r\n    <span class=\"text_orange_01\" ng-if=\"!choices.cities.length\">&nbsp;&ndash;&nbsp;</span>\r\n    <span class=\"text_orange_01\" ng-repeat=\"city in choices.cities\">\r\n        {{city.Name+' ('+city.State+')'}}\r\n        {{$last ? '' : ($index==choices.cities.length-2) ? ' and ' : ', '}}\r\n    </span>\r\n</span>\r\n\r\n\r\n\r\n<span class=\"text_gray_01\" ng-if=\"choices.chkEmails\">E-mail:</span>\r\n<span class=\"text_orange_01\" ng-bind=\"choices.chkEmails?'Yes':'No'\" ng-if=\"choices.chkEmails\"></span>\r\n\r\n<span class=\"text_gray_01\" ng-if=\"choices.chkPhoneNumbers\">Phone:</span>\r\n<span class=\"text_orange_01\" ng-bind=\"choices.chkPhoneNumbers?'Yes':'No'\" ng-if=\"choices.chkPhoneNumbers\"></span>\r\n\r\n\r\n<span class=\"text_gray_01\" ng-if=\"choices.chkContactNames\">Contact:</span>\r\n<span class=\"text_orange_01\" ng-bind=\"choices.chkContactNames?'Yes':'No'\" ng-if=\"choices.chkContactNames\"></span>\r\n\r\n\r\n\r\n<span ng-if=\"!!choices.zipForRadius && !!choices.radiusMiles\">\r\n    <!--   <br />  -->\r\n    <span class=\"text_gray_01\">Zip:</span>\r\n    <span class=\"text_orange_01\">\r\n        {{choices.zipForRadius}} ({{choices.radiusMiles}} mi)\r\n    </span>\r\n</span>\r\n\r\n<span ng-if=\"!!choices.zipcodes.length\">\r\n    <!--   <br />  -->\r\n    <span class=\"text_gray_01\">Zip Codes:</span>\r\n    <span class=\"text_orange_01\" ng-repeat=\"zipcode in choices.zipcodes\">\r\n        {{zipcode}}\r\n        {{$last ? '' : ($index==choices.zipcodes.length-2) ? ' and ' : ', '}}\r\n    </span>\r\n</span>\r\n\r\n<span ng-if=\"!!choices.areacodes.length\">\r\n    <span class=\"text_gray_01\">Area Codes:</span>\r\n    <span class=\"text_orange_01\" ng-repeat=\"areacode in choices.areacodes\">\r\n        {{areacode}}\r\n        {{$last ? '' : ($index==choices.areacodes.length-2) ? ' and ' : ', '}}\r\n    </span>\r\n</span>\r\n\r\n<span ng-if=\"!!choices.companysizes.length\">\r\n    <span class=\"text_gray_01\">Company Sizes:</span>\r\n    <span class=\"text_orange_01\" ng-repeat=\"cs in choices.companysizes\">\r\n        {{cs.name}}\r\n        {{$last ? '' : ($index==choices.companysizes.length-2) ? ' and ' : ', '}}\r\n    </span>\r\n</span>\r\n\r\n<span ng-if=\"!!choices.salesvolumes.length\">\r\n    <span class=\"text_gray_01\">Sales Volumes:</span>\r\n    <span class=\"text_orange_01\" ng-repeat=\"sv in choices.salesvolumes\">\r\n        {{sv.name}}\r\n        {{$last ? '' : ($index==choices.salesvolumes.length-2) ? ' and ' : ', '}}\r\n    </span>\r\n</span>\r\n\r\n\r\n<span ng-if=\"!!choices.siccodes.length\">\r\n    <br />\r\n    <span class=\"text_gray_01\">Industry:</span>\r\n    <span class=\"text_orange_01\" ng-repeat=\"siccode in choices.siccodes\">\r\n        {{siccode.code+' '+siccode.name}}\r\n        {{$last ? '' : ($index==choices.siccodes.length-2) ? ' and ' : ', '}}\r\n    </span>\r\n</span>\r\n\r\n<span ng-if=\"!!choices.keywords.length\">\r\n    <span class=\"text_gray_01\">Business Keywords:</span>\r\n    <span class=\"text_orange_01\" ng-repeat=\"kw in choices.keywords\">\r\n        {{kw.Keyword}}\r\n        {{$last ? '' : ($index==choices.keywords.length-2) ? ' and ' : ', '}}\r\n    </span>\r\n</span>\r\n\r\n\r\n<span class=\"text_gray_01\">RBDI:</span>\r\n<span class=\"text_orange_01\" ng-if=\"!choices.rbdiBusiness && !choices.rbdiIndividual\">\r\n    All\r\n</span>\r\n\r\n<span class=\"text_orange_01\" ng-if=\"choices.rbdiBusiness\">\r\n    Commercial\r\n</span>\r\n<span class=\"text_orange_01\" ng-if=\"choices.rbdiBusiness && choices.rbdiIndividual\">\r\n    &nbsp;and&nbsp;\r\n</span>\r\n<span class=\"text_orange_01\" ng-if=\"choices.rbdiIndividual\">\r\n    Home Based Business\r\n</span>\r\n";

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(60);

	/* @ngInject */

	module.exports = function (app) {

	    app.directive('faqPanel', _FaqPanelDirective);
	    app.directive('faqPanelItem', _FaqPanelItemDirective);

	    function _FaqPanelDirective() {
	        var _res = {
	            restrict: 'E',
	            replace: true,
	            scope: { title: '@' },
	            transclude: true,
	            template: __webpack_require__(62)
	        };

	        return _res;
	    }

	    function _FaqPanelItemDirective() {
	        var _res = {
	            restrict: 'E',
	            replace: 'true',
	            scope: { iditem: '@', title: '@' },
	            transclude: true,
	            template: __webpack_require__(63)
	        };

	        return _res;
	    }
	};
	module.exports.$inject = ["app"];

/***/ },
/* 60 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 61 */,
/* 62 */
/***/ function(module, exports) {

	module.exports = "<div>\r\n\r\n    <!--\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12 part-header_bg-color\">\r\n            <h2>{{title}}</h2>\r\n        </div>\r\n    </div>\r\n    -->\r\n\r\n    <orange-bar title=\"{{title}}\" ></orange-bar>\r\n\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-md-8 col-md-offset-2  col-xs-11 col-xs-offset-0 \">\r\n            <ng-transclude>\r\n            </ng-transclude>\r\n        </div>\r\n    </div>\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n";

/***/ },
/* 63 */
/***/ function(module, exports) {

	module.exports = "<div class=\"faq-panel-item\">\r\n    <p class=\"m-y-0\">\r\n        <a class=\"btn btn-link faq-item-title\" data-toggle=\"collapse\" href=\"#{{iditem}}\" aria-expanded=\"false\" aria-controls=\"{{iditem}}\">\r\n            <i class=\"fa fa-caret-right fa-fw color_blue_01\"></i>\r\n            <i class=\"fa fa-caret-down  fa-fw color_blue_01\"></i>\r\n            {{title}}\r\n        </a>\r\n    </p>\r\n\r\n\r\n    <div class=\"collapse faq-item-text\" id=\"{{iditem}}\">\r\n        <p class=\"p-l-3\">\r\n            <ng-transclude>\r\n                Scelerisque euismod, iaculis eu lacus nunc mi elit, vehicula ut laoreet ac, aliquam sit amet justo nunc tempor, metus vel placerat suscipit, orci nisl iaculis eros, a tincidunt nisi odio eget lorem nulla condimentum tempor mattis ut vitae feugiat augue.\r\n                Cras ut metus a risus iaculis scelerisque eu ac ante fusce non varius purus aenean nec magna felis fusce vestibulum velit mollis odio sollicitudin lacinia aliquam posuere, sapien elementum lobortis tincidunt, turpis dui ornare nisl, sollicitudin interdum turpis nunc eget.\r\n                Sem nulla eu ultricies orci praesent id augue nec lorem pretium congue sit amet ac nunc fusce iaculis lorem eu diam hendrerit at mattis purus dignissim vivamus mauris tellus, fringilla vel dapibus a, blandit quis erat vivamus elementum aliquam luctus.\r\n                Etiam fringilla pretium sem vitae sodales mauris id nulla est praesent laoreet, metus vel auctor aliquam, eros purus vulputate leo, eget consequat neque quam id tellus duis ultricies tempor tortor, vitae dignissim ligula mattis nec in hac habitasse platea dictumst.\r\n                Ut arcu enim, dictum quis ultrices id, sagittis eget nulla sed nunc mi, congue ut ultricies ac, varius a eros donec porttitor, libero fermentum fringilla laoreet, eros arcu sodales ante, ut dictum risus lectus vel quam integer ultricies, nunc eget.\r\n            </ng-transclude>\r\n        </p>\r\n    </div>\r\n\r\n</div>\r\n";

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	//require('./FaqPanelsDirectives.scss');

	/* @ngInject */

	__webpack_require__(65);

	module.exports = function (app) {

	    app.directive('orangeBar', _OrangeBar);
	    app.directive('orangeBar2', _OrangeBar2);

	    function _OrangeBar() {
	        var _res = {
	            restrict: 'E',
	            replace: true,
	            scope: { title: '@' },
	            transclude: true,
	            template: __webpack_require__(67)
	            /*
	            ,controller: function ($scope, $sce) {
	                  $scope.$watch('title', function (value) {
	                    $scope.htmltitle = $sce.trustAsHtml(value);
	                })
	            }*/
	        };

	        return _res;
	    }

	    function _OrangeBar2() {
	        var _res = {
	            restrict: 'E',
	            replace: true,
	            scope: { title: '@' },
	            transclude: true,
	            template: __webpack_require__(68)
	        };

	        return _res;
	    }
	};

/***/ },
/* 65 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 66 */,
/* 67 */
/***/ function(module, exports) {

	module.exports = "<div class=\"row orange-bar\">\r\n    <div class=\"col-md-12 part-header_bg-color\">\r\n        <div class=\"row  p-y-1 \">\r\n            <div class=\"col-md-5 col-md-offset-1\">\r\n                <h2 ng-bind-html=\"title\"></h2>\r\n            </div>\r\n            <div class=\"col-md-4 col-md-offset-2\">\r\n                <ng-transclude>\r\n                </ng-transclude>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n";

/***/ },
/* 68 */
/***/ function(module, exports) {

	module.exports = "<div class=\"row\">\r\n    <div class=\"col-md-12 part-header_bg-color\">\r\n        <div class=\"row  p-y-1 \">\r\n            <div class=\"col-md-10 col-md-offset-1 text-md-center\">\r\n                <h2 ng-bind-html=\"title\"></h2>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n";

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(70);

	module.exports = function (app) {
	    __webpack_require__(72)(app);
	    __webpack_require__(73)(app);
	    __webpack_require__(79)(app);
	};

/***/ },
/* 70 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 71 */,
/* 72 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (app) {
	    app.controller('SaveTemplateController', SaveTemplateController);

	    /* @ngInject */
	    function SaveTemplateController($scope, LoginService) {
	        $scope.data = {
	            templatename: "",
	            load: false,
	            random: true,
	            limit: 0, //5000,
	            max_val: 0, //5000,
	            isenable: false
	        };

	        LoginService.getuserinfo().then(function (data) {
	            var _leftcount = parseInt(data.leftcount);
	            _leftcount = isNaN(_leftcount) ? 0 : _leftcount;
	            if (_leftcount < 5000) {
	                $scope.max_val = _leftcount;
	                $scope.limit = _leftcount;
	            }
	        });

	        $scope.$watch("data.templatename", function (_new, _old) {
	            $scope.data.isenable = $scope.data.templatename != "" && $scope.data.templatename.length > 0;
	        });
	    }
	    SaveTemplateController.$inject = ["$scope", "LoginService"];

	    //    return SaveTemplateController;

	};

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    app.directive('searchBlock', _directive);
	    app.directive('mobileSearchBlock', _mobiledirective);

	    function _directive() {
	        var _res = {
	            restrict: 'E',
	            replace: true,
	            scope: false,
	            template: __webpack_require__(74),
	            controller: __webpack_require__(75)(app),
	            controllerAs: 'vm'
	        };

	        return _res;
	    }

	    function _mobiledirective() {
	        var _res = {
	            restrict: 'E',
	            replace: true,
	            scope: false,
	            template: __webpack_require__(78),
	            controller: __webpack_require__(75)(app),
	            controllerAs: 'vm'
	        };

	        return _res;
	    }
	};

/***/ },
/* 74 */
/***/ function(module, exports) {

	module.exports = "\r\n\r\n<div class=\"row m-t-2\" ng-init='vm.breakpoint=breakpoint'>\r\n    <div class=\"col-md-12\">\r\n\r\n\r\n        <div class=\"row\">\r\n\r\n            <div class=\"col-md-5\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-10 col-md-offset-1\">\r\n                        <span class=\"text_part_title_gray_01\">Current Criteria:</span>\r\n                        <br />\r\n                        <current-criteries choices=\"vm.choices\"></current-criteries>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-7\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-10 col-md-offset-1 text-md-right\">\r\n                        <a class=\"btn btn-danger-outline btn-sm  btn_fsize_gr01\" ng-click=\"vm.set2start()\">Reset Filters</a>\r\n                        <a class=\"btn btn-sm button_orange_01  btn_fsize_gr01\" ng-class=\"{'disabled':vm.results.isLoaded && vm.results.isLoaded2}\" ng-click=\"vm.refresh_counters()\">\r\n                            Update Count\r\n                        </a>\r\n                        <a class=\"btn btn-sm button_orange_01  btn_fsize_gr01\" ng-click=\"vm.previewlist_m0()\"\r\n                           ng-bind=\"vm.results.isLoaded&&vm.results.islogged&&(!vm.results.createSubscr)?'View List':'Preview List'\">\r\n                            View List\r\n                        </a>\r\n                        <a class=\"btn btn-sm button_orange_01  btn_fsize_gr01\" ng-click=\"vm.getlist_m0()\"\r\n                           ng-show=\"false&&vm.results.isLoaded&&vm.results.islogged\">\r\n                            Download List\r\n                        </a>\r\n                        <a class=\"btn btn-sm button_orange_01  btn_fsize_gr01\" ng-click=\"vm.save_search()\"\r\n                           ng-show=\"vm.results.isLoaded&&vm.results.islogged&&(!vm.results.createSubscr)\">\r\n                            Save Search and Auto Notify\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row\"><br /><br /></div>\r\n\r\n        <div class=\"row\">\r\n\r\n            <div class=\"col-md-7 \">\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-5 col-md-offset-1\">\r\n                        <span class=\"text_part_title_gray_01\">Select Business Database:</span><br />\r\n\r\n\r\n                        <select class=\"form-control input-sm\"\r\n                                ng-model=\"vm.choices.bustype\"\r\n                                ng-change=\"vm.set2start()\"\r\n                                ng-options=\"type as type.name for type in vm.bustypes\"\r\n                                name=\"inputSubject\"\r\n                                id=\"inputSubject\"></select>\r\n\r\n\r\n                    </div>\r\n                    <div class=\"col-md-5 col-md-offset-1\" ng-show=\"vm.choices.bustype.id==1\">\r\n                        <div class=\"row\">\r\n                            <span class=\"text_part_title_gray_01\">Business Start Date Range:</span><br />\r\n                        </div>\r\n                        <div class=\"row\">\r\n\r\n                            <div class=\"col-md-2 text-md-right p-r-1 from_div\">\r\n                                <span class=\"text_part_title_gray_01\">From</span>\r\n                            </div>\r\n\r\n                            <div class=\"col-md-4\">\r\n                                <div class=\"row\">\r\n                                    <input type=\"text\"\r\n                                           ui-date=\"vm.dateoptions_start\"\r\n                                           ui-date-format=\"mm/dd/yy\"\r\n                                           ng-model=\"vm.choices.date_start_\"\r\n                                           class=\"form-control form-control-md\"\r\n                                           name=\"date_start\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"col-md-2  text-md-right p-r-1 to_div\">\r\n                                <span class=\"text_part_title_gray_01\">To</span>\r\n                            </div>\r\n\r\n\r\n                            <div class=\"col-md-4\">\r\n                                <div class=\"row\">\r\n                                    <input type=\"text\"\r\n                                           ui-date=\"vm.dateoptions_end\"\r\n                                           ui-date-format=\"mm/dd/yy\"\r\n                                           ng-model=\"vm.choices.date_end_\"\r\n                                           class=\"form-control form-control-md\"\r\n                                           name=\"date_end\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n            <div class=\"col-md-5 \">\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-10 col-md-offset-1\">\r\n\r\n\r\n\r\n                        <div class=\"row\" ng-show=\"vm.results.isLoaded&&vm.results.islogged&&vm.results._leftcount>0\">\r\n                            <div class=\"col-md-4\">\r\n                                <span class=\"text_count_value_orange_01\" ng-bind=\"vm.results._count|number\"></span><br />\r\n                                <span class=\"text_count_explain_gray_01\">New leads for this Period</span>\r\n                            </div>\r\n                            <div class=\"col-md-4\">\r\n                                <span class=\"text_count_value_orange_01\" ng-bind=\"vm.results._leftcount|number:0\"></span><br />\r\n                                <span class=\"text_count_explain_gray_01\">Leads Remaining</span>\r\n                            </div>\r\n                            <div class=\"col-md-4\">\r\n                                <a class=\"btn btn-sm button_green_01   btn_fsize_gr01\" ng-class=\"{'disabled':vm.results.isLoaded && vm.results.isLoaded2}\" ng-click=\"vm.refresh_counters()\">\r\n                                    Search\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n                        <div class=\"row\" ng-show=\"(!(vm.results.isLoaded&&vm.results._leftcount>0))&&(!(vm.results.createSubscr&&!vm.results._demo))\">\r\n                            <div class=\"col-md-8\">\r\n                                <span class=\"text_count_value_orange_01\" ng-bind=\"vm.results._count|number\"></span><br />\r\n                                <span class=\"text_count_explain_gray_01\">New leads for this Period</span>\r\n                            </div>\r\n                            <div class=\"col-md-4\">\r\n                                <a class=\"btn btn-sm button_green_01  btn_fsize_gr01\" ng-class=\"{'disabled':vm.results.isLoaded && vm.results.isLoaded2}\" ng-click=\"vm.refresh_counters()\">\r\n                                    Search\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n                        <div class=\"row\" ng-show=\"(!(vm.results.isLoaded&&vm.results._leftcount>0))&&(vm.results.createSubscr&&!vm.results._demo)\">\r\n                            <div class=\"col-md-4\">\r\n                                <span class=\"text_count_value_orange_01\" ng-bind=\"vm.results._count|number\"></span><br />\r\n                                <span class=\"text_count_explain_gray_01\">New leads for this Period</span>\r\n                            </div>\r\n                            <div class=\"col-md-4\">\r\n                                <span class=\"text_count_value_orange_01\" ng-bind=\"vm.results._count>25?25:vm.results._count|number:0\"></span><br />\r\n                                <span class=\"text_count_explain_gray_01\">Leads Remaining</span>\r\n                            </div>\r\n                            <div class=\"col-md-4\">\r\n                                <a class=\"btn btn-sm button_green_01  btn_fsize_gr01\" ng-class=\"{'disabled':vm.results.isLoaded && vm.results.isLoaded2}\" ng-click=\"vm.refresh_counters()\">\r\n                                    Search\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n\r\n                        <div class=\"row\" ng-hide=\"vm.results.isLoaded\">\r\n                            <div class=\"col-md-8 text-xs-center\">\r\n                                <i class=\"fa fa-spinner fa-pulse fa-3x\"></i>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <div class=\"row\"><br /><br /></div>\r\n\r\n        <div class=\"row searchform\">\r\n\r\n            <div class=\"col-md-7 \">\r\n                <div class=\"row\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    <div class=\"col-md-10 col-md-offset-1 ffd-search-panel\">\r\n                        <span class=\"text_part_title_gray_01\">Search Criteria</span>\r\n\r\n                        <ffd-search-panel>\r\n\r\n                            <ffd-search-panel-item idclps=\"clps01\" idhdng=\"hdng01\"\r\n                                                   title=\"City:\" info=\"Select businessess within one or more cities\">\r\n                                <div class=\"row\">\r\n                                    <div class=\"form-group  col-md-12\">\r\n                                        <div class=\"col-md-12\">\r\n                                            <ui-select class=\"form-control input-sm\" multiple ng-model=\"vm.choices.cities\" theme=\"bootstrap\">\r\n                                                <ui-select-match placeholder=\"Enter at least 3 letters to select cities ...\">{{$item.Name+' ('+$item.State+')'}}</ui-select-match>\r\n                                                <ui-select-choices refresh=\"vm.getcities($select.search)\" repeat=\"city in vm.cities | filter:$select.search\">\r\n                                                    {{city.Name+' ('+city.State+')'}}\r\n                                                </ui-select-choices>\r\n                                            </ui-select>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </ffd-search-panel-item>\r\n\r\n                            <ffd-search-panel-item idclps=\"clps02\" idhdng=\"hdng02\"\r\n                                                   title=\"State:\" info=\"Search businesses by state\">\r\n                                <div class=\"row\">\r\n                                    <div class=\"form-group col-md-12\">\r\n                                        <div class=\"col-md-12\">\r\n                                            <ui-select class=\"form-control input-sm\" multiple ng-model=\"vm.choices.states\" theme=\"bootstrap\">\r\n                                                <ui-select-match placeholder=\"Click to select states...\">{{$item.shortname}}</ui-select-match>\r\n                                                <ui-select-choices repeat=\"state in vm.states | filter:$select.search\">\r\n                                                    {{state.longname+' ('+state.shortname+')'}}\r\n                                                </ui-select-choices>\r\n                                            </ui-select>\r\n                                        </div>\r\n                                    </div>\r\n                                    <br />\r\n                                </div>\r\n\r\n\r\n\r\n                            </ffd-search-panel-item>\r\n\r\n                            <ffd-search-panel-item idclps=\"clps03\" idhdng=\"hdng03\"\r\n                                                   title=\"Zip Code:\" info=\"Select a zip code or radius from a given zip code\">\r\n\r\n                                <div class=\"row\">\r\n\r\n                                    <div class=\"form-group col-md-12 \">\r\n\r\n                                        <label class=\"col-sm-3 text-left\">ZIP CODES</label>\r\n\r\n                                        <div class=\"col-sm-9\">\r\n                                            Enter ZIP Codes or ZIP Code ranges by entering the first and\r\n                                            last ZIP Codes(ex: 68005-68123).\r\n                                        </div>\r\n\r\n\r\n                                        <div class=\"col-sm-9\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                            <ui-select class=\"form-control input-sm\"\r\n                                                       multiple tagging tagging-label=\"false\"\r\n                                                       ng-model=\"vm.choices.zipcodes\" theme=\"bootstrap\">\r\n                                                <ui-select-match placeholder=\"Enter ZIP (12345) or ZIP range(12345-12345)  ...\">\r\n                                                    {{$item}}\r\n                                                </ui-select-match>\r\n                                                <ui-select-choices repeat=\"zipcode in vm.zipcodes | filter:$select.search\" refresh=\"vm.getdraftzip($select.search)\">\r\n                                                    {{zipcode}}\r\n                                                </ui-select-choices>\r\n                                            </ui-select>\r\n\r\n\r\n\r\n\r\n                                        </div>\r\n\r\n                                    </div>\r\n\r\n\r\n                                    <div class=\"col-md-12 m-y-1\">\r\n                                        <label class=\"col-sm-3 text-left\">OR</label>\r\n                                    </div>\r\n\r\n                                    <div class=\"form-group col-md-12\">\r\n\r\n                                        <div class=\"col-md-12\">\r\n                                            <div class=\"row\">\r\n                                                <div class=\"col-xs-8 col-sm-5 col-md-5  col-lg-5\">\r\n                                                    <label>ZIP CODE RADIUS</label>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n\r\n\r\n                                        <div class=\"col-md-12 zipcoderadius\">\r\n                                            <div class=\"row\">\r\n                                                <div class=\"col-xs-2\">\r\n                                                    <label>Within:</label>\r\n                                                </div>\r\n                                                <div class=\"col-xs-4\">\r\n                                                    <input type=\"text\" ng-model=\"vm.choices.radiusMiles\" ng-blur=\"checkMiles()\" class=\"form-control input-sm \" placeholder=\"Enter miles ...\" />\r\n                                                </div>\r\n                                                <div class=\"col-xs-1 text-xs-right\">\r\n                                                    <label>Of:</label>\r\n                                                </div>\r\n                                                <div class=\"col-xs-4\">\r\n                                                    <input type=\"text\" ng-model=\"vm.choices.zipForRadius\" ng-blur=\"vm.checkZipRadius()\" class=\"form-control input-sm \" placeholder=\"Enter 5-digit ZIP code ...\" />\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div class=\"col-md-6\">\r\n                                            <div class=\"row\">\r\n                                            </div>\r\n                                        </div>\r\n\r\n\r\n\r\n\r\n                                    </div>\r\n\r\n\r\n\r\n                                </div>\r\n\r\n\r\n\r\n\r\n                            </ffd-search-panel-item>\r\n\r\n                            <ffd-search-panel-item idclps=\"clps04\" idhdng=\"hdng04\"\r\n                                                   title=\"Area Code:\" info=\"Select an area code or range of area codes\">\r\n                                <div class=\"row\">\r\n                                    <div class=\"form-group col-md-12\">\r\n                                        <div class=\"col-sm-12\">\r\n                                            <ui-select class=\"form-control input-sm\"\r\n                                                       tagging tagging-label=\"false\"\r\n                                                       multiple ng-model=\"vm.choices.areacodes\"\r\n                                                       theme=\"bootstrap\">\r\n                                                <ui-select-match placeholder=\"Enter area code (123) or area range (123-123)  ...\">\r\n                                                    {{$item}}\r\n                                                </ui-select-match>\r\n                                                <ui-select-choices repeat=\"areacode in vm.areacodes | filter:$select.search\">\r\n                                                    {{areacode}}\r\n                                                </ui-select-choices>\r\n                                            </ui-select>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </ffd-search-panel-item>\r\n\r\n                            <ffd-search-panel-item idclps=\"clps05\" idhdng=\"hdng05\"\r\n                                                   title=\"Counties:\" info=\"Select one or more counties\">\r\n\r\n                                <div class=\"row\">\r\n                                    <div class=\"form-group   col-md-12\">\r\n                                        <div class=\"col-sm-12\">\r\n                                            <ui-select class=\"form-control input-sm\" multiple ng-model=\"vm.choices.counties\" theme=\"bootstrap\">\r\n                                                <ui-select-match placeholder=\"Enter at least 3 letters to select counties ...\">{{$item.Name+' ('+$item.State+')'}}</ui-select-match>\r\n                                                <ui-select-choices refresh=\"vm.getcounties($select.search)\" repeat=\"county in vm.counties | filter:$select.search\">\r\n                                                    {{county.Name+' ('+county.State+')'}}\r\n                                                </ui-select-choices>\r\n                                            </ui-select>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </ffd-search-panel-item>\r\n\r\n                            <ffd-search-panel-item idclps=\"clps06\" idhdng=\"hdng06\" ng-show=\"(1==1)||vm.choices.bustype.id==1\"\r\n                                                   title=\"Industry:\" info=\"Select a 2-digit SIC Code\">\r\n\r\n                                <div class=\"row\">\r\n                                    <div class=\"form-group  col-md-12\">\r\n                                        <div class=\"col-md-12\">\r\n                                            <ui-select class=\"form-control input-sm\"\r\n                                                       multiple ng-model=\"vm.choices.siccodes\"\r\n                                                       theme=\"bootstrap\">\r\n                                                <ui-select-match placeholder=\"Click to Select SIC Codes...\">\r\n                                                    {{$item.code+' '+$item.name}}\r\n                                                </ui-select-match>\r\n                                                <ui-select-choices repeat=\"siccode in vm.siccodes | filter:$select.search\">\r\n                                                    {{siccode.code+' '+siccode.name}}\r\n                                                </ui-select-choices>\r\n                                            </ui-select>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n\r\n                            </ffd-search-panel-item>\r\n\r\n                            <ffd-search-panel-item idclps=\"clps07\" idhdng=\"hdng07\" ng-show=\"vm.choices.bustype.id==2\"\r\n                                                   title=\"Company Size:\" info=\"Select by numbers of employees\">\r\n\r\n                                <div class=\"row\">\r\n\r\n                                    <div class=\"form-group col-md-12\">\r\n                                        <div class=\"col-md-12\">\r\n                                            <ui-select class=\"form-control input-sm\"\r\n                                                       multiple ng-model=\"vm.choices.companysizes\"\r\n                                                       theme=\"bootstrap\">\r\n                                                <ui-select-match placeholder=\"Click to select company size ....\">\r\n                                                    {{$item.name}}\r\n                                                </ui-select-match>\r\n                                                <ui-select-choices repeat=\"cs in vm.companysizes | filter:$select.search\">\r\n                                                    {{cs.name}}\r\n                                                </ui-select-choices>\r\n                                            </ui-select>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n\r\n                            </ffd-search-panel-item>\r\n\r\n                            <ffd-search-panel-item idclps=\"clps08\" idhdng=\"hdng08\" ng-show=\"vm.choices.bustype.id==2\"\r\n                                                   title=\"Sales Volume:\" info=\"Select by annual reporting income\">\r\n\r\n                                <div class=\"row\">\r\n                                    <div class=\"form-group col-md-12\">\r\n                                        <div class=\"col-md-12\">\r\n                                            <ui-select class=\"form-control input-sm\"\r\n                                                       multiple ng-model=\"vm.choices.salesvolumes\"\r\n                                                       theme=\"bootstrap\">\r\n                                                <ui-select-match placeholder=\"Click to select sales volume ....\">\r\n                                                    {{$item.name}}\r\n                                                </ui-select-match>\r\n                                                <ui-select-choices repeat=\"sv in vm.salesvolumes | filter:$select.search\">\r\n                                                    {{sv.name}}\r\n                                                </ui-select-choices>\r\n                                            </ui-select>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            </ffd-search-panel-item>\r\n\r\n                            <ffd-search-panel-item idclps=\"clps09\" idhdng=\"hdng09\" ng-show=\"vm.choices.bustype.id==2\"\r\n                                                   title=\"Business Keywords:\" info=\"Select a business type or description\">\r\n\r\n                                <div class=\"row\">\r\n                                    <div class=\"form-group\" col-md-12>\r\n                                        <div class=\"col-sm-12\">\r\n                                            <ui-select class=\"form-control input-sm\" multiple ng-model=\"vm.choices.keywords\" theme=\"bootstrap\">\r\n                                                <ui-select-match placeholder=\"Enter at least 3 letters to select keywords  ...\">{{$item.Keyword}} ({{$item.SICName}})</ui-select-match>\r\n                                                <ui-select-choices refresh=\"vm.getkeywords($select.search)\" repeat=\"keyword in vm.keywords | filter:$select.search\">\r\n                                                    {{keyword.Keyword}} ({{keyword.SICName}})\r\n                                                </ui-select-choices>\r\n                                            </ui-select>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </ffd-search-panel-item>\r\n\r\n                        </ffd-search-panel>\r\n                        <br />\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div class=\"col-md-5 ffd-search-checkboxes\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-10 col-md-offset-1\">\r\n\r\n\r\n                        <div class=\"row\">\r\n                            <div class=\"col-md-12\">\r\n                                <br />\r\n                                <span class=\"text_part_title_gray_01 _lh100\">RBDI</span><br />\r\n                                <span class=\"text_part_info_gray_01_lh100\">Select Address Type</span><br />\r\n                                <br />\r\n                                <input type=\"checkbox\" class=\"checkbox\" ng-model=\"vm.choices.rbdiBusiness\" /><span class=\"text_part_info_gray_01\">&nbsp;Commercial</span>\r\n                                &nbsp;&nbsp;\r\n                                <input type=\"checkbox\" class=\"checkbox\" ng-model=\"vm.choices.rbdiIndividual\" />\r\n                                <span class=\"text_part_info_gray_01\">&nbsp;Home Based Business</span>\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"row\"><br /></div>\r\n\r\n                        <div class=\"row\">\r\n                            <div class=\"col-md-12\">\r\n                                <span class=\"text_part_title_gray_01 _lh100\">Contact Name</span><br />\r\n                                <span class=\"text_part_info_gray_01 _lh100\">Must Include Contact Name?</span><br />\r\n                                <br />\r\n                                <input type=\"radio\" ng-value=\"true\" ng-model=\"vm.choices.chkContactNames\"><span class=\"text_part_info_gray_01\">&nbsp;Yes</span>\r\n                                &nbsp;&nbsp;\r\n                                <input type=\"radio\" ng-value=\"false\" ng-model=\"vm.choices.chkContactNames\"><span class=\"text_part_info_gray_01\">&nbsp;No</span>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div class=\"row\"><br /></div>\r\n\r\n                        <div class=\"row\">\r\n                            <div class=\"col-md-12\">\r\n                                <span class=\"text_part_title_gray_01 _lh100\">Phone Number</span><br />\r\n                                <span class=\"text_part_info_gray_01 _lh100\">Must Include Phone Number?</span><br />\r\n                                <br />\r\n                                <input type=\"radio\" ng-value=\"true\" ng-model=\"vm.choices.chkPhoneNumbers\" ng-click_=\"vm.askAboutPopup()\"><span class=\"text_part_info_gray_01\">&nbsp;Yes</span>\r\n                                &nbsp;&nbsp;\r\n                                <input type=\"radio\" ng-value=\"false\" ng-model=\"vm.choices.chkPhoneNumbers\"><span class=\"text_part_info_gray_01\">&nbsp;No</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"row\"><br /></div>\r\n\r\n                        <div class=\"row\">\r\n                            <div class=\"col-md-12\">\r\n                                <span class=\"text_part_title_gray_01 _lh100\">E-mail</span><br />\r\n                                <span class=\"text_part_info_gray_01 _lh100\">Must Include E-mail?</span><br />\r\n                                <br />\r\n                                <input type=\"radio\" ng-value=\"true\" ng-model=\"vm.choices.chkEmails\" ><span class=\"text_part_info_gray_01\">&nbsp;Yes</span>\r\n                                &nbsp;&nbsp;\r\n                                <input type=\"radio\" ng-value=\"false\" ng-model=\"vm.choices.chkEmails\"><span class=\"text_part_info_gray_01\">&nbsp;No</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"row\"><br /></div>\r\n\r\n\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n</div>";

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    /* @ngInject */
	    function _SearchController($q, $http, $scope, $state, $localStorage, $timeout, _, createDialog, toaster, FFD_CONST, InfoFactory, ChoicesFactory, GetResultsFactory, LoginService, ToolsService) {

	        var _frst = true;

	        var vm = this;
	        vm.in_refresh = false;
	        vm.html5 = false;

	        vm.breakpoint = {};
	        vm.mobile = false;

	        $scope.$watch(function () {
	            return vm.breakpoint.xs || vm.breakpoint.sm;
	        }, function (_new, _old) {
	            vm.mobile = _new;
	        });
	        $scope.$watch(function () {
	            return vm.choices.chkPhoneNumbers && !vm.mobile;
	        }, function (_new, _old) {
	            if (_new && !_old) vm.askAboutPopup();
	        });

	        vm.choices = ChoicesFactory.choices;

	        var _diff_m_1 = moment().diff(vm.choices._date_start_, 'months', false) + 1;
	        var _diff_m_2 = 9;
	        var _diff_m = Math.max(_diff_m_1, _diff_m_2);
	        var _minDate = "-" + _diff_m_2 + "m";

	        var _start_date = moment(vm.choices._date_start_);
	        var _end_date = moment(vm.choices._date_end_);
	        var _now_date = moment();
	        var _min_date = moment().subtract(9, 'month');

	        if (_start_date.diff(_min_date, 'days') < 0) vm.choices._date_start_ = _min_date.toDate();
	        if (_end_date.diff(_min_date, 'days') < 0) vm.choices._date_end_ = _min_date.toDate();

	        vm.dateoptions_start = { minDate: _minDate, maxDate: "+1d" };
	        vm.dateoptions_end = { minDate: _minDate, maxDate: "+1d" };

	        //        vm.dateoptions_start = { minDate: "-9m", maxDate: "+1d" };
	        //        vm.dateoptions_end = { minDate: "-9m", maxDate: "+1d" };

	        //        vm.change_date_start = function () { vm.dateoptions.minDate = "-10d";  };


	        $scope.$watch('vm.choices.date_start_', function () {
	            vm.dateoptions_end.minDate = vm.choices.date_start_;
	        });

	        $scope.$watch('vm.choices.date_end_', function () {
	            vm.dateoptions_start.maxDate = vm.choices.date_end_;
	        });

	        vm.bustypes = InfoFactory.bustypes;
	        vm.companysizes = InfoFactory.companysizes;
	        vm.salesvolumes = InfoFactory.salesvolumes;
	        vm.cities = [];
	        vm.counties = [];
	        vm.keywords = [];
	        vm.states = [];
	        vm.siccodes = [];
	        vm.zipcodes = [];
	        vm.areacodes = [];
	        vm.view_list_title = "View List";

	        $scope.$watch(function ($scope) {
	            return vm.results.isLoaded && vm.results.islogged && !vm.results.createSubscr ? 'View List' : 'Preview List';
	        }, function (_new, _old) {
	            vm.view_list_title = _new;
	        });

	        $scope.$watch(function ($scope) {
	            return angular.toJson(_.omit(vm.choices, ['_random_Data', '_count_Data']));
	        }, function (_new, _old) {
	            vm.results.isLoaded2 = false;
	        });

	        vm.set2start = function () {

	            ChoicesFactory.clear_choices();

	            /*
	            var _diff_m_1 = moment().diff((vm.choices._date_start_), 'months', false) + 1;
	            var _diff_m_2 = 9;
	            var _diff_m = Math.max(_diff_m_1, _diff_m_2);
	            var _minDate = "-" + _diff_m_2 + "m";
	              vm.dateoptions_start = { minDate: _minDate , maxDate: "+1d" };
	            vm.dateoptions_end   = { minDate: _minDate, maxDate: "+1d" };
	             */

	            angular.element('input[name=date_start]').val(vm.choices.date_start);
	            angular.element('input[name=date_end]').val(vm.choices.date_end);

	            vm.refresh_counters();
	        };

	        vm.results = { _count: 0, _leftcount: 0, _demo: false, isLoaded: false, isLoaded2: false, _invoiceid: 0, _enablelist: false, _disablelist: false };
	        vm.check_enablelist = function () {
	            vm.results._enablelist = +vm.results._invoiceid == 0 || +vm.results._count > 0 && +vm.results._leftcount >= +vm.results._count;
	            vm.results._disablelist = !vm.results.islogged || vm.results.createSubscr || !vm.results._enablelist || vm.results._count == 0 || vm.results.isDataLoaded;
	        };

	        vm.refresh_counters = function () {

	            vm.results.isLoaded = false;

	            var _prms = $q.all([GetResultsFactory.getCounters(), LoginService.getuserinfo()]).then(function (data) {
	                vm.results = angular.extend({}, {
	                    _count: data[0].count,
	                    _invoiceid: data[0].invoiceid,
	                    _leftcount: data[0].leftcount,
	                    _demo: JSON.parse(data[0].demo.toLowerCase()),
	                    isLoaded: true,
	                    isLoaded2: true,
	                    isDataLoaded: false
	                }, data[1]);
	            }, function (error) {
	                console.log('???>>', error);
	                vm.results = { _count: 0, _leftcount: 0, _demo: false, isLoaded: true, isLoaded2: true, isDataLoaded: false };
	            });

	            return _prms;
	        };

	        vm.getlist = function () {

	            var request = $http({
	                method: "post",
	                url: FFD_CONST.API_BASE_URL + (vm.choices.bustype.id == 1 ? "getNewList" : "getEstList"),
	                data: { _ids: [], _selectall: true }
	            });

	            request.success(function (data, status, headers, config) {
	                console.log(data);
	                if (data.d.result == "OK") {
	                    vm.results._leftcount = data.d.userleftcount;
	                    vm.results._invoiceid = data.d.invoiceid;

	                    angular.element('.dwnl').remove();
	                    var anchor = angular.element('<iframe class="dwnl" ></iframe>');
	                    anchor.attr({
	                        src: '/SPA/BuyList.ashx',
	                        style: "display:none;"
	                    });

	                    anchor.appendTo('body');

	                    vm.results.isDataLoaded = true;
	                }
	            }).error(function (data, status, headers, config) {});
	        };

	        vm.getlistbyemail = function () {

	            //            if (vm._leftcount < vm._selected)
	            if (!vm.createSubscr && vm._leftcount < vm.choices._count_Data) {
	                var _message = "This download will exceed your 5,000 record monthly allotment. Please adjust your quantity and try again";
	                //                toaster.pop('info', _message);
	                toaster.pop({ type: 'info', body: _message, timeout: 0 });
	                return;
	            }

	            var request = $http({
	                method: "post",
	                url: FFD_CONST.API_BASE_URL + (vm.choices.bustype.id == 1 ? "getNewListByEmail" : "getEstListByEmail"),
	                //                data: { _ids: vm._SelArr, _selectall: vm._SelAll }
	                //                data: { _ids: vm._SelArr, _selectall: vm._SelAll, _random: _choices._random_Data, _count: _choices._count_Data }
	                data: { _ids: [], _selectall: true, _random: vm.choices._random_Data, _count: vm.choices._count_Data }

	            });

	            request.success(function (data, status, headers, config) {
	                console.log(data);
	                if (data.d.result == "OK") {
	                    //                    vm._leftcount = data.d.userleftcount;

	                    vm.results._leftcount = data.d.userleftcount;
	                    //                    vm.results._invoiceid = data.d.invoiceid;


	                    toaster.pop('success', data.d.message);
	                    //                    vm.isDataLoaded = true;
	                    vm.results.isDataLoaded = true;
	                }
	                if (data.d.result == "ERROR" && data.d.errmsg) {
	                    toaster.pop('error', data.d.errmsg);
	                }
	            }).error(function (data, status, headers, config) {
	                var aa = 66;
	            });
	        };

	        vm.getcities = function (phrase) {
	            vm.cities = [];
	            InfoFactory.getcities(phrase, vm.choices.states).then(function (_cities) {
	                vm.cities = _cities.cities;
	            });
	        };

	        vm.getcounties = function (phrase) {
	            vm.counties = [];
	            InfoFactory.getcounties(phrase, vm.choices.states).then(function (_counties) {
	                vm.counties = _counties.counties;
	            });
	        };

	        vm.getkeywords = function (phrase) {
	            vm.keywords = [];
	            InfoFactory.getsic2kw(phrase).then(function (_kw) {
	                vm.keywords = _kw.keywords;
	            });
	        };

	        InfoFactory.getallstates().then(function (_states) {
	            vm.states = _states.states;
	        });

	        InfoFactory.getsiccodes().then(function (_siccodes) {
	            vm.siccodes = _siccodes.siccodes;
	        });

	        vm.checkMiles = function () {
	            var _correct = true;
	            var _tmp = vm.choices.radiusMiles;
	            var _tmp_1 = parseInt("0" + _tmp).toString();
	            var _tmp_2 = parseInt(_tmp_1);

	            if (_tmp.length > 0 && _tmp.length != _tmp_1.length) {
	                _correct = false;
	            }

	            if (!_correct && _tmp_2 > 999) {
	                _correct = false;
	            }

	            if (!_correct) {
	                $timeout(function () {
	                    vm.choices.radiusMiles = "";
	                    toaster.pop('error', "Miles must be in range 0-999 ... ");
	                }, 0);
	            }
	        };

	        vm.checkZipRadius = function () {
	            var _correct = true;

	            var _tmp = vm.choices.zipForRadius.trim();
	            if (_tmp.length > 0 && !/^\d{5}$/.test(_tmp)) {
	                _correct = false;
	            }

	            if (!_correct) {
	                $timeout(function () {
	                    vm.choices.zipForRadius = "";
	                    toaster.pop('error', "ZIP code must have 5-digit value ... ");
	                }, 0);
	            }
	        };

	        vm.save_search = function () {
	            createDialog({
	                id: 'SpecialOffer',
	                title: 'Save Search Template',
	                css: {
	                    top: '100px',
	                    margin: '0 auto'
	                },
	                template: __webpack_require__(76),
	                footerTemplate: __webpack_require__(77),
	                backdrop: true,
	                success: { label: 'Save Template', fn: _savetemplate },
	                cancel: { label: 'Cancel', fn: _cancel },
	                controller: 'SaveTemplateController as list'
	            }, {
	                //                     points: _dynamicMarkers
	            });
	        };

	        function _savetemplate() {
	            var _data = this.data;
	            console.log(_data);

	            GetResultsFactory.addsearchtemplate(_data.templatename, _data.load, _data.random, _data.limit).then(function (data) {
	                console.log('addsearchtemplate then');
	                if (data && data.result && data.result == "ERROR" && data.message) {
	                    toaster.pop('error', data.message);
	                }
	                if (data && data.result && data.result == "OK") {
	                    toaster.pop('success', 'Template saved !');
	                }
	            });

	            /* $state.go('selectsubscriptiontype');*/
	        }

	        function _cancel() {}

	        vm.previewlist = function () {
	            //            $state.go('previewdata');


	            //            ToolsService.ChangePreviewData(vm.view_list_title);

	            $q.when(vm.results.isLoaded2 ? 1 : vm.refresh_counters()).then(function () {
	                var _cnt = parseInt(vm.results._count);
	                var _left = parseInt(vm.results._leftcount);

	                if (isNaN(_cnt)) _cnt = 0;
	                if (isNaN(_left)) _left = 0;

	                vm.choices._count_Data = _left == 0 ? _cnt : Math.min(_cnt, _left);
	                vm.view_list_title = vm.results.isLoaded && vm.results.islogged && !vm.results.createSubscr ? 'View List' : 'Preview List';

	                if (vm.results.createSubscr) {
	                    $state.go('previewdata');
	                } else {
	                    ToolsService.ChangePreviewData(vm.view_list_title);
	                }
	            });
	        };

	        vm.getlist_m0 = function () {
	            LoginService.getuserinfo().then(function (data) {
	                vm.userinfo = data;
	                if (data.islogged) {
	                    vm.getlist_m();
	                } else {
	                    LoginService.enterloginform($state.current.name, $state.current.name);
	                }
	            });
	        };

	        vm.getlist_m = function () {
	            var sscope = vm.results;
	            GetResultsFactory.getNeedSubscription().then(function (data) {
	                console.log('showcounters needsubscription=' + data.needsubscription);
	                console.log('showcounters  _leftcount=' + $scope._leftcount);
	                if (sscope._leftcount != 0) {
	                    console.log('call previewlist');
	                    vm.previewlist();
	                    return;
	                }
	                //                    activate_dialog('Not Yet, Let Me Preview Data First');
	                ToolsService.ActivateDialog('Not Yet, Let Me Preview Data First');
	            });
	        };

	        vm.previewlist_m0 = function () {
	            /*
	                $q.when(vm.results.isLoaded2 ? 1 : vm.refresh_counters())
	                .then(
	                function ()
	                {
	                    vm.choices._count_Data = parseInt(vm.results._count);
	                    ToolsService.ChangePreviewData(vm.view_list_title);
	                }
	                  );
	                      return;
	              */

	            LoginService.getuserinfo().then(function (data) {
	                if (data.islogged) {
	                    vm.previewlist_m();
	                } else {
	                    LoginService.enterloginform($state.current.name, $state.current.name);
	                }
	            });
	        };

	        vm.previewlist_m = function () {
	            var sscope = vm.results;
	            GetResultsFactory.getNeedSubscription().then(function (data) {
	                console.log('showcounters needsubscription=' + data.needsubscription);
	                console.log('showcounters  _leftcount=' + sscope._leftcount);

	                //               if (sscope._leftcount != 0)
	                if (sscope._leftcount > 0) {
	                    console.log('call previewlist');
	                    vm.previewlist();
	                    return;
	                }
	                if (!sscope._demo) {
	                    vm.previewlist();
	                    return;
	                }

	                if (sscope.createSubscr) {
	                    ToolsService.ActivateDialog('Cancel');
	                } else {
	                    ToolsService.MoreLeadsDialog();
	                }
	            });
	        };

	        vm.preStep_m0 = function (destFunc) {
	            LoginService.getuserinfo().then(function (data) {
	                if (data.islogged) {
	                    vm.preStep_m(destFunc);
	                } else {
	                    LoginService.enterloginform($state.current.name, $state.current.name);
	                }
	            });
	        };

	        vm.preStep_m = function (destFunc) {
	            var sscope = vm.results;
	            GetResultsFactory.getNeedSubscription().then(function (data) {
	                console.log('showcounters needsubscription=' + data.needsubscription);
	                console.log('showcounters  _leftcount=' + sscope._leftcount);

	                //               if (sscope._leftcount != 0)
	                if (sscope._leftcount > 0) {
	                    console.log('call previewlist');
	                    //                   vm.previewlist();
	                    vm.preStep(destFunc);
	                    return;
	                }
	                if (!sscope._demo) {
	                    //                   vm.previewlist();
	                    vm.preStep(destFunc);
	                    return;
	                }

	                if (sscope.createSubscr) {
	                    ToolsService.ActivateDialog('Cancel');
	                } else {
	                    ToolsService.MoreLeadsDialog();
	                }
	            });
	        };

	        vm.preStep = function (doFunc) {
	            $q.when(vm.results.isLoaded2 ? 1 : vm.refresh_counters()).then(function () {
	                var _cnt = parseInt(vm.results._count);
	                var _left = parseInt(vm.results._leftcount);

	                if (isNaN(_cnt)) _cnt = 0;
	                if (isNaN(_left)) _left = 0;

	                vm.choices._count_Data = _left == 0 ? _cnt : Math.min(_cnt, _left);
	                vm.view_list_title = vm.results.isLoaded && vm.results.islogged && !vm.results.createSubscr ? 'View List' : 'Preview List';
	                vm.view_list_title = "Send E-mail";

	                if (vm.results.createSubscr) {
	                    $state.go('previewdata');
	                } else {
	                    ToolsService.ChangePreviewData(vm.view_list_title, doFunc);
	                }
	            });
	        };

	        vm.askAboutPopup = function () {
	            if (!vm.mobile) ToolsService.AskAboutPopup();
	        };

	        activate();

	        /*
	                $timeout(
	                    function ()
	                    {
	                        if (vm.choices.date_start_ === undefined)
	                        {
	                            vm.choices.date_start_ = moment(vm.choices.date_start, "MM/DD/YYYY").toDate();
	                        }
	                    }, 2000);
	        */

	        function activate() {

	            var device = {};
	            device.Html5 = false;
	            device.UA = navigator.userAgent;
	            device.Types = ["iPhone", "iPad", "iPod", "Chrome"];
	            for (var d = 0; d < device.Types.length; d++) {
	                var t = device.Types[d];
	                device[t] = !!device.UA.match(new RegExp(t, "i"));
	                device.Html5 = device.Html5 || device[t];
	            }

	            vm.html5 = device.Html5;

	            $scope.$watch(vm.check_enablelist);

	            $scope.$watch("vm.choices.states", function (new_, old_) {
	                if (!_frst) {
	                    $timeout(function () {
	                        vm.choices.cities = [];
	                        vm.choices.counties = [];
	                    }, 0);
	                }
	                _frst = false;
	            });

	            vm.getdraftzip = function (_val) {
	                if (_val != '') {
	                    vm._lastzip = _val;
	                };
	                var _rez = !/^\d{5}(-\d{5})?$/.test(vm._lastzip);
	                if (!_rez && _val == '') {
	                    vm.choices.zipcodes.push(vm._lastzip);vm.choices.zipcodes = _.uniq(vm.choices.zipcodes);
	                }
	            };

	            //            $scope.$watch("vm.choices.bustype", function (new_, old_) { vm.set2start(); });

	            $scope.$watch("vm.choices.zipcodes", function (new_, old_) {
	                $timeout(function () {
	                    _.remove(vm.choices.zipcodes, function (itm) {
	                        var _rez = !/^\d{5}(-\d{5})?$/.test(itm);

	                        if (!_rez) {
	                            var _arr = itm.split('-');
	                            if (_arr.length == 2) {
	                                var _istart = parseInt(_arr[0]);
	                                var _iend = parseInt(_arr[1]);
	                                _rez = _istart > _iend;
	                            }
	                        }

	                        if (_rez) {
	                            toaster.pop('error', "Incorrect ZIP range " + itm, "Enter ZIP (12345) or ZIP range(12345-12345) ...");
	                        }

	                        return _rez;
	                    });
	                }, 0);
	            });

	            $scope.$watch("vm.choices.areacodes", function (new_, old_) {
	                $timeout(function () {
	                    _.remove(vm.choices.areacodes, function (itm) {
	                        var _rez = !/^\d{3}(-\d{3})?$/.test(itm);

	                        if (!_rez) {
	                            var _arr = itm.split('-');
	                            if (_arr.length == 2) {
	                                var _istart = parseInt(_arr[0]);
	                                var _iend = parseInt(_arr[1]);
	                                _rez = _istart > _iend;
	                            }
	                        }

	                        if (_rez) {
	                            toaster.pop('error', "Incorrect area range " + itm, "Enter area (123) or area range(123-123) ...");
	                        }

	                        return _rez;
	                    });
	                }, 0);
	            });

	            /*
	                         $scope.$watch("vm.choices.date_start_", function (new_, old_) {
	                            $timeout(function () { vm.choices.date_start = moment(new_).format("MM/DD/YYYY") }, 0);
	                        });
	            
	                        $scope.$watch("vm.choices.date_end_", function (new_, old_) {
	                            $timeout(function () { vm.choices.date_end = moment(new_).format("MM/DD/YYYY") }, 0);
	                        });
	            
	             */

	            vm.refresh_counters();
	        }
	    }
	    _SearchController.$inject = ["$q", "$http", "$scope", "$state", "$localStorage", "$timeout", "_", "createDialog", "toaster", "FFD_CONST", "InfoFactory", "ChoicesFactory", "GetResultsFactory", "LoginService", "ToolsService"];;

	    return _SearchController;
	};

/***/ },
/* 76 */
/***/ function(module, exports) {

	module.exports = "<h4 class=\"text-center\">\r\n    Save Search and Auto Notify\r\n</h4>\r\n\r\n<div class=\"form-group row\">\r\n    <label class=\"col-md-5  control-label\" for=\"inputUserName\">Template Name:</label>\r\n    <div class=\"col-md-7\">\r\n        <input type=\"text\"\r\n               ng-model=\"data.templatename\"\r\n               class=\"form-control  input-md\"\r\n               id=\"inputUserName\"\r\n               name=\"inputUserName\"\r\n               placeholder=\"Enter Template Name\" />\r\n    </div>\r\n</div>\r\n\r\n\r\n<div class=\"form-group row\">\r\n    <label class=\"col-md-5  control-label\" for=\"input_daLoad\">Automatically email me available records:</label>\r\n    <div class=\"col-md-7\">\r\n        <input type=\"checkbox\"\r\n               ng-model=\"data.load\"\r\n               class=\"form-control  input-md checkbox\"\r\n               id=\"input_daLoad\"\r\n               name=\"input_daLoad\" \r\n               style=\"height: 1.0em; width: 1.0em;\"\r\n               />\r\n    </div>\r\n</div>\r\n\r\n<div class=\"form-group row hidden-xs-up\">\r\n    <label class=\"col-md-5  control-label\" for=\"input_daRandom\">Load Random Records:</label>\r\n    <div class=\"col-md-7\">\r\n        <input type=\"checkbox\"\r\n               ng-model=\"data.random\"\r\n               class=\"form-control  input-md checkbox\"\r\n               id=\"input_daRandom\"\r\n               name=\"input_daRandom\" \r\n               style=\"height: 1.0em; width: 1.0em;\"\r\n               />\r\n    </div>\r\n</div>\r\n\r\n\r\n<div class=\"form-group row  hidden-xs-up\">\r\n    <label class=\"col-md-5  control-label\" for=\"input_daLimit\">\r\n        Daily Leads Limit   <span class=\"text-nowrap hidden-xs-up\">( between 0 and {{data.max_val}})</span>\r\n    </label>\r\n    <div class=\"col-md-7\">\r\n        <input type=\"number\" max=\"{{data.max_val}}\" min=\"0\" ng-model=\"data.limit\" id=\"input_daLimit\" name=\"input_daLimit\" />\r\n    </div>\r\n</div>\r\n\r\n\r\n";

/***/ },
/* 77 */
/***/ function(module, exports) {

	module.exports = "\r\n<div class=\"col-xs-6 text-xs-center\">\r\n    <button class=\"btn  btn-sm  btn-warning\" ng-disabled=\"!data.isenable\" ng-click=\"$modalSuccess()\">{{$modalSuccessLabel}}</button>\r\n</div>\r\n\r\n<div class=\"col-xs-6 text-xs-center\">\r\n    <button class=\"btn  btn-sm  btn-warning\" ng-click=\"$modalCancel()\">{{$modalCancelLabel}}</button>\r\n</div>\r\n";

/***/ },
/* 78 */
/***/ function(module, exports) {

	module.exports = "\r\n<div class=\"row m-y-2\" ng-init=\"vm.mobile_step=1;vm.breakpoint=breakpoint\">\r\n\r\n    <div class=\"col-xs-12 m-x-2 mobile-search_panel\" ng-show=\"vm.mobile_step==1\">\r\n\r\n\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-xs-12\">\r\n                <span class=\"text_part_title_gray_01\">\r\n                    Select Business Database:\r\n                </span>\r\n            </div>\r\n\r\n            <div class=\"col-xs-10\">\r\n                <search-item-select-business></search-item-select-business>\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <br />\r\n\r\n\r\n        <div class=\"row\" ng-show=\"vm.choices.bustype.id==1\">\r\n            <div class=\"col-xs-12\">\r\n                <span class=\"text_part_title_gray_01\">\r\n                    Business Start Date Range:\r\n                </span>\r\n            </div>\r\n            <div class=\"col-xs-10\">\r\n                <search-item-date-range></search-item-date-range>\r\n            </div>\r\n        </div>\r\n        <br />\r\n\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-xs-11\">\r\n                <span class=\"text_part_title_gray_01\">Current Criteria:</span>\r\n                <br />\r\n                <current-criteries choices=\"vm.choices\"></current-criteries>\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n        <div class=\"row m-y-2 text-xs-center\">\r\n            <div class=\"col-xs-11 text-xs-center\">\r\n                <a class=\"btn btn-default button_green_01 p-x-3\" ng-click=\"vm.mobile_step=2;vm.refresh_counters()\">\r\n                    Search\r\n                </a>\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-xs-11 searchform ffd-search-panel\">\r\n                <span class=\"text_part_title_gray_01\">Search Criteria</span>\r\n\r\n                <ffd-search-panel>\r\n\r\n                    <ffd-search-panel-item idclps=\"clps01\" idhdng=\"hdng01\"\r\n                                           title=\"City:\" info=\"Select businessess within one or more cities\">\r\n                        <div class=\"row\">\r\n                            <div class=\"form-group  col-md-12\">\r\n                                <div class=\"col-md-12\">\r\n                                    <ui-select class=\"form-control input-sm\" multiple ng-model=\"vm.choices.cities\" theme=\"bootstrap\">\r\n                                        <ui-select-match placeholder=\"Enter at least 3 letters to select cities ...\">{{$item.Name+' ('+$item.State+')'}}</ui-select-match>\r\n                                        <ui-select-choices refresh=\"vm.getcities($select.search)\" repeat=\"city in vm.cities | filter:$select.search\">\r\n                                            {{city.Name+' ('+city.State+')'}}\r\n                                        </ui-select-choices>\r\n                                    </ui-select>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </ffd-search-panel-item>\r\n\r\n                    <ffd-search-panel-item idclps=\"clps02\" idhdng=\"hdng02\"\r\n                                           title=\"State:\" info=\"Search businesses by state\">\r\n                        <div class=\"row\">\r\n                            <div class=\"form-group col-md-12\">\r\n                                <div class=\"col-md-12\">\r\n                                    <ui-select class=\"form-control input-sm\" multiple ng-model=\"vm.choices.states\" theme=\"bootstrap\">\r\n                                        <ui-select-match placeholder=\"Click to select states...\">{{$item.shortname}}</ui-select-match>\r\n                                        <ui-select-choices repeat=\"state in vm.states | filter:$select.search\">\r\n                                            {{state.longname+' ('+state.shortname+')'}}\r\n                                        </ui-select-choices>\r\n                                    </ui-select>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n                    </ffd-search-panel-item>\r\n\r\n                    <ffd-search-panel-item idclps=\"clps03\" idhdng=\"hdng03\"\r\n                                           title=\"Zip Code:\" info=\"Select a zip code or radius from a given zip code\">\r\n\r\n                        <div class=\"row\">\r\n\r\n                            <div class=\"form-group col-md-12 \">\r\n\r\n                                <label class=\"col-sm-3 text-left\">ZIP CODES</label>\r\n\r\n                                <div class=\"col-sm-9\">\r\n                                    Enter ZIP Codes or ZIP Code ranges by entering the first and\r\n                                    last ZIP Codes(ex: 68005-68123).\r\n                                </div>\r\n\r\n\r\n                                <div class=\"col-sm-9\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                    <ui-select class=\"form-control input-sm\"\r\n                                               multiple tagging tagging-label=\"false\"\r\n                                               ng-model=\"vm.choices.zipcodes\" theme=\"bootstrap\">\r\n                                        <ui-select-match placeholder=\"Enter ZIP (12345) or ZIP range(12345-12345)  ...\">\r\n                                            {{$item}}\r\n                                        </ui-select-match>\r\n                                        <ui-select-choices repeat=\"zipcode in vm.zipcodes | filter:$select.search\" refresh=\"vm.getdraftzip($select.search)\">\r\n                                            {{zipcode}}\r\n                                        </ui-select-choices>\r\n                                    </ui-select>\r\n\r\n\r\n\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n\r\n\r\n                            <div class=\"col-md-12\">\r\n                                <label class=\"col-sm-3 text-left\">OR</label>\r\n                            </div>\r\n\r\n\r\n                            <div class=\"form-group col-md-12\">\r\n\r\n                                <label class=\"col-sm-3 text-left\">ZIP CODE RADIUS</label>\r\n\r\n\r\n\r\n\r\n                                <div class=\"col-md-6 zipcoderadius\">\r\n\r\n\r\n                                    <div class=\"row m-b-1\">\r\n                                        <div class=\"col-xs-3 text-xs-right\">\r\n                                            <label class=\"m-l-1\">Within:</label>\r\n                                        </div>\r\n                                        <div class=\"col-xs-7\">\r\n                                            <input type=\"text\" ng-model=\"vm.choices.radiusMiles\" ng-blur=\"checkMiles()\" class=\"form-control input-sm \" placeholder=\"Enter miles ...\" />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col-xs-3 text-xs-right\">\r\n                                            <label class=\"m-l-1\">Of:</label>\r\n                                        </div>\r\n                                        <div class=\"col-xs-7\">\r\n                                            <input type=\"text\" ng-model=\"vm.choices.zipForRadius\" ng-blur=\"vm.checkZipRadius()\" class=\"form-control input-sm \" placeholder=\"Enter 5-digit ZIP code ...\" />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                <div class=\"col-md-12\">\r\n                                    <div class=\"row\">\r\n                                        <div class=\"col-md-10\">\r\n                                            <label ng-show=\"choices.zipForRadius&&choices.radiusMiles\">Find all ZIP codes whithin {{choices.radiusMiles}} miles of ZIP code  {{choices.zipForRadius}}</label>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n\r\n                    </ffd-search-panel-item>\r\n\r\n                    <ffd-search-panel-item idclps=\"clps04\" idhdng=\"hdng04\"\r\n                                           title=\"Area Code:\" info=\"Select an area code or range of area codes\">\r\n                        <div class=\"row\">\r\n                            <div class=\"form-group col-md-12\">\r\n                                <div class=\"col-sm-12\">\r\n                                    <ui-select class=\"form-control input-sm\"\r\n                                               tagging tagging-label=\"false\"\r\n                                               multiple ng-model=\"vm.choices.areacodes\"\r\n                                               theme=\"bootstrap\">\r\n                                        <ui-select-match placeholder=\"Enter area code (123) or area range (123-123)  ...\">\r\n                                            {{$item}}\r\n                                        </ui-select-match>\r\n                                        <ui-select-choices repeat=\"areacode in vm.areacodes | filter:$select.search\">\r\n                                            {{areacode}}\r\n                                        </ui-select-choices>\r\n                                    </ui-select>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </ffd-search-panel-item>\r\n\r\n                    <ffd-search-panel-item idclps=\"clps05\" idhdng=\"hdng05\"\r\n                                           title=\"Counties:\" info=\"Select one or more counties\">\r\n\r\n                        <div class=\"row\">\r\n                            <div class=\"form-group   col-md-12\">\r\n                                <div class=\"col-sm-12\">\r\n                                    <ui-select class=\"form-control input-sm\" multiple ng-model=\"vm.choices.counties\" theme=\"bootstrap\">\r\n                                        <ui-select-match placeholder=\"Enter at least 3 letters to select counties ...\">{{$item.Name+' ('+$item.State+')'}}</ui-select-match>\r\n                                        <ui-select-choices refresh=\"vm.getcounties($select.search)\" repeat=\"county in vm.counties | filter:$select.search\">\r\n                                            {{county.Name+' ('+county.State+')'}}\r\n                                        </ui-select-choices>\r\n                                    </ui-select>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </ffd-search-panel-item>\r\n\r\n                    <ffd-search-panel-item idclps=\"clps06\" idhdng=\"hdng06\" ng-show=\"(1==1)||vm.choices.bustype.id==1\"\r\n                                           title=\"Industry:\" info=\"Select a 2-digit SIC Code\">\r\n\r\n                        <div class=\"row\">\r\n                            <div class=\"form-group  col-md-12\">\r\n                                <div class=\"col-md-12\">\r\n                                    <ui-select class=\"form-control input-sm\"\r\n                                               multiple ng-model=\"vm.choices.siccodes\"\r\n                                               theme=\"bootstrap\">\r\n                                        <ui-select-match placeholder=\"Click to select SIC Codes...\">\r\n                                            {{$item.code+' '+$item.name}}\r\n                                        </ui-select-match>\r\n                                        <ui-select-choices repeat=\"siccode in vm.siccodes | filter:$select.search\">\r\n                                            {{siccode.code+' '+siccode.name}}\r\n                                        </ui-select-choices>\r\n                                    </ui-select>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n                    </ffd-search-panel-item>\r\n\r\n                    <ffd-search-panel-item idclps=\"clps07\" idhdng=\"hdng07\" ng-show=\"vm.choices.bustype.id==2\"\r\n                                           title=\"Company Size:\" info=\"Select by numbers of employees\">\r\n\r\n                        <div class=\"row\">\r\n\r\n                            <div class=\"form-group col-md-12\">\r\n                                <div class=\"col-md-12\">\r\n                                    <ui-select class=\"form-control input-sm\"\r\n                                               multiple ng-model=\"vm.choices.companysizes\"\r\n                                               theme=\"bootstrap\">\r\n                                        <ui-select-match placeholder=\"Click to select company size ....\">\r\n                                            {{$item.name}}\r\n                                        </ui-select-match>\r\n                                        <ui-select-choices repeat=\"cs in vm.companysizes | filter:$select.search\">\r\n                                            {{cs.name}}\r\n                                        </ui-select-choices>\r\n                                    </ui-select>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n\r\n                    </ffd-search-panel-item>\r\n\r\n                    <ffd-search-panel-item idclps=\"clps08\" idhdng=\"hdng08\" ng-show=\"vm.choices.bustype.id==2\"\r\n                                           title=\"Sales Volume:\" info=\"Select by annual reporting income\">\r\n\r\n                        <div class=\"row\">\r\n                            <div class=\"form-group col-md-12\">\r\n                                <div class=\"col-md-12\">\r\n                                    <ui-select class=\"form-control input-sm\"\r\n                                               multiple ng-model=\"vm.choices.salesvolumes\"\r\n                                               theme=\"bootstrap\">\r\n                                        <ui-select-match placeholder=\"Click to select sales volume ....\">\r\n                                            {{$item.name}}\r\n                                        </ui-select-match>\r\n                                        <ui-select-choices repeat=\"sv in vm.salesvolumes | filter:$select.search\">\r\n                                            {{sv.name}}\r\n                                        </ui-select-choices>\r\n                                    </ui-select>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                    </ffd-search-panel-item>\r\n\r\n                    <ffd-search-panel-item idclps=\"clps09\" idhdng=\"hdng09\" ng-show=\"vm.choices.bustype.id==2\"\r\n                                           title=\"Business Keywords:\" info=\"Select a business type or description\">\r\n\r\n                        <div class=\"row\">\r\n                            <div class=\"form-group\" col-md-12>\r\n                                <div class=\"col-sm-12\">\r\n                                    <ui-select class=\"form-control input-sm\" multiple ng-model=\"vm.choices.keywords\" theme=\"bootstrap\">\r\n                                        <ui-select-match placeholder=\"Enter at least 3 letters to select keywords ...\">{{$item.Keyword}} ({{$item.SICName}})</ui-select-match>\r\n                                        <ui-select-choices refresh=\"vm.getkeywords($select.search)\" repeat=\"keyword in vm.keywords | filter:$select.search\">\r\n                                            {{keyword.Keyword}} ({{keyword.SICName}})\r\n                                        </ui-select-choices>\r\n                                    </ui-select>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </ffd-search-panel-item>\r\n\r\n                </ffd-search-panel>\r\n                <br />\r\n\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-xs-11 searchform text-xs-center\">\r\n                <span class=\"text_part_title_gray_01\">RBDI: Select Address Type</span>\r\n                <br />\r\n                <input type=\"checkbox\" class=\"checkbox\" ng-model=\"vm.choices.rbdiBusiness\" /><span class=\"text_part_info_gray_01\">&nbsp;Commercial</span>\r\n                &nbsp;&nbsp;\r\n                <input type=\"checkbox\" class=\"checkbox\" ng-model=\"vm.choices.rbdiIndividual\" />\r\n                <span class=\"text_part_info_gray_01\">&nbsp;Home Based Business</span>\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n        <div class=\"row m-y-1\">\r\n            <div class=\"col-xs-11 searchform text-xs-center\">\r\n                <span class=\"text_part_title_gray_01 _lh100 m-b-1\">Contact Name Required?</span>\r\n                <br />\r\n                <input type=\"radio\" ng-value=\"true\" ng-model=\"vm.choices.chkContactNames\"><span class=\"text_part_info_gray_01\">&nbsp;Yes</span>\r\n                &nbsp;&nbsp;\r\n                <input type=\"radio\" ng-value=\"false\" ng-model=\"vm.choices.chkContactNames\"><span class=\"text_part_info_gray_01\">&nbsp;No</span>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row m-y-1\">\r\n            <div class=\"col-xs-11 searchform text-xs-center\">\r\n                <span class=\"text_part_title_gray_01 _lh100 m-b-1\">Phone Number Required?</span>\r\n                <br />\r\n                <input type=\"radio\" ng-value=\"true\" ng-model=\"vm.choices.chkPhoneNumbers\"><span class=\"text_part_info_gray_01\">&nbsp;Yes</span>\r\n                &nbsp;&nbsp;\r\n                <input type=\"radio\" ng-value=\"false\" ng-model=\"vm.choices.chkPhoneNumbers\"><span class=\"text_part_info_gray_01\">&nbsp;No</span>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row m-y-1\">\r\n            <div class=\"col-xs-11 searchform text-xs-center\">\r\n                <span class=\"text_part_title_gray_01 _lh100 m-b-1\">E-mail Required?</span>\r\n                <br />\r\n                <input type=\"radio\" ng-value=\"true\" ng-model=\"vm.choices.chkEmails\"><span class=\"text_part_info_gray_01\">&nbsp;Yes</span>\r\n                &nbsp;&nbsp;\r\n                <input type=\"radio\" ng-value=\"false\" ng-model=\"vm.choices.chkEmails\"><span class=\"text_part_info_gray_01\">&nbsp;No</span>\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        <div class=\"row m-y-2 text-xs-center\">\r\n            <div class=\"col-xs-11 text-xs-center\">\r\n                <a class=\"btn btn-default button_green_01 p-x-3\" ng-click=\"vm.mobile_step=2;vm.refresh_counters()\">\r\n                    Search\r\n                </a>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n\r\n    <div class=\"col-xs-12 m-x-2 mobile-search_panel\" ng-show=\"vm.mobile_step==2\">\r\n\r\n        <div class=\"row  m-y-2\">\r\n            <div class=\"col-xs-10  text-xs-center\">\r\n                <span class=\"text_part_title_gray_01\">Current Criteria:</span>\r\n                <br />\r\n                <current-criteries choices=\"vm.choices\"></current-criteries>\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n        <div class=\"row m-y-2\">\r\n            <div class=\"col-xs-10 text-xs-center\">\r\n                <span class=\"text_part_title_gray_01\">Here Are Your Search Results</span>\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <div class=\"row m-y-2\" ng-show=\"vm.results.isLoaded&&vm.results.islogged&&vm.results._leftcount>0\">\r\n\r\n            <div class=\"col-xs-10 text-xs-center\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-xs-6 col-xs-offset-3  text-xs-center\">\r\n                        <span class=\"text_count_explain_gray_01\">New leads for this Period</span>\r\n                        <br />\r\n                        <span class=\"form-control text-xs-center text_count_value_gray_01\" ng-bind=\"vm.results._count|number\"></span>\r\n                        <br />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div class=\"col-xs-10 text-xs-center \">\r\n                <div class=\"row\">\r\n                    <div class=\"col-xs-6 col-xs-offset-3  text-xs-center\">\r\n                        <span class=\"text_count_explain_gray_01\">Leads Remaining</span>\r\n                        <br />\r\n                        <span class=\"form-control text-xs-center text_count_value_gray_01\" ng-bind=\"vm.results._leftcount|number:0\"></span>\r\n                        <br />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n\r\n\r\n        <div class=\"row m-y-2\" ng-show=\"vm.results.isLoaded&&vm.results._leftcount==0\">\r\n            <div class=\"col-xs-10 text-xs-center\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-xs-6 col-xs-offset-3  text-xs-center\">\r\n                        <span class=\"text_count_explain_gray_01\">New leads for this Period</span>\r\n                        <br />\r\n                        <span class=\"form-control text-xs-center text_count_value_gray_01\" ng-bind=\"vm.results._count|number\"></span>\r\n                        <br />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n        <div class=\"row m-y-2\">\r\n            <div class=\"col-xs-10 text-xs-center\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-xs-8 col-xs-offset-2 text-xs-center\">\r\n                        <a class=\"btn btn-block  btn-default button_orange_01\" ng-click=\"vm.previewlist_m0()\">\r\n                            View List\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <div class=\"row m-y-2\">\r\n            <div class=\"col-xs-10 text-xs-center\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-xs-8 col-xs-offset-2 text-xs-center\">\r\n                        <a class=\"btn btn-block  btn-default button_blue_01\" ng-click=\"vm.mobile_step=1;window.scroll(0, 0);\">\r\n                            New Search\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <div class=\"row m-y-2\" style=\"display:none;\">\r\n            <div class=\"col-xs-10 text-xs-center\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-xs-8 col-xs-offset-2 text-xs-center\">\r\n                        <a class=\"btn btn-block  btn-default button_green_01\"\r\n                           ng-click=\"vm.preStep_m0(vm.getlistbyemail)\"\r\n                           ng-confirm-click_=\"Are you sure ( {{vm.results._selected}} records) ?\"\r\n                           ng-class=\"{'disabled btn-danger':vm.results._disablelist,'btn-success':!vm.results._disablelist}\">\r\n                            Email me my list\r\n                        </a>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n    </div>\r\n\r\n</div>\r\n";

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {
	    __webpack_require__(80)(app);
	    __webpack_require__(82)(app);
	    __webpack_require__(84)(app);
	    __webpack_require__(86)(app);
	};

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    app.directive('searchItemStates', _directive);

	    function _directive() {
	        var _res = {
	            restrict: 'E',
	            replace: true,
	            template: __webpack_require__(81)
	        };

	        return _res;
	    }
	};

/***/ },
/* 81 */
/***/ function(module, exports) {

	module.exports = "<div>\r\n    <ui-select class=\"form-control input-sm\" multiple ng-model=\"vm.choices.states\" theme=\"bootstrap\">\r\n        <ui-select-match placeholder=\"Select states...\">{{$item.shortname}}</ui-select-match>\r\n        <ui-select-choices repeat=\"state in vm.states | filter:$select.search\">\r\n            {{state.longname+' ('+state.shortname+')'}}\r\n        </ui-select-choices>\r\n    </ui-select>\r\n</div>\r\n";

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    app.directive('searchItemCities', _directive);

	    function _directive() {
	        var _res = {
	            restrict: 'E',
	            replace: true,
	            template: __webpack_require__(83)
	        };

	        return _res;
	    }
	};

/***/ },
/* 83 */
/***/ function(module, exports) {

	module.exports = "<div>\r\n    <ui-select class=\"form-control input-sm\" multiple ng-model=\"vm.choices.cities\" theme=\"bootstrap\">\r\n        <ui-select-match placeholder=\"Select cities ( enter at least 3 symbols ) ...\">{{$item.Name+' ('+$item.State+')'}}</ui-select-match>\r\n        <ui-select-choices refresh=\"vm.getcities($select.search)\" repeat=\"city in vm.cities | filter:$select.search\">\r\n            {{city.Name+' ('+city.State+')'}}\r\n        </ui-select-choices>\r\n    </ui-select>\r\n</div>\r\n";

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    app.directive('searchItemDateRange', _directive);

	    function _directive() {
	        var _res = {
	            restrict: 'E',
	            replace: true,
	            template: __webpack_require__(85)
	        };

	        return _res;
	    }
	};

/***/ },
/* 85 */
/***/ function(module, exports) {

	module.exports = "<div class=\"row\">\r\n    <div class=\"col-sm-6  m-y-1\">\r\n        <div class=\"row text-xs-left\">\r\n\r\n\r\n            <div class=\"col-xs-12\" ng-if=\"breakpoint.md || breakpoint.lg\">\r\n                <!--\r\n                <input type=\"text\" ui-date ui-date-format=\"mm/dd/yy\" ng-model=\"vm.choices.date_start_\" class=\"form-control form-control-md\" />\r\n                -->\r\n\r\n                <input type=\"text\" ng-if=\"!vm.html5\"\r\n                       ui-date ui-date-format=\"mm/dd/yy\"\r\n                       ng-model=\"vm.choices.date_start\"\r\n                       ng-required=\"true\"\r\n                       class=\"form-control input-sm\">\r\n\r\n                <input type=\"date\" ng-if=\"vm.html5\"\r\n                       ng-model=\"vm.choices.date_start_\"\r\n                       data-date-format=\"mm/dd/yyyy\"\r\n                       class=\"form-control input-sm\" />\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            <div class=\"col-xs-12\" ng-if=\"breakpoint.xs || breakpoint.sm\">\r\n\r\n                <div class=\"row\">\r\n                    <div class=\"col-xs-4 text-xs-right\">\r\n                        <span class=\"text_part_title_gray_01\">From</span>\r\n                    </div>\r\n                    <div class=\"col-xs-8\">\r\n                        <input type=\"text\" ng-if=\"!vm.html5\"\r\n                               ui-date ui-date-format=\"mm/dd/yy\"\r\n                               ng-model=\"vm.choices.date_start\"\r\n                               ng-required=\"true\"\r\n                               class=\"form-control input-sm\">\r\n\r\n                        <input type=\"date\" ng-if=\"vm.html5\"\r\n                               ng-model=\"vm.choices.date_start_\"\r\n                               data-date-format=\"mm/dd/yyyy\"\r\n                               class=\"form-control input-sm\" />\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n    </div>\r\n    <div class=\"col-sm-6\">\r\n        <div class=\"row text-xs-left  m-y-1 \">\r\n\r\n\r\n            <div class=\"col-xs-12 col-xs-offset-0\" ng-if=\"breakpoint.md || breakpoint.lg\">\r\n                <!--\r\n                    <input type=\"text\" ui-date ui-date-format=\"mm/dd/yy\" ng-model=\"vm.choices.date_end_\" class=\"form-control form-control-md\" />\r\n                -->\r\n\r\n\r\n                <input type=\"text\" ng-if=\"!vm.html5\"\r\n                       ui-date ui-date-format=\"mm/dd/yy\"\r\n                       ng-model=\"vm.choices.date_end\"\r\n                       ng-required=\"true\"\r\n                       class=\"form-control input-sm\">\r\n\r\n                <input type=\"date\" ng-if=\"vm.html5\"\r\n                       ng-model=\"vm.choices.date_end_\"\r\n                       data-date-format=\"mm/dd/yyyy\"\r\n                       class=\"form-control input-sm\" />\r\n\r\n\r\n\r\n            </div>\r\n\r\n\r\n\r\n            <div class=\"col-xs-12 col-xs-offset-0\" ng-if=\"breakpoint.xs || breakpoint.sm\">\r\n\r\n                <div class=\"row\">\r\n                    <div class=\"col-xs-4 text-xs-right\">\r\n                        <span class=\"text_part_title_gray_01\">To</span>\r\n                    </div>\r\n                    <div class=\"col-xs-8\">\r\n                        <input type=\"text\" ng-if=\"!vm.html5\"\r\n                               ui-date ui-date-format=\"mm/dd/yy\"\r\n                               ng-model=\"vm.choices.date_end\"\r\n                               ng-required=\"true\"\r\n                               class=\"form-control input-sm\">\r\n\r\n                        <input type=\"date\" ng-if=\"vm.html5\"\r\n                               ng-model=\"vm.choices.date_end_\"\r\n                               data-date-format=\"mm/dd/yyyy\"\r\n                               class=\"form-control input-sm\" />\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n    </div>\r\n</div>";

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    app.directive('searchItemSelectBusiness', _directive);

	    function _directive() {
	        var _res = {
	            restrict: 'E',
	            replace: true,
	            template: __webpack_require__(87)
	        };

	        return _res;
	    }
	};

/***/ },
/* 87 */
/***/ function(module, exports) {

	module.exports = "<select class=\"form-control input-sm\"\r\n        ng-model=\"vm.choices.bustype\"\r\n        ng-change=\"vm.set2start()\"\r\n        ng-options=\"type as type.name for type in vm.bustypes\"\r\n        name=\"inputSubject\"\r\n        id=\"inputSubject\"></select>\r\n";

/***/ },
/* 88 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (app) {

	    app.directive('ngConfirmClick', _confirmclick3);

	    /* @ngInject */
	    function _confirmclick() {
	        return {
	            restrict: 'A',
	            link: function link(scope, element, attrs) {
	                element.bind('click', function () {
	                    var condition = scope.$eval(attrs.ngConfirmCondition);
	                    if (condition) {
	                        var message = attrs.ngConfirmMessage;
	                        if (message && confirm(message)) {
	                            scope.$apply(attrs.ngConfirmClick);
	                        }
	                    } else {
	                        scope.$apply(attrs.ngConfirmClick);
	                    }
	                });
	            }
	        };
	    }

	    /* @ngInject */
	    function _confirmclick2() {
	        return {
	            link: function link(scope, element, attr) {
	                var msg = attr.ngConfirmClick || "Are you sure?";
	                var clickAction = attr.confirmedClick;
	                element.bind('click', function (event) {
	                    if (window.confirm(msg)) {
	                        scope.$eval(clickAction);
	                    }
	                });
	            }
	        };
	    }

	    /* @ngInject */
	    function _confirmclick3() {
	        return {
	            priority: -1,
	            restrict: 'A',
	            link: function link(scope, element, attrs) {
	                element.bind('click', function (e) {
	                    var message = attrs.ngConfirmClick;
	                    if (message && !confirm(message)) {
	                        e.stopImmediatePropagation();
	                        e.preventDefault();
	                    }
	                });
	            }
	        };
	    }
	};

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {
	    __webpack_require__(90)(app);
	    __webpack_require__(94)(app);
	    __webpack_require__(97)(app);
	    __webpack_require__(101)(app);
	    __webpack_require__(125)(app);
	    __webpack_require__(128)(app);
	    __webpack_require__(139)(app);
	    __webpack_require__(142)(app);
	    __webpack_require__(155)(app);
	    __webpack_require__(160)(app);
	    __webpack_require__(166)(app);
	    __webpack_require__(171)(app);
	    __webpack_require__(182)(app);
	    __webpack_require__(187)(app);
	    __webpack_require__(190)(app);
	    __webpack_require__(196)(app);
	    __webpack_require__(233)(app);

	    __webpack_require__(273)(app);
	};

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    /* @ngInject */
	    function configRoutes($stateProvider) {
	        var _views = {};

	        _views = {
	            '': { template: __webpack_require__(91) },
	            'header@root': { template: __webpack_require__(92) },
	            'footer@root': { template: __webpack_require__(93) }
	        };

	        $stateProvider.state('root', { abstract: true, url: '', views: _views });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	};

/***/ },
/* 91 */
/***/ function(module, exports) {

	module.exports = "<ui-view name=\"header\" breakpoint>\r\n\r\n</ui-view>\r\n\r\n\r\n<div ui-view=\"content\" breakpoint>\r\n\r\n</div>\r\n\r\n\r\n<div class=\"container-fluid\" ui-view=\"footer\" breakpoint>\r\n</div>\r\n\r\n";

/***/ },
/* 92 */
/***/ function(module, exports) {

	module.exports = "\r\n<!--\r\n-->\r\n<top-header></top-header>\r\n";

/***/ },
/* 93 */
/***/ function(module, exports) {

	module.exports = "<footer-info ng-if=\"breakpoint.md || breakpoint.lg\"></footer-info>";

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    /* @ngInject */
	    function configRoutes($stateProvider) {
	        var _views = {};
	        _views = { 'content@root': { template: __webpack_require__(95), controller: __webpack_require__(96)(app), controllerAs: 'vm' } };
	        $stateProvider.state('home', { parent: 'root', url: '', views: _views });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	};

/***/ },
/* 95 */
/***/ function(module, exports) {

	module.exports = "<div    ng-class=\"{ 'desktop': (breakpoint.md||breakpoint.lg)  , 'mobile': (breakpoint.xs||breakpoint.sm)  , 'break_xs': breakpoint.xs, 'break_sm': breakpoint.sm, 'break_md': breakpoint.md, 'break_lg': breakpoint.lg }\" >\r\n    <slide-show ng-cloak></slide-show>\r\n    <info-list></info-list>\r\n    <get-started-now></get-started-now>\r\n</div>\r\n\r\n\r\n";

/***/ },
/* 96 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (app) {
	    /* @ngInject */
	    function _Home_Controller($scope, $timeout, $state, $http, $filter, $sessionStorage, LoginService, toaster) {
	        var vm = this;
	        vm.breakpoint = {};
	        vm.mobile = false;
	        $scope.$watch('vm.breakpoint.xs || vm.breakpoint.sm', function () {
	            vm.mobile = vm.breakpoint.xs || vm.breakpoint.sm;
	        });

	        //        vm.breakpoint = $rootScope.breakpoint;
	    }
	    _Home_Controller.$inject = ["$scope", "$timeout", "$state", "$http", "$filter", "$sessionStorage", "LoginService", "toaster"];;

	    return _Home_Controller;
	};

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    __webpack_require__(98);

	    /* @ngInject */
	    function configRoutes($stateProvider) {

	        var _views = {};

	        //        _views = { 'content@root': { template: require('./content.tpl.html') } };

	        _views = {
	            'content@root': {

	                //                template: require('./content.tpl.html')

	                templateProvider: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(1, function () {
	                        var template = __webpack_require__(100);
	                        deferred.resolve(template);
	                    });
	                    return deferred.promise;
	                }]

	            }
	        };

	        $stateProvider.state('about', { parent: 'root', url: 'about', views: _views });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	};

/***/ },
/* 98 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 99 */,
/* 100 */,
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    /* @ngInject */
	    function configRoutes($stateProvider) {
	        var _views = {};

	        //        _views = { 'content@root': { template: require('./admin.tpl.html') /* , controller: require('./AdminController.js')(app), controllerAs: 'vm' */ } };

	        _views = {
	            'content@root': {

	                //                template: require('./admin.tpl.html')


	                templateProvider: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(1, function () {
	                        var template = __webpack_require__(124);
	                        deferred.resolve(template);
	                    });
	                    return deferred.promise;
	                }]

	            }
	        };

	        $stateProvider.state('admin', { parent: 'root', url: 'admin', views: _views });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	    __webpack_require__(102)(app);
	    __webpack_require__(105)(app);
	};

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    /* @ngInject */
	    function configRoutes($stateProvider) {

	        $stateProvider.state('admin.historypasswords', {
	            url: '/historypasswords',

	            //            template: require('./admin_historypasswords.tpl.html'),


	            templateProvider: ['$q', function ($q) {
	                var deferred = $q.defer();
	                __webpack_require__.e/* nsure */(1, function () {
	                    var template = __webpack_require__(103);
	                    deferred.resolve(template);
	                });
	                return deferred.promise;
	            }]

	            //            ,controller: require('./HistoryPasswordsController.js')(app),

	            , controller: ['$q', function ($q) {
	                var deferred = $q.defer();
	                __webpack_require__.e/* nsure */(2, function () {
	                    var _contr = __webpack_require__(104)(app);
	                    deferred.resolve(_contr);
	                });
	                return deferred.promise;
	            }],

	            controllerAs: 'vm',
	            authenticate: true
	        });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	};

/***/ },
/* 103 */,
/* 104 */,
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(106);

	module.exports = function (app) {

	    __webpack_require__(108)(app);
	    __webpack_require__(110)(app);

	    /* @ngInject */
	    function configRoutes($stateProvider) {
	        $stateProvider.state('admin.allusers', {
	            url: '/allusers',

	            //                template: require('./allusers.tpl.html'),

	            templateProvider: ['$q', function ($q) {
	                var deferred = $q.defer();
	                __webpack_require__.e/* nsure */(1, function () {
	                    var template = __webpack_require__(120);
	                    deferred.resolve(template);
	                });
	                return deferred.promise;
	            }]

	            //                ,controller: require('./AllUsersController.js')(app)
	            , controllerAs: 'vm', authenticate: true,

	            controller: ['$q', function ($q) {
	                var deferred = $q.defer();
	                __webpack_require__.e/* nsure */(2, function () {
	                    var _contr = __webpack_require__(121)(app);
	                    deferred.resolve(_contr);
	                });
	                return deferred.promise;
	            }]

	        });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	};

/***/ },
/* 106 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 107 */,
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    app.directive('userDetailInfo', _userDetailInfo);

	    function _userDetailInfo() {
	        var _res = {
	            restrict: 'E',
	            replace: 'true',
	            template: __webpack_require__(109)
	        };

	        return _res;
	    }
	};

/***/ },
/* 109 */
/***/ function(module, exports) {

	module.exports = "<div>\r\n\r\n    <div class=\"col-sm-12 m-x-1\">\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-6 m-x-0\">\r\n                <span class=\"text_gray_01\">User Id: </span><span class=\"text_orange_01\">{{vm.crnt_row.UserId}}</span>\r\n                <span class=\"text_gray_01\">User Name: </span><span class=\"text_orange_01\">{{vm.crnt_row.UserName}}</span>\r\n            </div>\r\n            <div class=\"col-sm-6 m-x-0\">\r\n                <span class=\"text_gray_01\">First Name: </span><span class=\"text_orange_01\">{{vm.crnt_row.FirstName}}</span>\r\n                <span class=\"text_gray_01\">Last Name: </span><span class=\"text_orange_01\">{{vm.crnt_row.LastName}}</span>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-12 m-x-0\">\r\n                <span class=\"text_gray_01\">Address: </span>\r\n                <span class=\"text_orange_01\">\r\n                    {{vm.crnt_row.Address}}\r\n                    {{vm.crnt_row.City}},\r\n                    {{vm.crnt_row.State}}\r\n                    {{vm.crnt_row.Zip}}\r\n                </span>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-6 m-x-0\">\r\n                <span class=\"text_gray_01\">E-mail: </span>\r\n                <span class=\"text_orange_01\">{{vm.crnt_row.Email}}</span>\r\n            </div>\r\n            <div class=\"col-sm-6 m-x-0\">\r\n                <span class=\"text_gray_01\">Phone: </span>\r\n                <span class=\"text_orange_01\">{{vm.crnt_row.PhoneNumber}}</span>\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-6 m-x-0\">\r\n                <span class=\"text_gray_01\">Active: </span>\r\n                <span class=\"text_orange_01\">{{vm.crnt_row.IsActive?'Yes':'No'}}</span>\r\n                <button ng-click=\"vm.change_active()\" ng-show=\"vm.userinfo.issuperadmin\">\r\n                    {{vm.crnt_row.IsActive?'Deactivate':'Activate'}}\r\n                </button>\r\n            </div>\r\n            <div class=\"col-sm-6 m-x-0\">\r\n                <span class=\"text_gray_01\">Admin: </span>\r\n                <span class=\"text_orange_01\">{{vm.crnt_row.IsAdmin?'Yes':'No'}}</span>\r\n                <button ng-click=\"vm.change_admin()\" ng-show=\"vm.userinfo.isadmin\">\r\n                    {{vm.crnt_row.IsAdmin?'Remove from Admin':'Add to Admin'}}\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-6 m-x-0\">\r\n                <span class=\"text_gray_01\">Current Password: </span>\r\n                <span class=\"text_orange_01\">{{vm.crnt_row.Password}}</span>\r\n            </div>\r\n            <div class=\"col-sm-6 m-x-0\">\r\n                <span class=\"text_gray_01\">Previous Password: </span>\r\n                <span class=\"text_orange_01\">{{vm.crnt_row.Password_prev}}</span>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n                <fieldset title=\"Subscription\">\r\n                    <span class=\"text_gray_01\">Status: </span>\r\n                    <span class=\"text_orange_01\">{{vm.crnt_row.SubscrStatus}}</span>\r\n                    <span class=\"text_gray_01\">Create: </span>\r\n                    <span class=\"text_orange_01\">{{vm.crnt_row.SubscrCreate}}</span>\r\n                    <span class=\"text_gray_01\">End: </span>\r\n                    <span class=\"text_orange_01\">{{vm.crnt_row.SubscrEnd}}</span>\r\n\r\n                </fieldset>\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <hr />\r\n\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-12  m-x-0\">\r\n                <button class=\"btn btn-sm\" ng-click=\"vm.send_exp_email()\">Send Expiration Subscription E-mail</button>\r\n            </div>\r\n        </div>\r\n        <br />\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-12  m-x-0\">\r\n                <button class=\"btn btn-sm m-r-1\" ng-click=\"vm.edit_user()\" ng-show=\"vm.userinfo.issuperadmin\">\r\n                    Edit user\r\n                </button>\r\n                <button class=\"btn btn-sm m-r-1\"\r\n                        ng-confirm-click=\"Are you sure to delete {{vm.crnt_row.UserName}} ?\"\r\n                        ng-click=\"vm.delete_user()\"\r\n                        ng-show=\"vm.userinfo.issuperadmin\">\r\n                    Delete user\r\n                </button>\r\n                <button class=\"btn btn-sm m-r-1\"\r\n                        ng-confirm-click=\"Are you sure to reset password for  {{vm.crnt_row.UserName}} ?\"\r\n                        ng-click=\"vm.reset_password()\"\r\n                        ng-show=\"vm.userinfo.issuperadmin\">\r\n                    Reset Password\r\n                </button>\r\n\r\n\r\n                <button class=\"btn btn-sm m-r-1\"\r\n                        ng-click=\"vm.change_scount()\"\r\n                        ng-show=\"vm.userinfo.issuperadmin\">\r\n                    Update Subscription Count\r\n                </button>\r\n\r\n\r\n\r\n                <button class=\"btn btn-sm m-r-1\" ng-click=\"vm.browse_orders()\">\r\n                    Orders\r\n                </button>\r\n\r\n                <button class=\"btn btn-sm m-r-1\" ng-click=\"vm.browse_queries()\">\r\n                    Queries\r\n                </button>\r\n\r\n\r\n\r\n\r\n            </div>\r\n        </div>\r\n\r\n\r\n    </div>\r\n\r\n    <div class=\"col-sm-12 text-sm-center\">\r\n        Page {{vm.gridOptions.paginationCurrentPage}} of {{vm.gridApi.pagination.getTotalPages()}}\r\n    </div>\r\n</div>";

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    app.directive('userActivityInformation', _userActivityInformation);
	    app.directive('userSubscriptionInformation', _userSubscriptionInformation);
	    app.directive('userInformation', _userInformation);

	    app.directive('userDetailInfoNew', _userDetailInfoNew);

	    app.directive('userHistoryBlock', _userHistoryBlock);
	    app.directive('userActionsBlock', _userActionsBlock);

	    app.directive('userFilterInfoPanel', _userFilterInfoPanel);
	    app.directive('userFilterFormPanel', _userFilterFormPanel);

	    app.directive('userSortInfoPanel', _userSortInfoPanel);

	    function _userDetailInfoNew() {
	        var _res = {
	            restrict: 'E',
	            replace: 'true',
	            template: __webpack_require__(111)
	        };

	        return _res;
	    }

	    function _userActivityInformation() {
	        var _res = {
	            restrict: 'E',
	            replace: 'true',
	            template: __webpack_require__(112)
	        };

	        return _res;
	    }

	    function _userSubscriptionInformation() {
	        var _res = {
	            restrict: 'E',
	            replace: 'true',
	            template: __webpack_require__(113)
	        };

	        return _res;
	    }

	    function _userInformation() {
	        var _res = {
	            restrict: 'E',
	            replace: 'true',
	            template: __webpack_require__(114)
	        };

	        return _res;
	    }

	    function _userHistoryBlock() {
	        var _res = {
	            restrict: 'E',
	            replace: 'true',
	            template: __webpack_require__(115)
	        };

	        return _res;
	    }

	    function _userActionsBlock() {
	        var _res = {
	            restrict: 'E',
	            replace: 'true',
	            template: __webpack_require__(116)
	        };

	        return _res;
	    }

	    function _userFilterInfoPanel() {
	        var _res = {
	            restrict: 'E',
	            replace: 'true',
	            template: __webpack_require__(117)
	        };

	        return _res;
	    }

	    function _userFilterFormPanel() {
	        var _res = {
	            restrict: 'E',
	            replace: 'true',
	            template: __webpack_require__(118)
	        };

	        return _res;
	    }

	    function _userSortInfoPanel() {
	        var _res = {
	            restrict: 'E',
	            replace: 'true',
	            template: __webpack_require__(119)
	        };

	        return _res;
	    }
	};

/***/ },
/* 111 */
/***/ function(module, exports) {

	module.exports = "<div>\r\n    <div class=\"row\">\r\n        <div class=\"col-sm-4\">\r\n            <user-information></user-information>\r\n        </div>\r\n        <div class=\"col-sm-4\">\r\n            <user-subscription-information></user-subscription-information>\r\n        </div>\r\n        <div class=\"col-sm-4\">\r\n            <user-activity-information></user-activity-information>\r\n        </div>\r\n    </div>\r\n\r\n\r\n\r\n    <div class=\"row m-t-1\">\r\n        <div class=\"col-sm-4\">\r\n            <user-history-block></user-history-block>\r\n        </div>\r\n        <div class=\"col-sm-8\">\r\n            <user-actions-block></user-actions-block>\r\n        </div>\r\n    </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n";

/***/ },
/* 112 */
/***/ function(module, exports) {

	module.exports = "<div class=\"row\">\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_orange_01\">Activity Information:</span>\r\n    </div>\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_gray_01\">Registration Date:</span>\r\n        <span class=\"text_orange_01\">{{vm.crnt_row.CreateDate}}</span>\r\n    </div>\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_gray_01\">Subscription Date:</span>\r\n        <span class=\"text_orange_01\">{{vm.crnt_row.SubscrCreate}}</span>\r\n    </div>\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_gray_01\">Last Activity Date:</span>\r\n        <span class=\"text_orange_01\">{{vm.crnt_row.LastActivityDate}}</span>\r\n    </div>\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_gray_01\">Cancellation Date:</span>\r\n        <span class=\"text_orange_01\">{{vm.crnt_row.SubscrCancel}}</span>\r\n    </div>\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_gray_01\">Subscription End Date:</span>\r\n        <span class=\"text_orange_01\">{{vm.crnt_row.SubscrEnd}}</span>\r\n    </div>\r\n\r\n\r\n</div>";

/***/ },
/* 113 */
/***/ function(module, exports) {

	module.exports = "<div class=\"row\">\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_orange_01\">Subscription Information:</span>\r\n    </div>\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_gray_01\">Subscription Status:</span>\r\n        <span class=\"text_orange_01\">{{vm.crnt_row.SubscrStatus}}</span>\r\n    </div>\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_gray_01\">Payment Type:</span>\r\n        <span class=\"text_orange_01\">{{vm.crnt_row.SubscrType}}</span>\r\n    </div>\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_gray_01\">Monthly Download Limit:</span>\r\n        <span class=\"text_orange_01\">{{vm.crnt_row.MonthlyLimitCount}}</span>\r\n    </div>\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_gray_01\">Records Left to Load:</span>\r\n        <span class=\"text_orange_01\">{{vm.crnt_row.SubscriptionLeftCount}}</span>\r\n    </div>\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_gray_01\">Next Month Starts:</span>\r\n        <span class=\"text_orange_01\">{{vm.crnt_row.NextMonthStartDate}}</span>\r\n    </div>\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_gray_01\">Total Subscriber Days:</span>\r\n        <span class=\"text_orange_01\">{{vm.crnt_row.total_subscr_days}}</span>\r\n    </div>\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_gray_01\">Net Worth:</span>\r\n        <span class=\"text_orange_01\">{{vm.crnt_row.net_worth}}</span>\r\n    </div>\r\n\r\n\r\n</div>\r\n\r\n";

/***/ },
/* 114 */
/***/ function(module, exports) {

	module.exports = "<div class=\"row\">\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_orange_01\">User Information:</span>\r\n    </div>\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_gray_01\">First Name: </span>\r\n        <span class=\"text_orange_01\">{{vm.crnt_row.FirstName}}</span>\r\n        <span class=\"text_gray_01\">Last Name: </span>\r\n        <span class=\"text_orange_01\">{{vm.crnt_row.LastName}}</span>\r\n    </div>\r\n\r\n\r\n\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_gray_01\">User Name: </span><span class=\"text_orange_01\">{{vm.crnt_row.UserName}}</span>\r\n    </div>\r\n\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_gray_01\">Current Password: </span>\r\n        <span class=\"text_orange_01\">{{vm.crnt_row.Password}}</span>\r\n    </div>\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_gray_01\">E-mail: </span>\r\n        <span class=\"text_orange_01\">{{vm.crnt_row.Email}}</span>\r\n    </div>\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_gray_01\">Address: </span>\r\n        <span class=\"text_orange_01\">\r\n            {{vm.crnt_row.Address}}\r\n            {{vm.crnt_row.City}},\r\n            {{vm.crnt_row.State}}\r\n            {{vm.crnt_row.Zip}}\r\n        </span>\r\n    </div>\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_gray_01\">Phone: </span>\r\n        <span class=\"text_orange_01\">{{vm.crnt_row.PhoneNumber}}</span>\r\n    </div>\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_gray_01\">Admin: </span>\r\n        <span class=\"text_orange_01\">{{vm.crnt_row.IsAdmin?'Yes':'No'}}</span>\r\n        <span class=\"text_gray_01\">Super Admin: </span>\r\n        <span class=\"text_orange_01\">{{vm.crnt_row.IsSuperAdmin?'Yes':'No'}}</span>\r\n        <span class=\"text_gray_01\">Active: </span>\r\n        <span class=\"text_orange_01\">{{vm.crnt_row.IsActive?'Yes':'No'}}</span>\r\n    </div>\r\n</div>";

/***/ },
/* 115 */
/***/ function(module, exports) {

	module.exports = "<div class=\"row\">\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_orange_01\">History:</span>\r\n    </div>\r\n    <div class=\"col-sm-12 m-t-1\">\r\n        <button class=\"btn btn-sm btn-primary-outline m-r-1\" ng-click=\"vm.browse_orders()\">\r\n            Orders\r\n        </button>\r\n\r\n        <button class=\"btn btn-sm btn-primary-outline m-r-1\" ng-click=\"vm.browse_queries()\">\r\n            Queries\r\n        </button>\r\n    </div>\r\n</div>";

/***/ },
/* 116 */
/***/ function(module, exports) {

	module.exports = "<div class=\"row\">\r\n    <div class=\"col-sm-12\">\r\n        <span class=\"text_orange_01\">Actions:</span>\r\n    </div>\r\n    <div class=\"col-sm-12 m-t-0\">\r\n        <button class=\"btn btn-sm btn-primary-outline m-r-1 m-t-1\" ng-click=\"vm.edit_user()\" ng-show=\"vm.userinfo.issuperadmin\">\r\n            Edit user\r\n        </button>\r\n        <button class=\"btn btn-sm btn-danger-outline m-r-1 m-t-1\"\r\n                ng-confirm-click=\"Are you sure to reset password for  {{vm.crnt_row.UserName}} ?\"\r\n                ng-click=\"vm.reset_password()\"\r\n                ng-show=\"vm.userinfo.issuperadmin\">\r\n            Reset Password\r\n        </button>\r\n\r\n\r\n        <button class=\"btn btn-sm btn-primary-outline m-r-1  m-t-1\"\r\n                ng-click=\"vm.change_scount()\"\r\n                ng-show=\"vm.userinfo.issuperadmin\">\r\n            Update Subscription Count\r\n        </button>\r\n\r\n\r\n        <button ng-click=\"vm.change_superadmin()\" class=\"btn btn-sm btn-primary-outline m-r-1  m-t-1\"  ng-show=\"vm.userinfo.issuperadmin\">\r\n            {{vm.crnt_row.IsSuperAdmin?'Remove from Super Admin':'Add to Super Admin'}}\r\n        </button>\r\n\r\n\r\n\r\n\r\n\r\n    </div>\r\n\r\n    <div class=\"col-sm-12 m-t-0\">\r\n\r\n        <button class=\"btn btn-sm btn-primary-outline m-r-1 m-t-1\" ng-click=\"vm.send_exp_email()\">\r\n            Send Credit Card Expiration E-mail\r\n        </button>\r\n\r\n\r\n\r\n        <button ng-click=\"vm.unsubscribe()\"\r\n                ng-confirm-click=\"Are you sure?\"\r\n                class=\"btn btn-sm btn-primary-outline m-r-1  m-t-1\"\r\n                ng-show=\"vm.userinfo.issuperadmin\">\r\n            Unsubscribe\r\n        </button>\r\n\r\n        <button ng-click=\"vm.unsubscribe_wo_email()\"\r\n                ng-confirm-click=\"Are you sure?\"\r\n                class=\"btn btn-sm btn-primary-outline m-r-1  m-t-1\"\r\n                ng-show=\"vm.userinfo.issuperadmin\">\r\n            Unsubscribe w/o E-mail\r\n        </button>\r\n\r\n\r\n\r\n        <button ng-click=\"vm.change_active()\" class=\"btn btn-sm btn-danger-outline m-r-1  m-t-1\" ng-show=\"vm.userinfo.issuperadmin\">\r\n            {{vm.crnt_row.IsActive?'Deactivate':'Activate'}}\r\n        </button>\r\n\r\n\r\n        <button class=\"btn btn-sm btn-danger-outline m-r-1  m-t-1\"\r\n                ng-confirm-click=\"Are you sure to delete {{vm.crnt_row.UserName}} ?\"\r\n                ng-click=\"vm.delete_user()\"\r\n                ng-show=\"vm.userinfo.issuperadmin\">\r\n            Delete user\r\n        </button>\r\n\r\n\r\n    </div>\r\n\r\n\r\n</div>";

/***/ },
/* 117 */
/***/ function(module, exports) {

	module.exports = "<div>\r\n    <span><b>Current Filters:</b> &nbsp;&nbsp; </span>\r\n\r\n    <span ng-show=\"vm.filters.firstname\" class=\"text_gray_01\">First Name - </span>\r\n    <span ng-show=\"vm.filters.firstname\" class=\"text_orange_01\">{{vm.filters.firstname}}</span>\r\n\r\n    <span ng-show=\"vm.filters.lastname\" class=\"text_gray_01\">Last Name - </span>\r\n    <span ng-show=\"vm.filters.lastname\" class=\"text_orange_01\">{{vm.filters.lastname}}</span>\r\n\r\n\r\n    <span ng-show=\"vm.filters.username\" class=\"text_gray_01\">User Name - </span>\r\n    <span ng-show=\"vm.filters.username\" class=\"text_orange_01\">{{vm.filters.username}}</span>\r\n\r\n    <span ng-show=\"vm.filters.email\" class=\"text_gray_01\">E-mail - </span>\r\n    <span ng-show=\"vm.filters.email\" class=\"text_orange_01\">{{vm.filters.email}}</span>\r\n\r\n    <span ng-show=\"vm.filters.city\" class=\"text_gray_01\">City - </span>\r\n    <span ng-show=\"vm.filters.city\" class=\"text_orange_01\">{{vm.filters.city}}</span>\r\n\r\n    <span ng-show=\"vm.filters.address\" class=\"text_gray_01\">Address - </span>\r\n    <span ng-show=\"vm.filters.address\" class=\"text_orange_01\">{{vm.filters.address}}</span>\r\n\r\n    <span ng-show=\"vm.filters.haspassword\" class=\"text_gray_01\">Password History - </span>\r\n    <span ng-show=\"vm.filters.haspassword\" class=\"text_orange_01\">{{vm.filters.haspassword}}</span>\r\n\r\n    <span ng-show=\"vm.filters.isadmin\" class=\"text_gray_01\">Is Admin - </span>\r\n    <span ng-show=\"vm.filters.isadmin\" class=\"text_orange_01\">{{vm.filters.isadmin}}</span>\r\n\r\n    <span ng-show=\"vm.filters.issuperadmin\" class=\"text_gray_01\">Is Super Admin - </span>\r\n    <span ng-show=\"vm.filters.issuperadmin\" class=\"text_orange_01\">{{vm.filters.issuperadmin}}</span>\r\n\r\n\r\n    <span ng-show=\"vm.filters.date_la_start||vm.filters.date_la_end\" class=\"text_gray_01\">Last Activity - </span>\r\n    <span ng-show=\"vm.filters.date_la_start\" class=\"text_orange_01\"> From {{vm.filters.date_la_start}}</span>\r\n    <span ng-show=\"vm.filters.date_la_end\" class=\"text_orange_01\"> To {{vm.filters.date_la_end}}</span>\r\n\r\n\r\n    <span ng-show=\"vm.filters.date_reg_start||vm.filters.date_reg_end\" class=\"text_gray_01\">Registration Date - </span>\r\n    <span ng-show=\"vm.filters.date_reg_start\" class=\"text_orange_01\"> From {{vm.filters.date_reg_start}}</span>\r\n    <span ng-show=\"vm.filters.date_reg_end\" class=\"text_orange_01\"> To {{vm.filters.date_reg_end}}</span>\r\n\r\n\r\n    <span ng-show=\"vm.filters.date_subcre_start||vm.filters.date_subcre_end\" class=\"text_gray_01\">Subscription Create Date - </span>\r\n    <span ng-show=\"vm.filters.date_subcre_start\" class=\"text_orange_01\"> From {{vm.filters.date_subcre_start}}</span>\r\n    <span ng-show=\"vm.filters.date_subcre_end\" class=\"text_orange_01\"> To {{vm.filters.date_subcre_end}}</span>\r\n\r\n\r\n\r\n    <span ng-show=\"vm.filters.date_subend_start||vm.filters.date_subend_end\" class=\"text_gray_01\">Subscription End Date - </span>\r\n    <span ng-show=\"vm.filters.date_subend_start\" class=\"text_orange_01\"> From {{vm.filters.date_subend_start}}</span>\r\n    <span ng-show=\"vm.filters.date_subend_end\" class=\"text_orange_01\"> To {{vm.filters.date_subend_end}}</span>\r\n\r\n\r\n\r\n    <span ng-show=\"vm.filters.date_subrealend_start||vm.filters.date_subrealend_end\" class=\"text_gray_01\">Subscription Actual End Date - </span>\r\n    <span ng-show=\"vm.filters.date_subrealend_start\" class=\"text_orange_01\"> From {{vm.filters.date_subrealend_start}}</span>\r\n    <span ng-show=\"vm.filters.date_subrealend_end\" class=\"text_orange_01\"> To {{vm.filters.date_subrealend_end}}</span>\r\n\r\n\r\n\r\n    <span ng-show=\"vm.filters.status!='all'\" class=\"text_gray_01\">Status - </span>\r\n    <span ng-show=\"vm.filters.status=='act'\" class=\"text_orange_01\">Active</span>\r\n    <span ng-show=\"vm.filters.status=='notact'\" class=\"text_orange_01\">Not Active</span>\r\n\r\n\r\n    <span ng-show=\"vm.filters.subscr_status!='all'\" class=\"text_gray_01\">Subscription Status - </span>\r\n    <span ng-show=\"vm.filters.subscr_status=='active'\" class=\"text_orange_01\">Active</span>\r\n    <span ng-show=\"vm.filters.subscr_status=='canceled'\" class=\"text_orange_01\">Canceled</span>\r\n    <span ng-show=\"vm.filters.subscr_status=='terminated'\" class=\"text_orange_01\">Terminated</span>\r\n    <span ng-show=\"vm.filters.subscr_status=='draft'\" class=\"text_orange_01\">Draft</span>\r\n    <span ng-show=\"vm.filters.subscr_status=='suspended'\" class=\"text_orange_01\">Suspended</span>\r\n    <span ng-show=\"vm.filters.subscr_status=='registrants'\" class=\"text_orange_01\">Registrants</span>\r\n\r\n    \r\n\r\n\r\n\r\n    <span ng-show=\"vm.filters.payment!='all'\" class=\"text_gray_01\">Payment - </span>\r\n    <span ng-show=\"vm.filters.payment=='cc'\" class=\"text_orange_01\">Credit Card</span>\r\n    <span ng-show=\"vm.filters.payment=='paypal'\" class=\"text_orange_01\">PayPal</span>\r\n    <span ng-show=\"vm.filters.payment=='bitcoin'\" class=\"text_orange_01\">Bitcoin</span>\r\n\r\n\r\n</div>";

/***/ },
/* 118 */
/***/ function(module, exports) {

	module.exports = "<div class=\"col-sm-12 m-x-1\">\r\n    <h4 class=\"text-sm-center\">Filters</h4><br />\r\n\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-sm-6 p-x-1\">\r\n            <label>First Name</label>\r\n            <input type=\"text\" ng-model=\"vm.filters.firstname\" />\r\n        </div>\r\n        <div class=\"col-sm-6 p-x-1\">\r\n            <label>Last Name</label>\r\n            <input type=\"text\" ng-model=\"vm.filters.lastname\" />\r\n        </div>\r\n    </div>\r\n\r\n\r\n\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-sm-6 p-x-1\">\r\n            <label>User Name</label>\r\n            <input type=\"text\" ng-model=\"vm.filters.username\" />\r\n        </div>\r\n        <div class=\"col-sm-6 p-x-1\">\r\n            <label>E-mail</label>\r\n            <input type=\"text\" class=\"disabled\" ng-model=\"vm.filters.email\" />\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-sm-6 p-x-1\">\r\n            <label>Address</label>\r\n            <input type=\"text\" class=\"disabled\" ng-model=\"vm.filters.address\" />\r\n        </div>\r\n        <div class=\"col-sm-6 p-x-1\">\r\n            <label>City</label>\r\n            <input type=\"text\" class=\"disabled\" ng-model=\"vm.filters.city\" />\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-sm-6 p-x-1\">\r\n            <label>Has password History</label>\r\n            <input type=\"checkbox\" ng-model=\"vm.filters.haspassword\" style=\"height: 1em; width: 1em;\" />\r\n        </div>\r\n        <div class=\"col-sm-3 p-x-1\">\r\n            <label>Is Admin</label>\r\n            <input type=\"checkbox\" ng-model=\"vm.filters.isadmin\" style=\"height: 1em; width: 1em;\" />\r\n        </div>\r\n        <div class=\"col-sm-3 p-x-1\">\r\n            <label>Is Super Admin</label>\r\n            <input type=\"checkbox\" ng-model=\"vm.filters.issuperadmin\" style=\"height: 1em; width: 1em;\" />\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <div class=\"row\">\r\n\r\n        <div class=\"col-sm-6 p-x-1\">\r\n            <label>Registration Date</label>\r\n            &nbsp;\r\n            <label>From</label>\r\n            &nbsp;\r\n            <input type=\"text\" ui-date ui-date-format=\"mm/dd/yy\" ng-model=\"vm.filters.date_reg_start_\" />\r\n            &nbsp;\r\n            <label>To</label>\r\n            &nbsp;\r\n            <input type=\"text\" ui-date ui-date-format=\"mm/dd/yy\" ng-model=\"vm.filters.date_reg_end_\" />\r\n        </div>\r\n\r\n        <div class=\"col-sm-6 p-x-1\">\r\n            <label>Last Activity Date</label>\r\n            &nbsp;\r\n            <label>From</label>\r\n            &nbsp;\r\n            <input type=\"text\" ui-date ui-date-format=\"mm/dd/yy\" ng-model=\"vm.filters.date_la_start_\" />\r\n            &nbsp;\r\n            <label>To</label>\r\n            &nbsp;\r\n            <input type=\"text\" ui-date ui-date-format=\"mm/dd/yy\" ng-model=\"vm.filters.date_la_end_\" />\r\n        </div>\r\n    </div>\r\n\r\n\r\n\r\n    <div class=\"row\">\r\n\r\n        <div class=\"col-sm-6 p-x-1\">\r\n            <label>Subscr Create Date</label>\r\n            &nbsp;\r\n            <label>From</label>\r\n            &nbsp;\r\n            <input type=\"text\" ui-date ui-date-format=\"mm/dd/yy\" ng-model=\"vm.filters.date_subcre_start_\" />\r\n            &nbsp;\r\n            <label>To</label>\r\n            &nbsp;\r\n            <input type=\"text\" ui-date ui-date-format=\"mm/dd/yy\" ng-model=\"vm.filters.date_subcre_end_\" />\r\n        </div>\r\n\r\n        <div class=\"col-sm-6 p-x-1\">\r\n            <label>Subscr End Date</label>\r\n            &nbsp;\r\n            <label>From</label>\r\n            &nbsp;\r\n            <input type=\"text\" ui-date ui-date-format=\"mm/dd/yy\" ng-model=\"vm.filters.date_subend_start_\" />\r\n            &nbsp;\r\n            <label>To</label>\r\n            &nbsp;\r\n            <input type=\"text\" ui-date ui-date-format=\"mm/dd/yy\" ng-model=\"vm.filters.date_subend_end_\" />\r\n        </div>\r\n    </div>\r\n\r\n\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-sm-6 p-x-1\">\r\n        </div>\r\n\r\n        <div class=\"col-sm-6 p-x-1\">\r\n            <label>Subscr Actual End Date</label>\r\n            &nbsp;\r\n            <label>From</label>\r\n            &nbsp;\r\n            <input type=\"text\" ui-date ui-date-format=\"mm/dd/yy\" ng-model=\"vm.filters.date_subrealend_start_\" />\r\n            &nbsp;\r\n            <label>To</label>\r\n            &nbsp;\r\n            <input type=\"text\" ui-date ui-date-format=\"mm/dd/yy\" ng-model=\"vm.filters.date_subrealend_end_\" />\r\n        </div>\r\n\r\n    </div>\r\n\r\n\r\n    <div class=\"col-sm-4 p-x-1\">\r\n        <label>Subscription Status</label>\r\n        <select ng-model=\"vm.filters.subscr_status\">\r\n            <option value=\"all\">All</option>\r\n            <option value=\"active\">Active</option>\r\n            <option value=\"canceled\">Canceled</option>\r\n            <option value=\"terminated\">Terminated</option>\r\n            <option value=\"draft\">Draft</option>\r\n            <option value=\"suspended\">Suspended</option>\r\n            <option value=\"registrants\">Registrants</option>\r\n\r\n\r\n        </select>\r\n    </div>\r\n\r\n\r\n\r\n    <div class=\"row\">\r\n\r\n        <div class=\"col-sm-4 p-x-1\">\r\n            <label>Status</label>\r\n            <select ng-model=\"vm.filters.status\">\r\n                <option value=\"all\">All</option>\r\n                <option value=\"act\">Active</option>\r\n                <option value=\"notact\">Not Active</option>\r\n            </select>\r\n        </div>\r\n\r\n\r\n\r\n\r\n        <div class=\"col-sm-4 p-x-1\">\r\n            <label>Payment Type</label>\r\n            <select ng-model=\"vm.filters.payment\">\r\n                <option value=\"all\">All</option>\r\n                <option value=\"cc\">Credit Card</option>\r\n                <option value=\"paypal\">PayPal</option>\r\n                <option value=\"bitcoin\">Bitcoin</option>\r\n            </select>\r\n        </div>\r\n\r\n\r\n\r\n\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-sm-12 m-x-1 text-sm-center\">\r\n            <button class=\"btn btn-sm\" ng-click=\"vm.filters_apply()\">Apply</button>\r\n        </div>\r\n    </div>\r\n\r\n</div>\r\n";

/***/ },
/* 119 */
/***/ function(module, exports) {

	module.exports = "<div ng-if=\"vm.ind_sortm.length>0\">\r\n    <span><b>Sort Order:</b> &nbsp;&nbsp; </span>\r\n\r\n    <span ng-repeat=\"item in vm.ind_sortm\" class=\"text_gray_01\">\r\n        {{item.name}}\r\n        <i class=\"fa fa-sort-asc\" ng-show=\"item.direction=='asc'\"></i>\r\n        <i class=\"fa fa-sort-desc\" ng-show=\"item.direction=='desc'\"></i>\r\n        <i ng-hide=\"$last\" class=\"fa fa-angle-right m-x-1\"></i>\r\n    </span>\r\n    &nbsp;&nbsp;\r\n    <a  ng-click=\"vm.reset_sorting($event)\" title=\"Drop all sortings\"><i class=\"fa fa-times-circle-o\"></i></a>\r\n</div>";

/***/ },
/* 120 */,
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    /* @ngInject */
	    function configRoutes($stateProvider) {
	        var _views = {};

	        //        _views = { 'content@root': { template: require('./content.tpl.html'), controller: require('./FaqController.js')(app), controllerAs: 'vm' } };


	        _views = { 'content@root': {

	                //					template: require('./content.tpl.html')

	                templateProvider: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(1, function () {
	                        var template = __webpack_require__(126);
	                        deferred.resolve(template);
	                    });
	                    return deferred.promise;
	                }],

	                controllerAs: 'vm'

	                //					, controller: require('./FaqController.js')(app)

	                , controller: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(2, function () {
	                        var _contr = __webpack_require__(127)(app);
	                        deferred.resolve(_contr);
	                    });
	                    return deferred.promise;
	                }]

	            }
	        };

	        $stateProvider.state('faq', { parent: 'root', url: 'faq', views: _views, params: { scrollto: null } });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	};

/***/ },
/* 126 */,
/* 127 */,
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    __webpack_require__(129);
	    __webpack_require__(131)(app);

	    /* @ngInject */
	    function configRoutes($stateProvider) {
	        var _views = {};

	        //        _views = { 'content@root': { template: require('./content.tpl.html'), controller: require('./TryItController.js')(app) } };

	        _views = {
	            'content@root': {

	                //                template: require('./content.tpl.html')

	                templateProvider: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(1, function () {
	                        var template = __webpack_require__(137);
	                        deferred.resolve(template);
	                    });
	                    return deferred.promise;
	                }]

	                //                , controller: require('./TryItController.js')(app)


	                , controller: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(2, function () {
	                        var _contr = __webpack_require__(138)(app);
	                        deferred.resolve(_contr);
	                    });
	                    return deferred.promise;
	                }]

	            }
	        };

	        $stateProvider.state('tryit', { parent: 'root', url: 'try-it', views: _views, params: { scrollto: null } });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	};

/***/ },
/* 129 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 130 */,
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {
	    /* @ngInject */

	    app.directive('tryItShow', _tryItShow);

	    function _tryItShow() {
	        var _res = {
	            restrict: 'E',
	            replace: true,
	            scope: {},
	            template: __webpack_require__(132),
	            controller: _TryItShow_Controller,
	            controllerAs: 'vm'
	        };

	        return _res;
	    }

	    /* @ngInject */
	    function _TryItShow_Controller($uiViewScroll) {
	        var vm = this;

	        vm.trynow = function () {
	            $uiViewScroll(angular.element('.try-now'));
	        };

	        angular.element('#carousel-tryit').carousel('cycle');
	    }
	    _TryItShow_Controller.$inject = ["$uiViewScroll"];;
	};

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<div class=\"row try-it-show\">\r\n    <div id=\"carousel-tryit\" class=\"carousel slide\" data-ride=\"carousel\" data-interval=\"5200\" data-pause=\"off\">\r\n\r\n        <ol class=\"carousel-indicators\">\r\n            <li data-target=\"#carousel-tryit\" data-slide-to=\"0\" class=\"active\"></li>\r\n            <li data-target=\"#carousel-tryit\" data-slide-to=\"1\"></li>\r\n            <li data-target=\"#carousel-tryit\" data-slide-to=\"2\"></li>\r\n        </ol>\r\n\r\n\r\n        <div class=\"carousel-inner\" role=\"listbox\">\r\n\r\n\r\n            <div class=\"carousel-item  slides  active\">\r\n                <img src=\"" + __webpack_require__(133) + "\" />\r\n\r\n                <div class=\"row row-abs row-abs-1\">\r\n                    <div class=\"col-xs-10 col-xs-offset-1 text-xs-center\">\r\n                        <h4>Step 1: Enter your search criteria</h4>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div class=\"row row-abs row-abs-2\">\r\n                    <div class=\"col-xs-10 col-xs-offset-1 text-xs-center m-y-0\">\r\n                        <a class=\"btn btn-sm  btn-default button_green_02 ffd-btn-base p-x-3\" ng-click=\"vm.trynow()\">Try Now</a>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div class=\"row row-abs row-abs-3\">\r\n                    <div class=\"col-xs-6 col-xs-offset-3\">\r\n                        <img class=\"table-responsive\" src=\"" + __webpack_require__(134) + "\" />\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n            <div class=\"carousel-item  slides\">\r\n                <img src=\"" + __webpack_require__(133) + "\" />\r\n\r\n                <div class=\"row row-abs row-abs-1\">\r\n                    <div class=\"col-xs-10 col-xs-offset-1 text-xs-center\">\r\n                        <h4>\r\n                            Step 2: Click Search to see how many leads are available\r\n                        </h4>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div class=\"row row-abs row-abs-2\">\r\n                    <div class=\"col-xs-10 col-xs-offset-1 text-xs-center m-y-0\">\r\n                        <a class=\"btn btn-sm  btn-default button_green_02 ffd-btn-base p-x-3\" ng-click=\"vm.trynow()\">Try Now</a>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div class=\"row row-abs row-abs-3\">\r\n                    <div class=\"col-xs-6 col-xs-offset-3\">\r\n                        <img class=\"table-responsive\" src=\"" + __webpack_require__(135) + "\" />\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n            <div class=\"carousel-item  slides\">\r\n                <img src=\"" + __webpack_require__(133) + "\" />\r\n\r\n                <div class=\"row row-abs row-abs-1\">\r\n                    <div class=\"col-xs-10 col-xs-offset-1 text-xs-center\">\r\n                        <h4>\r\n                            Step 3: If you are a registered user, view 25 records for free\r\n                        </h4>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div class=\"row row-abs row-abs-2\">\r\n                    <div class=\"col-xs-10 col-xs-offset-1 text-xs-center m-y-0\">\r\n                        <a class=\"btn btn-sm  btn-default button_green_02 ffd-btn-base p-x-3\" ng-click=\"vm.trynow()\">Try Now</a>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div class=\"row row-abs row-abs-3\">\r\n                    <div class=\"col-xs-6 col-xs-offset-3\">\r\n                        <img class=\"table-responsive\" src=\"" + __webpack_require__(136) + "\" />\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n    </div>\r\n\r\n\r\n\r\n    <div id=\"no-carousel-tryit\" class=\"m-x-1\">\r\n\r\n        <div class=\"col-xs-12 col-xs-offset-0\">\r\n            &nbsp;\r\n        </div>\r\n\r\n        <div class=\"col-xs-12 col-xs-offset-0\">\r\n            <h4>Step 1: Enter your search criteria</h4>\r\n        </div>\r\n\r\n        <div class=\"col-xs-12 col-xs-offset-0\">\r\n            <h4>Step 2: Click Search to see how many leads are available</h4>\r\n\r\n\r\n        </div>\r\n\r\n        <div class=\"col-xs-12 col-xs-offset-0\">\r\n            <h4>Step 3: If you are a registered user, view 25 records for free</h4>\r\n        </div>\r\n\r\n        <div class=\"col-xs-12 col-xs-offset-0\">\r\n            &nbsp;\r\n        </div>\r\n\r\n\r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n";

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "assets/js/routes/tryit/images/back_office.jpg";

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "assets/js/routes/tryit/images/app_step_1.png";

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "assets/js/routes/tryit/images/app_step_2.png";

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "assets/js/routes/tryit/images/app_step_3.png";

/***/ },
/* 137 */,
/* 138 */,
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    /* @ngInject */
	    function configRoutes($stateProvider) {
	        var _views = {};

	        //        _views = { 'content@root': { template: require('./contact.tpl.html'), controller: require('./ContactController.js')(app), controllerAs: 'vm' } };


	        _views = {
	            'content@root': {

	                //            template: require('./contact.tpl.html')

	                templateProvider: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(1, function () {
	                        var template = __webpack_require__(140);
	                        deferred.resolve(template);
	                    });
	                    return deferred.promise;
	                }]

	                //            , controller: require('./ContactController.js')(app)

	                , controller: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(2, function () {
	                        var _contr = __webpack_require__(141)(app);
	                        deferred.resolve(_contr);
	                    });
	                    return deferred.promise;
	                }],

	                controllerAs: 'vm'

	            } };

	        $stateProvider.state('contact', { parent: 'root', url: 'contact', views: _views });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	};

/***/ },
/* 140 */,
/* 141 */,
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {
	    __webpack_require__(143);

	    __webpack_require__(145)(app);
	    __webpack_require__(147)(app);
	    __webpack_require__(150)(app);

	    /* @ngInject */
	    function configRoutes($stateProvider) {
	        var _views = {};

	        //        _views = { 'content@root': { template: require('./content.tpl.html'), controller: require('./HowItWorksDirective.js')(app), controllerAs: 'vm' } };


	        _views = {
	            'content@root': {

	                //                template: require('./content.tpl.html')

	                templateProvider: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(1, function () {
	                        var template = __webpack_require__(153);
	                        deferred.resolve(template);
	                    });
	                    return deferred.promise;
	                }]

	                //                , controller: require('./HowItWorksDirective.js')(app)
	                , controllerAs: 'vm',

	                controller: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(2, function () {
	                        var _contr = __webpack_require__(154)(app);
	                        deferred.resolve(_contr);
	                    });
	                    return deferred.promise;
	                }]

	            }
	        };

	        $stateProvider.state('howitworks', { parent: 'root', url: 'how-it-works', views: _views, params: { scrollto: null } });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	};

/***/ },
/* 143 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 144 */,
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {
	    /* @ngInject */

	    app.directive('howItPart', _howitpart);

	    function _howitpart() {
	        var _res = {
	            restrict: 'E',
	            replace: true,
	            scope: { title: '@', icon: '@', inverse: '@', last: '@', bgicon: '@' },
	            transclude: true,
	            template: __webpack_require__(146)
	        };

	        return _res;
	    }
	};

/***/ },
/* 146 */
/***/ function(module, exports) {

	module.exports = "<div class=\"row  how-to-item p-y-3\" ng-class=\"{{inverse}}?'dark':'light'\">\r\n\r\n    <div class=\"col-md-8 col-md-offset-2\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-3 text-xs-center\">\r\n\r\n                <span class=\"fa-stack fa-lg fa-5x\">\r\n                    <i class=\"fa fa-circle fa-stack-2x {{bgicon}}\"></i>\r\n                    <i class=\"fa {{icon}} fa-stack-1x fa-inverse\"></i>\r\n                </span>\r\n\r\n            </div>\r\n            <div class=\"col-md-9 info text-xs-center text-md-left\">\r\n                <h2>{{title}}</h2>\r\n                <ng-transclude></ng-transclude>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <div class=\"nxtarr\" ng-class=\"{'hidden-xs-up': last=='true' }\">\r\n\r\n    </div>\r\n\r\n</div>";

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {
	    /* @ngInject */

	    app.directive('howToEst', _howtoest);

	    function _howtoest() {
	        var _res = {
	            restrict: 'E',
	            replace: true,
	            scope: {},
	            template: __webpack_require__(148),
	            controller: _How2EstController,
	            controllerAs: 'vm'
	        };

	        return _res;
	    }

	    function _How2EstController($timeout, $uiViewScroll, $stateParams, InfoFactory, ChoicesFactory, ToolsService) {
	        var vm = this;
	        vm.bustypes = InfoFactory.bustypes;
	        vm.choices = ChoicesFactory.choices;
	        vm.change_type = function (_type) {
	            vm.choices.bustype = vm.bustypes[_type];
	            $timeout(function () {
	                $uiViewScroll(angular.element('.orange-bar:visible'));
	            }, 500);
	        };

	        vm.download_sample = function (_event) {
	            _event.preventDefault();
	            ToolsService.DownloadSample();
	        };

	        //        vm.sampleurl = require('../../../samples/sample.xlsx');

	        var _sto = $stateParams.scrollto;
	        if ($stateParams.scrollto) {
	            //            $uiViewScroll(angular.element('#' + $stateParams.scrollto));
	            //            $timeout(function () { $uiViewScroll($('.' + $stateParams.scrollto + ':visible')); }, 1000);

	            //            $timeout(function () { $uiViewScroll($($stateParams.scrollto)); }, 1000);
	            $timeout(function () {
	                $uiViewScroll(angular.element($stateParams.scrollto));
	            }, 1000);
	        }
	    }
	};

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<div ng-show=\"vm.choices.bustype.id==2\">\r\n    <div class=\"row row-w-image\">\r\n        <div class=\"col-md-12\">\r\n            <img src=\"" + __webpack_require__(149) + "\" class=\"table-responsive\">\r\n        </div>\r\n\r\n        <div class=\"over-img col-md-6\">\r\n            <span>\r\n                How It Works\r\n            </span>\r\n            <h4 style=\"line-height:500%;\">What makes our data so good?</h4>\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col-md-6\">\r\n                    <a class=\"btn  btn-block  ffd-btn-base   btn-default button_green_01 p-x-3\" ng-click=\"vm.change_type(0)\" ng-hide=\"false && vm.choices.bustype.id==1\" ng-class=\"{'disabled': false &&  vm.choices.bustype.id==1}\">New Business</a>\r\n                    <div style=\"line-height:2vw;\">&nbsp;</div>\r\n                    <a class=\"btn  btn-block  ffd-btn-base btn-default button_blue_01 p-x-3\" ng-click=\"vm.change_type(1)\" ng-hide=\"false && vm.choices.bustype.id==2\" ng-class=\"{'disabled': false &&  vm.choices.bustype.id==2}\">Established Business</a>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </div>\r\n\r\n\r\n    </div>\r\n\r\n\r\n \r\n\r\n\r\n    <orange-bar title=\"Established Business\">\r\n        <a class=\"btn ffd-btn-base button_blue_01 p-x-3\" ng-click=\"vm.download_sample($event)\">View Sample Data</a>\r\n    </orange-bar>\r\n\r\n\r\n\r\n    <div class=\"hitw-calendar\"></div>\r\n    <how-it-part title=\"It's Updated Monthly\" icon=\"fa-calendar-check-o\" bgicon=\"color_blue_01\" inverse=\"{{false}}\" last=\"{{false}}\">\r\n        <p>\r\n            Through sophisticated web crawling technology,\r\n            the data is gleaned from the web.  We are able\r\n            to provide you with the purest, most accurate\r\n            data in the industry which we monitor and update monthly.\r\n\r\n\r\n        </p>\r\n    </how-it-part>\r\n\r\n    <div class=\"hitw-chart\"></div>\r\n    <how-it-part title=\"8.5 million businesses\" icon=\"fa-line-chart\" bgicon=\"color_blue_01\" inverse=\"{{true}}\" last=\"{{false}}\">\r\n        <p>\r\n            You're just minutes away from reaching existing\r\n            businesses in your area. Get immediate access\r\n            to established business leads, including fresh\r\n            data on their website, location, personnel,\r\n            industry and more.\r\n\r\n        </p>\r\n    </how-it-part>\r\n\r\n    <div class=\"hitw-map\"></div>\r\n    <how-it-part title=\"Geographic Selections\" icon=\"fa-map-marker\" bgicon=\"color_blue_01\" inverse=\"{{false}}\" last=\"{{false}}\">\r\n        <p>\r\n            Pinpoint your sales leads by choosing\r\n            selections based on our precise\r\n            geographic data:\r\n        </p>\r\n        <table>\r\n            <tr>\r\n                <td>\r\n                    <ul>\r\n                        <li>Area code</li>\r\n                        <li>City</li>\r\n                    </ul>\r\n                </td>\r\n                <td>\r\n                    <ul>\r\n                        <li>County</li>\r\n                        <li>State</li>\r\n                    </ul>\r\n                </td>\r\n                <td>\r\n                    <ul>\r\n                        <li>ZIP Code</li>\r\n                        <li>ZIP Radius</li>\r\n                    </ul>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n\r\n    </how-it-part>\r\n\r\n    <div id=\"hitw-industry\"></div>\r\n    <how-it-part title=\"Firmographic Selections\" icon=\"fa-industry\" bgicon=\"color_blue_01\" inverse=\"{{true}}\" last=\"{{false}}\">\r\n        <p>\r\n            In addition to geographic data you can\r\n            further mine our databases for more\r\n            detailed company data:\r\n\r\n        </p>\r\n\r\n        <table>\r\n            <tr>\r\n                <td>\r\n                    <ul>\r\n                        <li>Company Size</li>\r\n                        <li>Phone Numbers</li>\r\n                        <li>Home Based Businesses</li>\r\n                        <li>Office Based Businesses</li>\r\n                    </ul>\r\n                </td>\r\n                <td>\r\n                    <ul>\r\n                        <li>Contact Names</li>\r\n                        <li>Industry/ Keywords</li>\r\n                        <li>Sales Volume</li>\r\n                    </ul>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n\r\n    </how-it-part>\r\n\r\n\r\n    <div id=\"hitw-users\"></div>\r\n    <how-it-part title=\"Suggested Users\" icon=\"fa-users\" bgicon=\"color_blue_01\" inverse=\"{{false}}\" last=\"{{true}}\">\r\n        <p>\r\n            These users would benefit greatly from our established business data:\r\n        </p>\r\n\r\n        <table>\r\n            <tr>\r\n                <td>\r\n                    <ul>\r\n                        \r\n                        <li>Web Master</li>\r\n                        <li>Marketing services</li>    \r\n                        <li>Telecommunications services</li>\r\n                        <li>Business Credit</li> \r\n\r\n\r\n\r\n                    </ul>\r\n                </td>\r\n                <td>\r\n                    <ul>\r\n\r\n                        <li>IT and web development</li>\r\n                        <li>Security systems</li>\r\n                        <li>Office Supplies</li>\r\n                        <li>Office Cleaning</li>\r\n                    </ul>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n\r\n\r\n        <a class=\"btn ffd-btn-base button_blue_01 p-x-3\" ng-click=\"vm.download_sample($event)\" >\r\n            View Sample Data\r\n        </a>\r\n\r\n\r\n    </how-it-part>\r\n\r\n</div>";

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "assets/js/routes/howitworks/images/howitworks-est.jpg";

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {
	    /* @ngInject */

	    app.directive('howToNew', _howtoest);

	    function _howtoest() {
	        var _res = {
	            restrict: 'E',
	            replace: true,
	            scope: {},
	            template: __webpack_require__(151),
	            controller: _How2NewController,
	            controllerAs: 'vm'
	        };

	        return _res;
	    }

	    function _How2NewController($timeout, $uiViewScroll, $stateParams, InfoFactory, ChoicesFactory, ToolsService) {
	        var vm = this;
	        vm.bustypes = InfoFactory.bustypes;
	        vm.choices = ChoicesFactory.choices;
	        vm.change_type = function (_type) {
	            vm.choices.bustype = vm.bustypes[_type];
	            $timeout(function () {
	                $uiViewScroll(angular.element('.orange-bar:visible'));
	            }, 500);
	        };

	        //        vm.sampleurl = require('../../../samples/sample.xlsx');


	        vm.download_sample = function (_event) {
	            _event.preventDefault();
	            ToolsService.DownloadSample();
	        };

	        var _sto = $stateParams.scrollto;
	        if ($stateParams.scrollto) {
	            //              $uiViewScroll($('.' + $stateParams.scrollto+':visible'));

	            //            $timeout(function () { $uiViewScroll($($stateParams.scrollto)); }, 1000);
	            $timeout(function () {
	                $uiViewScroll(angular.element($stateParams.scrollto));
	            }, 1000);
	        }
	    }
	};

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<div ng-show=\"vm.choices.bustype.id==1\">\r\n    <div class=\"row row-w-image\">\r\n        <div class=\"col-md-12\">\r\n            <img src=\"" + __webpack_require__(152) + "\" class=\"table-responsive\">\r\n        </div>\r\n\r\n        <div class=\"over-img col-md-6\">\r\n            <span>\r\n                How It Works\r\n            </span>\r\n            <h4 style=\"line-height:500%;\">What makes our data so good?</h4>\r\n\r\n\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col-md-6\">\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n\r\n\r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n    <orange-bar title=\"New Business\">\r\n    </orange-bar>\r\n\r\n\r\n\r\n    <div class=\"hitw-calendar\"></div>\r\n    <how-it-part title=\"It's Updated Daily\" icon=\"fa-calendar-check-o\" bgicon=\"color_green_01\" inverse=\"{{false}}\" last=\"{{false}}\">\r\n        <p>\r\n            Through sophisticated data mining technologies,\r\n            we are able to provide you with the purest, most accurate\r\n            data in the industry which we monitor and update daily.\r\n            FreshFind gathers data on new businesses the minute they\r\n            go public and make them available to you record fast.\r\n        </p>\r\n    </how-it-part>\r\n\r\n\r\n    <div class=\"hitw-chart\"></div>\r\n    <how-it-part title=\"Over 200,000 Monthly\" icon=\"fa-line-chart\" bgicon=\"color_green_01\" inverse=\"{{true}}\" last=\"{{false}}\">\r\n        <p>\r\n            You're just minutes away from reaching new businesses in your area.\r\n        </p>\r\n    </how-it-part>\r\n\r\n\r\n    <div class=\"hitw-map\"></div>\r\n    <how-it-part title=\"Geographic Selections\" icon=\"fa-map-marker\" bgicon=\"color_green_01\" inverse=\"{{false}}\" last=\"{{false}}\">\r\n        <p>\r\n            Pinpoint your sales leads by choosing\r\n            selections based on our precise\r\n            geographic data:\r\n        </p>\r\n        <table>\r\n            <tr>\r\n                <td>\r\n                    <ul>\r\n                        <li>Area code</li>\r\n                        <li>City</li>\r\n                    </ul>\r\n                </td>\r\n                <td>\r\n                    <ul>\r\n                        <li>County</li>\r\n                        <li>State</li>\r\n                    </ul>\r\n                </td>\r\n                <td>\r\n                    <ul>\r\n                        <li>ZIP Code</li>\r\n                        <li>ZIP radius</li>\r\n                    </ul>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n\r\n\r\n    </how-it-part>\r\n\r\n\r\n    <div id=\"hitw-industry\"></div>\r\n    <how-it-part title=\"Firmographic Selections\" icon=\"fa-industry\" bgicon=\"color_green_01\" inverse=\"{{true}}\" last=\"{{false}}\">\r\n        <p>\r\n            In addition to geographic data you can further\r\n            mine our databases based on detailed company data:\r\n\r\n\r\n        </p>\r\n        <table>\r\n            <tr>\r\n                <td>\r\n                    <ul>\r\n                        <li>Phone numbers</li>\r\n                        <li>Contact names</li>\r\n                        <li>Office Based Businesses</li>\r\n\r\n\r\n\r\n                    </ul>\r\n                </td>\r\n                <td>\r\n                    <ul>\r\n                        <li>Industry Type</li>\r\n                        <li>Date Established</li>\r\n                        <li>Home based businesses</li>\r\n\r\n\r\n                    </ul>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n    </how-it-part>\r\n\r\n\r\n\r\n    <div id=\"hitw-users\"></div>\r\n    <how-it-part title=\"Suggested Users\" icon=\"fa-users\" bgicon=\"color_green_01\" inverse=\"{{false}}\" last=\"{{true}}\">\r\n        <p>\r\n            These users would benefit greatly from\r\n            our established business data:\r\n        </p>\r\n\r\n        <table>\r\n            <tr>\r\n                <td>\r\n                    <ul>\r\n                        <li>Merchant services</li>\r\n                        <li>Marketing services and supplies</li>\r\n                        <li>Telecommunications services</li>\r\n                    </ul>\r\n                </td>\r\n                <td>\r\n                    <ul>\r\n                        <li>IT and web development</li>\r\n                        <li>Security systems</li>\r\n                        <li>Janitorial services</li>\r\n                    </ul>\r\n                </td>\r\n            </tr>\r\n        </table>\r\n\r\n    </how-it-part>\r\n\r\n</div>";

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "assets/js/routes/howitworks/images/howitworks-new.jpg";

/***/ },
/* 153 */,
/* 154 */,
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(156);

	module.exports = function (app) {

	    /* @ngInject */
	    function configRoutes($stateProvider) {
	        var _views = {};

	        //        _views = { 'content@root': { template: require('./content.tpl.html') } };


	        _views = {
	            'content@root': {

	                //                template: require('./content.tpl.html')

	                templateProvider: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(1, function () {
	                        var template = __webpack_require__(158);
	                        deferred.resolve(template);
	                    });
	                    return deferred.promise;
	                }]

	            }
	        };

	        $stateProvider.state('pricing', { parent: 'root', url: 'pricing', views: _views });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	};

/***/ },
/* 156 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(161);

	module.exports = function (app) {

	    /* @ngInject */
	    function configRoutes($stateProvider) {
	        var _views = {};

	        //        _views = { 'content@root': { template: require('./content.tpl.html'), controller: require('./YourDataProController.js')(app), controllerAs: 'vm' } };

	        _views = {
	            'content@root': {

	                //                template: require('./content.tpl.html')

	                templateProvider: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(1, function () {
	                        var template = __webpack_require__(163);
	                        deferred.resolve(template);
	                    });
	                    return deferred.promise;
	                }]

	                //                , controller: require('./YourDataProController.js')(app)


	                , controller: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(2, function () {
	                        var _contr = __webpack_require__(165)(app);
	                        deferred.resolve(_contr);
	                    });
	                    return deferred.promise;
	                }],

	                controllerAs: 'vm'
	            }
	        };

	        $stateProvider.state('yourdatapro', { parent: 'root', url: 'your-data-pro', views: _views });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	};

/***/ },
/* 161 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 162 */,
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(167);

	module.exports = function (app) {

	    /* @ngInject */

	    function configRoutes($stateProvider) {
	        var _views = {};
	        _views = {
	            // 09-22-2016                'header@root': { template: require('./header.tpl.html') }, 

	            //                'content@root': { template: require('./content.tpl.html'), controller: require('./SearchController.js')(app), controllerAs: 'vm' }


	            'content@root': {

	                //                    template: require('./content.tpl.html')

	                templateProvider: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(1, function () {
	                        var template = __webpack_require__(169);
	                        deferred.resolve(template);
	                    });
	                    return deferred.promise;
	                }]

	                //                    , controller: require('./SearchController.js')(app)
	                , controllerAs: 'vm',

	                controller: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(2, function () {
	                        var _contr = __webpack_require__(170)(app);
	                        deferred.resolve(_contr);
	                    });
	                    return deferred.promise;
	                }]

	            }

	        };
	        $stateProvider.state('search', { parent: 'root', url: 'search', views: _views });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	};

/***/ },
/* 167 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 168 */,
/* 169 */,
/* 170 */,
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(172);

	module.exports = function (app) {

	    __webpack_require__(174)(app);
	    __webpack_require__(177)(app);

	    /* @ngInject */

	    function configRoutes($stateProvider) {
	        var _views = {};
	        _views = {
	            'header@root': { template: __webpack_require__(180) },

	            'content@root': { template: __webpack_require__(181) }
	        };
	        $stateProvider.state('previewdata', { parent: 'root', url: 'previewdata', views: _views, authenticate: true });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	};

/***/ },
/* 172 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 173 */,
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    app.directive('previewDataDesktop', _directive);

	    function _directive() {
	        var _res = {
	            restrict: 'E',
	            replace: true,
	            template: __webpack_require__(175),
	            controller: __webpack_require__(176)(app),
	            controllerAs: 'vm'
	        };

	        return _res;
	    }
	};

/***/ },
/* 175 */
/***/ function(module, exports) {

	module.exports = "<div>\r\n    <div class=\"row\">\r\n        <div class=\"col-md-10 col-md-offset-1\">\r\n            <div class=\"row  text-md-center\">\r\n                <h2>{{vm.choices.bustype.name}}</h2>\r\n                <br />\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"col-md-5\">\r\n                    <span class=\"text_part_title_gray_01\">Current Criteria:</span>\r\n                    <br />\r\n                    <current-criteries choices=\"vm.choices\"></current-criteries>\r\n                </div>\r\n\r\n\r\n                <div class=\"col-md-7\" map-lazy-load__=\"//maps.google.com/maps/api/js\" ng-show=\"(!vm.createSubscr) || (vm._leftcount>0)\">\r\n\r\n                    <a class=\"btn btn-sm button_orange_01\" ng-click=\"vm.showmap()\" ng-class=\"{'disabled btn-danger':(vm._selected==0),'btn-success':(vm._selected>0)}\">Show Map</a>\r\n\r\n                    <a class=\"btn btn-sm button_orange_01\"\r\n                       ng-show=\"(vm._leftcount >= vm._selected)\"\r\n                       ng-confirm-click=\"Are you sure ( {{vm._selected}} records) ?\"\r\n                       ng-click=\"vm.getlist()\"\r\n                       ng-class=\"{'disabled btn-danger':(!vm._enablelist||vm._selected==0||vm.isDataLoaded),'btn-success':vm._enablelist}\">\r\n                        Download List\r\n                    </a>\r\n\r\n                    <a class=\"btn btn-sm button_orange_01\"\r\n                       ng-show=\"(vm._leftcount < vm._selected)\"\r\n                       ng-click=\"vm.getlist()\"\r\n                       ng-class=\"{'disabled btn-danger':(!vm._enablelist||vm._selected==0||vm.isDataLoaded),'btn-success':vm._enablelist}\">\r\n                        Download List\r\n                    </a>\r\n\r\n                    <a class=\"btn btn-sm button_orange_01\"\r\n                       ng-show=\"(vm._leftcount >= vm._selected)\"\r\n                       ng-confirm-click=\"Are you sure ( {{vm._selected}} records) ?\"\r\n                       ng-click=\"vm.getlistbyemail()\"\r\n                       ng-class=\"{'disabled btn-danger':(!vm._enablelist||vm._selected==0||vm.isDataLoaded),'btn-success':vm._enablelist}\">\r\n                        Download List ( by e-mail )\r\n                    </a>\r\n\r\n\r\n                    <a class=\"btn btn-sm button_orange_01\"\r\n                       ng-show=\"(vm._leftcount < vm._selected)\"\r\n                       ng-click=\"vm.getlistbyemail()\"\r\n                       ng-class=\"{'disabled btn-danger':(!vm._enablelist||vm._selected==0||vm.isDataLoaded),'btn-success':vm._enablelist}\">\r\n                        Download List ( by e-mail )\r\n                    </a>\r\n\r\n\r\n\r\n\r\n                    <a class=\"btn btn-sm button_orange_01\" ui-sref=\"search\">Refine Search</a>\r\n                    <a class=\"btn btn-sm button_orange_01\" ng-click=\"vm.new_search()\">New Search</a>\r\n\r\n                </div>\r\n\r\n                <div class=\"col-md-7\" map-lazy-load__=\"//maps.google.com/maps/api/js\" ng-show=\"vm.createSubscr && (vm._leftcount==0)\">\r\n\r\n                    <a class=\"btn btn-sm button_orange_01\" ng-click=\"vm.showmap()\" ng-class=\"{'disabled btn-danger':(vm._selected==0),'btn-success':(vm._selected>0)}\">Show Map</a>\r\n\r\n\r\n                    <a class=\"btn btn-sm button_orange_01\"\r\n                       ng-click=\"vm.download_and_email()\"\r\n                       ng-class=\"{'disabled btn-danger':(!vm._enablelist||vm._selected==0||vm.isDataLoaded),'btn-success':vm._enablelist}\">\r\n                        Download and email 25 free leads\r\n                    </a>\r\n\r\n                    <a class=\"btn btn-sm button_orange_01\" ui-sref=\"search\">Refine Search</a>\r\n                    <a class=\"btn btn-sm button_orange_01\" ng-click=\"vm.new_search()\">New Search</a>\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n\r\n        <div class=\"col-md-10 col-md-offset-1\">\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-8\">\r\n                    <span class=\"text_gray_01\">Total Records:</span>\r\n                    &nbsp;\r\n                    <span class=\"text_orange_01\">{{vm.gridOptions.totalItems}}</span>\r\n                    &nbsp;&nbsp;\r\n                    <span class=\"text_gray_01\">Records Selected:</span>\r\n                    &nbsp;\r\n                    <span class=\"text_orange_01\">{{vm._selected}}</span>\r\n                    &nbsp;&nbsp;\r\n                    <span class=\"text_gray_01\">Records Left To Load:</span>\r\n                    &nbsp;\r\n                    <span class=\"text_orange_01\">{{vm._leftcount}}</span>\r\n                </div>\r\n                <div class=\"col-sm-2\"><a ng-click=\"vm.SelectAll()\" class=\"btn btn-sm btn-warning\">Select All</a></div>\r\n                <div class=\"col-sm-2\"><a ng-click=\"vm.UnSelectAll()\" class=\"btn btn-sm btn-warning\">Clear All</a></div>\r\n            </div>\r\n            <div class=\"row\"><br /></div>\r\n            <div class=\"row\">\r\n\r\n\r\n\r\n\r\n\r\n                <div id=\"grid1\" ui-grid=\"vm.gridOptions\"\r\n                     class=\"grid\"\r\n                     my-ui-grid-resize\r\n                     ui-grid-cellnav\r\n                     ui-grid-pagination\r\n                     ui-grid-save-state\r\n                     ui-grid-resize-columns\r\n                     ui-grid-pinning\r\n                     ui-grid-selection\r\n                     ui-grid-move-columns>\r\n\r\n                </div>\r\n            </div>\r\n            <br />\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>\r\n\r\n\r\n\r\n";

/***/ },
/* 176 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (app) {

	    /* @ngInject */

	    var _controller = function _controller($q, $scope, $localStorage, $sessionStorage, $timeout, $http, $state, _, FFD_CONST, toaster, uiGridConstants, uiGridPaginationService, LoginService, InfoFactory, ChoicesFactory, GetResultsFactory, PreviewDataService, GoogleGeoService, ToolsService) {

	        /*  tst-point */

	        var _settings = PreviewDataService.getParamsForPreviewData();
	        var _choices = ChoicesFactory.choices;

	        var vm = this;
	        vm.choices = ChoicesFactory.choices;

	        vm._timer = null;
	        vm.proposalOpened = false;
	        vm._SelAll = true;
	        vm._SelArr = [];
	        var _currPage = 1;
	        var cntrecords = 0;
	        var _name_for_save = _settings.name_for_save;

	        //        vm.onexit = function () { vm.saveState(); };
	        //        $state.get('previewestimatedbusinessgrid').onExit = vm.onexit;
	        $state.current.onExit = function () {
	            vm.saveState();$timeout.cancel(vm._timer);
	        };

	        //        $scope.rbOmits = true;
	        vm._demo = false;
	        vm._records = [];
	        vm._leftcount = 0;
	        vm._invoiceid = 0;
	        vm.isLoaded = false;
	        vm.isDataLoaded = false;

	        vm.gridOptions = {
	            paginationTemplate: "ui-grid/pagination-z"
	        };
	        //        vm.gridOptions.data = '_records';

	        vm.gridOptions.enableColumnResizing = true;
	        vm.gridOptions.enableFiltering = false;
	        vm.gridOptions.enableGridMenu = true;
	        vm.gridOptions.showGridFooter = false;

	        vm.gridOptions.EnableSelectAll = true;
	        vm.gridOptions.enableRowSelection = true;
	        vm.gridOptions.multiSelect = true;

	        vm.gridOptions.showColumnFooter = false;
	        vm.gridOptions.fastWatch = true;

	        vm.gridOptions.enablePaging = true;
	        vm.gridOptions.paginationPageSizes = [5, 10, 25, 50, 75, 100, 200];
	        vm.gridOptions.paginationPageSize = 25;
	        vm.gridOptions.useExternalPagination = true;

	        vm.gridOptions.columnDefs = _settings.coldefs;

	        vm.gridOptions.rowIdentity = function (row) {
	            return row.ClientID;
	        };
	        vm.gridOptions.getRowIdentity = function (row) {
	            return row.ClientID;
	        };

	        vm.gridOptions.onRegisterApi = function (gridApi) {
	            console.log('onRegisterApi');

	            vm.gridApi = gridApi;

	            gridApi.pagination.on.paginationChanged($scope, function (newPage, pageSize) {
	                console.log('paginationChanged');
	                if (vm.getPage) {
	                    vm.getPage(newPage, pageSize, false);
	                }
	            });

	            gridApi.selection.on.rowSelectionChanged($scope, function (rows) {
	                console.log('rowSelectionChanged');
	                $timeout(function () {
	                    _save_page();
	                });
	            });

	            gridApi.selection.on.rowSelectionChangedBatch($scope, function (rows) {
	                console.log('rowSelectionChangedBatch');
	                $timeout(function () {
	                    _save_page();vm.getselected();
	                });
	            });

	            gridApi.grid.registerDataChangeCallback(function (data) {
	                console.log('registerDataChangeCallback');
	                $timeout(function () {
	                    _rest_page();
	                });
	            }, [uiGridConstants.dataChange.ALL]);

	            activate();
	            vm.SelectAll();
	        };

	        vm.new_search = function () {
	            ChoicesFactory.clear_choices();
	            $state.go("search");
	        };

	        vm.SelectAll = function () {
	            vm._SelAll = true;
	            vm._SelArr = [];
	            vm.gridApi.selection.selectAllRows();
	        };

	        vm.UnSelectAll = function () {
	            vm._SelAll = false;
	            vm._SelArr = [];
	            vm.gridApi.selection.clearSelectedRows();
	        };

	        vm.enablelist = function () {
	            //            vm._enablelist = (vm._invoiceid == 0) || ((vm._selected > 0) && (vm._leftcount >= vm._selected));
	            vm._enablelist = vm._invoiceid == 0 || vm._selected > 0;
	        };

	        vm.getselected = function () {
	            vm._selected = vm._SelAll ? vm.gridOptions.totalItems - vm._SelArr.length : vm._SelArr.length;
	        };

	        function _save_page() {
	            if (vm.gridApi.grid.rows.length == 0) return;

	            var _sel_rows = _.map(vm.gridApi.selection.getSelectedGridRows(), "entity.ClientID");
	            var _all_rows = _.map(vm.gridApi.grid.rows, "entity.ClientID");
	            var _unsel_rows = _.difference(_all_rows, _sel_rows);
	            if (vm._SelAll) {
	                vm._SelArr = _.union(_.difference(vm._SelArr, _all_rows), _unsel_rows);
	            } else {
	                vm._SelArr = _.union(_.difference(vm._SelArr, _all_rows), _sel_rows);
	            }
	        }

	        function _rest_page() {
	            if (vm.gridApi.grid.rows.length == 0) return;

	            vm.gridApi.selection.clearSelectedRows();

	            _.forEach(vm.gridApi.grid.rows, function (item, indx) {
	                if (_.indexOf(vm._SelArr, item.entity.ClientID) < 0) {
	                    if (vm._SelAll) vm.gridApi.selection.selectRow(item.entity);
	                } else {
	                    if (!vm._SelAll) vm.gridApi.selection.selectRow(item.entity);
	                }
	            });
	        }

	        vm.getPage = function (_page, _size, _init) {
	            var promise = PreviewDataService.getPage(_page, _size, _init);
	            promise.then(function (data) {
	                vm.gridOptions.totalItems = data.cntrecords;
	                //                vm._records = _.col13dig2date(data.records);
	                //                vm.gridOptions.data = _.col13dig2date(data.records);

	                //                vm.gridOptions.data = data.records;
	                vm.gridOptions.data = _.col13dig2date(data.records);

	                var _len = vm.gridOptions.data.length;
	                vm.gridOptions.minRowsToShow = _len + 3;
	            });

	            return promise;
	        };

	        vm.dynamicMarkers = [];
	        var map;
	        vm.showmap = function () {
	            $scope.dynamicMarkers = [];

	            var request = $http({
	                method: "post",
	                url: FFD_CONST.API_BASE_URL + (_choices.bustype.id == 1 ? "getNewListForMap" : "getEstListForMap"),
	                data: { _ids: vm._SelArr, _selectall: vm._SelAll }
	            });

	            request.success(function (data, status, headers, config) {
	                console.log(data);
	                if (data.d.result == "OK") {
	                    GoogleGeoService.ShowMap(data.d.mapdata);
	                }
	                if (data.d.result == "ERROR" && data.d.errmsg) {
	                    toaster.pop('error', data.d.errmsg);
	                }
	            });
	        };

	        vm.getlist = function () {

	            //            if ((!vm.createSubscr) && (vm._leftcount < vm._selected))
	            if (!vm.createSubscr && vm._leftcount < vm.choices._count_Data) {
	                var _message = "This download will exceed your 5,000 record monthly allotment. Please adjust your quantity and try again";
	                toaster.pop({ type: 'info', body: _message, timeout: 0 });
	                return;
	            }

	            var request = $http({
	                method: "post",
	                url: FFD_CONST.API_BASE_URL + (_choices.bustype.id == 1 ? "getNewList" : "getEstList"),
	                data: { _ids: vm._SelArr, _selectall: vm._SelAll, _random: _choices._random_Data, _count: _choices._count_Data }
	            });

	            request.success(function (data, status, headers, config) {
	                console.log(data);
	                if (data.d.result == "OK") {
	                    vm._leftcount = data.d.userleftcount;
	                    vm._invoiceid = data.d.invoiceid;

	                    angular.element('.dwnl').remove();
	                    var anchor = angular.element('<iframe class="dwnl" ></iframe>');
	                    anchor.attr({
	                        src: '/SPA/BuyList.ashx',
	                        style: "display:none;"
	                    });

	                    anchor.appendTo('body');

	                    vm.isDataLoaded = true;

	                    if (vm.createSubscr) {
	                        ActivateProposal('Not yet, show me 25 free records first', 1000);
	                    }
	                }
	                if (data.d.result == "ERROR" && data.d.errmsg) {
	                    toaster.pop('error', data.d.errmsg);
	                }
	            }).error(function (data, status, headers, config) {});
	        };

	        vm.getlistbyemail = function () {
	            //            if ((!vm.createSubscr) && (vm._leftcount < vm._selected))

	            if (!vm.createSubscr && vm._leftcount < vm.choices._count_Data) {
	                var _message = "This download will exceed your 5,000 record monthly allotment. Please adjust your quantity and try again";
	                toaster.pop({ type: 'info', body: _message, timeout: 0 });
	                return;
	            }

	            var request = $http({
	                method: "post",
	                url: FFD_CONST.API_BASE_URL + (_choices.bustype.id == 1 ? "getNewListByEmail" : "getEstListByEmail"),
	                data: { _ids: vm._SelArr, _selectall: vm._SelAll, _random: _choices._random_Data, _count: _choices._count_Data }
	            });

	            request.success(function (data, status, headers, config) {
	                console.log(data);
	                if (data.d.result == "OK") {
	                    vm._leftcount = data.d.userleftcount;
	                    toaster.pop('success', data.d.message);
	                    vm.isDataLoaded = true;
	                    if (vm.createSubscr) {
	                        ActivateProposal('Not yet, show me 25 free records first', 1000);
	                    }
	                }
	                if (data.d.result == "ERROR" && data.d.errmsg) {
	                    toaster.pop('error', data.d.errmsg);
	                }
	            }).error(function (data, status, headers, config) {
	                var aa = 66;
	            });
	        };

	        vm.download_and_email = function () {

	            if (!vm.createSubscr) return;

	            var req_d = $http({
	                method: "post",
	                url: FFD_CONST.API_BASE_URL + (_choices.bustype.id == 1 ? "getNewList" : "getEstList"),
	                data: { _ids: vm._SelArr, _selectall: vm._SelAll, _random: _choices._random_Data, _count: _choices._count_Data }
	            });

	            var req_e = $http({
	                method: "post",
	                url: FFD_CONST.API_BASE_URL + (_choices.bustype.id == 1 ? "getNewListByEmail" : "getEstListByEmail"),
	                data: { _ids: vm._SelArr, _selectall: vm._SelAll, _random: _choices._random_Data, _count: _choices._count_Data }
	            });

	            $q.all([req_d, req_e]).then(function (data) {
	                console.log(data);
	                var data_d = data[0].data.d;
	                var data_e = data[1].data.d;
	                if (data_d.result == "OK" && data_d.result == "OK") {
	                    vm._leftcount = data_d.userleftcount;
	                    vm._leftcount = data_e.userleftcount;
	                    vm._invoiceid = data_d.invoiceid;

	                    angular.element('.dwnl').remove();
	                    var anchor = angular.element('<iframe class="dwnl" ></iframe>');
	                    anchor.attr({
	                        src: '/SPA/BuyList.ashx',
	                        style: "display:none;"
	                    });

	                    anchor.appendTo('body');

	                    toaster.pop('success', data_e.message);

	                    ActivateProposal('Not yet, show me 25 free records first', 1000);

	                    vm.isDataLoaded = true;
	                }

	                var _message = "";
	                if (data_d.result == "ERROR" && data_d.errmsg) _message += data_d.errmsg;
	                if (_message) _message += '      ';
	                if (data_e.result == "ERROR" && data_e.errmsg) _message += data_e.errmsg;

	                if (_message) toaster.pop('error', _message);
	            });
	        };

	        vm.state = {};

	        vm.saveState = function () {
	            //            var _stmp = angular.toJson(vm.gridApi.saveState.save());
	            //            localStorageService.set(_name_for_save, _stmp);
	            $localStorage[_name_for_save] = vm.gridApi.saveState.save();
	        };

	        vm.restoreState = function () {
	            vm.gridApi.saveState.restore(vm, vm.state);
	        };

	        vm.gridData = [];

	        function activate() {

	            $scope.$watch(vm.getselected);
	            $scope.$watch(vm.enablelist);

	            /*
	            var _stmp = $sessionStorage['searchform'];
	            if (_stmp == null) return;
	              var _tmp = angular.fromJson(_stmp);
	              $scope.id = _tmp.choices["bustype"]["id"];
	              GetResultsFactory.getCounters(_tmp.choices)
	            */

	            LoginService.getuserinfo().then(function (data) {
	                vm.username = data.username;
	                vm.isLogged = data.islogged;
	                vm.isAdmin = data.isadmin;
	                vm.changeCC = data.changeCC;
	                vm.createSubscr = data.createSubscr;

	                /*  2016-09-13  
	                                if (vm.createSubscr)
	                                {
	                                    ActivateProposal('Not yet, show me 10 free records first', 15000);
	                                }
	                */
	            });

	            GetResultsFactory.getCounters().then(function (data) {
	                vm._count = data.count;
	                vm._leftcount = data.leftcount;
	                vm._invoiceid = data.invoiceid;
	                vm._demo = JSON.parse(data.demo.toLowerCase());
	                vm.isLoaded = true;

	                //            $scope.getPage(1, $scope.gridOptions.paginationPageSize, $scope.rbOmits, true)
	                vm.getPage(1, vm.gridOptions.paginationPageSize, true).then(function () {

	                    //<>                        return;   //?????/

	                    /*
	                                            var _stmp = localStorageService.get(_name_for_save);
	                                            if (_stmp != null)
	                                                $scope.gridApi.saveState.restore($scope, angular.fromJson(_stmp));
	                    */

	                    // agi 23.3.2016                 if ($localStorage[_name_for_save]) vm.gridApi.saveState.restore($scope, $localStorage[_name_for_save]);


	                    vm.gridApi.core.on.columnVisibilityChanged($scope, function (column) {
	                        //                                var _stmp = angular.toJson($scope.gridApi.saveState.save());
	                        //                                localStorageService.set(_name_for_save, _stmp);
	                        $localStorage[_name_for_save] = vm.gridApi.saveState.save();
	                    });

	                    GetResultsFactory.setdemoviewedflag();

	                    return;
	                });
	            });
	        }

	        function ActivateProposal(_cancel_label, _timeout) {
	            //            if (vm.proposalOpened) return;
	            $timeout.cancel(vm._timer);
	            vm._timer = $timeout(function () {
	                //                    vm.proposalOpened = true;
	                ToolsService.ActivateDialog(_cancel_label);
	                $timeout.cancel(vm._timer);
	            }, _timeout);
	        }
	    };
	    _controller.$inject = ["$q", "$scope", "$localStorage", "$sessionStorage", "$timeout", "$http", "$state", "_", "FFD_CONST", "toaster", "uiGridConstants", "uiGridPaginationService", "LoginService", "InfoFactory", "ChoicesFactory", "GetResultsFactory", "PreviewDataService", "GoogleGeoService", "ToolsService"];

	    return _controller;
	};

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    app.directive('previewDataMobile', _directive);

	    function _directive() {
	        var _res = {
	            restrict: 'E',
	            replace: true,
	            template: __webpack_require__(178),
	            controller: __webpack_require__(179)(app),
	            controllerAs: 'vm'
	        };

	        return _res;
	    }
	};

/***/ },
/* 178 */
/***/ function(module, exports) {

	module.exports = "<div class=\"prv-data-mobile\">\r\n    <div class=\"row\">\r\n        <div class=\"col-xs-10 col-xs-offset-1\">\r\n            <div class=\"row  text-xs-center\">\r\n                <h2>{{vm.choices.bustype.name}}</h2>\r\n                <br />\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"col-xs-12\">\r\n                    <span class=\"text_part_title_gray_01\">Current Criteria:</span>\r\n                    <br />\r\n                    <current-criteries choices=\"vm.choices\"></current-criteries>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"row m-y-1\">\r\n                <div class=\"col-xs-12 text-xs-center\" map-lazy-load__=\"//maps.google.com/maps/api/js\">\r\n                    <a class=\"btn btn-sm button_orange_01\" ng-click=\"vm.showmap()\" ng-class=\"{'disabled btn-danger':(vm._selected==0),'btn-success':(vm._selected>0)}\">Show Map</a>\r\n                    &nbsp;\r\n                    <a class=\"btn btn-sm button_orange_01\" ui-sref=\"search\">Refine Search</a>\r\n                    &nbsp;\r\n                    <a class=\"btn btn-sm button_blue_01\" ng-click=\"vm.new_search()\">New Search</a>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n            <div class=\"row m-y-1\">\r\n                <div class=\"col-xs-12\">\r\n                    <span class=\"text_part_title_gray_01\">Search Results:</span>\r\n                </div>\r\n                <div class=\"col-xs-6 text-xs-center\">\r\n                    <span class=\"text_count_value_orange_01\" ng-bind=\"vm.gridOptions.totalItems|number\"></span>\r\n                    <br />\r\n                    <span class=\"text_count_explain_gray_01\">New leads for this Period</span>\r\n                </div>\r\n                <div class=\"col-xs-6 text-xs-center\">\r\n                    <span class=\"text_count_value_orange_01\" ng-bind=\"vm._leftcount|number:0\"></span>\r\n                    <br />\r\n                    <span class=\"text_count_explain_gray_01\">Leads Remaining</span>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n            <div class=\"row m-y-1\">\r\n                <div class=\"col-xs-12 text-xs-center\">\r\n                    <a ng-click=\"vm.SelectAll()\" class=\"btn btn-sm button_green_01\">Select All</a>\r\n                    <a ng-click=\"vm.UnSelectAll()\" class=\"btn btn-sm button_green_01\">Clear All</a>\r\n\r\n\r\n                    <a class=\"btn btn-sm button_green_01\"\r\n                       ng-click=\"vm.getlistbyemail()\"\r\n                       ng-class=\"{'disabled btn-danger':(!vm._enablelist||vm._selected==0||vm.isDataLoaded),'btn-success':vm._enablelist}\">\r\n                        Email me my list\r\n                    </a>\r\n\r\n\r\n\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n\r\n        <div class=\"col-xs-10 col-xs-offset-1\">\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col-xs-12 text-xs-center\">\r\n\r\n                    <span class=\"text_gray_01\">Records Selected:</span>\r\n                    &nbsp;\r\n                    <span class=\"text_orange_01\">{{vm._selected}}</span>\r\n\r\n\r\n\r\n\r\n                    &nbsp;&nbsp;\r\n\r\n\r\n                    <span class=\"text_gray_01\">Results per page</span>\r\n                    &nbsp;\r\n                    <span>\r\n                        <select class=\"form-control_ input-sm\"\r\n                                ng-model=\" vm.gridOptions.paginationPageSize\"\r\n                                ng-options=\"sz as sz for sz in vm.gridOptions.paginationPageSizes\"\r\n                                name=\"inputSubject\"\r\n                                id=\"selpage\"></select>\r\n                    </span>\r\n                    <br />\r\n\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div class=\"row m-y-1\">\r\n                <div class=\"col-xs-12 text-xs-center  prv-pager\">\r\n                    <button ng-disabled=\"vm.gridOptions.paginationCurrentPage === 1\"\r\n                            ng-click=\"vm.gridApi.pagination.seek(1)\"\r\n                            ng-class=\"{'cancelCursor':vm.gridOptions.paginationCurrentPage === 1}\"\r\n                            role=\"menuitem\" type=\"button\" title=\"Page to first\" aria-label=\"Page to first\">\r\n                        <i class=\"fa fa-step-backward \"></i>\r\n                    </button>\r\n                    &nbsp;\r\n                    <button ng-disabled=\"vm.gridOptions.paginationCurrentPage === 1\"\r\n                            ng-class=\"{'cancelCursor':vm.gridOptions.paginationCurrentPage === 1}\"\r\n                            ng-click=\"vm.gridApi.pagination.previousPage()\"\r\n                            role=\"menuitem\" type=\"button\" title=\"Previous Page\" aria-label=\"Previous Page\">\r\n                        <i class=\"fa fa-play fa-rotate-180 \"></i>\r\n                    </button>\r\n                    &nbsp;\r\n                    <input ng-model=\"vm.gridOptions.paginationCurrentPage\"\r\n                           ng-change=\"vm.gridApi.pagination.seek(vm.gridOptions.paginationCurrentPage)\"\r\n                           class=\"ui-grid-pager-control-input\" type=\"text\" width=\"33px\" />\r\n                    &nbsp;/ {{ vm.gridApi.pagination.getTotalPages() }}\r\n                    &nbsp;\r\n                    <button role=\"menuitem\" type=\"button\" title=\"Next Page\" aria-label=\"Next Page\"\r\n                            ng-click=\"vm.gridApi.pagination.nextPage()\">\r\n                        <i class=\"fa fa-play \"></i>\r\n                    </button>\r\n                    &nbsp;\r\n                    <button ng-disabled=\"vm.gridOptions.paginationCurrentPage === vm.gridApi.pagination.getTotalPages()\"\r\n                            ng-click=\"vm.gridApi.pagination.seek(vm.gridApi.pagination.getTotalPages())\"\r\n                            role=\"menuitem\" type=\"button\" title=\"Page to last\" aria-label=\"Page to last\">\r\n                        <i class=\"fa fa-step-forward \"></i>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div class=\"row m-y-1 text-xs-center\">\r\n                <div class=\"col-xs-12\" ng-show=\"vm.gridOptions.totalItems>0\">\r\n                    {{ vm.line_1st  }}\r\n                    -\r\n                    {{ vm.line_last }}\r\n                    of\r\n                    {{vm.gridOptions.totalItems}}\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div class=\"row m-y-1\">\r\n                <div id=\"grid1\" ui-grid=\"vm.gridOptions\"\r\n                     class=\"grid\"\r\n                     ui-grid-cellnav\r\n                     ui-grid-pagination\r\n                     ui-grid-save-state\r\n                     ui-grid-resize-columns\r\n                     ui-grid-pinning\r\n                     ui-grid-selection\r\n                     ui-grid-move-columns\r\n                     my-ui-grid-resize>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>\r\n\r\n\r\n\r\n";

/***/ },
/* 179 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (app) {

	    /* @ngInject */

	    var _controller = function _controller($scope, $localStorage, $sessionStorage, $timeout, $http, $state, _, FFD_CONST, toaster, uiGridConstants, uiGridPaginationService, LoginService, InfoFactory, ChoicesFactory, GetResultsFactory, PreviewDataService, GoogleGeoService) {

	        /*  tst-point */

	        var _settings = PreviewDataService.getParamsForPreviewData();
	        var _choices = ChoicesFactory.choices;

	        var vm = this;
	        vm.choices = ChoicesFactory.choices;

	        vm._SelAll = true;
	        vm._SelArr = [];
	        var _currPage = 1;
	        var cntrecords = 0;
	        var _name_for_save = _settings.name_for_save;

	        //        vm.onexit = function () { vm.saveState(); };
	        //        $state.get('previewestimatedbusinessgrid').onExit = vm.onexit;
	        $state.current.onExit = function () {
	            vm.saveState();
	        };

	        //        $scope.rbOmits = true;
	        vm._demo = false;
	        vm._records = [];
	        vm._leftcount = 0;
	        vm._invoiceid = 0;
	        vm.isLoaded = false;
	        vm.isDataLoaded = false;

	        vm.gridOptions = {
	            paginationTemplate: "ui-grid/pagination-z"
	        };
	        //        vm.gridOptions.data = '_records';
	        vm.gridOptions.enableColumnResizing = true;
	        vm.gridOptions.enableFiltering = false;
	        vm.gridOptions.enableGridMenu = true;
	        vm.gridOptions.showGridFooter = false;
	        vm.gridOptions.enablePaginationControls = false;

	        vm.gridOptions.EnableSelectAll = true;
	        vm.gridOptions.enableRowSelection = true;
	        vm.gridOptions.multiSelect = true;

	        vm.gridOptions.showColumnFooter = false;
	        vm.gridOptions.fastWatch = true;

	        vm.gridOptions.enablePaging = true;
	        vm.gridOptions.paginationPageSizes = [5, 10, 25, 50, 75, 100, 200];
	        vm.gridOptions.paginationPageSize = 10;
	        vm.gridOptions.useExternalPagination = true;

	        vm.gridOptions.columnDefs = _settings.coldefs;

	        vm.gridOptions.rowIdentity = function (row) {
	            return row.ClientID;
	        };
	        vm.gridOptions.getRowIdentity = function (row) {
	            return row.ClientID;
	        };

	        vm.gridOptions.onRegisterApi = function (gridApi) {
	            console.log('onRegisterApi');

	            vm.gridApi = gridApi;

	            gridApi.pagination.on.paginationChanged($scope, function (newPage, pageSize) {
	                console.log('paginationChanged');
	                if (vm.getPage) {
	                    vm.getPage(newPage, pageSize, false);
	                }
	            });

	            gridApi.selection.on.rowSelectionChanged($scope, function (rows) {
	                console.log('rowSelectionChanged');
	                $timeout(function () {
	                    _save_page();
	                });
	            });

	            gridApi.selection.on.rowSelectionChangedBatch($scope, function (rows) {
	                console.log('rowSelectionChangedBatch');
	                $timeout(function () {
	                    _save_page();vm.getselected();
	                });
	            });

	            gridApi.grid.registerDataChangeCallback(function (data) {
	                console.log('registerDataChangeCallback');
	                $timeout(function () {
	                    _rest_page();
	                });
	            }, [uiGridConstants.dataChange.ALL]);

	            activate();
	            vm.SelectAll();
	        };

	        vm.new_search = function () {
	            ChoicesFactory.clear_choices();
	            $state.go("search");
	        };

	        vm.SelectAll = function () {
	            vm._SelAll = true;
	            vm._SelArr = [];
	            vm.gridApi.selection.selectAllRows();
	        };

	        vm.UnSelectAll = function () {
	            vm._SelAll = false;
	            vm._SelArr = [];
	            vm.gridApi.selection.clearSelectedRows();
	        };

	        vm.enablelist = function () {
	            //            vm._enablelist = (vm._invoiceid == 0) || ((vm._selected > 0) && (vm._leftcount >= vm._selected));
	            vm._enablelist = vm._invoiceid == 0 || vm._selected > 0;
	        };

	        vm.getselected = function () {
	            vm._selected = vm._SelAll ? vm.gridOptions.totalItems - vm._SelArr.length : vm._SelArr.length;
	        };

	        function _save_page() {
	            if (vm.gridApi.grid.rows.length == 0) return;

	            var _sel_rows = _.map(vm.gridApi.selection.getSelectedGridRows(), "entity.ClientID");
	            var _all_rows = _.map(vm.gridApi.grid.rows, "entity.ClientID");
	            var _unsel_rows = _.difference(_all_rows, _sel_rows);
	            if (vm._SelAll) {
	                vm._SelArr = _.union(_.difference(vm._SelArr, _all_rows), _unsel_rows);
	            } else {
	                vm._SelArr = _.union(_.difference(vm._SelArr, _all_rows), _sel_rows);
	            }
	        }

	        function _rest_page() {
	            if (vm.gridApi.grid.rows.length == 0) return;

	            vm.gridApi.selection.clearSelectedRows();

	            _.forEach(vm.gridApi.grid.rows, function (item, indx) {
	                if (_.indexOf(vm._SelArr, item.entity.ClientID) < 0) {
	                    if (vm._SelAll) vm.gridApi.selection.selectRow(item.entity);
	                } else {
	                    if (!vm._SelAll) vm.gridApi.selection.selectRow(item.entity);
	                }
	            });
	        }

	        vm.getPage = function (_page, _size, _init) {
	            var promise = PreviewDataService.getPage(_page, _size, _init);
	            promise.then(function (data) {
	                vm.gridOptions.totalItems = data.cntrecords;
	                //                vm._records = _.col13dig2date(data.records);
	                //                vm.gridOptions.data = _.col13dig2date(data.records);

	                //                vm.gridOptions.data = data.records;
	                vm.gridOptions.data = _.col13dig2date(data.records);

	                var _len = vm.gridOptions.data.length;
	                vm.gridOptions.minRowsToShow = _len + 3;

	                vm.line_1st = (vm.gridOptions.paginationCurrentPage - 1) * vm.gridOptions.paginationPageSize + 1;
	                vm.line_last = Math.min(vm.gridOptions.totalItems, vm.gridOptions.paginationCurrentPage * vm.gridOptions.paginationPageSize);
	            });

	            return promise;
	        };

	        vm.dynamicMarkers = [];
	        var map;
	        vm.showmap = function () {
	            $scope.dynamicMarkers = [];

	            var request = $http({
	                method: "post",
	                url: FFD_CONST.API_BASE_URL + (_choices.bustype.id == 1 ? "getNewListForMap" : "getEstListForMap"),
	                data: { _ids: vm._SelArr, _selectall: vm._SelAll }
	            });

	            request.success(function (data, status, headers, config) {
	                console.log(data);
	                if (data.d.result == "OK") {
	                    GoogleGeoService.ShowMap(data.d.mapdata);
	                }
	                if (data.d.result == "ERROR" && data.d.errmsg) {
	                    toaster.pop('error', data.d.errmsg);
	                }
	            });
	        };

	        vm.getlist = function () {

	            if (vm._leftcount < vm._selected) {
	                var _message = "This download will exceed your 5,000 record monthly allotment. Please adjust your quantity and try again";
	                //                toaster.pop('info', _message);
	                toaster.pop({ type: 'info', body: _message, timeout: 0 });
	                return;
	            }

	            var request = $http({
	                method: "post",
	                url: FFD_CONST.API_BASE_URL + (_choices.bustype.id == 1 ? "getNewList" : "getEstList"),
	                data: { _ids: vm._SelArr, _selectall: vm._SelAll }
	            });

	            request.success(function (data, status, headers, config) {
	                console.log(data);
	                if (data.d.result == "OK") {
	                    vm._leftcount = data.d.userleftcount;
	                    vm._invoiceid = data.d.invoiceid;

	                    angular.element('.dwnl').remove();
	                    var anchor = angular.element('<iframe class="dwnl" ></iframe>');
	                    anchor.attr({
	                        src: '/SPA/BuyList.ashx',
	                        style: "display:none;"
	                    });

	                    anchor.appendTo('body');

	                    vm.isDataLoaded = true;
	                }
	            }).error(function (data, status, headers, config) {});
	        };

	        vm.getlistbyemail = function () {

	            //            if (vm._leftcount < vm._selected)
	            if (!vm.createSubscr && vm._leftcount < vm.choices._count_Data) {
	                var _message = "This download will exceed your 5,000 record monthly allotment. Please adjust your quantity and try again";
	                //                toaster.pop('info', _message);
	                toaster.pop({ type: 'info', body: _message, timeout: 0 });
	                return;
	            }

	            var request = $http({
	                method: "post",
	                url: FFD_CONST.API_BASE_URL + (_choices.bustype.id == 1 ? "getNewListByEmail" : "getEstListByEmail"),
	                //                data: { _ids: vm._SelArr, _selectall: vm._SelAll }
	                data: { _ids: vm._SelArr, _selectall: vm._SelAll, _random: _choices._random_Data, _count: _choices._count_Data }

	            });

	            request.success(function (data, status, headers, config) {
	                console.log(data);
	                if (data.d.result == "OK") {
	                    vm._leftcount = data.d.userleftcount;
	                    toaster.pop('success', data.d.message);
	                    vm.isDataLoaded = true;
	                }
	                if (data.d.result == "ERROR" && data.d.errmsg) {
	                    toaster.pop('error', data.d.errmsg);
	                }
	            }).error(function (data, status, headers, config) {
	                var aa = 66;
	            });
	        };

	        vm.state = {};

	        vm.saveState = function () {
	            //            var _stmp = angular.toJson(vm.gridApi.saveState.save());
	            //            localStorageService.set(_name_for_save, _stmp);
	            $localStorage[_name_for_save] = vm.gridApi.saveState.save();
	        };

	        vm.restoreState = function () {
	            vm.gridApi.saveState.restore(vm, vm.state);
	        };

	        vm.gridData = [];

	        function activate() {

	            $scope.$watch(vm.getselected);
	            $scope.$watch(vm.enablelist);

	            /*
	            var _stmp = $sessionStorage['searchform'];
	            if (_stmp == null) return;
	              var _tmp = angular.fromJson(_stmp);
	              $scope.id = _tmp.choices["bustype"]["id"];
	              GetResultsFactory.getCounters(_tmp.choices)
	            */

	            LoginService.getuserinfo().then(function (data) {
	                vm.username = data.username;
	                vm.isLogged = data.islogged;
	                vm.isAdmin = data.isadmin;
	                vm.changeCC = data.changeCC;
	                vm.createSubscr = data.createSubscr;
	            });

	            GetResultsFactory.getCounters().then(function (data) {
	                vm._count = data.count;
	                vm._leftcount = data.leftcount;
	                vm._invoiceid = data.invoiceid;
	                vm._demo = JSON.parse(data.demo.toLowerCase());
	                vm.isLoaded = true;

	                //            $scope.getPage(1, $scope.gridOptions.paginationPageSize, $scope.rbOmits, true)
	                vm.getPage(1, vm.gridOptions.paginationPageSize, true).then(function () {

	                    //<>                        return;   //?????/

	                    /*
	                                            var _stmp = localStorageService.get(_name_for_save);
	                                            if (_stmp != null)
	                                                $scope.gridApi.saveState.restore($scope, angular.fromJson(_stmp));
	                    */
	                    if ($localStorage[_name_for_save]) vm.gridApi.saveState.restore($scope, $localStorage[_name_for_save]);

	                    vm.gridApi.core.on.columnVisibilityChanged($scope, function (column) {
	                        //                                var _stmp = angular.toJson($scope.gridApi.saveState.save());
	                        //                                localStorageService.set(_name_for_save, _stmp);
	                        $localStorage[_name_for_save] = vm.gridApi.saveState.save();
	                    });

	                    GetResultsFactory.setdemoviewedflag();

	                    return;
	                });
	            });
	        }
	    };
	    _controller.$inject = ["$scope", "$localStorage", "$sessionStorage", "$timeout", "$http", "$state", "_", "FFD_CONST", "toaster", "uiGridConstants", "uiGridPaginationService", "LoginService", "InfoFactory", "ChoicesFactory", "GetResultsFactory", "PreviewDataService", "GoogleGeoService"];

	    return _controller;
	};

/***/ },
/* 180 */
/***/ function(module, exports) {

	module.exports = "<top-header-search></top-header-search>\r\n";

/***/ },
/* 181 */
/***/ function(module, exports) {

	module.exports = "<preview-data-mobile ng-if=\"breakpoint.xs || breakpoint.sm\"></preview-data-mobile>\r\n\r\n<preview-data-desktop ng-if=\"breakpoint.md || breakpoint.lg\"></preview-data-desktop>\r\n\r\n\r\n";

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(183);

	module.exports = function (app) {

	    /* @ngInject */

	    function configRoutes($stateProvider) {
	        var _views = {};
	        _views = {
	            'header@root': { template: '<top-header-search></top-header-search>' },

	            //                'content@root': { template: require('./content.tpl.html'), controller: require('./LoginController.js')(app), controllerAs: 'vm' }

	            'content@root': { template: __webpack_require__(185), controller: __webpack_require__(186)(app), controllerAs: 'vm' }
	        };
	        $stateProvider.state('login', { parent: 'root', url: 'login', views: _views });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	};

/***/ },
/* 183 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 184 */,
/* 185 */
/***/ function(module, exports) {

	module.exports = "<div class=\"row loginform m-y-3\">\r\n    <div class=\"col-md-8 col-md-offset-2\">\r\n        <div class=\"row\">\r\n            <div class=\"col-xs-10 col-xs-offset-1 text-xs-center\">\r\n                <h2>\r\n                    Sign In\r\n                </h2>\r\n                <p>\r\n                    Please enter your username and password.\r\n                    <br />\r\n                    <a ui-sref=\"register\">Sign Up</a> if you don't have an account.\r\n                </p>\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <div class=\"row m-y-2\">\r\n            <div class=\"col-xs-10  col-xs-offset-1  text-xs-center\">\r\n\r\n                <form name=\"vm.form\" novalidate>\r\n                    <formly-form model=\"vm.logindata\" fields=\"vm.loginFields\">\r\n\r\n                        <div class=\"row m-y-1\" ng-show=\"vm.logindata.anotherSession_visible\">\r\n                            <div class=\"col-xs-12\">\r\n                                <input type=\"checkbox\" ng-model=\"vm.logindata.supressAnotherSession\" />\r\n                                <span>You already have an active connection. Disconnect other connection and login?</span>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div class=\"row m-t-1\">\r\n                            <div class=\"col-xs-6 text-xs-center\">\r\n                                <button type=\"submit\" class=\"btn btn-md btn-default btn-warning\"\r\n                                        ng-disabled=\"vm.form.$invalid\"\r\n                                        ng-click=\"vm.login($event)\">\r\n                                    Sign In\r\n                                </button>\r\n                            </div>\r\n                            <div class=\"col-xs-6 text-xs-center\">\r\n                                <a class=\"btn btn-md  btn-warning\" ng-click=\"vm.go_cancel($event)\">Cancel</a>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"row\">\r\n                            <div class=\"col-xs-12 text-xs-center\">\r\n                                <a class=\"btn btn-link\" ui-sref=\"resetpassword\">Forgot Login/Password?</a>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </formly-form>\r\n                </form>\r\n\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n    </div>\r\n</div>\r\n\r\n";

/***/ },
/* 186 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (app) {

	    /* @ngInject */

	    var _controller = function _controller($scope, $state, $timeout, $stateParams, toaster, LoginService, $sessionStorage) {

	        var vm = this;

	        vm.anotherSession_visible = false;
	        vm.supressAnotherSession = false;

	        vm.success_state = $stateParams.success_state || LoginService.success_state || 'home';
	        vm.success_params = LoginService.success_params;

	        vm.cancel_state = LoginService.cancel_state || 'home';
	        vm.cancel_params = LoginService.cancel_params;

	        $timeout(function () {
	            angular.element('input[disabled]').each(function () {
	                angular.element(this).removeAttr('disabled');
	            });
	        }, 3000);

	        vm.logindata = {

	            username: "",
	            password: "",

	            supressAnotherSession: false,
	            anotherSession_visible: false
	        };

	        vm.loginFields = [{
	            key: 'username',
	            type: "bs4-horizontalInput",
	            templateOptions: {
	                type: 'text',
	                label: 'User Name',
	                placeholder: 'Enter User Name'
	                //                    ,minlength: 4
	                , maxlength: 25,
	                required: true,
	                disabled: true
	            }
	        }, {
	            key: 'password',
	            type: "bs4-horizontalInput",
	            templateOptions: {
	                type: 'password',
	                label: 'Password',
	                placeholder: 'Enter Password',
	                required: true,
	                minlength: 6,
	                maxlength: 20,
	                disabled: true
	            }
	        }

	        /*
	        , {
	            key: 'supressAnotherSession',
	            type: "bs4-horizontalInput",
	            templateOptions:
	                {
	                    type: 'checkbox',
	                    label: 'You already have an active connection. Disconnect other connection and login?'
	                }
	        }
	        */

	        /*
	        , {
	            key: 'anotherSession',
	            type: 'bs4-horizontalCheckBox',
	            templateOptions:
	                {
	                    type: 'checkbox',
	                    label: 'another session'
	                }
	        }
	        */

	        /*
	        , {
	            key: 'supressAnotherSession',
	            type: 'bs4-horizontalCheckBox',
	            templateOptions:
	                {
	                    type: 'checkbox',
	                    label: 'You already have an active connection. Disconnect other connection and login?'
	                },
	            hideExpression: '!logindata.anotherSession'
	        //                hideExpression: 'false'
	        }
	          */

	        ];

	        vm.login = function ($event) {
	            $event.preventDefault();
	            LoginService.login(vm.logindata.username, vm.logindata.password, vm.logindata.supressAnotherSession).then(function (data) {
	                if (data.result != 'OK' && data.AnotherActiveSession) {
	                    vm.logindata.anotherSession_visible = true;
	                    return;
	                }

	                if (data.result != 'OK' && data.message) {
	                    toaster.pop('error', data.message);
	                    return;
	                }

	                if (data.result == 'OK') {
	                    LoginService.getuserinfo().then(function (data) {
	                        if (data.islogged) {
	                            $state.go(vm.success_state, vm.success_params);
	                        } else {
	                            toaster.pop('error', "Incorrect login or password ... ");
	                        }
	                    });
	                }
	            });
	        };

	        vm.go_cancel = function ($event) {
	            $event.preventDefault();
	            $state.go(vm.cancel_state, vm.cancel_params);
	        };
	    };
	    _controller.$inject = ["$scope", "$state", "$timeout", "$stateParams", "toaster", "LoginService", "$sessionStorage"];

	    return _controller;
	};

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// require('./content.scss');

	module.exports = function (app) {

	    /* @ngInject */

	    function configRoutes($stateProvider) {
	        var _views = {};
	        _views = {
	            'header@root': { template: '<top-header-search></top-header-search>' },

	            //                'content@root': { template: require('./resetpassword.tpl.html'), controller: require('./ResetPasswordController.js')(app)  , controllerAs: 'vm'  }


	            'content@root': {

	                //                    template: require('./resetpassword.tpl.html')

	                templateProvider: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(1, function () {
	                        var template = __webpack_require__(188);
	                        deferred.resolve(template);
	                    });
	                    return deferred.promise;
	                }]

	                //                    , controller: require('./ResetPasswordController.js')(app)

	                , controller: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(2, function () {
	                        var _contr = __webpack_require__(189)(app);
	                        deferred.resolve(_contr);
	                    });
	                    return deferred.promise;
	                }],

	                controllerAs: 'vm'
	            }

	        };
	        $stateProvider.state('resetpassword', { parent: 'root', url: 'resetpassword', views: _views });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	};

/***/ },
/* 188 */,
/* 189 */,
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// require('./content.scss');

	module.exports = function (app) {

	    /* @ngInject */

	    function configRoutes($stateProvider) {
	        var _views = {};
	        _views = {
	            'header@root': { template: '<top-header-search></top-header-search>' },

	            //                'content@root': { template: require('./content.tpl.html'), controller: require('./RegisterController.js')(app), controllerAs: 'vm' }


	            'content@root': {

	                //                    template: require('./content.tpl.html')

	                templateProvider: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(1, function () {
	                        var template = __webpack_require__(191);
	                        deferred.resolve(template);
	                    });
	                    return deferred.promise;
	                }]

	                //                    , controller: require('./RegisterController.js')(app)


	                , controller: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(2, function () {
	                        var _contr = __webpack_require__(192)(app);
	                        deferred.resolve(_contr);
	                    });
	                    return deferred.promise;
	                }],

	                controllerAs: 'vm'
	            }

	        };
	        $stateProvider.state('register', { parent: 'root', url: 'register', views: _views });

	        _views = {
	            'header@root': { template: '<top-header-search></top-header-search>' },

	            //                'content@root': { template: require('./registersuccess.tpl.html') }

	            'content@root': {

	                //                    template: require('./registersuccess.tpl.html')

	                templateProvider: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(1, function () {
	                        var template = __webpack_require__(193);
	                        deferred.resolve(template);
	                    });
	                    return deferred.promise;
	                }]

	            }

	        };
	        $stateProvider.state('registersuccess', { parent: 'root', url: 'registersuccess', views: _views });

	        _views = {
	            'header@root': { template: '<top-header-search></top-header-search>' },

	            //                'content@root': { template: require('./confirmregister.tpl.html'), controller: require('./ConfirmRegisterController.js')(app), controllerAs: 'vm' }

	            'content@root': {

	                //                    template: require('./confirmregister.tpl.html')

	                templateProvider: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(1, function () {
	                        var template = __webpack_require__(194);
	                        deferred.resolve(template);
	                    });
	                    return deferred.promise;
	                }]

	                //                    , controller: require('./ConfirmRegisterController.js')(app)

	                , controller: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(2, function () {
	                        var _contr = __webpack_require__(195)(app);
	                        deferred.resolve(_contr);
	                    });
	                    return deferred.promise;
	                }],

	                controllerAs: 'vm'
	            }

	        };

	        $stateProvider.state('confirmregister', { parent: 'root', url: 'confirmregister/', params: { memberID: null }, views: _views });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	};

/***/ },
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    /* @ngInject */
	    function configRoutes($stateProvider) {
	        var _views = {};

	        //        _views = { 'content@root': { template: require('./profile.tpl.html'), controller: require('./ProfileController.js')(app), controllerAs: 'vm' } };


	        _views = {
	            'content@root': {

	                //                template: require('./profile.tpl.html')

	                templateProvider: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(1, function () {
	                        var template = __webpack_require__(232);
	                        deferred.resolve(template);
	                    });
	                    return deferred.promise;
	                }],

	                controller: __webpack_require__(197)(app),
	                controllerAs: 'vm'
	            }
	        };

	        $stateProvider.state('profile', { parent: 'root', url: 'profile', views: _views, authenticate: true });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);

	    __webpack_require__(198)(app);
	    __webpack_require__(202)(app);
	    __webpack_require__(205)(app);
	    __webpack_require__(214)(app);
	    __webpack_require__(217)(app);
	    __webpack_require__(220)(app);
	    __webpack_require__(226)(app);
	};

/***/ },
/* 197 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (app) {

	    /* @ngInject */

	    function ProfileController($scope, LoginService, GetResultsFactory, toaster) {
	        var vm = this;
	        vm.done = false;
	        vm.results = { changeCC: false, createSubscr: false, isLogged: false, isLoaded: false };

	        /*
	        GetResultsFactory.getCounters()
	               .then(function (data)
	               {
	                     vm.results =
	                       {
	                           _count: data.count,
	                           _leftcount: data.leftcount,
	                           _demo: JSON.parse(data.demo.toLowerCase()),
	                           isLoaded: true
	                       };
	                     vm.results._leftcount = 0;
	               });
	                 */

	        function _loaddata(data) {
	            vm.results.username = data.username;
	            vm.results.isLogged = data.islogged;
	            vm.results.isAdmin = data.isadmin;
	            vm.results.changeCC = data.changeCC;
	            vm.results.createSubscr = data.createSubscr;
	            vm.results.isLoaded = true;
	        }

	        function _handler(event, data) {
	            _loaddata(data);
	        }

	        LoginService.getuserinfo().then(_loaddata);

	        $scope.$on('ChangeUserStatus', _handler);
	    }
	    ProfileController.$inject = ["$scope", "LoginService", "GetResultsFactory", "toaster"];

	    return ProfileController;
	};

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    /* @ngInject */
	    function configRoutes($stateProvider) {

	        //        $stateProvider.state('profile.changepassword', { url: '/changepassword', template: require('./profile_changepassword.tpl.html'), controller: require('./ChangePasswordController.js')(app), controllerAs: 'vm', authenticate: true });

	        $stateProvider.state('profile.changepassword', {
	            url: '/changepassword'

	            //            , template: require('./profile_changepassword.tpl.html')

	            , templateProvider: ['$q', function ($q) {
	                var deferred = $q.defer();
	                __webpack_require__.e/* nsure */(1, function () {
	                    var template = __webpack_require__(199);
	                    deferred.resolve(template);
	                });
	                return deferred.promise;
	            }]

	            //            , controller: require('./ChangePasswordController.js')(app)

	            , controller: ['$q', function ($q) {
	                var deferred = $q.defer();
	                __webpack_require__.e/* nsure */(2, function () {
	                    var _contr = __webpack_require__(200)(app);
	                    deferred.resolve(_contr);
	                });
	                return deferred.promise;
	            }],

	            controllerAs: 'vm',
	            authenticate: true
	        });

	        //        $stateProvider.state('profile.changepasswordsuccess', { url: '/changepaswordsuccess', template: require('./profile_changepasswordsuccess.tpl.html') });

	        $stateProvider.state('profile.changepasswordsuccess', {
	            url: '/changepaswordsuccess'

	            //            , template: require('./profile_changepasswordsuccess.tpl.html')

	            , templateProvider: ['$q', function ($q) {
	                var deferred = $q.defer();
	                __webpack_require__.e/* nsure */(1, function () {
	                    var template = __webpack_require__(201);
	                    deferred.resolve(template);
	                });
	                return deferred.promise;
	            }]

	        });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	};

/***/ },
/* 199 */,
/* 200 */,
/* 201 */,
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    /* @ngInject */
	    function configRoutes($stateProvider) {

	        $stateProvider.state('profile.changepersonaldata', {
	            url: '/changepersonaldata'

	            //                ,template: require('./profile_changepersonaldata.tpl.html')

	            , templateProvider: ['$q', function ($q) {
	                var deferred = $q.defer();
	                __webpack_require__.e/* nsure */(1, function () {
	                    var template = __webpack_require__(203);
	                    deferred.resolve(template);
	                });
	                return deferred.promise;
	            }]

	            //                , controller: require('./ChangePersonalDataController.js')(app)


	            , controller: ['$q', function ($q) {
	                var deferred = $q.defer();
	                __webpack_require__.e/* nsure */(2, function () {
	                    var _contr = __webpack_require__(204)(app);
	                    deferred.resolve(_contr);
	                });
	                return deferred.promise;
	            }],

	            controllerAs: 'vm',
	            authenticate: true,
	            params: { username: null, backto: null }
	        });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	};

/***/ },
/* 203 */,
/* 204 */,
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    /* @ngInject */
	    function configRoutes($stateProvider) {

	        $stateProvider.state('profile.orderhistory', { url: '/orderhistory', template: __webpack_require__(206), controller: __webpack_require__(207)(app), controllerAs: 'vm', authenticate: true });

	        $stateProvider.state('admin.orders', {
	            url: '/user/orders',

	            //                template: require('./profile_orderhistory.tpl.html'),

	            templateProvider: ['$q', function ($q) {
	                var deferred = $q.defer();
	                __webpack_require__.e/* nsure */(1, function () {
	                    var template = __webpack_require__(206);
	                    deferred.resolve(template);
	                });
	                return deferred.promise;
	            }]

	            //                ,controller: require('./OrderHistoryController.js')(app),

	            , controller: ['$q', function ($q) {
	                var deferred = $q.defer();
	                __webpack_require__.e/* nsure */(2, function () {
	                    var _contr = __webpack_require__(207)(app);
	                    deferred.resolve(_contr);
	                });
	                return deferred.promise;
	            }],

	            controllerAs: 'vm',
	            authenticate: true,
	            params: { username: null, backto: null }

	        });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    __webpack_require__(213)(app);
	    app.config(configRoutes);
	};

/***/ },
/* 206 */
/***/ function(module, exports) {

	module.exports = "\r\n\r\n<div class=\"row p-y-2\">\r\n\r\n    <div class=\"col-md-10 col-md-offset-1\">\r\n\r\n        <h4>ORDER HISTORY  {{vm._username?\" ( \"+vm._username+\" )\":\"\"}}</h4>\r\n\r\n        <button ui-sref=\"{{vm._backto}}\" ng-show=\"vm._backto\" class=\"m-y-1\">Back</button>\r\n\r\n\r\n\r\n        <div id=\"grid1\"\r\n             ui-grid=\"vm.gridOptions\"\r\n             external-scopes=\"clickHandler\"\r\n             ui-grid-cellnav\r\n             ui-grid-save-state\r\n             ui-grid-resize-columns\r\n             ui-grid-pinning\r\n             ui-grid-selection\r\n             ui-grid-move-columns\r\n             ui-grid-pagination\r\n             my-ui-grid-resize\r\n             class=\"grid  ui-grid-row-auto-height\">\r\n\r\n        </div>\r\n\r\n      \r\n\r\n\r\n\r\n\r\n\r\n\r\n        <button ui-sref=\"{{vm._backto}}\" ng-show=\"vm._backto\" class=\"m-y-1\">Back</button>\r\n\r\n\r\n    </div>\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n<script id=\"template.html\" type=\"text/ng-template\">\r\n\r\n\r\n    <div class=\"popover\" role=\"tooltip\">\r\n\r\n        <div class=\"popover-content\">\r\n            XXXXXXXXX\r\n            <table class=\"table table-bordered  table-striped table-condensed\">\r\n                <tr><td>Liat Name</td><td>{{grid.appScope.orderinfo.ListName}}</td></tr>\r\n                <tr><td>Date Range</td><td>{{grid.appScope.orderinfo.Daterange}}</td></tr>\r\n                <tr><td>Selected states</td><td>{{grid.appScope.orderinfo.States}}</td></tr>\r\n                <tr><td>Selected cities</td><td>{{grid.appScope.orderinfo.Cities}}</td></tr>\r\n                <tr><td>Selected ZIP codes</td><td>{{grid.appScope.orderinfo.ZIP}}</td></tr>\r\n                <tr><td>Selected counties</td><td>{{grid.appScope.orderinfo.Counties}}</td></tr>\r\n                <tr><td>Selected ZIP Radius</td><td>{{grid.appScope.orderinfo.ZipRadius}}</td></tr>\r\n                <tr><td>Selected RDBI</td><td>{{grid.appScope.orderinfo.RDBI}}</td></tr>\r\n                <tr><td>Selected SIC Codes</td><td>{{grid.appScope.orderinfo.SIC}}</td></tr>\r\n                <tr><td>Selected Group SIC Codes</td><td>{{grid.appScope.orderinfo.GroupSIC}}</td></tr>\r\n                <tr><td>Selected Area Codes</td><td>{{grid.appScope.orderinfo.AreaCodes}}</td></tr>\r\n            </table>\r\n        </div>\r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n</script>\r\n";

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {
	        /* @ngInject */

	        function OrderHistoryController($scope, $state, $stateParams, uiGridConstants, OrderHistoryService, _, createDialog, toaster, LoginService) {
	                var vm = this;

	                vm._backto = $stateParams.backto ? $stateParams.backto : "profile";
	                vm._username = $stateParams.username;

	                //        $scope.gridScope = $scope;

	                vm.removeRow = function ($event, ent) {

	                        $event.preventDefault();
	                        $event.stopPropagation();
	                        vm.value = ent.ListId;

	                        alert('ssss');

	                        LoginService.getuserinfo().then(function (data) {
	                                if (data.islogged) {
	                                        OrderHistoryService.getOrderInfo(ent.ListId).then(function (data) {
	                                                if (data.result == "OK") {
	                                                        vm.orderinfo = data.data;
	                                                }
	                                                if (data.result != "OK" && data.message) {
	                                                        toaster.pop('error', data.message);
	                                                }
	                                        });
	                                }
	                        });
	                };

	                vm._show = function (_orderinfo) {
	                        createDialog({
	                                id: 'SpecialOffer',
	                                css: {
	                                        top: '100px',
	                                        margin: '0 auto'
	                                },
	                                template: __webpack_require__(208),
	                                footerTemplate: __webpack_require__(209),
	                                backdrop: true,
	                                cancel: { label: 'Exit', fn: function fn() {} },
	                                controller: 'OrderShowInfoController'
	                        }, {
	                                orderinfo: _orderinfo });
	                };

	                vm.getlist = function ($event, ent) {

	                        $event.preventDefault();
	                        $event.stopPropagation();
	                        var _id = ent.ListId;

	                        angular.element('.dwnl').remove();
	                        var anchor = angular.element('<iframe class="dwnl" ></iframe>');
	                        anchor.attr({
	                                src: '/SPA/Order.ashx?id=' + _id,
	                                style: "display:none;"
	                        });

	                        anchor.appendTo('body');
	                };

	                vm.showInfo = function ($event, ent) {

	                        $event.preventDefault();
	                        $event.stopPropagation();
	                        vm.value = ent;

	                        OrderHistoryService.getOrderInfo(ent.ListId).then(function (data) {

	                                if (data.result == "OK") {
	                                        vm.orderinfo = data.data;
	                                        var _data = data.data;

	                                        _data.WithContacts = vm.value.SearchData.WithContacts;
	                                        _data.WithPhones = vm.value.SearchData.WithPhones;

	                                        vm._show(_data);
	                                }

	                                if (data.result != "OK" && data.message) {
	                                        toaster.pop('error', data.message);
	                                }
	                        });
	                };

	                //        $scope._records = [];

	                vm.gridOptions = {};
	                vm.gridOptions.appScopeProvider = vm;

	                //        vm.gridOptions.data = '_records';

	                vm.gridOptions.enableColumnResizing = true;
	                vm.gridOptions.enableFiltering = false;

	                vm.gridOptions.enableColumnMenus = false;
	                vm.gridOptions.enableGridMenu = false;

	                vm.gridOptions.showGridFooter = false;

	                vm.gridOptions.showColumnFooter = false;

	                vm.gridOptions.paginationPageSizes = [10, 25, 50, 100, 200];
	                vm.gridOptions.paginationPageSize = 10;
	                vm.gridOptions.useExternalPagination = true;

	                var boolColTemplate = __webpack_require__(210);

	                vm.gridOptions.columnDefs = [{
	                        name: ' ',
	                        displayName: 'Actions'
	                        //                    , cellTemplate: require('./cell-template.tpl.html')
	                        , cellTemplate: __webpack_require__(211),
	                        pinnedLeft: false, width: 120
	                }, { name: 'ListId', displayName: 'Order ID', sortable: false, pinnedLeft: false, width: 100 }, { name: 'InvoiceNumber', displayName: 'Invoice Number', pinnedLeft: false, width: 100 }, { name: 'CreateDate', displayName: 'Create Date', pinnedLeft: false, width: 100 }, { name: 'ListName', displayName: 'List Name', width: 150 }, { name: 'Count', displayName: 'Records count', width: 100 }, { name: "BeginDate", visible: true, displayname: 'Begin Date', width: 120 }, { name: "EndDate", visible: true, displayname: 'End Date', width: 120 }, {
	                        field: '_criteria',
	                        visible: true,
	                        displayName: 'Search Criteria',
	                        cellTemplate: __webpack_require__(212),
	                        width: 600
	                }

	                /*
	                ,
	                { name: "States", visible: true, displayname: 'States', width: 150 },
	                { name: "Cities", visible: true, displayname: 'Cities', width: 150 },
	                    { name: "ZipCodes", visible: true, displayname: 'Zip Codes', width: 150 },
	                { name: "AreaCodes", visible: true, displayname: 'Area Codes', width: 150 },
	                { name: "SICCodes", visible: true, displayname: 'SIC Codes', width: 150 },
	                { name: "GroupSICCodes", visible: true, displayname: 'Group SIC Codes', width: 150 },
	                { name: "Counties", visible: true, displayname: 'Counties', width: 150 },
	                { name: "Employees", visible: true, displayname: 'Company size', width: 150 },
	                { name: "Sales", visible: true, displayname: 'Sales volume', width: 150 },
	                { name: "RBDI", visible: true, displayname: 'RBDI', width: 150 },
	                { name: "Miles", visible: true, displayname: 'Miles', width: 100 },
	                { name: "ZipForRadius", visible: true, displayname: 'Zip For Radius', width: 100 },
	                { name: "Keyword", visible: true, width: 200 },
	                  { name: "WithContacts", visible: true, cellTemplate: boolColTemplate, displayname: 'With Contacts', width: 150 },
	                { name: "WithPhones", visible: true, cellTemplate: boolColTemplate, displayname: 'With Phones', width: 150 },
	                { name: "WithEmails", visible: true, cellTemplate: boolColTemplate, displayname: 'With E-mails', width: 150 }
	                  */

	                ];

	                vm.gridOptions.rowIdentity = function (row) {
	                        return row.ListId;
	                };
	                vm.gridOptions.getRowIdentity = function (row) {
	                        return row.ListId;
	                };

	                vm.gridOptions.onRegisterApi = function (gridApi) {
	                        vm.gridApi = gridApi;

	                        gridApi.pagination.on.paginationChanged($scope, function (newPage, pageSize) {
	                                if (vm.getPage) {
	                                        vm.getPage(newPage, pageSize);
	                                }
	                        });
	                };

	                vm.addCriteriesColumn = function (_item) {
	                        var _choices = {};

	                        _choices.states = _.map(_item.States.match(/[A-Z]{2}/g), function (t) {
	                                return { shortname: t };
	                        });
	                        _choices.cities = _.map(_item.Cities.match(/[^,.]+?,\s*[A-Z]{2}/g), function (_itm) {
	                                var _arr = _itm.split(',');return { Name: _arr[0], State: _arr[1].trim() };
	                        });
	                        _choices.zipcodes = _.filter(_item.ZipCodes.split(','), function (t) {
	                                return t.trim().length > 0;
	                        });
	                        _choices.areacodes = _.filter(_item.AreaCodes.split(','), function (t) {
	                                return t.trim().length > 0;
	                        });
	                        _choices.counties = _.map(_item.Counties.match(/[^,.]+?,\s*[A-Z]{2}/g), function (_itm) {
	                                var _arr = _itm.split(',');return { Name: _arr[0], State: _arr[1].trim() };
	                        });

	                        _choices.siccodes = [];
	                        var _pat_sic = /(\d{2})\s+(.+)\s*/;
	                        var _xarr = _.filter(_item.GroupSICCodes.split(','), function (t) {
	                                return _pat_sic.test(t);
	                        });
	                        _choices.siccodes = _.map(_xarr, function (_itm) {
	                                var _arr = _itm.match(/(\d{2})\s+(.+)\s*/);return { code: _arr[1], name: _arr[2].trim() };
	                        });

	                        _choices.keywords = _.filter(_item.Keyword.split(','), function (t) {
	                                return t.trim().length > 0;
	                        });
	                        _choices.rbdiBusiness = /B/.test(_item.RBDI);
	                        _choices.rbdiIndividual = /R/.test(_item.RBDI);
	                        _choices.rbdiUnknown = _choices.rbdiBusiness && _choices.rbdiIndividual;

	                        _choices.zipForRadius = _item.ZipForRadius;
	                        _choices.radiusMiles = _item.Miles;
	                        _choices.companysizes = [];
	                        _choices.salesvolumes = _.filter(_item.Sales.split(','), function (t) {
	                                return t.trim().length > 0;
	                        });
	                        _choices.chkContactNames = _item.WithContacts;
	                        _choices.chkPhoneNumbers = _item.WithPhones;
	                        _choices.chkEmails = _item.WithEmails;

	                        _item.Criteries = _choices;

	                        return _item;
	                };

	                vm.getPage = function (_page, _size) {
	                        var promise = OrderHistoryService.getPage(_page, _size, vm._username);
	                        promise.then(function (data) {
	                                vm.gridOptions.totalItems = data.cntrecords;
	                                var _records = _.map(data.records, function (_item) {
	                                        return angular.merge({}, _item.view, { CreateDate: _item.info.CreateDate });
	                                });
	                                var _records_1 = _.col13dig2date(_records);
	                                vm.gridOptions.data = _.map(_records_1, function (_item) {
	                                        return vm.addCriteriesColumn(_item);
	                                });

	                                //                vm.gridOptions.data = _.col13dig2date(_records);
	                                //                vm._records = _.col13dig2date(data.records);


	                                /*
	                                                var _len = vm.gridOptions.data.length || 5;
	                                                var _len_new = (_len < 5) ? 5 : _len;
	                                
	                                
	                                
	                                                vm.gridOptions.enableVerticalScrollbar = uiGridConstants.scrollbars.NEVER;
	                                                vm.gridOptions.minRowsToShow = _len_new + 3;
	                                
	                                
	                                                vm.grid_height = (_len_new + 3) * vm.gridOptions.rowHeight;
	                                */

	                                // agi                var _len = vm.gridOptions.data.length;
	                                // 2017-02-07               vm.gridOptions.minRowsToShow = _len + 3;

	                        });

	                        return promise;
	                };

	                activate();
	                function activate() {

	                        vm.getPage(1, vm.gridOptions.paginationPageSize).then(function () {});
	                }
	        }
	        OrderHistoryController.$inject = ["$scope", "$state", "$stateParams", "uiGridConstants", "OrderHistoryService", "_", "createDialog", "toaster", "LoginService"];

	        return OrderHistoryController;
	};

/***/ },
/* 208 */
/***/ function(module, exports) {

	module.exports = "<table class=\"table table-bordered  table-striped table-sm\">\r\n    <tr><td>Liat Name</td><td>{{orderinfo.ListName}}</td></tr>\r\n    <tr><td>Date Range</td><td>{{orderinfo.DateRange}}</td></tr>\r\n    <tr><td>Selected states</td><td>{{orderinfo.States}}</td></tr>\r\n    <tr><td>Selected cities</td><td>{{orderinfo.Cities}}</td></tr>\r\n    <tr><td>Selected ZIP codes</td><td>{{orderinfo.ZIP}}</td></tr>\r\n    <tr><td>Selected counties</td><td>{{orderinfo.Counties}}</td></tr>\r\n    <tr><td>Selected ZIP Radius</td><td>{{orderinfo.ZipRadius}}</td></tr>\r\n    <tr><td>Selected RDBI</td><td>{{orderinfo.RBDI}}</td></tr>\r\n    <tr><td>Selected SIC Codes</td><td>{{orderinfo.SIC}}</td></tr>\r\n    <tr><td>Selected Group SIC Codes</td><td>{{orderinfo.GroupSIC}}</td></tr>\r\n    <tr><td>Selected Area Codes</td><td>{{orderinfo.AreaCodes}}</td></tr>\r\n    <tr><td>With Contacts</td><td>{{orderinfo.WithContacts}}</td></tr>\r\n    <tr><td>With Phones</td><td>{{orderinfo.WithPhones}}</td></tr>\r\n</table>\r\n\r\n<!--\r\n{\"d\":{\"data\":{\"_page\":1,\"_sizepage\":100,\"_cntpages\":1,\"_cntrecords\":61,\"_records\":[\r\n\r\n{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\r\n\"ListId\":1071,\"CreateDate\":\"\\/Date(1438117200000)\\/\",\r\n\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":0,\r\n\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\r\n\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\r\n\"BeginDate\":\"\\/Date(1437253200000)\\/\",\"EndDate\":\"\\/Date(1438117200000)\\/\",\r\n\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\r\n\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":1070,\"CreateDate\":\"\\/Date(1437426000000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":1069,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1436562000000)\\/\",\"EndDate\":\"\\/Date(1437426000000)\\/\",\"GroupSICCodes\":[],\"Count\":2,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":2,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":1069,\"CreateDate\":\"\\/Date(1437426000000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":0,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1436562000000)\\/\",\"EndDate\":\"\\/Date(1437426000000)\\/\",\"GroupSICCodes\":[],\"Count\":2,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":2,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":1068,\"CreateDate\":\"\\/Date(1437339600000)\\/\",\"SearchData\":{\"ErrorMessage\":\"\",\"SelectedList\":2,\"UserListId\":1067,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1405803600000)\\/\",\"EndDate\":\"\\/Date(1437339600000)\\/\",\"GroupSICCodes\":[],\"Count\":2,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":2,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":1067,\"CreateDate\":\"\\/Date(1437339600000)\\/\",\"SearchData\":{\"ErrorMessage\":\"\",\"SelectedList\":2,\"UserListId\":1066,\"States\":[\"AL\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1436475600000)\\/\",\"EndDate\":\"\\/Date(1437339600000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":1066,\"CreateDate\":\"\\/Date(1437339600000)\\/\",\"SearchData\":{\"ErrorMessage\":\"\",\"SelectedList\":2,\"UserListId\":1065,\"States\":[\"AL\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1436475600000)\\/\",\"EndDate\":\"\\/Date(1437339600000)\\/\",\"GroupSICCodes\":[],\"Count\":3,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":3,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":1065,\"CreateDate\":\"\\/Date(1437339600000)\\/\",\"SearchData\":{\"ErrorMessage\":\"\",\"SelectedList\":2,\"UserListId\":1064,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1405803600000)\\/\",\"EndDate\":\"\\/Date(1437339600000)\\/\",\"GroupSICCodes\":[],\"Count\":2,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":2,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":1064,\"CreateDate\":\"\\/Date(1437339600000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":0,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1436475600000)\\/\",\"EndDate\":\"\\/Date(1437339600000)\\/\",\"GroupSICCodes\":[],\"Count\":2,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":2,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":64,\"CreateDate\":\"\\/Date(1436302800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":0,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1435352400000)\\/\",\"EndDate\":\"\\/Date(1436216400000)\\/\",\"GroupSICCodes\":[],\"Count\":4,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":4,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":61,\"CreateDate\":\"\\/Date(1435870800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":60,\"States\":[],\"Cities\":[],\"ZipCodes\":[\"10007\"],\"AreaCodes\":[\"212\"],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1435006800000)\\/\",\"EndDate\":\"\\/Date(1435870800000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":60,\"CreateDate\":\"\\/Date(1435870800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":59,\"States\":[],\"Cities\":[],\"ZipCodes\":[\"10007\"],\"AreaCodes\":[\"212\"],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1435006800000)\\/\",\"EndDate\":\"\\/Date(1435870800000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":59,\"CreateDate\":\"\\/Date(1435870800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":58,\"States\":[],\"Cities\":[],\"ZipCodes\":[\"10007\"],\"AreaCodes\":[\"212\"],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1435006800000)\\/\",\"EndDate\":\"\\/Date(1435870800000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":58,\"CreateDate\":\"\\/Date(1435870800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":57,\"States\":[],\"Cities\":[],\"ZipCodes\":[\"10007\"],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1435006800000)\\/\",\"EndDate\":\"\\/Date(1435870800000)\\/\",\"GroupSICCodes\":[],\"Count\":2,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":2,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":57,\"CreateDate\":\"\\/Date(1435870800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":56,\"States\":[],\"Cities\":[],\"ZipCodes\":[\"10007\"],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1435006800000)\\/\",\"EndDate\":\"\\/Date(1435870800000)\\/\",\"GroupSICCodes\":[],\"Count\":2,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":2,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":56,\"CreateDate\":\"\\/Date(1435870800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":55,\"States\":[],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1435006800000)\\/\",\"EndDate\":\"\\/Date(1435870800000)\\/\",\"GroupSICCodes\":[],\"Count\":2,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":2,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":55,\"CreateDate\":\"\\/Date(1435870800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":54,\"States\":[],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1435006800000)\\/\",\"EndDate\":\"\\/Date(1435870800000)\\/\",\"GroupSICCodes\":[],\"Count\":2,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":2,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":54,\"CreateDate\":\"\\/Date(1435870800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":53,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1435006800000)\\/\",\"EndDate\":\"\\/Date(1435870800000)\\/\",\"GroupSICCodes\":[],\"Count\":3,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":3,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":53,\"CreateDate\":\"\\/Date(1435870800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":52,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1435006800000)\\/\",\"EndDate\":\"\\/Date(1435870800000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":52,\"CreateDate\":\"\\/Date(1435870800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":51,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1435006800000)\\/\",\"EndDate\":\"\\/Date(1435870800000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":51,\"CreateDate\":\"\\/Date(1435870800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":50,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1435006800000)\\/\",\"EndDate\":\"\\/Date(1435870800000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":50,\"CreateDate\":\"\\/Date(1435870800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":49,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1435006800000)\\/\",\"EndDate\":\"\\/Date(1435870800000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":49,\"CreateDate\":\"\\/Date(1435870800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":48,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1435006800000)\\/\",\"EndDate\":\"\\/Date(1435870800000)\\/\",\"GroupSICCodes\":[],\"Count\":3,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":3,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":48,\"CreateDate\":\"\\/Date(1435870800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":47,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1435006800000)\\/\",\"EndDate\":\"\\/Date(1435870800000)\\/\",\"GroupSICCodes\":[],\"Count\":3,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":3,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":47,\"CreateDate\":\"\\/Date(1435870800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":46,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1435006800000)\\/\",\"EndDate\":\"\\/Date(1435870800000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":46,\"CreateDate\":\"\\/Date(1435870800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":45,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1435006800000)\\/\",\"EndDate\":\"\\/Date(1435870800000)\\/\",\"GroupSICCodes\":[],\"Count\":2,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":2,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":45,\"CreateDate\":\"\\/Date(1435870800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":0,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1435006800000)\\/\",\"EndDate\":\"\\/Date(1435870800000)\\/\",\"GroupSICCodes\":[],\"Count\":2,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":2,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":43,\"CreateDate\":\"\\/Date(1435698000000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":0,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1434747600000)\\/\",\"EndDate\":\"\\/Date(1435611600000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":42,\"CreateDate\":\"\\/Date(1435698000000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":41,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1434747600000)\\/\",\"EndDate\":\"\\/Date(1435611600000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":41,\"CreateDate\":\"\\/Date(1435698000000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":40,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1434747600000)\\/\",\"EndDate\":\"\\/Date(1435611600000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":40,\"CreateDate\":\"\\/Date(1435698000000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":39,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1434747600000)\\/\",\"EndDate\":\"\\/Date(1435611600000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":39,\"CreateDate\":\"\\/Date(1435698000000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":38,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1434747600000)\\/\",\"EndDate\":\"\\/Date(1435611600000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":38,\"CreateDate\":\"\\/Date(1435698000000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":37,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1434747600000)\\/\",\"EndDate\":\"\\/Date(1435611600000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":37,\"CreateDate\":\"\\/Date(1435698000000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":36,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1434747600000)\\/\",\"EndDate\":\"\\/Date(1435611600000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":36,\"CreateDate\":\"\\/Date(1435698000000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":0,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1434747600000)\\/\",\"EndDate\":\"\\/Date(1435611600000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":35,\"CreateDate\":\"\\/Date(1435698000000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":0,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1434747600000)\\/\",\"EndDate\":\"\\/Date(1435611600000)\\/\",\"GroupSICCodes\":[],\"Count\":2,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":2,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":34,\"CreateDate\":\"\\/Date(1435698000000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":33,\"States\":[\"AK\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1434747600000)\\/\",\"EndDate\":\"\\/Date(1435611600000)\\/\",\"GroupSICCodes\":[],\"Count\":4,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":4,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":25,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":24,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":7,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":7,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":24,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":23,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":5,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":5,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":23,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":22,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":22,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":21,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":21,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":20,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":2,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":2,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":20,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":19,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":19,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":18,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":18,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":17,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":2,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":2,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":17,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":16,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":3,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":3,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":16,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":15,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":4,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":4,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":15,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":14,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":14,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":0,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":13,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":12,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":12,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":0,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":2,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":2,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":11,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":10,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":2,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":2,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":10,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":9,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":2,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":2,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":9,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":8,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":2,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":2,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":8,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":7,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":7,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":6,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":6,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":5,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":2,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":2,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":5,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":4,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":4,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":3,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":1,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":1,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":3,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":2,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":3,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":3,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":2,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":1,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":3,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":3,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"},{\"UserName\":\"test\",\"UserID\":\"34b6d23c-7ef3-4a26-8115-a2d8ae34b102\",\"ListId\":1,\"CreateDate\":\"\\/Date(1435006800000)\\/\",\"SearchData\":{\"ErrorMessage\":null,\"SelectedList\":2,\"UserListId\":0,\"States\":[\"AZ\"],\"Cities\":[],\"ZipCodes\":[],\"AreaCodes\":[],\"SICCodes\":[],\"Counties\":[],\"RBDI\":[\"B\"],\"Employees\":[],\"Sales\":[],\"Keywords\":[],\"Miles\":0,\"ZipForRadius\":\"\",\"BeginDate\":\"\\/Date(1432933200000)\\/\",\"EndDate\":\"\\/Date(1433797200000)\\/\",\"GroupSICCodes\":[],\"Count\":3,\"SelectedIDs\":[],\"Omits\":true,\"WithContacts\":false,\"WithPhones\":false},\"RecordsCount\":3,\"ListCode\":2,\"Fee\":0.05,\"SubscriprtionType\":\"ANet\",\"InvoiceNumber\":\"1026\"}]},\"errmsg\":\"\"}}\r\n    \r\n-->\r\n";

/***/ },
/* 209 */
/***/ function(module, exports) {

	module.exports = "<div class=\"col-xs-12 text-xs-center\">\r\n    <button class=\"btn  btn-sm  btn-warning\" ng-click=\"$modalCancel()\">{{$modalCancelLabel}}</button>\r\n</div>";

/***/ },
/* 210 */
/***/ function(module, exports) {

	module.exports = "<div class=\"text-xs-center\" ng-if=\"COL_FIELD\">\r\n    <i class=\"fa fa-check\" ></i>\r\n</div>";

/***/ },
/* 211 */
/***/ function(module, exports) {

	module.exports = "<div class=\"grid-action-cell  text-xs-center\">\r\n    <!--\r\n    <a ng-click=\"grid.appScope.showInfo($event,row.entity)\" href=\"#\">\r\n        Info\r\n    </a>\r\n    &nbsp;&nbsp;\r\n    -->\r\n    <a ng-click=\"grid.appScope.getlist($event,row.entity)\" href=\"#\">\r\n        Get List\r\n    </a>\r\n\r\n</div>\r\n";

/***/ },
/* 212 */
/***/ function(module, exports) {

	module.exports = "<div class=\"grid-action-cell text-xs-center p-a-1\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12 text-xs-left\">\r\n            <current-criteries choices=\"row.entity.Criteries\"></current-criteries>\r\n        </div>\r\n    </div>\r\n</div>\r\n";

/***/ },
/* 213 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (app) {

	    app.controller('OrderShowInfoController', _OrderShowInfoController);

	    /* @ngInject */
	    function _OrderShowInfoController($scope, orderinfo) {
	        $scope.orderinfo = orderinfo;
	        console.log('orderinfo>>', orderinfo);
	    }
	    _OrderShowInfoController.$inject = ["$scope", "orderinfo"];

	    //    return _OrderShowInfoController;
	};

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    /* @ngInject */
	    function configRoutes($stateProvider) {

	        //        $stateProvider.state('profile.unsubscribe', { url: '/unsubscribe', template: require('./profile_unsubscribe.tpl.html'), controller: require('./UnsubscribeController.js')(app), controllerAs: 'vm', authenticate: true });


	        $stateProvider.state('profile.unsubscribe', {
	            url: '/unsubscribe'

	            //            , template: require('./profile_unsubscribe.tpl.html')


	            , templateProvider: ['$q', function ($q) {
	                var deferred = $q.defer();
	                __webpack_require__.e/* nsure */(1, function () {
	                    var template = __webpack_require__(215);
	                    deferred.resolve(template);
	                });
	                return deferred.promise;
	            }]

	            //            , controller: require('./UnsubscribeController.js')(app)

	            , controller: ['$q', function ($q) {
	                var deferred = $q.defer();
	                __webpack_require__.e/* nsure */(2, function () {
	                    var _contr = __webpack_require__(216)(app);
	                    deferred.resolve(_contr);
	                });
	                return deferred.promise;
	            }],

	            controllerAs: 'vm', authenticate: true
	        });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	};

/***/ },
/* 215 */,
/* 216 */,
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    /* @ngInject */
	    function configRoutes($stateProvider) {

	        //        $stateProvider.state('profile.changecreditcarddata', { url: '/changecreditcarddata', template: require('./changecreditcarddata.tpl.html'), controller: require('./ChangeCreditCardDataController.js')(app), controllerAs: 'vm', authenticate: true });


	        $stateProvider.state('profile.changecreditcarddata', {
	            url: '/changecreditcarddata'

	            //            template: require('./changecreditcarddata.tpl.html')

	            , templateProvider: ['$q', function ($q) {
	                var deferred = $q.defer();
	                __webpack_require__.e/* nsure */(1, function () {
	                    var template = __webpack_require__(218);
	                    deferred.resolve(template);
	                });
	                return deferred.promise;
	            }]

	            //            , controller: require('./ChangeCreditCardDataController.js')(app)

	            , controller: ['$q', function ($q) {
	                var deferred = $q.defer();
	                __webpack_require__.e/* nsure */(2, function () {
	                    var _contr = __webpack_require__(219)(app);
	                    deferred.resolve(_contr);
	                });
	                return deferred.promise;
	            }],

	            controllerAs: 'vm',
	            authenticate: true
	        });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	};

/***/ },
/* 218 */,
/* 219 */,
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    /* @ngInject */
	    function configRoutes($stateProvider) {
	        //        var _file_tpl = './templates_m.tpl.html';
	        //        var _js_file = './TemplatesController_m.js';

	        //        $stateProvider.state('profile.templates', { url: '/templates', template: require('./templates.tpl.html'), controller: require('./TemplatesController.js')(app), controllerAs: 'vm', authenticate: true });
	        $stateProvider.state('profile.templates', { url: '/templates', template: __webpack_require__(221), controller: __webpack_require__(222)(app), controllerAs: 'vm', authenticate: true });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	};

/***/ },
/* 221 */
/***/ function(module, exports) {

	module.exports = "<div class=\"row m-y-2\">\r\n    <div class=\"col-md-10 col-md-offset-1\">\r\n        <h1>Templates</h1>\r\n        <br />\r\n\r\n        <!--\r\n        <div id=\"grid1\" ui-grid=\"vm.gridOptions\"\r\n             class=\"grid ui-grid-row-auto-height\"\r\n             my-ui-grid-resize\r\n             ui-grid-cellnav\r\n             ui-grid-pagination\r\n             ui-grid-save-state\r\n             ui-grid-resize-columns\r\n             ui-grid-pinning\r\n             ui-grid-selection\r\n             ui-grid-move-columns>\r\n        </div>\r\n        -->\r\n\r\n\r\n        <div id=\"grid1\"\r\n             ui-grid=\"vm.gridOptions\"\r\n             ui-grid-cellnav\r\n             ui-grid-save-state\r\n             ui-grid-resize-columns\r\n             ui-grid-pinning\r\n             ui-grid-selection\r\n             ui-grid-move-columns\r\n             ui-grid-pagination\r\n             my-ui-grid-resize\r\n             class=\"grid  ui-grid-row-auto-height\">\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n    </div>\r\n</div>\r\n\r\n";

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    /* @ngInject */
	    function _templatesController($scope, $state, toaster, $timeout, _, uiGridConstants, uiGridPaginationService, InfoFactory, GetResultsFactory, ChoicesFactory, ToolsService) {
	        var vm = this;

	        //        vm.appScope = vm;

	        vm.gridOptions = {};
	        vm.gridOptions.appScopeProvider = vm;
	        //        vm.gridOptions.data = '_records';
	        vm.gridOptions.enableColumnResizing = true;
	        vm.gridOptions.enableFiltering = false;
	        vm.gridOptions.enableGridMenu = true;
	        vm.gridOptions.showGridFooter = false;
	        //        vm.gridOptions.enablePaging = false;


	        vm.gridOptions.enableColumnMenus = false;
	        vm.gridOptions.enableGridMenu = false;

	        vm.gridOptions.enablePaging = true;
	        vm.gridOptions.paginationPageSizes = [10, 25, 50, 100, 200];
	        vm.gridOptions.paginationPageSize = 10;
	        vm.gridOptions.useExternalPagination = true;

	        //        vm.gridOptions.enableHorizontalScrollbar = 1;

	        vm.gridOptions.showColumnFooter = false;

	        vm._refresh = false;

	        vm.gridOptions.columnDefs = [{
	            field: '_mailing',
	            visible: true,
	            displayName: 'Auto Notify Settings',
	            cellTemplate: __webpack_require__(223),
	            width: 200 //350
	        }, {
	            field: '_actions',
	            displayName: 'Actions',
	            cellTemplate: __webpack_require__(224),
	            width: 180
	        }, { name: 'TemplateID', displayName: 'TemplateID', visible: false }, { name: 'TemplateName', displayName: 'Template Name', width: "130" }, { name: 'CreateDate', displayName: 'Create Date', sort: { direction: 'desc', priority: 0 }, width: "100" }, { name: 'ListName', displayName: 'List Name', width: "150" }, {
	            field: '_criteria',
	            visible: true,
	            displayName: 'Search Criteria',
	            cellTemplate: __webpack_require__(225),
	            width: 720
	        }

	        /*
	                        ,{ name: 'States'        , width: "100" },
	                        ,{ name: 'Cities'        , width: "100", pinnable: true }
	                        ,{ name: 'ZipCodes'      , width: "60" }
	                        ,{ name: 'AreaCodes'     , width: "60" }
	                        ,{ name: 'SICCodes'      , width: "60" }
	                        ,{ name: 'Counties'      , width: "60" }
	                        ,{ name: 'RBDI'          , width: "60" }
	                        ,{ name: 'Miles'         , width: "60" }
	                        ,{ name: 'ZipForRadius'  , width: "60" }
	                        ,{ name: 'GroupSICCodes' , width: "60" }
	                        ,{ name: 'Employees'     , width: "60" }
	                        ,{ name: 'Sales'         , width: "60" }
	                        ,{ name: 'Keyword'       , width: "60" }
	                        ,{ name: 'WithContacts'  , width: "60" }
	                        ,{ name: 'WithPhones'    , width: "60" }
	         */

	        ];

	        vm.gridOptions.rowIdentity = function (row) {
	            return row.TemplateID;
	        };
	        vm.gridOptions.getRowIdentity = function (row) {
	            return row.TemplateID;
	        };
	        vm.gridOptions.data = [];

	        //   updatesearchtemplate_mailsettings

	        vm.updateThisRow = function ($event, _row) {
	            $event.preventDefault();
	            console.log("updateThisRow  _row", _row);

	            //            ToolsService.ChangeSearchTemplateMailSettings({ load: true, random: false, limit: 20 }, function () { console.log('--OK'); vm.refresh(); }, function () { console.log('--Cancel'); });


	            ToolsService.ChangeSearchTemplateMailSettings({
	                id: _row.TemplateID,
	                name: _row.TemplateName,
	                load: _row.DailyAutoLoad,
	                random: _row.DailyAutoLoadRandomRecords,
	                limit: _row.DailyAutoLoadRecordLimit
	            }, function () {
	                console.log('--OK');$timeout(vm.refresh, 0);
	            }, function () {
	                console.log('--Cancel');
	            });
	        };

	        vm.deleteThisRow = function ($event, _row) {
	            $event.preventDefault();
	            console.log(_row);

	            GetResultsFactory.deletesearchtemplate(_row.TemplateID).then(function (data) {
	                if (data && data.result && data.result == "ERROR" && data.message) {
	                    toaster.pop('error', data.message);
	                }
	                if (data && data.result && data.result == "OK") {
	                    var _indx = vm.gridOptions.data.indexOf(_row);
	                    vm.gridOptions.data.splice(_indx, 1);
	                    toaster.pop('success', 'Template ' + _row.TemplateName + ' removed !');
	                }
	            });
	        };

	        vm.changeAutoNotify = function ($event, _row) {
	            $event.preventDefault();
	            console.log(_row);

	            GetResultsFactory.updatesearchtemplate_mailsettings(_row.TemplateID, !_row.DailyAutoLoad, _row.DailyAutoLoadRandomRecords, 0 /* _row.DailyAutoLoadRecordLimit */).then(function (data) {
	                if (data.result == "OK") {
	                    _row.DailyAutoLoad = !_row.DailyAutoLoad;_row.DailyAutoLoadRecordLimit = 0;
	                }
	                if (data.result != "OK" && data.message) {
	                    toaster.pop('error', data.message);
	                }
	            });
	        };

	        vm.searchThisRow = function ($event, _row) {
	            $event.preventDefault();
	            console.log(_row);

	            GetResultsFactory.getsearchtemplate(_row.TemplateID).then(function (_data) {
	                console.log(_data);

	                var _bustype = { id: _data.selectedlist, name: _data.selectedlist == 1 ? "NEW BUSINESS" : "ESTIMATED BUSINESS" };
	                var _date_start = eval(_data.date_start.replace('/', '').replace('/', ''));
	                var _date_end = eval(_data.date_end.replace('/', '').replace('/', ''));

	                var _choices = ChoicesFactory.choices; //{};
	                _choices.bustype = InfoFactory.bustypes[_data.selectedlist == 1 ? 0 : 1]; //         _bustype;
	                _choices.cities = _data.Cities;
	                _choices.states = _data.States;
	                _choices.counties = _data.Counties;
	                _choices.zipcodes = _data.ZipCodes;
	                _choices.zipForRadius = _data.ZipForRadius;
	                _choices.radiusMiles = _data.Miles;
	                _choices.areacodes = _data.AreaCodes;
	                _choices.siccodes = _data.GroupSICCodes;

	                _choices.companysizes = _data.Employees;
	                _choices.salesvolumes = _data.Sales;

	                _choices.chkContactNames = _data.WithContacts;
	                _choices.chkPhoneNumbers = _data.WithPhones;
	                _choices.chkEmails = _data.WithEmails;

	                /*
	                                _choices.date_start_ = new Date(_data.date_start_ticks);
	                                _choices.date_end_ = new Date(_data.date_end_ticks);
	                
	                                _choices.date_start = moment(_choices.date_start_).format("MM/DD/YYYY");
	                                _choices.date_end = moment(_choices.date_end_).format("MM/DD/YYYY");
	                */

	                _choices.date_start_ = moment(_data.date_start_ticks).toDate();
	                _choices.date_end_ = moment(_data.date_end_ticks).toDate();

	                _choices.rbdiBusiness = _data.rbdiBusiness;
	                _choices.rbdiIndividual = _data.rbdiIndividual;
	                _choices.rbdiUnknown = _data.rbdiUnknown;

	                _choices.keywords = _data.KeyWords;

	                //                ChoicesFactory.choices = angular.extend({}, ChoicesFactory.choices, _choices);

	                $state.go('search');
	            });
	        };

	        vm.gridOptions.onRegisterApi = function (gridApi) {
	            vm.gridApi = gridApi;
	        };

	        function _afterregisterApi(gridApi) {
	            gridApi.pagination.on.paginationChanged($scope, function (newPage, pageSize) {
	                if (vm.getPage) {
	                    vm.getPage(newPage, pageSize).then(function () {});
	                }
	            });
	        }

	        //        vm.grid_height = 100;

	        vm.refresh = function () {
	            vm._refresh = true;
	            GetResultsFactory.getlisttemplates().then(function (_data) {
	                console.log('templates', _data);

	                //              vm.gridOptions.data = _.col13dig2date(_data.templates);

	                var _templates = _.col13dig2date(_data.templates);
	                vm.gridOptions.data = _.map(_templates, function (_item) {
	                    return vm.addCriteriesColumn(_item);
	                });

	                // 2017-02-05                var _len = vm.gridOptions.data.length;
	                // 2017-02-05               vm.gridOptions.minRowsToShow = _len + 3;

	                vm._refresh = false;
	            });
	        };

	        vm.getPage = function (_page, _size) {
	            var promise = GetResultsFactory.getonepagetemplates(_page, _size);
	            promise.then(function (data) {
	                vm.gridOptions.totalItems = data.cntrecords;

	                //                vm.gridOptions.data = _.col13dig2date(data.records);
	                var _records = _.col13dig2date(data.records);
	                vm.gridOptions.data = _.map(_records, function (_item) {
	                    return vm.addCriteriesColumn(_item);
	                });

	                //                vm.gridOptions.minRowsToShow = data.cntrecords + 3;

	                //                var _len = vm.gridOptions.data.length;
	                //                vm.gridOptions.minRowsToShow = _len + 3;


	                //                var _templates = _.col13dig2date(_data.templates);
	                //                vm.gridOptions.data = _.map(_templates, function (_item) { return vm.addCriteriesColumn(_item); });

	            });

	            return promise;
	        };

	        vm.addCriteriesColumn = function (_item) {
	            var _choices = {};

	            /*
	            _choices.states = [];
	            _choices.cities = [];
	            _choices.zipcodes = [];
	            _choices.areacodes = [];
	            _choices.counties = [];
	            _choices.siccodes = [];
	            _choices.keywords = [];
	            _choices.rbdiBusiness = false;
	            _choices.rbdiIndividual = false;
	            _choices.rbdiUnknown = false;
	            _choices.zipForRadius = "";
	            _choices.radiusMiles = "";
	            _choices.companysizes = [];
	            _choices.salesvolumes = [];
	            _choices.chkContactNames = false;
	            _choices.chkPhoneNumbers = false;
	            _choices.chkOmit = true;
	             */

	            //            _choices.states = _.map(_item.States.split(','), function (t) { return { shortname: t }; });
	            _choices.states = _.map(_item.States.match(/[A-Z]{2}/g), function (t) {
	                return { shortname: t };
	            });
	            _choices.cities = _.map(_item.Cities.match(/[^,.]+?,\s*[A-Z]{2}/g), function (_itm) {
	                var _arr = _itm.split(',');return { Name: _arr[0], State: _arr[1].trim() };
	            });
	            _choices.zipcodes = _.filter(_item.ZipCodes.split(','), function (t) {
	                return t.trim().length > 0;
	            });
	            _choices.areacodes = _.filter(_item.AreaCodes.split(','), function (t) {
	                return t.trim().length > 0;
	            });
	            _choices.counties = _.map(_item.Counties.match(/[^,.]+?,\s*[A-Z]{2}/g), function (_itm) {
	                var _arr = _itm.split(',');return { Name: _arr[0], State: _arr[1].trim() };
	            });

	            _choices.siccodes = [];
	            var _pat_sic = /(\d{2})\s+(.+)\s*/;
	            var _xarr = _.filter(_item.GroupSICCodes.split(','), function (t) {
	                return _pat_sic.test(t);
	            });
	            _choices.siccodes = _.map(_xarr, function (_itm) {
	                var _arr = _itm.match(/(\d{2})\s+(.+)\s*/);return { code: _arr[1], name: _arr[2].trim() };
	            });

	            _choices.keywords = _.filter(_item.Keyword.split(','), function (t) {
	                return t.trim().length > 0;
	            });
	            _choices.rbdiBusiness = /B/.test(_item.RBDI);
	            _choices.rbdiIndividual = /R/.test(_item.RBDI);
	            _choices.rbdiUnknown = _choices.rbdiBusiness && _choices.rbdiIndividual;

	            _choices.zipForRadius = _item.ZipForRadius;
	            _choices.radiusMiles = "";
	            _choices.companysizes = [];
	            _choices.salesvolumes = _.filter(_item.Sales.split(','), function (t) {
	                return t.trim().length > 0;
	            });
	            _choices.chkContactNames = _item.WithContacts;
	            _choices.chkPhoneNumbers = _item.WithPhones;
	            _choices.chkEmails = _item.WithEmails;

	            _item.Criteries = _choices;

	            return _item;
	        };

	        //        vm.refresh();


	        activate();

	        function activate() {
	            vm.getPage(1, vm.gridOptions.paginationPageSize).then(function () {
	                _afterregisterApi(vm.gridApi);
	            });
	        }
	    }
	    _templatesController.$inject = ["$scope", "$state", "toaster", "$timeout", "_", "uiGridConstants", "uiGridPaginationService", "InfoFactory", "GetResultsFactory", "ChoicesFactory", "ToolsService"];

	    return _templatesController;
	};

/***/ },
/* 223 */
/***/ function(module, exports) {

	module.exports = "<div class=\"grid-action-cell text-xs-center p-a-1\">\r\n\r\n    <div class=\"row\">\r\n\r\n        <div class=\"col-sm-12\">\r\n\r\n            <span title=\"Auto Notify\">\r\n                Auto Notify\r\n\r\n                <a ng-click=\"grid.appScope.changeAutoNotify($event,row.entity);\" href=\"#\"  class=\"m-a-1\">\r\n                    <i class=\"fa fa-check\" ng-show=\"row.entity.DailyAutoLoad\"></i>\r\n                    <i class=\"fa fa-times\" ng-show=\"!row.entity.DailyAutoLoad\"></i>\r\n                </a>\r\n\r\n\r\n            </span>\r\n\r\n            <span title=\"Load Random Records\" class=\"hidden-xs-up\">\r\n                Random\r\n                <i class=\"fa fa-check\" ng-show=\"row.entity.DailyAutoLoadRandomRecords\"></i>\r\n                <i class=\"fa fa-times\" ng-show=\"!row.entity.DailyAutoLoadRandomRecords\"></i>\r\n            </span>\r\n\r\n            <span title=\"Daily Leads Limit\" class=\"hidden-xs-up\">Daily Leads Limit {{row.entity.DailyAutoLoadRecordLimit}}</span>\r\n\r\n            <button class=\"btn btn-sm hidden-xs-up\"\r\n                    style=\"padding: 0.3em; height:1.5em; line-height: 0;\" ng-click=\"grid.appScope.updateThisRow($event,row.entity);\">\r\n                <span>\r\n                    ...\r\n                </span>\r\n            </button>\r\n\r\n        </div>\r\n\r\n\r\n    </div>\r\n\r\n</div>\r\n";

/***/ },
/* 224 */
/***/ function(module, exports) {

	module.exports = "<div class=\"grid-action-cell text-xs-center p-a-1\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-6 text-xs-center\">\r\n            <a class=\"btn btn-link btn-sm btn-success\" ng-click=\"grid.appScope.searchThisRow($event,row.entity);\" href=\"#\">Search</a>\r\n        </div>\r\n        <div class=\"col-md-6 text-xs-center\">\r\n            <a class=\"btn btn-link btn-sm btn-danger\" ng-click=\"grid.appScope.deleteThisRow($event,row.entity);\" href=\"#\"\r\n               ng-confirm-click='Are you sure  to delete template \"{{row.entity.TemplateName}}\"  ?'>\r\n                Delete\r\n            </a>\r\n        </div>\r\n    </div>\r\n\r\n\r\n\r\n\r\n</div>\r\n";

/***/ },
/* 225 */
/***/ function(module, exports) {

	module.exports = "<div class=\"grid-action-cell text-xs-center p-a-1\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-12 text-xs-left\">\r\n            <current-criteries choices=\"row.entity.Criteries\"></current-criteries>\r\n        </div>\r\n    </div>\r\n</div>\r\n";

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {
	    /* @ngInject */
	    function configRoutes($stateProvider) {
	        $stateProvider.state('profile.queryhistory', {
	            url: '/queryhistory',

	            //                template: require('./profile_queryhistory.tpl.html'),

	            templateProvider: ['$q', function ($q) {
	                var deferred = $q.defer();
	                __webpack_require__.e/* nsure */(1, function () {
	                    var template = __webpack_require__(227);
	                    deferred.resolve(template);
	                });
	                return deferred.promise;
	            }]

	            //                ,controller: require('./QueryHistoryController.js')(app),

	            , controller: ['$q', function ($q) {
	                var deferred = $q.defer();
	                __webpack_require__.e/* nsure */(2, function () {
	                    var _contr = __webpack_require__(228)(app);
	                    deferred.resolve(_contr);
	                });
	                return deferred.promise;
	            }],

	            controllerAs: 'vm',
	            authenticate: true

	        });

	        $stateProvider.state('admin.queries', {
	            url: '/user/queries',

	            //                template: require('./profile_queryhistory.tpl.html'),

	            templateProvider: ['$q', function ($q) {
	                var deferred = $q.defer();
	                __webpack_require__.e/* nsure */(1, function () {
	                    var template = __webpack_require__(227);
	                    deferred.resolve(template);
	                });
	                return deferred.promise;
	            }]

	            //                ,controller: require('./QueryHistoryController.js')(app)

	            , controller: ['$q', function ($q) {
	                var deferred = $q.defer();
	                __webpack_require__.e/* nsure */(2, function () {
	                    var _contr = __webpack_require__(228)(app);
	                    deferred.resolve(_contr);
	                });
	                return deferred.promise;
	            }],

	            controllerAs: 'vm',
	            authenticate: true,
	            params: { username: null, backto: null }

	        });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	};

/***/ },
/* 227 */,
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(234);

	module.exports = function (app) {

	    /* @ngInject */

	    function configRoutes($stateProvider) {

	        var _views = {};
	        _views = {
	            'header@root': { template: '<top-header-search></top-header-search>' },

	            //                'content@root': { template: require('./templates/select-subscription-type.tpl.html'), controller: require('./SelectSubscriptionTypeController.js')(app), controllerAs: 'vm' }


	            'content@root': {

	                //                    template: require('./templates/select-subscription-type.tpl.html')

	                templateProvider: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(1, function () {
	                        var template = __webpack_require__(236);
	                        deferred.resolve(template);
	                    });
	                    return deferred.promise;
	                }]

	                //                    , controller: require('./SelectSubscriptionTypeController.js')(app)


	                , controller: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(2, function () {
	                        var _contr = __webpack_require__(255)(app);
	                        deferred.resolve(_contr);
	                    });
	                    return deferred.promise;
	                }],

	                controllerAs: 'vm'
	            }

	        };
	        $stateProvider.state('selectsubscriptiontype', { parent: 'root', url: 'selectsubscriptiontype', views: _views });

	        _views = {
	            'header@root': { template: '<top-header-search></top-header-search>' },

	            //                'content@root': { template: require('./templates/create-subscription.tpl.html'), controller: require('./CreateSubscriptionController.js')(app), controllerAs: 'vm' }


	            'content@root': {

	                //                    template: require('./templates/create-subscription.tpl.html')

	                templateProvider: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(1, function () {
	                        var template = __webpack_require__(256);
	                        deferred.resolve(template);
	                    });
	                    return deferred.promise;
	                }]

	                //                    , controller: require('./CreateSubscriptionController.js')(app)

	                , controller: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(2, function () {
	                        var _contr = __webpack_require__(257)(app);
	                        deferred.resolve(_contr);
	                    });
	                    return deferred.promise;
	                }],

	                controllerAs: 'vm'
	            }
	        };
	        $stateProvider.state('createsubscription', { parent: 'root', url: 'createsubscription', views: _views });

	        _views = {
	            'header@root': { template: '<top-header-search></top-header-search>' },

	            //                'content@root': { template: require('./templates/create-paypal-subscription.tpl.html'), controller: require('./CreatePaypalSubscriptionController.js')(app), controllerAs: 'vm' }

	            'content@root': {

	                //                    template: require('./templates/create-paypal-subscription.tpl.html')

	                templateProvider: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(1, function () {
	                        var template = __webpack_require__(260);
	                        deferred.resolve(template);
	                    });
	                    return deferred.promise;
	                }]

	                //                    , controller: require('./CreatePaypalSubscriptionController.js')(app)

	                , controller: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(2, function () {
	                        var _contr = __webpack_require__(261)(app);
	                        deferred.resolve(_contr);
	                    });
	                    return deferred.promise;
	                }],

	                controllerAs: 'vm'
	            }

	        };
	        $stateProvider.state('createpaypalsubscription', { parent: 'root', url: 'createpaypalsubscription', views: _views });

	        _views = {
	            'header@root': { template: '<top-header-search></top-header-search>' },

	            //                'content@root': { template: require('./templates/success-create-paypal-subscription.tpl.html'), controller: require('./SuccessCreatePaypalSubscriptionController.js')(app), controllerAs: 'vm' }

	            'content@root': {

	                //                    template: require('./templates/success-create-paypal-subscription.tpl.html')

	                templateProvider: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(1, function () {
	                        var template = __webpack_require__(262);
	                        deferred.resolve(template);
	                    });
	                    return deferred.promise;
	                }]

	                //                    , controller: require('./SuccessCreatePaypalSubscriptionController.js')(app)

	                , controller: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(2, function () {
	                        var _contr = __webpack_require__(263)(app);
	                        deferred.resolve(_contr);
	                    });
	                    return deferred.promise;
	                }],

	                controllerAs: 'vm'
	            }

	        };
	        $stateProvider.state('successcreatepaypalsubscription', { parent: 'root', url: 'successcreatepaypalsubscription', views: _views, authenticate: true, params: { token: "", PayerID: "" } });

	        _views = {
	            'header@root': { template: '<top-header-search></top-header-search>' },

	            //                'content@root': { template: require('./templates/create-bitpay-subscription.tpl.html'), controller: require('./CreateBitPaySubscriptionController.js')(app), controllerAs: 'vm' }

	            'content@root': {

	                //                    template: require('./templates/create-bitpay-subscription.tpl.html')

	                templateProvider: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(1, function () {
	                        var template = __webpack_require__(264);
	                        deferred.resolve(template);
	                    });
	                    return deferred.promise;
	                }]

	                //                    , controller: require('./CreateBitPaySubscriptionController.js')(app)

	                , controller: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(2, function () {
	                        var _contr = __webpack_require__(266)(app);
	                        deferred.resolve(_contr);
	                    });
	                    return deferred.promise;
	                }],

	                controllerAs: 'vm'
	            }

	        };
	        $stateProvider.state('createbitpaysubscription', { parent: 'root', url: 'create-bitpay-subscription', views: _views, authenticate: true });

	        _views = {
	            'header@root': { template: '<top-header-search></top-header-search>' },

	            //                'content@root': { template: require('./templates/create-bitcoin-monthly-fee.tpl.html'), controller: require('./CreateBitcoinMonthlyFeeController.js')(app), controllerAs: 'vm' }

	            'content@root': {

	                //                    template: require('./templates/create-bitcoin-monthly-fee.tpl.html')

	                templateProvider: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(1, function () {
	                        var template = __webpack_require__(267);
	                        deferred.resolve(template);
	                    });
	                    return deferred.promise;
	                }]

	                //                    , controller: require('./CreateBitcoinMonthlyFeeController.js')(app)

	                , controller: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(2, function () {
	                        var _contr = __webpack_require__(268)(app);
	                        deferred.resolve(_contr);
	                    });
	                    return deferred.promise;
	                }],

	                controllerAs: 'vm'
	            }
	        };
	        $stateProvider.state('createbitcoinmonthlyfee', { parent: 'root', url: 'create-bitcoin-monthly-fee', views: _views, authenticate: true });

	        _views = {
	            'header@root': { template: '<top-header-search></top-header-search>' },

	            //                'content@root': { template: require('./templates/commit-bitcoin-user-payment.tpl.html'), controller: require('./CommitBitcoinUserPaymentController.js')(app), controllerAs: 'vm' }

	            'content@root': {

	                //                    template: require('./templates/commit-bitcoin-user-payment.tpl.html')

	                templateProvider: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(1, function () {
	                        var template = __webpack_require__(269);
	                        deferred.resolve(template);
	                    });
	                    return deferred.promise;
	                }]

	                //                    , controller: require('./CommitBitcoinUserPaymentController.js')(app)

	                , controller: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(2, function () {
	                        var _contr = __webpack_require__(270)(app);
	                        deferred.resolve(_contr);
	                    });
	                    return deferred.promise;
	                }],

	                controllerAs: 'vm'
	            }

	        };

	        $stateProvider.state('commitbitcoinuserpayment', { parent: 'root', url: 'commit-bitcoin-user-payment', views: _views, authenticate: true });

	        _views = {
	            'header@root': { template: '<top-header-search></top-header-search>' },

	            //                'content@root': { template: require('./templates/get-fullinfo-subscription.tpl.html'), controller: require('./GetSubscriptionFullInfoController.js')(app), controllerAs: 'vm' }

	            'content@root': {

	                //                    template: require('./templates/get-fullinfo-subscription.tpl.html')

	                templateProvider: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(1, function () {
	                        var template = __webpack_require__(271);
	                        deferred.resolve(template);
	                    });
	                    return deferred.promise;
	                }]

	                //                    , controller: require('./GetSubscriptionFullInfoController.js')(app)

	                , controller: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(2, function () {
	                        var _contr = __webpack_require__(272)(app);
	                        deferred.resolve(_contr);
	                    });
	                    return deferred.promise;
	                }],

	                controllerAs: 'vm'
	            }
	        };
	        $stateProvider.state('getsubscriptionfullinfo', { parent: 'root', url: 'getsubscriptionfullinfo', views: _views, authenticate: true });
	    }
	    configRoutes.$inject = ["$stateProvider"];

	    app.config(configRoutes);
	};

	/*
	*        $stateProvider.state('selectsubscriptiontype', { url: 'selectsubscriptiontype', templateUrl: '../SPA/app/templates/selectsubscriptiontype.html', controller: 'SelectSubscriptionTypeController', controllerAs: 'vm' });
	*        $stateProvider.state('createsubscription', { url: 'createsubscription', templateUrl: '../SPA/app/templates/createsubscription.html', controller: 'CreateSubscriptionController', controllerAs: 'vm' });
	*        $stateProvider.state('createpaypalsubscription', { url: 'createpaypalsubscription', templateUrl: '../SPA/app/templates/createpaypalsubscription.html', controller: 'CreatePaypalSubscriptionController', controllerAs: 'vm' });
	*        $stateProvider.state('successcreatepaypalsubscription', { url: 'successcreatepaypalsubscription/:token/:PayerID', templateUrl: '../SPA/app/templates/successcreatepaypalsubscription.html', controller: 'SuccessCreatePaypalSubscriptionController', controllerAs: 'vm' });

	 */

/***/ },
/* 234 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */,
/* 240 */,
/* 241 */,
/* 242 */,
/* 243 */,
/* 244 */,
/* 245 */,
/* 246 */,
/* 247 */,
/* 248 */,
/* 249 */,
/* 250 */,
/* 251 */,
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */,
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */,
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    __webpack_require__(274);
	    __webpack_require__(276)(app);

	    /* @ngInject */
	    function _configRoutes($stateProvider) {
	        //        var _cont = require('./templates/content.tpl.html');
	        var _views = {};

	        //        _views = { 'content@root': { template: require('./templates/content.tpl.html'), controller: require('./NewsLetterController.js')(app), controllerAs: 'vm' } };


	        _views = {
	            'content@root': {

	                //                template: require('./templates/content.tpl.html')

	                templateProvider: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(1, function () {
	                        var template = __webpack_require__(286);
	                        deferred.resolve(template);
	                    });
	                    return deferred.promise;
	                }]

	                //                , controller: require('./NewsLetterController.js')(app)


	                , controller: ['$q', function ($q) {
	                    var deferred = $q.defer();
	                    __webpack_require__.e/* nsure */(2, function () {
	                        var _contr = __webpack_require__(287)(app);
	                        deferred.resolve(_contr);
	                    });
	                    return deferred.promise;
	                }],

	                controllerAs: 'vm'

	            }
	        };

	        //        _views = { 'content@root': { template: "sssssss" } };
	        $stateProvider.state('newsletter', { parent: 'root', url: 'newsletter', views: _views });
	    }
	    _configRoutes.$inject = ["$stateProvider"];

	    app.config(_configRoutes);
	};

/***/ },
/* 274 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 275 */,
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {
	    /* @ngInject */

	    app.directive('newLetterPage001', _NewLetterPage001);
	    app.directive('newLetterPage002', _NewLetterPage002);
	    app.directive('newLetterPage003', _NewLetterPage003);
	    app.directive('newLetterPage004', _NewLetterPage004);

	    function _NewLetterPage001() {
	        var _res = {
	            restrict: 'E',
	            replace: true,
	            //             scope: {},
	            template: __webpack_require__(277)
	        };
	        return _res;
	    }

	    function _NewLetterPage002() {
	        var _res = {
	            restrict: 'E',
	            replace: true,
	            //             scope: {},
	            template: __webpack_require__(279)
	        };
	        return _res;
	    }

	    function _NewLetterPage003() {
	        var _res = {
	            restrict: 'E',
	            replace: true,
	            //             scope: {},
	            template: __webpack_require__(281)
	        };
	        return _res;
	    }

	    function _NewLetterPage004() {
	        var _res = {
	            restrict: 'E',
	            replace: true,
	            //             scope: {},
	            template: __webpack_require__(284)
	        };
	        return _res;
	    }
	};

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<div class=\"page001\">\r\n\r\n    <div class=\"row page-header\">\r\n        <div class=\"col-md-8 text-sm-center\" style=\"background-color:#5080AA;\">\r\n            <h2>FreshFind Data</h2>\r\n        </div>\r\n        <div class=\"col-md-4\" style=\"background-color:#93B1CD;\">\r\n            <h4>OCTOBER 2015</h4>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"row\" style=\"background-color:#C5CCC6;\">\r\n        <div class=\"col-md-8\" style=\"padding:0;\">\r\n            <img src=\"" + __webpack_require__(278) + "\" style=\"width: 100%;\" />\r\n        </div>\r\n        <div class=\"col-md-4\">\r\n            <p>\r\n                A monthly resource which keeps you current on\r\n                Sales/Marketing and new business acquisition\r\n                news and development.\r\n            </p>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n        <div class=\"col-sm-12 text-sm-center m-y-2\">\r\n            <h4>\r\n                Finding quality lists and capitalizing on the\r\n                undervalued new business market\r\n            </h4>\r\n        </div>\r\n    </div>\r\n\r\n\r\n\r\n    <div class=\"row\">\r\n\r\n        <div class=\"col-md-4\">\r\n            <p>\r\n                OVERVIEW There are two ways to\r\n                increase your revenue and profit – sell more to current\r\n                customers and find new ones. Today most companies are\r\n                focused on retaining and growing the current customer\r\n                base in this current downturn, as finding new customers\r\n                is much harder and more expensive to do than ever before.\r\n                In general I agree, as any decay of current business\r\n                is not likely to be made up by finding new customers.\r\n                We all know the statistics on the value and ease of\r\n                keeping current customers. This has never been truer\r\n                than in 2010, and will be so, well into the future.\r\n            </p>\r\n            <p>\r\n                On the other hand, there is one large market segment\r\n                where finding new customers is not only easier, but\r\n                also potentially creates long- term value – it’s the\r\n                new business market segment. The problem is that our\r\n                views of these new business start-ups is somewhat jaded –\r\n                out of work people (often calling themselves consultants),\r\n                too small, don’t have any money, and will go out\r\n                of business soon. So why bother?\r\n            </p>\r\n\r\n\r\n        </div>\r\n\r\n        <div class=\"col-md-4\">\r\n            <p>\r\n                From a B2B perspective there are always a few firms that\r\n                grow large and prosper – how would you like to have been\r\n                in early with Microsoft, Google or Cisco.\r\n            </p>\r\n            <p>\r\n                My guess is that the companies who paid attention and sold\r\n                to these companies when they were small and\r\n                unknown, created a relationship that lasted and generated\r\n                significant revenue and profit – what we call lifetime value.\r\n            </p>\r\n            <p>\r\n                Even from a B2C perspective, starting a new business is a\r\n                significant event, and if we believe in life change marketing\r\n                (events that “trigger” a life or behavior change) then\r\n                opportunities exist to sell this “new consumer” products\r\n                and services that were not needed before based\r\n                on the individual starting a consuming activity.\r\n            </p>\r\n            <p>\r\n                Buying into the opportunity that the new business market offers\r\n                is only the first\r\n                step – that’s the easy part. The second and most difficult is\r\n                finding a quality list of these new businesses at start-up and\r\n                during the first year.\r\n            </p>\r\n        </div>\r\n\r\n        <div class=\"col-md-4\">\r\n            <p>\r\n                The second part of this white paper will be devoted to\r\n                detailing how to insure you have the best list and data\r\n                available.\r\n            </p>\r\n\r\n            <p>\r\n                In fact, this D&B data may under report small business,\r\n                as the Small Business Administration reports that are nearly\r\n                30 million small businesses in the US – an open debate.\r\n                Regardless of the debate, there is no question that it’s a\r\n                large and growing market.\r\n\r\n            </p>\r\n\r\n            <p>\r\n                Number of New Business Started Each Year:\r\n\r\n            </p>\r\n\r\n            <p>\r\n                Counts from a leading and long- time compiler of new\r\n                business incorporations shows that on average there are between\r\n                150,000 – 200,000 new businesses started each month.\r\n                That’s right – on average 2 million new businesses are\r\n                begun each year. Obviously this number is not constant,\r\n                as many factors impact how many are started each month.\r\n            </p>\r\n\r\n            <p>\r\n                Yet, as we have endured economically difficult times,\r\n                a larger portion of these new businesses are being started\r\n                by experienced people who have decided to leave their\r\n                positions or have been a victim of layoffs,\r\n                closings and/or mergers. Therefore, a significant\r\n                number are starting businesses with great experience,\r\n                contacts and financial resources.\r\n            </p>\r\n\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>";

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "assets/js/routes/NewsLetter/images/pic_001.jpg";

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<div class=\"row page002\">\r\n\r\n    <div class=\"col-md-4\" style=\"background-color:#DBE4ED;\">\r\n        <p>\r\n            In November 19, 2010 WSJ article it was noted that\r\n            fewer new business are starting up in these tough times.\r\n            While this may be true compared to the peak in 2007,\r\n            it appears that the number of start-ups is\r\n            recovering as of 2010.\r\n        </p>\r\n\r\n        <p>Here are the statistics</p>\r\n\r\n\r\n        <br />\r\n        <br />\r\n\r\n        <p>2005 2.8 million</p>\r\n        <p>2006 2.8 million</p>\r\n        <p>2007 3.0 million</p>\r\n        <p>2008 2.5 million</p>\r\n        <p>2009 1.9 million</p>\r\n        <p>2010 2.5 million</p>\r\n\r\n        <p>\r\n            No matter how one views the trend, there are many new\r\n            business that represent new potential\r\n            customers for a wide array\r\n            of marketers.\r\n        </p>\r\n\r\n\r\n\r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n    <div class=\"col-md-8\">\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n                <img src=\"" + __webpack_require__(280) + "\"  style=\"width: 100%;\"/>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-12\">\r\n                <h4 class=\"m-y-1\">Who Compiles New Business Names?</h4>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-6 p-x-1\">\r\n                <p>\r\n                    As is obvious, finding new businesses is quite a\r\n                    different proposition, and only a few firms are doing\r\n                    this and doing it well. This may be somewhat surprising\r\n                    if you have researched new business files, as it\r\n                    appears that many new business files are on the\r\n                    market all with different names and descriptions.\r\n                    In fact, one industry expert told me that when he searched\r\n                </p>\r\n                <p>\r\n                    NextMark, over 1,200 listings for new business were\r\n                    shown.\r\n                </p>\r\n                <p>\r\n                    While there are only a few actual compilers, some of\r\n                    them license their names to brokers, and therefore\r\n                    it appears that there are more choices than actual.\r\n                    While I have worked with brokers and have good things\r\n                    to say about their importance in the industry,\r\n                    my opinion is that it is always better\r\n                    to get as close to the actual source of the names\r\n                    in B2B. Therefore, find either the actual list\r\n                    compiler or a broker who has a direct relationship\r\n                    with the primary compiler. In most cases, when a\r\n                    list is licensed the broker will attach a new\r\n                    name to the list thereby confusing the actual source\r\n                    of the list.\r\n                </p>\r\n                <p>\r\n                    Targeting and Segmentation:\r\n                </p>\r\n                <p>\r\n                    After a good list source is found, then depending on\r\n                    the data another opportunity exists to further\r\n                    segment the list. Good segmentation leads to both\r\n                    relevant communications and reduced cost as well. It has been\r\n                </p>\r\n\r\n            </div>\r\n            <div class=\"col-sm-6 p-x-1\">\r\n\r\n                <p>\r\n                    proven that the higher the degree of relevancy of\r\n                    the message and offer, the more interesting and\r\n                    engaging to the individual and as a result higher\r\n                    response rates.\r\n                </p>\r\n                <p>\r\n                    For the moment, let’s assume that the broad target market\r\n                    is new business startups, and therefore the next step\r\n                    is to segment this audience into sub- segments.\r\n                    With new businesses, several logical\r\n                    opportunities exist and they are:\r\n                </p>\r\n                <p>\r\n                    Geographic based on zip code or area code.\r\n                </p>\r\n                <p>\r\n                    Home based vs. leased or owned office/plant.\r\n                    This can be determined by referencing the\r\n                    residential delivery indicator from the post office.\r\n                    This indicator identifies an address as\r\n                    either a residential or business address.\r\n                </p>\r\n                <p>\r\n                    Type of business formation – C or S Corporation, LLC,\r\n                    partnership, etc.\r\n                </p>\r\n                <p>\r\n                    Gender of owner based on name matching to master gender\r\n                    file.\r\n                </p>\r\n                <p>\r\n                    Length of time in business – new startups become\r\n                    small businesses over time, and represent another\r\n                    market segment as their needs change.\r\n                </p>\r\n\r\n\r\n\r\n\r\n            </div>\r\n        </div>\r\n\r\n\r\n    </div>\r\n</div>";

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "assets/js/routes/NewsLetter/images/pic_002.jpg";

/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<div class=\"row page003\">\r\n    <div class=\"col-md-8\">\r\n\r\n        <div class=\"row m-b-1\">\r\n            <div class=\"col-sm-12 text-sm-center\">\r\n                <h4>Some Facts and Insights about New Businesses:</h4>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-12 m-x-2\">\r\n                There is much reported about the new and small business\r\n                segment, as over time statistics indicate that not only\r\n                are most new jobs created by these companies (an often\r\n                quoted statistic is 70%), but great economic output is\r\n                produced as well. On the other hand, many misperceptions\r\n                and unfounded opinions exist about these startups as well.\r\n                So what’s the truth? Here are a variety of facts and\r\n                insights drawn from an array of sources including the\r\n                Small Business Administration and their sponsored\r\n                working paper, Startup Business Characteristics and\r\n                Dynamics: A Data Analysis of the Kauffman Firm Survey.\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-12 m-x-2\">\r\n                <img src=\"" + __webpack_require__(282) + "\" class=\"img-fluid\" style=\"width: 100%;\" />\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-12 m-x-2\">\r\n                TO SUM UP:\r\n                If you are looking for new customers, the new business\r\n                market might represent an opportunity that before now\r\n                has been untapped and undervalued. This market is\r\n                probably larger and more substantial than initially\r\n                perceived. Certainly, a well-designed direct marketing\r\n                campaign should be developed and tested to prove\r\n                the potential for your product or service. But,\r\n                if it works, there will be a constant flow of\r\n                new opportunities as the rate of new business\r\n                startups is high and growing. Take advantage\r\n                of it now, before your competitors do!\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n    </div>\r\n\r\n\r\n    <div class=\"col-md-4\">\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-12 m-x-1\" style=\"padding:0;\">\r\n                <img src=\"" + __webpack_require__(283) + "\" class=\"img-fluid\" style=\"width: 100%;\" />\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row m-y-1\">\r\n            <div class=\"col-sm-12 m-x-1 text-sm-center\">\r\n                <h4>FACTS</h4>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-sm-12 m-x-1\" style=\"background-color:#B8CCDD;\">\r\n                Small business employ a little more than\r\n                half of all private sector workers, pay\r\n\r\n                <b>44% of total U.S. private payroll</b>\r\n\r\n                and have generated 64% of net new jobs over the\r\n                past 15 years, according to the SBA’s Office of Advocacy.\r\n                ( <b>Over 93% of all startups were new, independent businesses</b>;\r\n                about 7% were purchased or are franchises.\r\n                Obviously franchised and purchased firms have a\r\n                higher level of assets, profits, revenues and wages\r\n                than newly created firms. (About half of the startups\r\n                are home based, another\r\n                <b>40% operate their business at rented or leased facilities</b>\r\n                , and the remaining have\r\n                purchased their own offices/plants. (The overall\r\n                <b>survival rate after one year was 94%</b>\r\n                (much higher than popular opinions have led us to believe), but that varies\r\n                based on the type of businesses. From a\r\n                high of 97% for rental and leasing firms to a low of 89% for\r\n                accommodation and food service businesses. (Business failures\r\n                do occur over time, but also long standing businesses fail as is evidenced by the\r\n                empty store fronts in all of our local communities. (The statistics\r\n                for new business failure are hard to accurately determine, but the widely accepted rate is\r\n                50%+ will fail in 5 years. (In 2006 for home-based business the\r\n                <b>four largest types of business</b>\r\n                (based on the two-digit NAICS code)\r\n                were: (o31% professional services o13% manufacturing o\r\n                10% construction o10% administrative services)  (<b>Non-home based business</b>\r\n                showed a somewhat different split by type o 23% manufacturing (o 17%\r\n                professional services o 14% retail trade\r\n\r\n                o 6% professional services Non-home based startup businesses created\r\n                <b>an average of 5.5 jobs per firm</b> that\r\n                averaged 4.1 paid employees in addition to\r\n                1.4 entrepreneurial positions. Clearly, larger in size than new home-based businesses.\r\n\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n</div>";

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "assets/js/routes/NewsLetter/images/pic_004.jpg";

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "assets/js/routes/NewsLetter/images/pic_003.jpg";

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<div class=\"page004\">\r\n    <div class=\"row page-header\">\r\n        <div class=\"col-sm-8\"></div>\r\n        <div class=\"col-sm-4 text-sm-right\" style=\"background-color:#9BA9B1;\">\r\n            <h4>OCTOBER 2015</h4>\r\n        </div>\r\n    </div>\r\n\r\n\r\n    <div class=\"row\" style=\"background-color:#DBE4ED;\">\r\n        <div class=\"col-sm-8\">\r\n            <h4 class=\"m-y-1\">November issue preview</h4>\r\n\r\n\r\n            Win the battle for consumer wallet.\r\n\r\n            Consumer refuse to be part of the same crop.\r\n\r\n\r\n            Considering bitcoin\r\n\r\n        </div>\r\n        <div class=\"col-sm-4\" style=\"padding: 0;\">\r\n            <img src=\"" + __webpack_require__(285) + "\" alt=\"\" style=\"width: 100%;\" />\r\n        </div>\r\n    </div>\r\n\r\n\r\n\r\n</div>";

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "assets/js/routes/NewsLetter/images/pic_005.jpg";

/***/ },
/* 286 */,
/* 287 */,
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {
	    __webpack_require__(289)(app);
	    __webpack_require__(290)(app);

	    //    require('./formly/formly2.js')(app);
	    //    require('./ngmeta/')(app);
	    //    require('./ui-grid/ui-grid.js')(app);
	};

/***/ },
/* 289 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (app) {

	    /* @ngInject */

	    app.config(["toasterConfig", function (toasterConfig) {
	        angular.extend(toasterConfig, {
	            'close-button': true,
	            'position-class': 'toast-top-center',
	            'prevent-duplicates': true
	        });
	    }]);
	};

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {

	    app.constant('formlyExampleApiCheck', apiCheck());
	    app.config(configformly);
	    app.run(runformly);

	    function runformly(formlyValidationMessages) {

	        formlyValidationMessages.addTemplateOptionValueMessage('maxlength', 'maxlength', '', 'is the maximum length', 'Too long');
	        formlyValidationMessages.addTemplateOptionValueMessage('minlength', 'minlength', '', 'is the minimum length', 'Too short');
	        formlyValidationMessages.messages.required = 'to.label + " is required"';
	        formlyValidationMessages.messages.email = '$viewValue + " is not a valid email address"';
	    }
	    runformly.$inject = ["formlyValidationMessages"];

	    /* @ngInject */
	    function configformly(formlyConfigProvider, formlyExampleApiCheck) {

	        //???        formlyConfig.extras.removeChromeAutoComplete === true

	        formlyConfigProvider.setWrapper({
	            name: 'horizontalBootstrapLabel',
	            template: __webpack_require__(291)
	        });

	        formlyConfigProvider.setWrapper({
	            name: 'horizontalBs4Label',
	            template: __webpack_require__(292)
	        });

	        formlyConfigProvider.setWrapper({
	            name: 'horizontalBs4CheckBox',
	            template: __webpack_require__(293)
	        });

	        formlyConfigProvider.setWrapper({
	            name: 'ngMessages',
	            template: __webpack_require__(294)
	        });

	        formlyConfigProvider.setWrapper({
	            name: 'horizontalBootstrapCaptcha',
	            template: __webpack_require__(295)
	        });

	        formlyConfigProvider.setType({
	            name: 'horizontalInput',
	            extends: 'input',
	            wrapper: ['horizontalBootstrapLabel', 'bootstrapHasError']
	        });

	        formlyConfigProvider.setWrapper({
	            name: 'bs4hasError',
	            template: __webpack_require__(296)
	        });

	        formlyConfigProvider.setType({
	            name: 'bs4Input',
	            extends: 'input'
	            //            , wrapper: ['bs4hasError', 'ngMessages']
	            , wrapper: ['ngMessages', 'bs4hasError']
	            //            , wrapper: ['bs4hasError']
	        });

	        formlyConfigProvider.setType({
	            name: 'bs4TextArea',
	            extends: 'textarea',
	            wrapper: ['ngMessages', 'bs4hasError']
	        });

	        formlyConfigProvider.setType({
	            name: 'bs4Select',
	            extends: 'select',
	            wrapper: ['ngMessages', 'bs4hasError']
	        });

	        formlyConfigProvider.setType({
	            name: 'horizontalSelect',
	            extends: 'select',
	            wrapper: ['horizontalBootstrapLabel', 'bootstrapHasError']
	        });

	        formlyConfigProvider.setType({
	            name: 'horizontalTextArea',
	            extends: 'textarea',
	            wrapper: ['horizontalBootstrapLabel', 'bootstrapHasError']
	        });

	        formlyConfigProvider.setType({
	            name: 'horizontalCaptcha',
	            extends: 'input',
	            wrapper: ['horizontalBootstrapCaptcha', 'bootstrapHasError'],
	            controller: __webpack_require__(297)(app)

	        });

	        formlyConfigProvider.setType({
	            name: 'matchField',
	            apiCheck: function apiCheck() {
	                return {
	                    data: {
	                        fieldToMatch: formlyExampleApiCheck.string
	                    }
	                };
	            },
	            apiCheckOptions: {
	                prefix: 'matchField type'
	            },
	            defaultOptions: function matchFieldDefaultOptions(options) {
	                return {
	                    extras: {
	                        validateOnModelChange: true
	                    },
	                    expressionProperties: {
	                        'templateOptions.disabled': function templateOptionsDisabled(viewValue, modelValue, scope) {
	                            var matchField = find(scope.fields, 'key', options.data.fieldToMatch);
	                            if (!matchField) {
	                                throw new Error('Could not find a field for the key ' + options.data.fieldToMatch);
	                            }
	                            var model = options.data.modelToMatch || scope.model;
	                            var originalValue = model[options.data.fieldToMatch];
	                            var invalidOriginal = matchField.formControl && matchField.formControl.$invalid;
	                            return !originalValue || invalidOriginal;
	                        }
	                    },
	                    validators: {
	                        fieldMatch: {
	                            expression: function expression(viewValue, modelValue, fieldScope) {
	                                var value = modelValue || viewValue;
	                                var model = options.data.modelToMatch || fieldScope.model;
	                                return value === model[options.data.fieldToMatch];
	                            },
	                            message: options.data.matchFieldMessage || '"Must match"'
	                        }
	                    }
	                };

	                function find(array, prop, value) {
	                    var foundItem;
	                    array.some(function (item) {
	                        if (item[prop] === value) {
	                            foundItem = item;
	                        }
	                        return !!foundItem;
	                    });
	                    return foundItem;
	                }
	            }
	        });

	        formlyConfigProvider.setType({
	            name: 'bs4-horizontalCheckBox',
	            extends: 'input',
	            wrapper: ['horizontalBs4CheckBox']
	        });

	        formlyConfigProvider.setType({
	            name: 'bs4-horizontalInput',
	            extends: 'input',
	            wrapper: ['ngMessages', 'horizontalBs4Label', 'bs4hasError']
	        });

	        formlyConfigProvider.setType({
	            name: 'bs4-horizontalSelect',
	            extends: 'select',
	            wrapper: ['ngMessages', 'horizontalBs4Label', 'bs4hasError']
	        });

	        formlyConfigProvider.setType({
	            name: 'MonthPicker'
	            //            ,extends: 'input'
	            , template: __webpack_require__(300)
	            //            , template: require('./dtp.tpl.html')
	            //            , template: '<datetimepicker data-datetimepicker-config="_opts" data-ng-model="model[options.key]"  class="form-control"> </datetimepicker>'
	            //            , template: '<input ui-date="_opts" ng-model="model[options.key]"  class="form-control" />'
	            , controller: function controller($scope) {
	                $scope.changeDate = function () {
	                    //                    alert('ss');


	                };
	            },
	            link: function link(scope, el, attrs) {

	                //         $(el).change(function () { console.log('>>> ** ', $(this).val());   });
	                //         $(el).datepicker(_opts);
	            }
	        });

	        formlyConfigProvider.setType({
	            name: 'bs4-horizontalMonthPicker',
	            extends: 'MonthPicker',
	            wrapper: ['ngMessages', 'horizontalBs4Label', 'bs4hasError']

	        });

	        formlyConfigProvider.setType({
	            name: 'bs4-horizontalTextArea',
	            extends: 'textarea',
	            wrapper: ['ngMessages', 'horizontalBs4Label', 'bs4hasError']
	        });

	        formlyConfigProvider.setType({
	            name: 'bs4-horizontalCaptcha',
	            extends: 'input',
	            wrapper: ['horizontalBootstrapCaptcha', 'bs4hasError'],
	            controller: __webpack_require__(297)(app)

	        });
	    }
	    configformly.$inject = ["formlyConfigProvider", "formlyExampleApiCheck"];
	};

/***/ },
/* 291 */
/***/ function(module, exports) {

	module.exports = "<label for=\"{{::id}}\" class=\"col-sm-3 control-label\">\r\n    {{to.label}}{{to.required ? '*' : ''}}\r\n</label>\r\n<div class=\"col-sm-7\">\r\n    <formly-transclude></formly-transclude>\r\n</div>\r\n";

/***/ },
/* 292 */
/***/ function(module, exports) {

	module.exports = "<div class=\"col-md-3  hidden-sm-down text-sm-right\">\r\n    <label for=\"{{::id}}\" class=\"control-label\">\r\n        {{to.label}}{{to.required ? '*' : ''}}\r\n    </label>\r\n    &nbsp;\r\n</div>\r\n\r\n\r\n\r\n\r\n<div class=\"col-md-7\">\r\n    <formly-transclude></formly-transclude>\r\n</div>\r\n\r\n<div class=\"col-md-10 hidden-sm-down m-b-1\"></div>\r\n";

/***/ },
/* 293 */
/***/ function(module, exports) {

	module.exports = "<div class=\"col-md-3  hidden-sm-down text-sm-right\">\r\n    <formly-transclude></formly-transclude>\r\n    &nbsp;\r\n</div>\r\n\r\n\r\n\r\n<div class=\"col-md-7\">\r\n    <label for=\"{{::id}}\" class=\"control-label\">\r\n        {{to.label}}{{to.required ? '*' : ''}}\r\n    </label>\r\n</div>\r\n\r\n<div class=\"col-md-10 hidden-sm-down m-b-1\"></div>\r\n";

/***/ },
/* 294 */
/***/ function(module, exports) {

	module.exports = "<formly-transclude></formly-transclude>\r\n<div class=\"my-messages\" ng-messages=\"fc.$error\" ng-if=\"fc.$touched || (!fc.$pristine)\">\r\n    <div class=\"some-message\" ng-message=\"{{::name}}\" ng-repeat=\"(name, message) in ::options.validation.messages\">\r\n        {{message(fc.$viewValue, fc.$modelValue, this)}}\r\n    </div>\r\n</div>";

/***/ },
/* 295 */
/***/ function(module, exports) {

	module.exports = "<label for=\"{{::id}}\" class=\"col-sm-3 control-label\">\r\n\r\n    {{to.label}}{{to.required ? '*' : ''}}\r\n\r\n</label>\r\n<div class=\"col-sm-7\">\r\n    <div class=\"row\">\r\n        <div class=\" col-xs-6 col-sm-5  captcha-cont\">\r\n            <img class=\"img-responsive \" src=\"{{capa}}\" ng-click=\"refr()\" />\r\n            <a class=\"btn btn-info btm-xs fa fa-refresh captcha-refr\" ng-click=\"refr()\">\r\n            </a>\r\n\r\n        </div>\r\n        <!--\r\n        <div class=\"col-sm-1  text-center\">\r\n            <a class=\"btn btn-info btm-sm\" ng-click=\"refr()\">\r\n                <span class=\"glyphicon glyphicon-refresh\"></span>\r\n            </a>\r\n        </div>\r\n        <div class=\"col-xs-12 hidden-sm hidden-md hidden-lg \">&nbsp;</div>\r\n            -->\r\n        <div class=\"col-xs-6 col-sm-7   text-center\" ng-model-options=\"{ updateOn: 'default blur', debounce: { default: 1000, blur: 0} }\">\r\n            <formly-transclude></formly-transclude>\r\n        </div>\r\n    </div>\r\n</div>";

/***/ },
/* 296 */
/***/ function(module, exports) {

	module.exports = "<div class=\"form-group\" ng-class=\"{'has-danger': showError}\">\r\n    <formly-transclude></formly-transclude>\r\n</div>\r\n";

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = function (app) {
	    __webpack_require__(298);

	    //    app.controller('CaptchaController', CaptchaController);

	    /* @ngInject */

	    function CaptchaController($scope, $http, $q) {
	        /* jshint validthis:true */
	        var vm = this;
	        $scope.capa = 'http://lorempixel.com/240/80/';
	        $scope.guid = '';
	        $scope.inp_value;

	        $scope.refr = Refresh; //function () { $scope.capa += '7'; };
	        $scope.check = checkInput;
	        //        $scope.check = debounce($scope.check_, 5000, false).then(function () { return $q.when(); });     //_.debounce(function (val) { var _ret = checkInput(val); $scope.$apply(); return _ret; }, 5000, {'leading':false, 'trailing': true });


	        $scope.refr();

	        function Refresh() {
	            $http.post("/SPA/RemoteMethods.aspx/getCaptcha", {}).success(function (data) {
	                $scope.capa = data.d.pathimage;
	                $scope.guid = data.d.id;
	                //                $scope.$apply();
	                if ($scope.fc) $scope.fc.$$parseAndValidate();
	            });
	        }

	        function checkInput(val) {
	            if (!val) return $q.reject();

	            var def = $q.defer();

	            var request = $http({
	                method: "post",
	                url: "/SPA/RemoteMethods.aspx/checkCaptcha",
	                data: { _id: $scope.guid, _value: val }
	            });

	            request.success(function (data, status, headers, config) {
	                console.log(data);
	                if (data.d == true) def.resolve(data.d);else def.reject();
	            }).error(function (data, status, headers, config) {
	                def.reject("Failed to get data");
	            });

	            return def.promise;
	        }
	    }
	    CaptchaController.$inject = ["$scope", "$http", "$q"];

	    return CaptchaController;
	};

/***/ },
/* 298 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 299 */,
/* 300 */
/***/ function(module, exports) {

	module.exports = "<input date-time class=\"form-control\" min-view=\"month\" format=\"MM/yyyy\" auto-close=\"true\" date-change=\"changeDate\" ng-model=\"model[options.key]\"  readonly=\"readonly\"  />\r\n";

/***/ }
]);
        var Tawk_API = Tawk_API || {}, Tawk_LoadStart = new Date();
        (function () {
            var s1 = document.createElement("script"), s0 = document.getElementsByTagName("script")[0];
            s1.async = true;
            s1.src = 'https://embed.tawk.to/564a1b0eab5f3f4a52afbf08/default';
            s1.charset = 'UTF-8';
            s1.setAttribute('crossorigin', '*');
            s0.parentNode.insertBefore(s1, s0);
        })();




        jQuery(function () {
            jQuery(document).on('click', 'a:contains(Activate)', function () { goog_report_conversion(); });
            jQuery(document).on('click', 'a:contains(Preview)', function () { goog_report_conversion(); });
            jQuery(document).on('click', 'a:contains(PRICING)', function () { goog_report_conversion(); });
            jQuery(document).on('click', 'a:contains(LeadFormulator)', function () { goog_report_conversion(); });
        });




        var _refr_func = function () {
            jQuery.ajax(
					{
					    url: "/SPA/NewRemoteMethods.aspx/getUserInfo",
					    type: "POST",
					    data: {},
					    contentType: "application/json;charset=utf-8",
					    dataType: "json",
					    success: function (data) {
					        //									console.log('>>>>',data.d);
					        console.log('>>>> refresh login ');
					    }
					}
				   );
        };



        var _refresh = setInterval(_refr_func, 60000);